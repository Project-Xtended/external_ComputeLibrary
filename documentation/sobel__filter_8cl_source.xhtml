<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/core/CL/cl_kernels/sobel_filter.cl Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.02.1</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('sobel__filter_8cl_source.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">sobel_filter.cl</div>  </div>
</div><!--header-->
<div class="contents">
<a href="sobel__filter_8cl.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2016, 2017 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml">helpers.h</a>&quot;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment">/***********************************************/</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment">/*   Begin implementation of Sobel3x3 filter   */</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment">/***********************************************/</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment">/** This OpenCL kernel that computes a Sobel3x3 filter.</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment"> * @attention To enable computation of the X gradient -DGRAD_X must be passed at compile time, while computation of the Y gradient</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment"> * is performed when -DGRAD_Y is used. You can use both when computation of both gradients is required.</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment"> * @param[in]  src_ptr                              Pointer to the source image. Supported data types: U8</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment"> * @param[in]  src_stride_x                         Stride of the source image in X dimension (in bytes)</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment"> * @param[in]  src_step_x                           src_stride_x * number of elements along X processed per workitem(in bytes)</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment"> * @param[in]  src_stride_y                         Stride of the source image in Y dimension (in bytes)</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment"> * @param[in]  src_step_y                           src_stride_y * number of elements along Y processed per workitem(in bytes)</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment"> * @param[in]  src_offset_first_element_in_bytes    The offset of the first element in the source image</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment"> * @param[out] dst_gx_ptr                           Pointer to the destination image. Supported data types: S16</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment"> * @param[in]  dst_gx_stride_x                      Stride of the destination image in X dimension (in bytes)</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment"> * @param[in]  dst_gx_step_x                        dst_gx_stride_x * number of elements along X processed per workitem(in bytes)</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment"> * @param[in]  dst_gx_stride_y                      Stride of the destination image in Y dimension (in bytes)</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment"> * @param[in]  dst_gx_step_y                        dst_gx_stride_y * number of elements along Y processed per workitem(in bytes)</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment"> * @param[in]  dst_gx_offset_first_element_in_bytes The offset of the first element in the destination image</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment"> * @param[out] dst_gy_ptr                           Pointer to the destination image. Supported data types: S16</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment"> * @param[in]  dst_gy_stride_x                      Stride of the destination image in X dimension (in bytes)</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment"> * @param[in]  dst_gy_step_x                        dst_gy_stride_x * number of elements along X processed per workitem(in bytes)</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment"> * @param[in]  dst_gy_stride_y                      Stride of the destination image in Y dimension (in bytes)</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment"> * @param[in]  dst_gy_step_y                        dst_gy_stride_y * number of elements along Y processed per workitem(in bytes)</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment"> * @param[in]  dst_gy_offset_first_element_in_bytes The offset of the first element in the destination image</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00054"></a><span class="lineno"><a class="line" href="sobel__filter_8cl.xhtml#ad48e3b9dda20b039199eaea842350975">   54</a></span>&#160;__kernel <span class="keywordtype">void</span> <a class="code" href="sobel__filter_8cl.xhtml#ad48e3b9dda20b039199eaea842350975">sobel3x3</a>(</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a>)</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;#ifdef GRAD_X</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    ,</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(dst_gx)</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;#endif <span class="comment">/* GRAD_X */</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;#ifdef GRAD_Y</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    ,</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(dst_gy)</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;#endif <span class="comment">/* GRAD_Y */</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;)</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;{</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a> = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a>);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="preprocessor">#ifdef GRAD_X</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> dst_gx = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(dst_gx);</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* GRAD_X */</span><span class="preprocessor"></span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="preprocessor">#ifdef GRAD_Y</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> dst_gy = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(dst_gy);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* GRAD_Y */</span><span class="preprocessor"></span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="comment">// Output pixels</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="preprocessor">#ifdef GRAD_X</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    short8 gx = (short8)0;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* GRAD_X */</span><span class="preprocessor"></span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="preprocessor">#ifdef GRAD_Y</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    short8 gy = (short8)0;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* GRAD_Y */</span><span class="preprocessor"></span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="comment">// Row0</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    uchar16 temp   = vload16(0, <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a>, -1, -1));</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    short8  left   = convert_short8(temp.s01234567);</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    short8  middle = convert_short8(temp.s12345678);</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    short8  right  = convert_short8(temp.s23456789);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="preprocessor">#ifdef GRAD_X</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    gx += left * (short8)(-1);</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    gx += right * (short8)(+1);</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* GRAD_X */</span><span class="preprocessor"></span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="preprocessor">#ifdef GRAD_Y</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    gy += left * (short8)(-1);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    gy += middle * (short8)(-2);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    gy += right * (short8)(-1);</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* GRAD_Y */</span><span class="preprocessor"></span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="comment">// Row1</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    temp  = vload16(0, <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a>, -1, 0));</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    left  = convert_short8(temp.s01234567);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    right = convert_short8(temp.s23456789);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="preprocessor">#ifdef GRAD_X</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    gx += left * (short8)(-2);</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    gx += right * (short8)(+2);</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* GRAD_X */</span><span class="preprocessor"></span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="comment">// Row2</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    temp   = vload16(0, <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a>, -1, 1));</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    left   = convert_short8(temp.s01234567);</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    middle = convert_short8(temp.s12345678);</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    right  = convert_short8(temp.s23456789);</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="preprocessor">#ifdef GRAD_X</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    gx += left * (short8)(-1);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    gx += right * (short8)(+1);</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* GRAD_X */</span><span class="preprocessor"></span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="preprocessor">#ifdef GRAD_Y</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    gy += left * (short8)(+1);</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    gy += middle * (short8)(+2);</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    gy += right * (short8)(+1);</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* GRAD_Y */</span><span class="preprocessor"></span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="comment">// Store results</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="preprocessor">#ifdef GRAD_X</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    vstore8(gx, 0, ((__global <span class="keywordtype">short</span> *)dst_gx.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>));</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* GRAD_X */</span><span class="preprocessor"></span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="preprocessor">#ifdef GRAD_Y</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    vstore8(gy, 0, ((__global <span class="keywordtype">short</span> *)dst_gy.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>));</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* GRAD_Y */</span><span class="preprocessor"></span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;}</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment">/**********************************************/</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment">/*    End implementation of Sobel3x3 filter   */</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment">/**********************************************/</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment">/***********************************************/</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment">/*   Begin implementation of Sobel5x5 filter   */</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment">/***********************************************/</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment">/** Compute a 1D horizontal sobel filter 1x5 for 8 bytes assuming the input is made of 1 channel of 1 byte (i.e 8 pixels).</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment"> * @param[in] src             Pointer to source image.</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment"> * @param[in] left1_coeff_gx  Weight of the most left pixel for gx</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="comment"> * @param[in] left2_coeff_gx  Weight of the left pixel for gx</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment"> * @param[in] middle_coeff_gx Weight of the middle pixel for gx</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment"> * @param[in] right1_coeff_gx Weight of the right pixel for gx</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment"> * @param[in] right2_coeff_gx Weight of the most right pixel for gx</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment"> * @param[in] left1_coeff_gy  Weight of the most left pixel for gy</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment"> * @param[in] left2_coeff_gy  Weight of the left pixel for gy</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment"> * @param[in] middle_coeff_gy Weight of the middle pixel for gy</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="comment"> * @param[in] right1_coeff_gy Weight of the right pixel for gy</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="comment"> * @param[in] right2_coeff_gy Weight of the most right pixel for gy</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment"> * @return a short16 containing short8 gx and short8 gy values.</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00154"></a><span class="lineno"><a class="line" href="sobel__filter_8cl.xhtml#a4fac2cb52458aa4666af5b521d2a3910">  154</a></span>&#160;short16 <a class="code" href="sobel__filter_8cl.xhtml#a4fac2cb52458aa4666af5b521d2a3910">sobel1x5</a>(</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a>      *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a>,</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">short</span> left1_coeff_gx,</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">short</span> left2_coeff_gx,</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">short</span> middle_coeff_gx,</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">short</span> right1_coeff_gx,</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">short</span> right2_coeff_gx,</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">short</span> left1_coeff_gy,</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">short</span> left2_coeff_gy,</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">short</span> middle_coeff_gy,</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">short</span> right1_coeff_gy,</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">short</span> right2_coeff_gy)</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;{</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    uchar16 temp = vload16(0, <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a>, -2, 0));</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    short8  gx   = 0;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    short8  gy   = 0;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    short8  val;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    val = convert_short8(temp.s01234567);</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    gx += val * (short8)left1_coeff_gx;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    gy += val * (short8)left1_coeff_gy;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    val = convert_short8(temp.s12345678);</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    gx += val * (short8)left2_coeff_gx;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    gy += val * (short8)left2_coeff_gy;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    val = convert_short8(temp.s23456789);</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    gx += val * (short8)middle_coeff_gx;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    gy += val * (short8)middle_coeff_gy;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    val = convert_short8(temp.s3456789a);</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    gx += val * (short8)right1_coeff_gx;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    gy += val * (short8)right1_coeff_gy;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    val = convert_short8(temp.s456789ab);</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    gx += val * (short8)right2_coeff_gx;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    gy += val * (short8)right2_coeff_gy;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="keywordflow">return</span> (short16)(gx, gy);</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;}</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="comment">/** Compute a 1D vertical sobel filter 5x1 for 8 bytes assuming the input is made of 1 channel of 1 byte (i.e 8 pixels).</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="comment"> * @param[in] src          Pointer to source image.</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="comment"> * @param[in] up1_coeff    Weight of the most up pixel</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="comment"> * @param[in] up2_coeff    Weight of the up pixel</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="comment"> * @param[in] middle_coeff Weight of the middle pixel</span></div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="comment"> * @param[in] down1_coeff  Weight of the down pixel</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="comment"> * @param[in] down2_coeff  Weight of the most down pixel</span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="comment"> * @return a short8 containing 8 convoluted values.</span></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00206"></a><span class="lineno"><a class="line" href="sobel__filter_8cl.xhtml#a1cfe58175749124762fe0dea315d3c21">  206</a></span>&#160;short8 <a class="code" href="sobel__filter_8cl.xhtml#a1cfe58175749124762fe0dea315d3c21">sobel5x1</a>(</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a>      *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a>,</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">short</span> up1_coeff,</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">short</span> up2_coeff,</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">short</span> middle_coeff,</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">short</span> down1_coeff,</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">short</span> down2_coeff)</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;{</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    short8 val;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    short8 out = (short8)0;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    val = vload8(0, (__global <span class="keywordtype">short</span> *)<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a>, 0, -2));</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    out += val * (short8)up1_coeff;</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    val = vload8(0, (__global <span class="keywordtype">short</span> *)<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a>, 0, -1));</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    out += val * (short8)up2_coeff;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    val = vload8(0, (__global <span class="keywordtype">short</span> *)<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a>, 0, 0));</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    out += val * (short8)middle_coeff;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    val = vload8(0, (__global <span class="keywordtype">short</span> *)<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a>, 0, 1));</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    out += val * (short8)down1_coeff;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    val = vload8(0, (__global <span class="keywordtype">short</span> *)<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a>, 0, 2));</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    out += val * (short8)down2_coeff;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keywordflow">return</span> (short8)(out);</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;}</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="comment">/** Apply a 1x5 sobel matrix to a single channel U8 input image and output two temporary channel S16 images.</span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="comment"> * @attention To enable computation of the X gradient -DGRAD_X must be passed at compile time, while computation of the Y gradient</span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="comment"> * is performed when -DGRAD_Y is used. You can use both when computation of both gradients is required.</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="comment"> * @param[in]  src_ptr                              Pointer to the source image.. Supported data types: U8</span></div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="comment"> * @param[in]  src_stride_x                         Stride of the source image in X dimension (in bytes)</span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="comment"> * @param[in]  src_step_x                           src_stride_x * number of elements along X processed per workitem(in bytes)</span></div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="comment"> * @param[in]  src_stride_y                         Stride of the source image in Y dimension (in bytes)</span></div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="comment"> * @param[in]  src_step_y                           src_stride_y * number of elements along Y processed per workitem(in bytes)</span></div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="comment"> * @param[in]  src_offset_first_element_in_bytes    The offset of the first element in the source image</span></div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;<span class="comment"> * @param[out] dst_gx_ptr                           Pointer to the destination image.. Supported data types: S16</span></div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="comment"> * @param[in]  dst_gx_stride_x                      Stride of the destination image in X dimension (in bytes)</span></div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="comment"> * @param[in]  dst_gx_step_x                        dst_gx_stride_x * number of elements along X processed per workitem(in bytes)</span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="comment"> * @param[in]  dst_gx_stride_y                      Stride of the destination image in Y dimension (in bytes)</span></div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="comment"> * @param[in]  dst_gx_step_y                        dst_gx_stride_y * number of elements along Y processed per workitem(in bytes)</span></div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="comment"> * @param[in]  dst_gx_offset_first_element_in_bytes The offset of the first element in the destination image</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="comment"> * @param[out] dst_gy_ptr                           Pointer to the destination image. Supported data types: S16</span></div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="comment"> * @param[in]  dst_gy_stride_x                      Stride of the destination image in X dimension (in bytes)</span></div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="comment"> * @param[in]  dst_gy_step_x                        dst_gy_stride_x * number of elements along X processed per workitem(in bytes)</span></div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;<span class="comment"> * @param[in]  dst_gy_stride_y                      Stride of the destination image in Y dimension (in bytes)</span></div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="comment"> * @param[in]  dst_gy_step_y                        dst_gy_stride_y * number of elements along Y processed per workitem(in bytes)</span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="comment"> * @param[in]  dst_gy_offset_first_element_in_bytes The offset of the first element in the destination image</span></div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00259"></a><span class="lineno"><a class="line" href="sobel__filter_8cl.xhtml#a7a74e414f0e90638939a7a0506576625">  259</a></span>&#160;__kernel <span class="keywordtype">void</span> <a class="code" href="sobel__filter_8cl.xhtml#a7a74e414f0e90638939a7a0506576625">sobel_separable1x5</a>(</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a>)</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;#ifdef GRAD_X</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    ,</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(dst_gx)</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;#endif <span class="comment">/* GRAD_X */</span></div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;#ifdef GRAD_Y</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    ,</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(dst_gy)</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;#endif <span class="comment">/* GRAD_Y */</span></div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;)</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;{</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a> = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a>);</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;<span class="preprocessor">#ifdef GRAD_X</span></div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> dst_gx = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(dst_gx);</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* GRAD_X */</span><span class="preprocessor"></span></div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="preprocessor">#ifdef GRAD_Y</span></div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> dst_gy = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(dst_gy);</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* GRAD_Y */</span><span class="preprocessor"></span></div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    <span class="comment">// Output pixels</span></div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    short16 gx_gy = <a class="code" href="sobel__filter_8cl.xhtml#a4fac2cb52458aa4666af5b521d2a3910">sobel1x5</a>(&amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a>,</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;                             -1, -2, 0, 2, 1,</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                             1, 4, 6, 4, 1);</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    <span class="comment">// Store result in dst</span></div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="preprocessor">#ifdef GRAD_X</span></div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    vstore8(gx_gy.s01234567, 0, ((__global <span class="keywordtype">short</span> *)dst_gx.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>));</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* GRAD_X */</span><span class="preprocessor"></span></div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="preprocessor">#ifdef GRAD_Y</span></div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    vstore8(gx_gy.s89ABCDEF, 0, ((__global <span class="keywordtype">short</span> *)dst_gy.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>));</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* GRAD_Y */</span><span class="preprocessor"></span></div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;}</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;<span class="comment">/** Apply a 5x1 convolution matrix to two single channel S16 input temporary images</span></div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<span class="comment"> *  and output two single channel S16 images.</span></div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;<span class="comment"> * @attention To enable computation of the X gradient -DGRAD_X must be passed at compile time, while computation of the Y gradient</span></div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;<span class="comment"> * is performed when -DGRAD_Y is used. You can use both when computation of both gradients is required.</span></div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;<span class="comment"> * @param[in]  src_x_ptr                            Pointer to the source image.. Supported data types: S16</span></div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;<span class="comment"> * @param[in]  src_x_stride_x                       Stride of the source image in X dimension (in bytes)</span></div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;<span class="comment"> * @param[in]  src_x_step_x                         src_x_stride_x * number of elements along X processed per workitem(in bytes)</span></div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;<span class="comment"> * @param[in]  src_x_stride_y                       Stride of the source image in Y dimension (in bytes)</span></div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;<span class="comment"> * @param[in]  src_x_step_y                         src_x_stride_y * number of elements along Y processed per workitem(in bytes)</span></div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;<span class="comment"> * @param[in]  src_x_offset_first_element_in_bytes  The offset of the first element in the source image</span></div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="comment"> * @param[out] dst_gx_ptr                           Pointer to the destination image. Supported data types: S16</span></div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;<span class="comment"> * @param[in]  dst_gx_stride_x                      Stride of the destination image in X dimension (in bytes)</span></div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;<span class="comment"> * @param[in]  dst_gx_step_x                        dst_gx_stride_x * number of elements along X processed per workitem(in bytes)</span></div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="comment"> * @param[in]  dst_gx_stride_y                      Stride of the destination image in Y dimension (in bytes)</span></div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="comment"> * @param[in]  dst_gx_step_y                        dst_gx_stride_y * number of elements along Y processed per workitem(in bytes)</span></div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="comment"> * @param[in]  dst_gx_offset_first_element_in_bytes The offset of the first element in the destination image</span></div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;<span class="comment"> * @param[in]  src_y_ptr                            Pointer to the source image. Supported data types: S16</span></div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="comment"> * @param[in]  src_y_stride_x                       Stride of the source image in X dimension (in bytes)</span></div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;<span class="comment"> * @param[in]  src_y_step_x                         src_y_stride_x * number of elements along X processed per workitem(in bytes)</span></div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="comment"> * @param[in]  src_y_stride_y                       Stride of the source image in Y dimension (in bytes)</span></div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;<span class="comment"> * @param[in]  src_y_step_y                         src_y_stride_y * number of elements along Y processed per workitem(in bytes)</span></div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;<span class="comment"> * @param[in]  src_y_offset_first_element_in_bytes  The offset of the first element in the source image</span></div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;<span class="comment"> * @param[out] dst_gy_ptr                           Pointer to the destination image. Supported data types: S16</span></div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;<span class="comment"> * @param[in]  dst_gy_stride_x                      Stride of the destination image in X dimension (in bytes)</span></div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;<span class="comment"> * @param[in]  dst_gy_step_x                        dst_gy_stride_x * number of elements along X processed per workitem(in bytes)</span></div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;<span class="comment"> * @param[in]  dst_gy_stride_y                      Stride of the destination image in Y dimension (in bytes)</span></div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;<span class="comment"> * @param[in]  dst_gy_step_y                        dst_gy_stride_y * number of elements along Y processed per workitem(in bytes)</span></div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;<span class="comment"> * @param[in]  dst_gy_offset_first_element_in_bytes The offset of the first element in the destination image</span></div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;<span class="comment"> * @param[in]  dummy                                Dummy parameter to easy conditional inclusion</span></div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00325"></a><span class="lineno"><a class="line" href="sobel__filter_8cl.xhtml#a2cc1fcdd12f2c3cdd31b83fd59597e40">  325</a></span>&#160;__kernel <span class="keywordtype">void</span> <a class="code" href="sobel__filter_8cl.xhtml#a2cc1fcdd12f2c3cdd31b83fd59597e40">sobel_separable5x1</a>(</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;#ifdef GRAD_X</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(src_x),</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(dst_gx),</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;#endif <span class="comment">/* GRAD_X */</span></div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;#ifdef GRAD_Y</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(src_y),</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(dst_gy),</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;#endif <span class="comment">/* GRAD_Y */</span></div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    <span class="keywordtype">int</span> dummy)</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;{</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;<span class="preprocessor">#ifdef GRAD_X</span></div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> src_x  = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(src_x);</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> dst_gx = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(dst_gx);</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* GRAD_X */</span><span class="preprocessor"></span></div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;<span class="preprocessor">#ifdef GRAD_Y</span></div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> src_y  = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(src_y);</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> dst_gy = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(dst_gy);</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* GRAD_Y */</span><span class="preprocessor"></span></div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;<span class="preprocessor">#ifdef GRAD_X</span></div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    short8 gx = <a class="code" href="sobel__filter_8cl.xhtml#a1cfe58175749124762fe0dea315d3c21">sobel5x1</a>(&amp;src_x,</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                         1, 4, 6, 4, 1);</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    vstore8(gx, 0, ((__global <span class="keywordtype">short</span> *)dst_gx.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>));</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* GRAD_X */</span><span class="preprocessor"></span></div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;<span class="preprocessor">#ifdef GRAD_Y</span></div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    short8 gy = <a class="code" href="sobel__filter_8cl.xhtml#a1cfe58175749124762fe0dea315d3c21">sobel5x1</a>(&amp;src_y,</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                         -1, -2, 0, 2, 1);</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    vstore8(gy, 0, ((__global <span class="keywordtype">short</span> *)dst_gy.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>));</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* GRAD_Y */</span><span class="preprocessor"></span></div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;}</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;<span class="comment">/**********************************************/</span></div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;<span class="comment">/*    End implementation of Sobel5x5 filter   */</span></div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;<span class="comment">/**********************************************/</span></div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;<span class="comment">/***********************************************/</span></div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;<span class="comment">/*   Begin implementation of Sobel7x7 filter   */</span></div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;<span class="comment">/***********************************************/</span></div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;<span class="comment">/* Sobel 1x7 horizontal X / 7x1 vertical Y coefficients */</span></div><div class="line"><a name="l00366"></a><span class="lineno"><a class="line" href="sobel__filter_8cl.xhtml#a8476f4a8de2c191433342c9ce896986a">  366</a></span>&#160;<span class="preprocessor">#define X0 -1</span></div><div class="line"><a name="l00367"></a><span class="lineno"><a class="line" href="sobel__filter_8cl.xhtml#a1964818ccd90a6173ea48cecb652feeb">  367</a></span>&#160;<span class="preprocessor">#define X1 -4</span></div><div class="line"><a name="l00368"></a><span class="lineno"><a class="line" href="sobel__filter_8cl.xhtml#a79ae03a0214cb30e57b9e8835f2a0019">  368</a></span>&#160;<span class="preprocessor">#define X2 -5</span></div><div class="line"><a name="l00369"></a><span class="lineno"><a class="line" href="sobel__filter_8cl.xhtml#adb6fd3d004959525c6a684b82ef50860">  369</a></span>&#160;<span class="preprocessor">#define X3 0</span></div><div class="line"><a name="l00370"></a><span class="lineno"><a class="line" href="sobel__filter_8cl.xhtml#a0f79fa7387c308a89a30682d905aa40a">  370</a></span>&#160;<span class="preprocessor">#define X4 5</span></div><div class="line"><a name="l00371"></a><span class="lineno"><a class="line" href="sobel__filter_8cl.xhtml#a921884524c9038883b25f03d3bd1b078">  371</a></span>&#160;<span class="preprocessor">#define X5 4</span></div><div class="line"><a name="l00372"></a><span class="lineno"><a class="line" href="sobel__filter_8cl.xhtml#a0e11bba5150b8ae2a8831f6f4532e352">  372</a></span>&#160;<span class="preprocessor">#define X6 1</span></div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;<span class="comment">/* Sobel 1x7 vertical X / 7x1 horizontal Y coefficients */</span></div><div class="line"><a name="l00375"></a><span class="lineno"><a class="line" href="sobel__filter_8cl.xhtml#a0b0dcdd1ffa302474e907d3d7ad9dbfe">  375</a></span>&#160;<span class="preprocessor">#define Y0 1</span></div><div class="line"><a name="l00376"></a><span class="lineno"><a class="line" href="sobel__filter_8cl.xhtml#a294189cdea31dda8faf609b9b3e2000a">  376</a></span>&#160;<span class="preprocessor">#define Y1 6</span></div><div class="line"><a name="l00377"></a><span class="lineno"><a class="line" href="sobel__filter_8cl.xhtml#a3128cc29e366777d66d8b049451ca8a0">  377</a></span>&#160;<span class="preprocessor">#define Y2 15</span></div><div class="line"><a name="l00378"></a><span class="lineno"><a class="line" href="sobel__filter_8cl.xhtml#a676acf01638364a90adf5d09d2a215bf">  378</a></span>&#160;<span class="preprocessor">#define Y3 20</span></div><div class="line"><a name="l00379"></a><span class="lineno"><a class="line" href="sobel__filter_8cl.xhtml#a5a8e903c2373c4d65724c79cdea8b3d9">  379</a></span>&#160;<span class="preprocessor">#define Y4 15</span></div><div class="line"><a name="l00380"></a><span class="lineno"><a class="line" href="sobel__filter_8cl.xhtml#a770267173956bf918cf3ca1247b6de12">  380</a></span>&#160;<span class="preprocessor">#define Y5 6</span></div><div class="line"><a name="l00381"></a><span class="lineno"><a class="line" href="sobel__filter_8cl.xhtml#abcdba0de8723fe6f2d2eb284d7e98a41">  381</a></span>&#160;<span class="preprocessor">#define Y6 1</span></div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;<span class="comment">/* Calculates single horizontal iteration. */</span></div><div class="line"><a name="l00384"></a><span class="lineno"><a class="line" href="sobel__filter_8cl.xhtml#ad40297671e8a51899c6114386492006b">  384</a></span>&#160;<span class="preprocessor">#define SOBEL1x1_HOR(src, gx, gy, idx)                               \</span></div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;<span class="preprocessor">    {                                                                \</span></div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;<span class="preprocessor">        int8 val = convert_int8(vload8(0, offset(src, idx - 3, 0))); \</span></div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;<span class="preprocessor">        gx += val * X##idx;                                          \</span></div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;<span class="preprocessor">        gy += val * Y##idx;                                          \</span></div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;<span class="preprocessor">    }</span></div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;<span class="comment">/* Calculates single vertical iteration. */</span></div><div class="line"><a name="l00392"></a><span class="lineno"><a class="line" href="sobel__filter_8cl.xhtml#a400b86850d6a242a7f48804a097c6403">  392</a></span>&#160;<span class="preprocessor">#define SOBEL1x1_VERT(src, g, direction, idx)                          \</span></div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;<span class="preprocessor">    {                                                                  \</span></div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;<span class="preprocessor">        int8 val = vload8(0, (__global int *)offset(src, 0, idx - 3)); \</span></div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;<span class="preprocessor">        g += val * (int8)direction##idx;                               \</span></div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;<span class="preprocessor">    }</span></div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;<span class="comment">/* Calculates a 1x7 horizontal iteration. */</span></div><div class="line"><a name="l00399"></a><span class="lineno"><a class="line" href="sobel__filter_8cl.xhtml#a7f602251e0a1f8710f8aab3aef09a36b">  399</a></span>&#160;<span class="preprocessor">#define SOBEL1x7(ptr, gx, gy)                        \</span></div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;<span class="preprocessor">    SOBEL1x1_HOR(ptr, gx, gy, 0)                     \</span></div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;<span class="preprocessor">    SOBEL1x1_HOR(ptr, gx, gy, 1)                 \</span></div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;<span class="preprocessor">    SOBEL1x1_HOR(ptr, gx, gy, 2)             \</span></div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;<span class="preprocessor">    SOBEL1x1_HOR(ptr, gx, gy, 3)         \</span></div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;<span class="preprocessor">    SOBEL1x1_HOR(ptr, gx, gy, 4)     \</span></div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;<span class="preprocessor">    SOBEL1x1_HOR(ptr, gx, gy, 5) \</span></div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;<span class="preprocessor">    SOBEL1x1_HOR(ptr, gx, gy, 6)</span></div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;<span class="comment">/* Calculates a 7x1 vertical iteration. */</span></div><div class="line"><a name="l00409"></a><span class="lineno"><a class="line" href="sobel__filter_8cl.xhtml#a59f291bf2b268f9b850fa81a3fbf776a">  409</a></span>&#160;<span class="preprocessor">#define SOBEL7x1(ptr, g, direction)                         \</span></div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;<span class="preprocessor">    SOBEL1x1_VERT(ptr, g, direction, 0)                     \</span></div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;<span class="preprocessor">    SOBEL1x1_VERT(ptr, g, direction, 1)                 \</span></div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;<span class="preprocessor">    SOBEL1x1_VERT(ptr, g, direction, 2)             \</span></div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;<span class="preprocessor">    SOBEL1x1_VERT(ptr, g, direction, 3)         \</span></div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;<span class="preprocessor">    SOBEL1x1_VERT(ptr, g, direction, 4)     \</span></div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;<span class="preprocessor">    SOBEL1x1_VERT(ptr, g, direction, 5) \</span></div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;<span class="preprocessor">    SOBEL1x1_VERT(ptr, g, direction, 6)</span></div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;<span class="comment">/** Apply a 1x7 sobel matrix to a single channel U8 input image and output two temporary channel S16 images and leave the borders undefined.</span></div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;<span class="comment"> * @attention To enable computation of the X gradient -DGRAD_X must be passed at compile time, while computation of the Y gradient</span></div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;<span class="comment"> * is performed when -DGRAD_Y is used. You can use both when computation of both gradients is required.</span></div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;<span class="comment"> * @param[in]  src_ptr                              Pointer to the source image. Supported data types: U8</span></div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;<span class="comment"> * @param[in]  src_stride_x                         Stride of the source image in X dimension (in bytes)</span></div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;<span class="comment"> * @param[in]  src_step_x                           src_stride_x * number of elements along X processed per workitem(in bytes)</span></div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;<span class="comment"> * @param[in]  src_stride_y                         Stride of the source image in Y dimension (in bytes)</span></div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;<span class="comment"> * @param[in]  src_step_y                           src_stride_y * number of elements along Y processed per workitem(in bytes)</span></div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;<span class="comment"> * @param[in]  src_offset_first_element_in_bytes    The offset of the first element in the source image</span></div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;<span class="comment"> * @param[out] dst_gx_ptr                           Pointer to the destination image. Supported data types: S32</span></div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;<span class="comment"> * @param[in]  dst_gx_stride_x                      Stride of the destination image in X dimension (in bytes)</span></div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;<span class="comment"> * @param[in]  dst_gx_step_x                        dst_gx_stride_x * number of elements along X processed per workitem(in bytes)</span></div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;<span class="comment"> * @param[in]  dst_gx_stride_y                      Stride of the destination image in Y dimension (in bytes)</span></div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;<span class="comment"> * @param[in]  dst_gx_step_y                        dst_gx_stride_y * number of elements along Y processed per workitem(in bytes)</span></div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;<span class="comment"> * @param[in]  dst_gx_offset_first_element_in_bytes The offset of the first element in the destination image</span></div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;<span class="comment"> * @param[out] dst_gy_ptr                           Pointer to the destination image. Supported data types: S32</span></div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;<span class="comment"> * @param[in]  dst_gy_stride_x                      Stride of the destination image in X dimension (in bytes)</span></div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;<span class="comment"> * @param[in]  dst_gy_step_x                        dst_gy_stride_x * number of elements along X processed per workitem(in bytes)</span></div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;<span class="comment"> * @param[in]  dst_gy_stride_y                      Stride of the destination image in Y dimension (in bytes)</span></div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;<span class="comment"> * @param[in]  dst_gy_step_y                        dst_gy_stride_y * number of elements along Y processed per workitem(in bytes)</span></div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;<span class="comment"> * @param[in]  dst_gy_offset_first_element_in_bytes The offset of the first element in the destination image</span></div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00442"></a><span class="lineno"><a class="line" href="sobel__filter_8cl.xhtml#ad8be5e69836ab70ac229279a7d7edaf7">  442</a></span>&#160;__kernel <span class="keywordtype">void</span> <a class="code" href="sobel__filter_8cl.xhtml#ad8be5e69836ab70ac229279a7d7edaf7">sobel_separable1x7</a>(</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a>)</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;#ifdef GRAD_X</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    ,</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(dst_gx)</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;#endif <span class="comment">/* GRAD_X */</span></div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;#ifdef GRAD_Y</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    ,</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(dst_gy)</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;#endif <span class="comment">/* GRAD_Y */</span></div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;)</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;{</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a> = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a>);</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;<span class="preprocessor">#ifdef GRAD_X</span></div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> dst_gx = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(dst_gx);</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* GRAD_X */</span><span class="preprocessor"></span></div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;<span class="preprocessor">#ifdef GRAD_Y</span></div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> dst_gy = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(dst_gy);</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* GRAD_Y */</span><span class="preprocessor"></span></div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;    int8 gx = (int8)0;</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;    int8 gy = (int8)0;</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;    <a class="code" href="sobel__filter_8cl.xhtml#a7f602251e0a1f8710f8aab3aef09a36b">SOBEL1x7</a>(&amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a>, gx, gy);</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    <span class="comment">// Store result in dst</span></div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;<span class="preprocessor">#ifdef GRAD_X</span></div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    vstore8(gx, 0, ((__global <span class="keywordtype">int</span> *)dst_gx.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>));</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* GRAD_X */</span><span class="preprocessor"></span></div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;<span class="preprocessor">#ifdef GRAD_Y</span></div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    vstore8(gy, 0, ((__global <span class="keywordtype">int</span> *)dst_gy.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>));</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* GRAD_Y */</span><span class="preprocessor"></span></div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;}</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;<span class="comment">/** Apply a 7x1 convolution matrix to two single channel S16 input temporary images and output two single channel S16 images and leave the borders undefined.</span></div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;<span class="comment"> * @attention To enable computation of the X gradient -DGRAD_X must be passed at compile time, while computation of the Y gradient</span></div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;<span class="comment"> * is performed when -DGRAD_Y is used. You can use both when computation of both gradients is required.</span></div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;<span class="comment"> * @param[in]  src_x_ptr                            Pointer to the source image. Supported data types: S32</span></div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;<span class="comment"> * @param[in]  src_x_stride_x                       Stride of the source image in X dimension (in bytes)</span></div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;<span class="comment"> * @param[in]  src_x_step_x                         src_x_stride_x * number of elements along X processed per workitem(in bytes)</span></div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;<span class="comment"> * @param[in]  src_x_stride_y                       Stride of the source image in Y dimension (in bytes)</span></div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;<span class="comment"> * @param[in]  src_x_step_y                         src_x_stride_y * number of elements along Y processed per workitem(in bytes)</span></div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;<span class="comment"> * @param[in]  src_x_offset_first_element_in_bytes  The offset of the first element in the source image</span></div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;<span class="comment"> * @param[out] dst_gx_ptr                           Pointer to the destination image. Supported data types: S16</span></div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;<span class="comment"> * @param[in]  dst_gx_stride_x                      Stride of the destination image in X dimension (in bytes)</span></div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;<span class="comment"> * @param[in]  dst_gx_step_x                        dst_gx_stride_x * number of elements along X processed per workitem(in bytes)</span></div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;<span class="comment"> * @param[in]  dst_gx_stride_y                      Stride of the destination image in Y dimension (in bytes)</span></div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;<span class="comment"> * @param[in]  dst_gx_step_y                        dst_gx_stride_y * number of elements along Y processed per workitem(in bytes)</span></div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;<span class="comment"> * @param[in]  dst_gx_offset_first_element_in_bytes The offset of the first element in the destination image</span></div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;<span class="comment"> * @param[in]  src_y_ptr                            Pointer to the source image. Supported data types: S32</span></div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;<span class="comment"> * @param[in]  src_y_stride_x                       Stride of the source image in X dimension (in bytes)</span></div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;<span class="comment"> * @param[in]  src_y_step_x                         src_y_stride_x * number of elements along X processed per workitem(in bytes)</span></div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;<span class="comment"> * @param[in]  src_y_stride_y                       Stride of the source image in Y dimension (in bytes)</span></div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;<span class="comment"> * @param[in]  src_y_step_y                         src_y_stride_y * number of elements along Y processed per workitem(in bytes)</span></div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;<span class="comment"> * @param[in]  src_y_offset_first_element_in_bytes  The offset of the first element in the source image</span></div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;<span class="comment"> * @param[out] dst_gy_ptr                           Pointer to the destination image. Supported data types: S16</span></div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;<span class="comment"> * @param[in]  dst_gy_stride_x                      Stride of the destination image in X dimension (in bytes)</span></div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;<span class="comment"> * @param[in]  dst_gy_step_x                        dst_gy_stride_x * number of elements along X processed per workitem(in bytes)</span></div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;<span class="comment"> * @param[in]  dst_gy_stride_y                      Stride of the destination image in Y dimension (in bytes)</span></div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;<span class="comment"> * @param[in]  dst_gy_step_y                        dst_gy_stride_y * number of elements along Y processed per workitem(in bytes)</span></div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;<span class="comment"> * @param[in]  dst_gy_offset_first_element_in_bytes The offset of the first element in the destination image</span></div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;<span class="comment"> * @param[in]  dummy                                Dummy parameter to easy conditional inclusion</span></div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00506"></a><span class="lineno"><a class="line" href="sobel__filter_8cl.xhtml#a8cdc6e6df9d40cec1e857917d14ee75f">  506</a></span>&#160;__kernel <span class="keywordtype">void</span> <a class="code" href="sobel__filter_8cl.xhtml#a8cdc6e6df9d40cec1e857917d14ee75f">sobel_separable7x1</a>(</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;#ifdef GRAD_X</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(src_x),</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(dst_gx),</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;#endif <span class="comment">/* GRAD_X */</span></div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;#ifdef GRAD_Y</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(src_y),</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(dst_gy),</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;#endif <span class="comment">/* GRAD_Y */</span></div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;    <span class="keywordtype">int</span> dummy)</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;{</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;<span class="preprocessor">#ifdef GRAD_X</span></div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> src_x  = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(src_x);</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> dst_gx = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(dst_gx);</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* GRAD_X */</span><span class="preprocessor"></span></div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;<span class="preprocessor">#ifdef GRAD_Y</span></div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> src_y  = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(src_y);</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> dst_gy = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(dst_gy);</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* GRAD_Y */</span><span class="preprocessor"></span></div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    <span class="comment">// Output pixels</span></div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;<span class="preprocessor">#ifdef GRAD_X</span></div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    int8 gx = 0;</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    <a class="code" href="sobel__filter_8cl.xhtml#a59f291bf2b268f9b850fa81a3fbf776a">SOBEL7x1</a>(&amp;src_x, gx, Y);</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;    vstore8(gx, 0, (__global <span class="keywordtype">int</span> *)dst_gx.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* GRAD_X */</span><span class="preprocessor"></span></div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;<span class="preprocessor">#ifdef GRAD_Y</span></div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;    int8 gy = 0;</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;    <a class="code" href="sobel__filter_8cl.xhtml#a59f291bf2b268f9b850fa81a3fbf776a">SOBEL7x1</a>(&amp;src_y, gy, X);</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;    vstore8(gy, 0, (__global <span class="keywordtype">int</span> *)dst_gy.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* GRAD_Y */</span><span class="preprocessor"></span></div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;}</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;<span class="comment">/**********************************************/</span></div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;<span class="comment">/*    End implementation of Sobel7x7 filter   */</span></div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;<span class="comment">/**********************************************/</span></div><div class="ttc" id="sobel__filter_8cl_xhtml_a8cdc6e6df9d40cec1e857917d14ee75f"><div class="ttname"><a href="sobel__filter_8cl.xhtml#a8cdc6e6df9d40cec1e857917d14ee75f">sobel_separable7x1</a></div><div class="ttdeci">__kernel void sobel_separable7x1(__global uchar *src_x_ptr, uint src_x_stride_x, uint src_x_step_x, uint src_x_stride_y, uint src_x_step_y, uint src_x_offset_first_element_in_bytes, __global uchar *dst_gx_ptr, uint dst_gx_stride_x, uint dst_gx_step_x, uint dst_gx_stride_y, uint dst_gx_step_y, uint dst_gx_offset_first_element_in_bytes, __global uchar *src_y_ptr, uint src_y_stride_x, uint src_y_step_x, uint src_y_stride_y, uint src_y_step_y, uint src_y_offset_first_element_in_bytes, __global uchar *dst_gy_ptr, uint dst_gy_stride_x, uint dst_gy_step_x, uint dst_gy_stride_y, uint dst_gy_step_y, uint dst_gy_offset_first_element_in_bytes, int dummy)</div><div class="ttdoc">Apply a 7x1 convolution matrix to two single channel S16 input temporary images and output two single...</div><div class="ttdef"><b>Definition:</b> <a href="sobel__filter_8cl_source.xhtml#l00506">sobel_filter.cl:506</a></div></div>
<div class="ttc" id="src_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a009469e4d9b8fce3b6d5e97d2077827d"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a></div><div class="ttdeci">__global uchar * offset(const Image *img, int x, int y)</div><div class="ttdoc">Get the pointer position of a Image.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00510">helpers.h:510</a></div></div>
<div class="ttc" id="src_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_aebe814363556c244be043b13e7969197"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a></div><div class="ttdeci">#define CONVERT_TO_IMAGE_STRUCT(name)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00311">helpers.h:311</a></div></div>
<div class="ttc" id="sobel__filter_8cl_xhtml_a7a74e414f0e90638939a7a0506576625"><div class="ttname"><a href="sobel__filter_8cl.xhtml#a7a74e414f0e90638939a7a0506576625">sobel_separable1x5</a></div><div class="ttdeci">__kernel void sobel_separable1x5(__global uchar *src_ptr, uint src_stride_x, uint src_step_x, uint src_stride_y, uint src_step_y, uint src_offset_first_element_in_bytes, __global uchar *dst_gx_ptr, uint dst_gx_stride_x, uint dst_gx_step_x, uint dst_gx_stride_y, uint dst_gx_step_y, uint dst_gx_offset_first_element_in_bytes, __global uchar *dst_gy_ptr, uint dst_gy_stride_x, uint dst_gy_step_x, uint dst_gy_stride_y, uint dst_gy_step_y, uint dst_gy_offset_first_element_in_bytes)</div><div class="ttdoc">Apply a 1x5 sobel matrix to a single channel U8 input image and output two temporary channel S16 imag...</div><div class="ttdef"><b>Definition:</b> <a href="sobel__filter_8cl_source.xhtml#l00259">sobel_filter.cl:259</a></div></div>
<div class="ttc" id="src_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a22f42fcf2077d951271df83b55c1a71a"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a></div><div class="ttdeci">#define IMAGE_DECLARATION(name)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00275">helpers.h:275</a></div></div>
<div class="ttc" id="sobel__filter_8cl_xhtml_ad8be5e69836ab70ac229279a7d7edaf7"><div class="ttname"><a href="sobel__filter_8cl.xhtml#ad8be5e69836ab70ac229279a7d7edaf7">sobel_separable1x7</a></div><div class="ttdeci">__kernel void sobel_separable1x7(__global uchar *src_ptr, uint src_stride_x, uint src_step_x, uint src_stride_y, uint src_step_y, uint src_offset_first_element_in_bytes, __global uchar *dst_gx_ptr, uint dst_gx_stride_x, uint dst_gx_step_x, uint dst_gx_stride_y, uint dst_gx_step_y, uint dst_gx_offset_first_element_in_bytes, __global uchar *dst_gy_ptr, uint dst_gy_stride_x, uint dst_gy_step_x, uint dst_gy_stride_y, uint dst_gy_step_y, uint dst_gy_offset_first_element_in_bytes)</div><div class="ttdoc">Apply a 1x7 sobel matrix to a single channel U8 input image and output two temporary channel S16 imag...</div><div class="ttdef"><b>Definition:</b> <a href="sobel__filter_8cl_source.xhtml#l00442">sobel_filter.cl:442</a></div></div>
<div class="ttc" id="sobel__filter_8cl_xhtml_a59f291bf2b268f9b850fa81a3fbf776a"><div class="ttname"><a href="sobel__filter_8cl.xhtml#a59f291bf2b268f9b850fa81a3fbf776a">SOBEL7x1</a></div><div class="ttdeci">#define SOBEL7x1(ptr, g, direction)</div><div class="ttdef"><b>Definition:</b> <a href="sobel__filter_8cl_source.xhtml#l00409">sobel_filter.cl:409</a></div></div>
<div class="ttc" id="sobel__filter_8cl_xhtml_a7f602251e0a1f8710f8aab3aef09a36b"><div class="ttname"><a href="sobel__filter_8cl.xhtml#a7f602251e0a1f8710f8aab3aef09a36b">SOBEL1x7</a></div><div class="ttdeci">#define SOBEL1x7(ptr, gx, gy)</div><div class="ttdef"><b>Definition:</b> <a href="sobel__filter_8cl_source.xhtml#l00399">sobel_filter.cl:399</a></div></div>
<div class="ttc" id="struct_image_xhtml"><div class="ttname"><a href="struct_image.xhtml">Image</a></div><div class="ttdoc">Structure to hold Image information.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00349">helpers.h:349</a></div></div>
<div class="ttc" id="struct_image_xhtml_acf52c23cbd7424606c10a606524e3e32"><div class="ttname"><a href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">Image::ptr</a></div><div class="ttdeci">__global uchar * ptr</div><div class="ttdoc">Pointer to the starting postion of the buffer.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00351">helpers.h:351</a></div></div>
<div class="ttc" id="sobel__filter_8cl_xhtml_a4fac2cb52458aa4666af5b521d2a3910"><div class="ttname"><a href="sobel__filter_8cl.xhtml#a4fac2cb52458aa4666af5b521d2a3910">sobel1x5</a></div><div class="ttdeci">short16 sobel1x5(Image *src, const short left1_coeff_gx, const short left2_coeff_gx, const short middle_coeff_gx, const short right1_coeff_gx, const short right2_coeff_gx, const short left1_coeff_gy, const short left2_coeff_gy, const short middle_coeff_gy, const short right1_coeff_gy, const short right2_coeff_gy)</div><div class="ttdoc">Compute a 1D horizontal sobel filter 1x5 for 8 bytes assuming the input is made of 1 channel of 1 byt...</div><div class="ttdef"><b>Definition:</b> <a href="sobel__filter_8cl_source.xhtml#l00154">sobel_filter.cl:154</a></div></div>
<div class="ttc" id="src_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml">helpers.h</a></div></div>
<div class="ttc" id="sobel__filter_8cl_xhtml_a1cfe58175749124762fe0dea315d3c21"><div class="ttname"><a href="sobel__filter_8cl.xhtml#a1cfe58175749124762fe0dea315d3c21">sobel5x1</a></div><div class="ttdeci">short8 sobel5x1(Image *src, const short up1_coeff, const short up2_coeff, const short middle_coeff, const short down1_coeff, const short down2_coeff)</div><div class="ttdoc">Compute a 1D vertical sobel filter 5x1 for 8 bytes assuming the input is made of 1 channel of 1 byte ...</div><div class="ttdef"><b>Definition:</b> <a href="sobel__filter_8cl_source.xhtml#l00206">sobel_filter.cl:206</a></div></div>
<div class="ttc" id="sobel__filter_8cl_xhtml_ad48e3b9dda20b039199eaea842350975"><div class="ttname"><a href="sobel__filter_8cl.xhtml#ad48e3b9dda20b039199eaea842350975">sobel3x3</a></div><div class="ttdeci">__kernel void sobel3x3(__global uchar *src_ptr, uint src_stride_x, uint src_step_x, uint src_stride_y, uint src_step_y, uint src_offset_first_element_in_bytes, __global uchar *dst_gx_ptr, uint dst_gx_stride_x, uint dst_gx_step_x, uint dst_gx_stride_y, uint dst_gx_step_y, uint dst_gx_offset_first_element_in_bytes, __global uchar *dst_gy_ptr, uint dst_gy_stride_x, uint dst_gy_step_x, uint dst_gy_stride_y, uint dst_gy_step_y, uint dst_gy_offset_first_element_in_bytes)</div><div class="ttdoc">This OpenCL kernel that computes a Sobel3x3 filter.</div><div class="ttdef"><b>Definition:</b> <a href="sobel__filter_8cl_source.xhtml#l00054">sobel_filter.cl:54</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a989ab3e96426615bb98e04e0235088ca"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">arm_compute::test::validation::src</a></div><div class="ttdeci">cast configure &amp; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_cast_8cpp_source.xhtml#l00169">Cast.cpp:169</a></div></div>
<div class="ttc" id="sobel__filter_8cl_xhtml_a2cc1fcdd12f2c3cdd31b83fd59597e40"><div class="ttname"><a href="sobel__filter_8cl.xhtml#a2cc1fcdd12f2c3cdd31b83fd59597e40">sobel_separable5x1</a></div><div class="ttdeci">__kernel void sobel_separable5x1(__global uchar *src_x_ptr, uint src_x_stride_x, uint src_x_step_x, uint src_x_stride_y, uint src_x_step_y, uint src_x_offset_first_element_in_bytes, __global uchar *dst_gx_ptr, uint dst_gx_stride_x, uint dst_gx_step_x, uint dst_gx_stride_y, uint dst_gx_step_y, uint dst_gx_offset_first_element_in_bytes, __global uchar *src_y_ptr, uint src_y_stride_x, uint src_y_step_x, uint src_y_stride_y, uint src_y_step_y, uint src_y_offset_first_element_in_bytes, __global uchar *dst_gy_ptr, uint dst_gy_stride_x, uint dst_gy_step_x, uint dst_gy_stride_y, uint dst_gy_step_y, uint dst_gy_offset_first_element_in_bytes, int dummy)</div><div class="ttdoc">Apply a 5x1 convolution matrix to two single channel S16 input temporary images and output two single...</div><div class="ttdef"><b>Definition:</b> <a href="sobel__filter_8cl_source.xhtml#l00325">sobel_filter.cl:325</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aebb8dcc11953d78e620bbef0b9e2183.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_8c278f79c760e5c5fbd911f9870614c1.xhtml">CL</a></li><li class="navelem"><a class="el" href="dir_25885286e9dad4fa105b7b25a8031bbf.xhtml">cl_kernels</a></li><li class="navelem"><a class="el" href="sobel__filter_8cl.xhtml">sobel_filter.cl</a></li>
    <li class="footer">Generated on Thu Mar 5 2020 16:06:58 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
