<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/core/NEON/kernels/NEConvolutionKernel.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.02.1</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('_n_e_convolution_kernel_8cpp_source.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">NEConvolutionKernel.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_n_e_convolution_kernel_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2016-2019 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_n_e_convolution_kernel_8h.xhtml">arm_compute/core/NEON/kernels/NEConvolutionKernel.h</a>&quot;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_coordinates_8h.xhtml">arm_compute/core/Coordinates.h</a>&quot;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_error_8h.xhtml">arm_compute/core/Error.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_helpers_8h.xhtml">arm_compute/core/Helpers.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_tensor_8h.xhtml">arm_compute/core/ITensor.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_tensor_info_8h.xhtml">arm_compute/core/TensorInfo.h</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_types_8h.xhtml">arm_compute/core/Types.h</a>&quot;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_utils_8h.xhtml">arm_compute/core/Utils.h</a>&quot;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_validate_8h.xhtml">arm_compute/core/Validate.h</a>&quot;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_window_8h.xhtml">arm_compute/core/Window.h</a>&quot;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#include &lt;arm_neon.h&gt;</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#include &lt;array&gt;</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#include &lt;cstdint&gt;</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">#include &lt;cstring&gt;</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor">#include &lt;tuple&gt;</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;{</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="keyword">namespace</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="keyword">const</span> uint16x8_t max_int16 = vdupq_n_u16(INT16_MAX);</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#a1ac67082e6f68cb7ed1939240fb6bdb5">store_results</a>(<span class="keyword">const</span> int32x4_t &amp;out, <span class="keyword">const</span> int32x4_t &amp;out2, int16_t *output)</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;{</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keyword">const</span> int16x8_t s16results = vcombine_s16(vqmovn_s32(out),</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;                                              vqmovn_s32(out2));</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    vst1q_s16(output, s16results);</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;}</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#a1ac67082e6f68cb7ed1939240fb6bdb5">store_results</a>(<span class="keyword">const</span> int32x4_t &amp;out, <span class="keyword">const</span> int32x4_t &amp;out2, uint8_t *output)</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;{</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keyword">const</span> uint8x8_t u8results = vqmovn_u16(vcombine_u16(vqmovun_s32(out),</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;                                                        vqmovun_s32(out2)));</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    vst1_u8(output, u8results);</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;}</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#a1ac67082e6f68cb7ed1939240fb6bdb5">store_results</a>(<span class="keyword">const</span> uint32x4_t &amp;out, <span class="keyword">const</span> uint32x4_t &amp;out2, int16_t *output)</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;{</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keyword">const</span> uint16x8_t u16results = vcombine_u16(vqmovn_u32(out), vqmovn_u32(out2));</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keyword">const</span> int16x8_t  s16results = vreinterpretq_s16_u16(vminq_u16(u16results, max_int16));</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    vst1q_s16(output, s16results);</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;}</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#a1ac67082e6f68cb7ed1939240fb6bdb5">store_results</a>(<span class="keyword">const</span> uint32x4_t &amp;out, <span class="keyword">const</span> uint32x4_t &amp;out2, uint8_t *output)</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;{</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keyword">const</span> uint8x8_t u8results = vqmovn_u16(vcombine_u16(vqmovn_u32(out),</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                                                        vqmovn_u32(out2)));</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    vst1_u8(output, u8results);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;}</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#a1ac67082e6f68cb7ed1939240fb6bdb5">store_results</a>(<span class="keyword">const</span> int16x8_t &amp;out, <span class="keyword">const</span> int16x8_t &amp;out2, int16_t *output)</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;{</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    vst1q_s16(output, out);</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    vst1q_s16(output + 8, out2);</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;}</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#a1ac67082e6f68cb7ed1939240fb6bdb5">store_results</a>(<span class="keyword">const</span> int16x8_t &amp;out, <span class="keyword">const</span> int16x8_t &amp;out2, uint8_t *output)</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;{</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keyword">const</span> uint8x16_t u8results = vcombine_u8(vqmovun_s16(out),</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                                             vqmovun_s16(out2));</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    vst1q_u8(output, u8results);</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;}</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#a1ac67082e6f68cb7ed1939240fb6bdb5">store_results</a>(<span class="keyword">const</span> uint16x8_t &amp;out, <span class="keyword">const</span> uint16x8_t &amp;out2, uint8_t *output)</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;{</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keyword">const</span> uint8x16_t u8results = vcombine_u8(vqmovn_u16(out),</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                                             vqmovn_u16(out2));</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    vst1q_u8(output, u8results);</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;}</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#a1ac67082e6f68cb7ed1939240fb6bdb5">store_results</a>(<span class="keyword">const</span> uint16x8_t &amp;out, <span class="keyword">const</span> uint16x8_t &amp;out2, int16_t *output)</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;{</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    vst1q_s16(output, vreinterpretq_s16_u16(vminq_u16(out, max_int16)));</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    vst1q_s16(output + 8, vreinterpretq_s16_u16(vminq_u16(out2, max_int16)));</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;}</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> convolve_row3x1_unrolled(int32x4_t &amp;out, int32x4_t &amp;out2, <span class="keyword">const</span> uint8x16_t &amp;row_data, <span class="keyword">const</span> int16x4_t &amp;mat0, <span class="keyword">const</span> int16x4_t &amp;mat1, <span class="keyword">const</span> int16x4_t &amp;mat2)</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;{</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="comment">// Convert to s16 and split in blocks of 4 values:</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keyword">const</span> int16x8_t s16_tmp0 = vreinterpretq_s16_u16(vmovl_u8(vget_low_u8(row_data)));</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keyword">const</span> int16x8_t s16_tmp1 = vreinterpretq_s16_u16(vmovl_u8(vget_high_u8(row_data)));</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keyword">const</span> int16x4x3_t row =</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    {</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        {</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            vget_low_s16(s16_tmp0),</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            vget_high_s16(s16_tmp0),</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            vget_low_s16(s16_tmp1)</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        }</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    };</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="comment">// Calculate row left value for pixels [0,3]</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    out = vmlal_s16(out, row.val[0], mat0);</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="comment">// Calculate row middle value for pixels [0,3]</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    out = vmlal_s16(out, vext_s16(row.val[0], row.val[1], 1), mat1);</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="comment">// Calculate row right value for pixels [0,3]</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    out = vmlal_s16(out, vext_s16(row.val[0], row.val[1], 2), mat2);</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="comment">// Calculate row left value for pixels [4,7]</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    out2 = vmlal_s16(out2, row.val[1], mat0);</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="comment">// Calculate row middle value for pixels [4,7]</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    out2 = vmlal_s16(out2, vext_s16(row.val[1], row.val[2], 1), mat1);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="comment">// Calculate row right value for pixels [4,7]</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    out2 = vmlal_s16(out2, vext_s16(row.val[1], row.val[2], 2), mat2);</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;}</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> convolve_row3x1(int32x4_t &amp;out, int32x4_t &amp;out2, <span class="keyword">const</span> uint8x16_t &amp;row_data, <span class="keyword">const</span> int16_t *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae38161fda91461cff23b750a95e47e6f">convolution</a>)</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;{</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keyword">const</span> int16x4_t mat0 = vld1_dup_s16(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae38161fda91461cff23b750a95e47e6f">convolution</a>);</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keyword">const</span> int16x4_t mat1 = vld1_dup_s16(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae38161fda91461cff23b750a95e47e6f">convolution</a> + 1);</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="keyword">const</span> int16x4_t mat2 = vld1_dup_s16(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae38161fda91461cff23b750a95e47e6f">convolution</a> + 2);</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    convolve_row3x1_unrolled(out, out2, row_data, mat0, mat1, mat2);</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;}</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> convolve_row5x1(int32x4_t &amp;out, int32x4_t &amp;out2, <span class="keyword">const</span> uint8x16_t &amp;row_data, <span class="keyword">const</span> int16_t *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae38161fda91461cff23b750a95e47e6f">convolution</a>)</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;{</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keyword">const</span> int16x4_t mat0 = vld1_dup_s16(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae38161fda91461cff23b750a95e47e6f">convolution</a>);</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keyword">const</span> int16x4_t mat1 = vld1_dup_s16(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae38161fda91461cff23b750a95e47e6f">convolution</a> + 1);</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keyword">const</span> int16x4_t mat2 = vld1_dup_s16(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae38161fda91461cff23b750a95e47e6f">convolution</a> + 2);</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keyword">const</span> int16x4_t mat3 = vld1_dup_s16(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae38161fda91461cff23b750a95e47e6f">convolution</a> + 3);</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keyword">const</span> int16x4_t mat4 = vld1_dup_s16(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae38161fda91461cff23b750a95e47e6f">convolution</a> + 4);</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="comment">// Convert to s16 and split in blocks of 4 values:</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="keyword">const</span> int16x8_t s16_tmp0 = vreinterpretq_s16_u16(vmovl_u8(vget_low_u8(row_data)));</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keyword">const</span> int16x8_t s16_tmp1 = vreinterpretq_s16_u16(vmovl_u8(vget_high_u8(row_data)));</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="keyword">const</span> int16x4x3_t row =</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    {</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        {</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;            vget_low_s16(s16_tmp0),</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            vget_high_s16(s16_tmp0),</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;            vget_low_s16(s16_tmp1)</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        }</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    };</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="comment">// Calculate row left 2 value for pixels [0,3]</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    out = vmlal_s16(out, row.val[0], mat0);</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="comment">// Calculate row left 1 value for pixels [0,3]</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    out = vmlal_s16(out, vext_s16(row.val[0], row.val[1], 1), mat1);</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="comment">// Calculate row middle value for pixels [0,3]</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    out = vmlal_s16(out, vext_s16(row.val[0], row.val[1], 2), mat2);</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="comment">// Calculate row right +1 value for pixels [0,3]</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    out = vmlal_s16(out, vext_s16(row.val[0], row.val[1], 3), mat3);</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="comment">// Calculate row right +2 value for pixels [0,3]</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    out = vmlal_s16(out, row.val[1], mat4);</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="comment">// Calculate row left 2 value for pixels [4,7]</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    out2 = vmlal_s16(out2, row.val[1], mat0);</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="comment">// Calculate row left 1 value for pixels [4,7]</span></div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    out2 = vmlal_s16(out2, vext_s16(row.val[1], row.val[2], 1), mat1);</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="comment">// Calculate row middle value for pixels [4,7]</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    out2 = vmlal_s16(out2, vext_s16(row.val[1], row.val[2], 2), mat2);</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <span class="comment">// Calculate row right +1 value for pixels [4,7]</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    out2 = vmlal_s16(out2, vext_s16(row.val[1], row.val[2], 3), mat3);</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="comment">// Calculate row right +2 value for pixels [4,7]</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    out2 = vmlal_s16(out2, row.val[2], mat4);</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;}</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> convolve_row7x1(int32x4_t &amp;out, int32x4_t &amp;out2, <span class="keyword">const</span> uint8x16_t &amp;row_data, <span class="keyword">const</span> int16_t *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae38161fda91461cff23b750a95e47e6f">convolution</a>)</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;{</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="keyword">const</span> int16x4_t mat0 = vld1_dup_s16(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae38161fda91461cff23b750a95e47e6f">convolution</a>);</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="keyword">const</span> int16x4_t mat1 = vld1_dup_s16(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae38161fda91461cff23b750a95e47e6f">convolution</a> + 1);</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="keyword">const</span> int16x4_t mat2 = vld1_dup_s16(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae38161fda91461cff23b750a95e47e6f">convolution</a> + 2);</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="keyword">const</span> int16x4_t mat3 = vld1_dup_s16(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae38161fda91461cff23b750a95e47e6f">convolution</a> + 3);</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="keyword">const</span> int16x4_t mat4 = vld1_dup_s16(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae38161fda91461cff23b750a95e47e6f">convolution</a> + 4);</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <span class="keyword">const</span> int16x4_t mat5 = vld1_dup_s16(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae38161fda91461cff23b750a95e47e6f">convolution</a> + 5);</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="keyword">const</span> int16x4_t mat6 = vld1_dup_s16(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae38161fda91461cff23b750a95e47e6f">convolution</a> + 6);</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="comment">// Convert to s16 and split in blocks of 4 values:</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="keyword">const</span> int16x8_t s16_tmp0 = vreinterpretq_s16_u16(vmovl_u8(vget_low_u8(row_data)));</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="keyword">const</span> int16x8_t s16_tmp1 = vreinterpretq_s16_u16(vmovl_u8(vget_high_u8(row_data)));</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="keyword">const</span> int16x4x4_t row =</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    {</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        {</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;            vget_low_s16(s16_tmp0),</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            vget_high_s16(s16_tmp0),</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;            vget_low_s16(s16_tmp1),</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;            vget_high_s16(s16_tmp1)</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        }</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    };</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <span class="comment">// Calculate row left 3 value for pixels [0,3]</span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    out = vmlal_s16(out, row.val[0], mat0);</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <span class="comment">// Calculate row left 2 value for pixels [0,3]</span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    out = vmlal_s16(out, vext_s16(row.val[0], row.val[1], 1), mat1);</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="comment">// Calculate row left 1 value for pixels [0,3]</span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    out = vmlal_s16(out, vext_s16(row.val[0], row.val[1], 2), mat2);</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="comment">// Calculate row middle value for pixels [0,3]</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    out = vmlal_s16(out, vext_s16(row.val[0], row.val[1], 3), mat3);</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <span class="comment">// Calculate row right +1 value for pixels [0,3]</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    out = vmlal_s16(out, row.val[1], mat4);</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <span class="comment">// Calculate row right +2 value for pixels [0,3]</span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    out = vmlal_s16(out, vext_s16(row.val[1], row.val[2], 1), mat5);</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <span class="comment">// Calculate row right +3 value for pixels [0,3]</span></div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    out = vmlal_s16(out, vext_s16(row.val[1], row.val[2], 2), mat6);</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <span class="comment">// Calculate row left 3 value for pixels [4,7]</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    out2 = vmlal_s16(out2, row.val[1], mat0);</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <span class="comment">// Calculate row left 2 value for pixels [4,7]</span></div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    out2 = vmlal_s16(out2, vext_s16(row.val[1], row.val[2], 1), mat1);</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <span class="comment">// Calculate row left 1 value for pixels [4,7]</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    out2 = vmlal_s16(out2, vext_s16(row.val[1], row.val[2], 2), mat2);</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="comment">// Calculate row middle value for pixels [4,7]</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    out2 = vmlal_s16(out2, vext_s16(row.val[1], row.val[2], 3), mat3);</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <span class="comment">// Calculate row right +1 value for pixels [4,7]</span></div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    out2 = vmlal_s16(out2, row.val[2], mat4);</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <span class="comment">// Calculate row right +2 value for pixels [4,7]</span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    out2 = vmlal_s16(out2, vext_s16(row.val[2], row.val[3], 1), mat5);</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <span class="comment">// Calculate row right +3 value for pixels [4,7]</span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    out2 = vmlal_s16(out2, vext_s16(row.val[2], row.val[3], 2), mat6);</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;}</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> convolve_row9x1(int32x4_t &amp;out, int32x4_t &amp;out2, <span class="keyword">const</span> uint8x16_t &amp;row_data, <span class="keyword">const</span> int16_t *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae38161fda91461cff23b750a95e47e6f">convolution</a>)</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;{</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="keyword">const</span> int16x4_t mat0 = vld1_dup_s16(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae38161fda91461cff23b750a95e47e6f">convolution</a>);</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="keyword">const</span> int16x4_t mat1 = vld1_dup_s16(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae38161fda91461cff23b750a95e47e6f">convolution</a> + 1);</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <span class="keyword">const</span> int16x4_t mat2 = vld1_dup_s16(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae38161fda91461cff23b750a95e47e6f">convolution</a> + 2);</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <span class="keyword">const</span> int16x4_t mat3 = vld1_dup_s16(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae38161fda91461cff23b750a95e47e6f">convolution</a> + 3);</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <span class="keyword">const</span> int16x4_t mat4 = vld1_dup_s16(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae38161fda91461cff23b750a95e47e6f">convolution</a> + 4);</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <span class="keyword">const</span> int16x4_t mat5 = vld1_dup_s16(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae38161fda91461cff23b750a95e47e6f">convolution</a> + 5);</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="keyword">const</span> int16x4_t mat6 = vld1_dup_s16(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae38161fda91461cff23b750a95e47e6f">convolution</a> + 6);</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="keyword">const</span> int16x4_t mat7 = vld1_dup_s16(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae38161fda91461cff23b750a95e47e6f">convolution</a> + 7);</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="keyword">const</span> int16x4_t mat8 = vld1_dup_s16(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae38161fda91461cff23b750a95e47e6f">convolution</a> + 8);</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="comment">// Convert to s16 and split in blocks of 4 values:</span></div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="keyword">const</span> int16x8_t s16_tmp0 = vreinterpretq_s16_u16(vmovl_u8(vget_low_u8(row_data)));</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="keyword">const</span> int16x8_t s16_tmp1 = vreinterpretq_s16_u16(vmovl_u8(vget_high_u8(row_data)));</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <span class="keyword">const</span> int16x4x4_t row =</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    {</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        {</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;            vget_low_s16(s16_tmp0),</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;            vget_high_s16(s16_tmp0),</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;            vget_low_s16(s16_tmp1),</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;            vget_high_s16(s16_tmp1)</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        }</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    };</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    <span class="comment">// Calculate row left 4 value for pixels [0,3]</span></div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    out = vmlal_s16(out, row.val[0], mat0);</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    <span class="comment">// Calculate row left 3 value for pixels [0,3]</span></div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    out = vmlal_s16(out, vext_s16(row.val[0], row.val[1], 1), mat1);</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <span class="comment">// Calculate row left 2 value for pixels [0,3]</span></div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    out = vmlal_s16(out, vext_s16(row.val[0], row.val[1], 2), mat2);</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <span class="comment">// Calculate row left 1 value for pixels [0,3]</span></div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    out = vmlal_s16(out, vext_s16(row.val[0], row.val[1], 3), mat3);</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    <span class="comment">// Calculate row middle value for pixels [0,3]</span></div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    out = vmlal_s16(out, row.val[1], mat4);</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <span class="comment">// Calculate row right +1 value for pixels [0,3]</span></div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    out = vmlal_s16(out, vext_s16(row.val[1], row.val[2], 1), mat5);</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    <span class="comment">// Calculate row right +2 value for pixels [0,3]</span></div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    out = vmlal_s16(out, vext_s16(row.val[1], row.val[2], 2), mat6);</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    <span class="comment">// Calculate row right +3 value for pixels [0,3]</span></div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    out = vmlal_s16(out, vext_s16(row.val[1], row.val[2], 3), mat7);</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <span class="comment">// Calculate row right +4 value for pixels [0,3]</span></div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    out = vmlal_s16(out, row.val[2], mat8);</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    <span class="comment">// Calculate row left 4 value for pixels [0,3]</span></div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    out2 = vmlal_s16(out2, row.val[1], mat0);</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    <span class="comment">// Calculate row left 3 value for pixels [0,3]</span></div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    out2 = vmlal_s16(out2, vext_s16(row.val[1], row.val[2], 1), mat1);</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    <span class="comment">// Calculate row left 2 value for pixels [0,3]</span></div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    out2 = vmlal_s16(out2, vext_s16(row.val[1], row.val[2], 2), mat2);</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    <span class="comment">// Calculate row left 1 value for pixels [0,3]</span></div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    out2 = vmlal_s16(out2, vext_s16(row.val[1], row.val[2], 3), mat3);</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    <span class="comment">// Calculate row middle value for pixels [0,3]</span></div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    out2 = vmlal_s16(out2, row.val[2], mat4);</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <span class="comment">// Calculate row right +1 value for pixels [0,3]</span></div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    out2 = vmlal_s16(out2, vext_s16(row.val[2], row.val[3], 1), mat5);</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    <span class="comment">// Calculate row right +2 value for pixels [0,3]</span></div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    out2 = vmlal_s16(out2, vext_s16(row.val[2], row.val[3], 2), mat6);</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    <span class="comment">// Calculate row right +3 value for pixels [0,3]</span></div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    out2 = vmlal_s16(out2, vext_s16(row.val[2], row.val[3], 3), mat7);</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    <span class="comment">// Calculate row right +4 value for pixels [0,3]</span></div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    out2 = vmlal_s16(out2, row.val[3], mat8);</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;}</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;} <span class="comment">// namespace</span></div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;<span class="comment">/****************************************************************************************\</span></div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="comment"> *                                    Square Convolution                                *</span></div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="comment">\****************************************************************************************/</span></div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> matrix_size&gt;</div><div class="line"><a name="l00312"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_n_e_convolution_kernel.xhtml#a230a4894adf8380eca9e8c2aac03e9b8">  312</a></span>&#160;<a class="code" href="classarm__compute_1_1_n_e_convolution_kernel.xhtml#a230a4894adf8380eca9e8c2aac03e9b8">NEConvolutionKernel&lt;matrix_size&gt;::NEConvolutionKernel</a>()</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    : <a class="code" href="classarm__compute_1_1_i_c_p_p_simple_kernel.xhtml">INESimpleKernel</a>(), _scale(0), _convolution{ {} }</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;{</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;}</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> matrix_size&gt;</div><div class="line"><a name="l00318"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_n_e_convolution_kernel.xhtml#a423f9a45a52983b4de5e2b347f4369c7">  318</a></span>&#160;<a class="code" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a>             <a class="code" href="classarm__compute_1_1_n_e_convolution_kernel.xhtml#a423f9a45a52983b4de5e2b347f4369c7">NEConvolutionKernel&lt;matrix_size&gt;::border_size</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a>{ matrix_size / 2 };</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;}</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> matrix_size&gt;</div><div class="line"><a name="l00324"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_n_e_convolution_kernel.xhtml#a8873a8f053f3d2322e297409645c6222">  324</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_n_e_convolution_kernel.xhtml#a8873a8f053f3d2322e297409645c6222">NEConvolutionKernel&lt;matrix_size&gt;::configure</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, <span class="keyword">const</span> int16_t *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a006546051719c5fb4b20c966a26b9c76">conv</a>, uint32_t <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acec6d8ad52a28972fa74e071c1a63b6a">scale</a>, <span class="keywordtype">bool</span> border_undefined)</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;{</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    <a class="code" href="_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a006546051719c5fb4b20c966a26b9c76">conv</a>);</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a9d1a839c51134b2ae171a2264c541b6f">set_shape_if_empty</a>(*output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape());</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    <a class="code" href="_validate_8h.xhtml#aafce5e9928fac427dcd29d960bcf2ae3">ARM_COMPUTE_ERROR_ON_MISMATCHING_SHAPES</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output);</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    <a class="code" href="_validate_8h.xhtml#aadf5c9cff86327b96d88d04649d9715e">ARM_COMPUTE_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>);</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    <a class="code" href="_validate_8h.xhtml#aadf5c9cff86327b96d88d04649d9715e">ARM_COMPUTE_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(output, 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a>);</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    _input  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>;</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    _output = output;</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    std::copy_n(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a006546051719c5fb4b20c966a26b9c76">conv</a>, _convolution.size(), _convolution.begin());</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acec6d8ad52a28972fa74e071c1a63b6a">scale</a> == 0)</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    {</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;        _scale = <a class="code" href="namespacearm__compute.xhtml#a0101a40c4a6acc2af3b55afa7632f16a">calculate_matrix_scale</a>(_convolution.data(), matrix_size);</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    }</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    {</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;        _scale = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acec6d8ad52a28972fa74e071c1a63b6a">scale</a>;</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    }</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    <span class="comment">// Configure kernel window</span></div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="_c_l_im2_col_kernel_8cpp.xhtml#a4e45c1f5e4280813a78a77dda71d8799">num_elems_processed_per_iteration</a> = 8;</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_elems_read_per_iteration      = 16;</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_elems_written_per_iteration   = 8;</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a>                 win = <a class="code" href="namespacearm__compute.xhtml#ab7980fa5ee693e3282a76da047a1c3b5">calculate_max_window</a>(*<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info(), <a class="code" href="classarm__compute_1_1_steps.xhtml">Steps</a>(<a class="code" href="_c_l_im2_col_kernel_8cpp.xhtml#a4e45c1f5e4280813a78a77dda71d8799">num_elems_processed_per_iteration</a>), border_undefined, border_size());</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    <a class="code" href="classarm__compute_1_1_access_window_horizontal.xhtml">AccessWindowHorizontal</a> output_access(output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), 0, num_elems_written_per_iteration);</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#afc4bd8e872567d9c4c57d89eb0bb3da1">update_window_and_padding</a>(win,</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                              <a class="code" href="classarm__compute_1_1_access_window_rectangle.xhtml">AccessWindowRectangle</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info(), -border_size().left, -border_size().top, num_elems_read_per_iteration, matrix_size),</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;                              output_access);</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    output_access.set_valid_region(win, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;valid_region(), border_undefined, border_size());</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    INEKernel::configure(win);</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;}</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> OutputType&gt;</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_n_e_convolution_kernel.xhtml">NEConvolutionKernel&lt;3&gt;::convolution</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;win)</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;{</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    static_assert(<span class="keyword">sizeof</span>(OutputType) == <span class="keyword">sizeof</span>(uint8_t) || <span class="keyword">sizeof</span>(OutputType) == <span class="keyword">sizeof</span>(int16_t), <span class="stringliteral">&quot;The output buffer can only be u8 or s16&quot;</span>);</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(_input-&gt;buffer() == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>(_input, win);</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> output(_output, win);</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    <span class="comment">// Load the matrix&#39;s coefficients into NEON registers:</span></div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    <span class="keyword">const</span> int16x4_t   mat00     = vld1_dup_s16(_convolution.data());</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    <span class="keyword">const</span> int16x4_t   mat01     = vld1_dup_s16(_convolution.data() + 1);</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    <span class="keyword">const</span> int16x4_t   mat02     = vld1_dup_s16(_convolution.data() + 2);</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    <span class="keyword">const</span> int16x4_t   mat10     = vld1_dup_s16(_convolution.data() + 3);</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    <span class="keyword">const</span> int16x4_t   mat11     = vld1_dup_s16(_convolution.data() + 4);</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    <span class="keyword">const</span> int16x4_t   mat12     = vld1_dup_s16(_convolution.data() + 5);</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    <span class="keyword">const</span> int16x4_t   mat20     = vld1_dup_s16(_convolution.data() + 6);</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    <span class="keyword">const</span> int16x4_t   mat21     = vld1_dup_s16(_convolution.data() + 7);</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    <span class="keyword">const</span> int16x4_t   mat22     = vld1_dup_s16(_convolution.data() + 8);</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    <span class="keyword">const</span> float32x4_t scale_val = vdupq_n_f32(1.0f / _scale);</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *input_top_ptr = _input-&gt;buffer() + _input-&gt;info()-&gt;offset_element_in_bytes(<a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>(-1, -1));</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *input_mid_ptr = _input-&gt;buffer() + _input-&gt;info()-&gt;offset_element_in_bytes(<a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>(-1, 0));</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *input_low_ptr = _input-&gt;buffer() + _input-&gt;info()-&gt;offset_element_in_bytes(<a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>(-1, 1));</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(win, [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;)</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    {</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;        int32x4_t out  = vdupq_n_s32(0);</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;        int32x4_t out2 = vdupq_n_s32(0);</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;        <span class="comment">// Load 16 bytes from the top row:</span></div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;        <span class="keyword">const</span> uint8x16_t top_data = vld1q_u8(input_top_ptr + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.offset());</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;        convolve_row3x1_unrolled(out, out2, top_data, mat00, mat01, mat02);</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;        <span class="comment">// Load 16 bytes from the middle row:</span></div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;        <span class="keyword">const</span> uint8x16_t mid_data = vld1q_u8(input_mid_ptr + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.offset());</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;        convolve_row3x1_unrolled(out, out2, mid_data, mat10, mat11, mat12);</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;        <span class="comment">// Load 16 bytes from the middle row:</span></div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;        <span class="keyword">const</span> uint8x16_t low_data = vld1q_u8(input_low_ptr + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.offset());</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;        convolve_row3x1_unrolled(out, out2, low_data, mat20, mat21, mat22);</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;        <span class="comment">// Apply scale</span></div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;        <span class="keywordflow">if</span>(_scale != 1)</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;        {</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;            <span class="comment">// Convert to F32, scale and convert back to S32</span></div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;            out  = vcvtq_s32_f32(vmulq_f32(vcvtq_f32_s32(out), scale_val));</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;            out2 = vcvtq_s32_f32(vmulq_f32(vcvtq_f32_s32(out2), scale_val));</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;        }</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;        <span class="comment">// Clamp and store as U8 or S16:</span></div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;        <a class="code" href="namespacearm__compute_1_1detail.xhtml#a1ac67082e6f68cb7ed1939240fb6bdb5">store_results</a>(out, out2, reinterpret_cast&lt;OutputType *&gt;(output.ptr()));</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    },</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output);</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;}</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> OutputType&gt;</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;<span class="keywordtype">void</span> NEConvolutionKernel&lt;5&gt;::convolution(<span class="keyword">const</span> Window &amp;win)</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;{</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    static_assert(<span class="keyword">sizeof</span>(OutputType) == <span class="keyword">sizeof</span>(uint8_t) || <span class="keyword">sizeof</span>(OutputType) == <span class="keyword">sizeof</span>(int16_t), <span class="stringliteral">&quot;The output buffer can only be u8 or s16&quot;</span>);</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(_input-&gt;buffer() == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    Iterator <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>(_input, win);</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    Iterator output(_output, win);</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    <span class="keyword">const</span> float32x4_t scale_val = vdupq_n_f32(1.0f / _scale);</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *input_top2_ptr = _input-&gt;buffer() + _input-&gt;info()-&gt;offset_element_in_bytes(Coordinates(-2, -2));</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *input_top1_ptr = _input-&gt;buffer() + _input-&gt;info()-&gt;offset_element_in_bytes(Coordinates(-2, -1));</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *input_mid_ptr  = _input-&gt;buffer() + _input-&gt;info()-&gt;offset_element_in_bytes(Coordinates(-2, 0));</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *input_low1_ptr = _input-&gt;buffer() + _input-&gt;info()-&gt;offset_element_in_bytes(Coordinates(-2, 1));</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *input_low2_ptr = _input-&gt;buffer() + _input-&gt;info()-&gt;offset_element_in_bytes(Coordinates(-2, 2));</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(win, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    {</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;        int32x4_t out  = vdupq_n_s32(0);</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;        int32x4_t out2 = vdupq_n_s32(0);</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;        <span class="comment">// Load 16 bytes from the top2 row:</span></div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;        <span class="keyword">const</span> uint8x16_t data_t2 = vld1q_u8(input_top2_ptr + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.offset());</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;        convolve_row5x1(out, out2, data_t2, _convolution.data());</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;        <span class="comment">// Load 16 bytes from the top1 row:</span></div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;        <span class="keyword">const</span> uint8x16_t data_t1 = vld1q_u8(input_top1_ptr + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.offset());</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;        convolve_row5x1(out, out2, data_t1, _convolution.data() + 5);</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;        <span class="comment">// Load 16 bytes from the middle row:</span></div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;        <span class="keyword">const</span> uint8x16_t data_m = vld1q_u8(input_mid_ptr + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.offset());</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;        convolve_row5x1(out, out2, data_m, _convolution.data() + 10);</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;        <span class="comment">// Load 16 bytes from the low1 row:</span></div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;        <span class="keyword">const</span> uint8x16_t data_b1 = vld1q_u8(input_low1_ptr + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.offset());</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;        convolve_row5x1(out, out2, data_b1, _convolution.data() + 15);</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;        <span class="comment">// Load 16 bytes from the low2 row:</span></div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;        <span class="keyword">const</span> uint8x16_t data_b2 = vld1q_u8(input_low2_ptr + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.offset());</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;        convolve_row5x1(out, out2, data_b2, _convolution.data() + 20);</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;        <span class="comment">// Apply scale</span></div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;        <span class="keywordflow">if</span>(_scale != 1)</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;        {</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;            <span class="comment">// Convert to F32, scale and convert back to S32</span></div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;            out  = vcvtq_s32_f32(vmulq_f32(vcvtq_f32_s32(out), scale_val));</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;            out2 = vcvtq_s32_f32(vmulq_f32(vcvtq_f32_s32(out2), scale_val));</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;        }</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;        <span class="comment">// Clamp and store as U8 or S16:</span></div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;        <a class="code" href="namespacearm__compute_1_1detail.xhtml#a1ac67082e6f68cb7ed1939240fb6bdb5">store_results</a>(out, out2, reinterpret_cast&lt;OutputType *&gt;(output.ptr()));</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;    },</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output);</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;}</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> OutputType&gt;</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;<span class="keywordtype">void</span> NEConvolutionKernel&lt;7&gt;::convolution(<span class="keyword">const</span> Window &amp;win)</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;{</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;    static_assert(<span class="keyword">sizeof</span>(OutputType) == <span class="keyword">sizeof</span>(uint8_t) || <span class="keyword">sizeof</span>(OutputType) == <span class="keyword">sizeof</span>(int16_t), <span class="stringliteral">&quot;The output buffer can only be u8 or s16&quot;</span>);</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(_input-&gt;buffer() == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;    Iterator <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>(_input, win);</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;    Iterator output(_output, win);</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    <span class="keyword">const</span> float32x4_t scale_val = vdupq_n_f32(1.0f / _scale);</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *input_top3_ptr = _input-&gt;buffer() + _input-&gt;info()-&gt;offset_element_in_bytes(Coordinates(-3, -3));</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *input_top2_ptr = _input-&gt;buffer() + _input-&gt;info()-&gt;offset_element_in_bytes(Coordinates(-3, -2));</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *input_top1_ptr = _input-&gt;buffer() + _input-&gt;info()-&gt;offset_element_in_bytes(Coordinates(-3, -1));</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *input_mid_ptr  = _input-&gt;buffer() + _input-&gt;info()-&gt;offset_element_in_bytes(Coordinates(-3, 0));</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *input_low1_ptr = _input-&gt;buffer() + _input-&gt;info()-&gt;offset_element_in_bytes(Coordinates(-3, 1));</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *input_low2_ptr = _input-&gt;buffer() + _input-&gt;info()-&gt;offset_element_in_bytes(Coordinates(-3, 2));</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *input_low3_ptr = _input-&gt;buffer() + _input-&gt;info()-&gt;offset_element_in_bytes(Coordinates(-3, 3));</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(win, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;    {</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;        int32x4_t out  = vdupq_n_s32(0);</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;        int32x4_t out2 = vdupq_n_s32(0);</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;        <span class="comment">// Load 16 bytes from the top3 row:</span></div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;        <span class="keyword">const</span> uint8x16_t data_t3 = vld1q_u8(input_top3_ptr + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.offset());</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;        convolve_row7x1(out, out2, data_t3, _convolution.data());</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;        <span class="comment">// Load 16 bytes from the top2 row:</span></div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;        <span class="keyword">const</span> uint8x16_t data_t2 = vld1q_u8(input_top2_ptr + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.offset());</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;        convolve_row7x1(out, out2, data_t2, _convolution.data() + 7);</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;        <span class="comment">// Load 16 bytes from the top1 row:</span></div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;        <span class="keyword">const</span> uint8x16_t data_t1 = vld1q_u8(input_top1_ptr + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.offset());</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;        convolve_row7x1(out, out2, data_t1, _convolution.data() + 14);</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;        <span class="comment">// Load 16 bytes from the middle row:</span></div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;        <span class="keyword">const</span> uint8x16_t data_m = vld1q_u8(input_mid_ptr + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.offset());</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;        convolve_row7x1(out, out2, data_m, _convolution.data() + 21);</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;        <span class="comment">// Load 16 bytes from the low1 row:</span></div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;        <span class="keyword">const</span> uint8x16_t data_b1 = vld1q_u8(input_low1_ptr + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.offset());</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;        convolve_row7x1(out, out2, data_b1, _convolution.data() + 28);</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;        <span class="comment">// Load 16 bytes from the low2 row:</span></div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;        <span class="keyword">const</span> uint8x16_t data_b2 = vld1q_u8(input_low2_ptr + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.offset());</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;        convolve_row7x1(out, out2, data_b2, _convolution.data() + 35);</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;        <span class="comment">// Load 16 bytes from the low3 row:</span></div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;        <span class="keyword">const</span> uint8x16_t data_b3 = vld1q_u8(input_low3_ptr + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.offset());</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;        convolve_row7x1(out, out2, data_b3, _convolution.data() + 42);</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;        <span class="comment">// Apply scale</span></div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;        <span class="keywordflow">if</span>(_scale != 1)</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;        {</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;            <span class="comment">// Convert to F32, scale and convert back to S32</span></div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;            out  = vcvtq_s32_f32(vmulq_f32(vcvtq_f32_s32(out), scale_val));</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;            out2 = vcvtq_s32_f32(vmulq_f32(vcvtq_f32_s32(out2), scale_val));</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;        }</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;        <span class="comment">// Clamp and store as U8 or S16:</span></div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;        <a class="code" href="namespacearm__compute_1_1detail.xhtml#a1ac67082e6f68cb7ed1939240fb6bdb5">store_results</a>(out, out2, reinterpret_cast&lt;OutputType *&gt;(output.ptr()));</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;    },</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output);</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;}</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> OutputType&gt;</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;<span class="keywordtype">void</span> NEConvolutionKernel&lt;9&gt;::convolution(<span class="keyword">const</span> Window &amp;win)</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;{</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;    static_assert(<span class="keyword">sizeof</span>(OutputType) == <span class="keyword">sizeof</span>(uint8_t) || <span class="keyword">sizeof</span>(OutputType) == <span class="keyword">sizeof</span>(int16_t), <span class="stringliteral">&quot;The output buffer can only be u8 or s16&quot;</span>);</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(_input-&gt;buffer() == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;    Iterator <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>(_input, win);</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;    Iterator output(_output, win);</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;    <span class="keyword">const</span> float32x4_t scale_val = vdupq_n_f32(1.0f / _scale);</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *input_top4_ptr = _input-&gt;buffer() + _input-&gt;info()-&gt;offset_element_in_bytes(Coordinates(-4, -4));</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *input_top3_ptr = _input-&gt;buffer() + _input-&gt;info()-&gt;offset_element_in_bytes(Coordinates(-4, -3));</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *input_top2_ptr = _input-&gt;buffer() + _input-&gt;info()-&gt;offset_element_in_bytes(Coordinates(-4, -2));</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *input_top1_ptr = _input-&gt;buffer() + _input-&gt;info()-&gt;offset_element_in_bytes(Coordinates(-4, -1));</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *input_mid_ptr  = _input-&gt;buffer() + _input-&gt;info()-&gt;offset_element_in_bytes(Coordinates(-4, 0));</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *input_low1_ptr = _input-&gt;buffer() + _input-&gt;info()-&gt;offset_element_in_bytes(Coordinates(-4, 1));</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *input_low2_ptr = _input-&gt;buffer() + _input-&gt;info()-&gt;offset_element_in_bytes(Coordinates(-4, 2));</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *input_low3_ptr = _input-&gt;buffer() + _input-&gt;info()-&gt;offset_element_in_bytes(Coordinates(-4, 3));</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *input_low4_ptr = _input-&gt;buffer() + _input-&gt;info()-&gt;offset_element_in_bytes(Coordinates(-4, 4));</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(win, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;    {</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;        int32x4_t out  = vdupq_n_s32(0);</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;        int32x4_t out2 = vdupq_n_s32(0);</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;        <span class="comment">// Load 16 bytes from the top4 row:</span></div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;        <span class="keyword">const</span> uint8x16_t data_t4 = vld1q_u8(input_top4_ptr + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.offset());</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;        convolve_row9x1(out, out2, data_t4, _convolution.data());</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;        <span class="comment">// Load 16 bytes from the top3 row:</span></div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;        <span class="keyword">const</span> uint8x16_t data_t3 = vld1q_u8(input_top3_ptr + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.offset());</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;        convolve_row9x1(out, out2, data_t3, _convolution.data() + 9);</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;        <span class="comment">// Load 16 bytes from the top2 row:</span></div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;        <span class="keyword">const</span> uint8x16_t data_t2 = vld1q_u8(input_top2_ptr + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.offset());</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;        convolve_row9x1(out, out2, data_t2, _convolution.data() + 18);</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;        <span class="comment">// Load 16 bytes from the top1 row:</span></div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;        <span class="keyword">const</span> uint8x16_t data_t1 = vld1q_u8(input_top1_ptr + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.offset());</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;        convolve_row9x1(out, out2, data_t1, _convolution.data() + 27);</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;        <span class="comment">// Load 16 bytes from the middle row:</span></div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;        <span class="keyword">const</span> uint8x16_t data_m = vld1q_u8(input_mid_ptr + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.offset());</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;        convolve_row9x1(out, out2, data_m, _convolution.data() + 36);</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;        <span class="comment">// Load 16 bytes from the low1 row:</span></div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;        <span class="keyword">const</span> uint8x16_t data_b1 = vld1q_u8(input_low1_ptr + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.offset());</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;        convolve_row9x1(out, out2, data_b1, _convolution.data() + 45);</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;        <span class="comment">// Load 16 bytes from the low2 row:</span></div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;        <span class="keyword">const</span> uint8x16_t data_b2 = vld1q_u8(input_low2_ptr + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.offset());</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;        convolve_row9x1(out, out2, data_b2, _convolution.data() + 54);</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;        <span class="comment">// Load 16 bytes from the low3 row:</span></div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;        <span class="keyword">const</span> uint8x16_t data_b3 = vld1q_u8(input_low3_ptr + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.offset());</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;        convolve_row9x1(out, out2, data_b3, _convolution.data() + 63);</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;        <span class="comment">// Load 16 bytes from the low4 row:</span></div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;        <span class="keyword">const</span> uint8x16_t data_b4 = vld1q_u8(input_low4_ptr + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.offset());</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;        convolve_row9x1(out, out2, data_b4, _convolution.data() + 72);</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;        <span class="comment">// Apply scale</span></div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;        <span class="keywordflow">if</span>(_scale != 1)</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;        {</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;            <span class="comment">// Convert to F32, scale and convert back to S32</span></div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;            out  = vcvtq_s32_f32(vmulq_f32(vcvtq_f32_s32(out), scale_val));</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;            out2 = vcvtq_s32_f32(vmulq_f32(vcvtq_f32_s32(out2), scale_val));</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;        }</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;        <span class="comment">// Clamp and store as U8 or S16:</span></div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;        <a class="code" href="namespacearm__compute_1_1detail.xhtml#a1ac67082e6f68cb7ed1939240fb6bdb5">store_results</a>(out, out2, reinterpret_cast&lt;OutputType *&gt;(output.ptr()));</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;    },</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output);</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;}</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> matrix_size&gt;</div><div class="line"><a name="l00624"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_n_e_convolution_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">  624</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_n_e_convolution_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">NEConvolutionKernel&lt;matrix_size&gt;::run</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>)</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;{</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>);</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;    <a class="code" href="_validate_8h.xhtml#a1b35b0d258183cf9ef36adf684d0b88c">ARM_COMPUTE_ERROR_ON_UNCONFIGURED_KERNEL</a>(<span class="keyword">this</span>);</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;    <a class="code" href="_validate_8h.xhtml#a6eb9ce82815fe429250189da7592ba75">ARM_COMPUTE_ERROR_ON_INVALID_SUBWINDOW</a>(<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">INEKernel::window</a>(), window);</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;    <span class="keywordflow">switch</span>(_output-&gt;<a class="code" href="classarm__compute_1_1_tensor.xhtml#a47d74e4e51f9b1a636c4831bd747a97c">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>())</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;    {</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>:</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;            convolution&lt;uint8_t&gt;(window);</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a>:</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;            convolution&lt;int16_t&gt;(window);</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Not supported Data type!&quot;</span>);</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;    }</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;}</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;<span class="keyword">template</span> <span class="keyword">class </span><a class="code" href="classarm__compute_1_1_n_e_convolution_kernel.xhtml">arm_compute::NEConvolutionKernel&lt;3&gt;</a>;</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;<span class="keyword">template</span> <span class="keyword">class </span><a class="code" href="classarm__compute_1_1_n_e_convolution_kernel.xhtml">arm_compute::NEConvolutionKernel&lt;5&gt;</a>;</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;<span class="keyword">template</span> <span class="keyword">class </span><a class="code" href="classarm__compute_1_1_n_e_convolution_kernel.xhtml">arm_compute::NEConvolutionKernel&lt;7&gt;</a>;</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;<span class="keyword">template</span> <span class="keyword">class </span><a class="code" href="classarm__compute_1_1_n_e_convolution_kernel.xhtml">arm_compute::NEConvolutionKernel&lt;9&gt;</a>;</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;<span class="comment">/****************************************************************************************\</span></div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;<span class="comment"> *                              Separable Square Convolution                            *</span></div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;<span class="comment">\****************************************************************************************/</span></div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> matrix_size&gt;</div><div class="line"><a name="l00654"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_n_e_separable_convolution_hor_kernel.xhtml#a965a154580e00968b45aa6268986cd51">  654</a></span>&#160;<a class="code" href="classarm__compute_1_1_n_e_separable_convolution_hor_kernel.xhtml#a965a154580e00968b45aa6268986cd51">NESeparableConvolutionHorKernel&lt;matrix_size&gt;::NESeparableConvolutionHorKernel</a>()</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;    : _conv_row{ { 0 } }, _border_size(0)</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;{</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;}</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> matrix_size&gt;</div><div class="line"><a name="l00660"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_n_e_separable_convolution_hor_kernel.xhtml#a423f9a45a52983b4de5e2b347f4369c7">  660</a></span>&#160;<a class="code" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a>             <a class="code" href="classarm__compute_1_1_n_e_separable_convolution_hor_kernel.xhtml#a423f9a45a52983b4de5e2b347f4369c7">NESeparableConvolutionHorKernel&lt;matrix_size&gt;::border_size</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;    <span class="keywordflow">return</span> _border_size;</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;}</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> matrix_size&gt;</div><div class="line"><a name="l00666"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_n_e_separable_convolution_hor_kernel.xhtml#a2047b01f2cdd57602126cccb6bd08625">  666</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_n_e_separable_convolution_hor_kernel.xhtml#a2047b01f2cdd57602126cccb6bd08625">NESeparableConvolutionHorKernel&lt;matrix_size&gt;::configure</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, <span class="keyword">const</span> int16_t *conv_row, <span class="keywordtype">bool</span> border_undefined)</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;{</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;    <a class="code" href="_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, conv_row);</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a9d1a839c51134b2ae171a2264c541b6f">set_shape_if_empty</a>(*output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape());</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;    <a class="code" href="_validate_8h.xhtml#aafce5e9928fac427dcd29d960bcf2ae3">ARM_COMPUTE_ERROR_ON_MISMATCHING_SHAPES</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output);</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;    <a class="code" href="_validate_8h.xhtml#aadf5c9cff86327b96d88d04649d9715e">ARM_COMPUTE_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>);</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;    <a class="code" href="_validate_8h.xhtml#aadf5c9cff86327b96d88d04649d9715e">ARM_COMPUTE_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(output, 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">DataType::U16</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>);</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;    _input  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>;</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;    _output = output;</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;    std::copy_n(conv_row, _conv_row.size(), _conv_row.begin());</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;    _border_size = <a class="code" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a>(border_undefined ? 0 : matrix_size / 2, matrix_size / 2);</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;    <span class="comment">// Configure kernel window</span></div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;    constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="_c_l_im2_col_kernel_8cpp.xhtml#a4e45c1f5e4280813a78a77dda71d8799">num_elems_processed_per_iteration</a> = 8;</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;    constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_elems_read_per_iteration      = 16;</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;    constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_elems_written_per_iteration   = 8;</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a>                 win = <a class="code" href="namespacearm__compute.xhtml#a9047a414d692d8814181a667a7ee68c4">calculate_max_window_horizontal</a>(*<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info(), <a class="code" href="classarm__compute_1_1_steps.xhtml">Steps</a>(<a class="code" href="_c_l_im2_col_kernel_8cpp.xhtml#a4e45c1f5e4280813a78a77dda71d8799">num_elems_processed_per_iteration</a>), border_undefined, border_size());</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;    <a class="code" href="classarm__compute_1_1_access_window_horizontal.xhtml">AccessWindowHorizontal</a> output_access(output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), 0, num_elems_written_per_iteration);</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#afc4bd8e872567d9c4c57d89eb0bb3da1">update_window_and_padding</a>(win,</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;                              <a class="code" href="classarm__compute_1_1_access_window_horizontal.xhtml">AccessWindowHorizontal</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info(), -border_size().left, num_elems_read_per_iteration),</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;                              output_access);</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;    output_access.set_valid_region(win, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;valid_region(), border_undefined, border_size());</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;    INEKernel::configure(win);</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;}</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> matrix_size&gt;</div><div class="line"><a name="l00699"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_n_e_separable_convolution_hor_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">  699</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_n_e_separable_convolution_hor_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">NESeparableConvolutionHorKernel&lt;matrix_size&gt;::run</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>)</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;{</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>);</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;    <a class="code" href="_validate_8h.xhtml#a1b35b0d258183cf9ef36adf684d0b88c">ARM_COMPUTE_ERROR_ON_UNCONFIGURED_KERNEL</a>(<span class="keyword">this</span>);</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;    <a class="code" href="_validate_8h.xhtml#a6eb9ce82815fe429250189da7592ba75">ARM_COMPUTE_ERROR_ON_INVALID_SUBWINDOW</a>(<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">INEKernel::window</a>(), window);</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;    <span class="keywordflow">switch</span>(_output-&gt;<a class="code" href="classarm__compute_1_1_tensor.xhtml#a47d74e4e51f9b1a636c4831bd747a97c">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>())</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;    {</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">DataType::U16</a>:</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;            convolve&lt;uint16_t&gt;(window);</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a>:</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;            convolve&lt;int16_t&gt;(window);</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>:</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;            convolve&lt;int32_t&gt;(window);</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported intermediate data type!&quot;</span>);</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;    }</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;}</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_n_e_separable_convolution_hor_kernel.xhtml">NESeparableConvolutionHorKernel&lt;5&gt;::convolve&lt;uint16_t&gt;</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;{</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> win_in(window);</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;    win_in.shift(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, -2);</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;    <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>(_input, win_in);</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;    <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> output(_output, window);</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(window, [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;)</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;    {</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;        <span class="keyword">const</span> uint8x16_t data = vld1q_u8(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.ptr());</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;        <span class="keyword">const</span> uint16x8x2_t data_u16 =</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;        {</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;            {</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;                vmovl_u8(vget_low_u8(data)),</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;                vmovl_u8(vget_high_u8(data))</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;            }</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;        };</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;        uint16x8_t out = vmulq_n_u16(data_u16.val[0], _conv_row[0]);</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;        out            = vmlaq_n_u16(out, vextq_u16(data_u16.val[0], data_u16.val[1], 1), _conv_row[1]);</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;        out            = vmlaq_n_u16(out, vextq_u16(data_u16.val[0], data_u16.val[1], 2), _conv_row[2]);</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;        out            = vmlaq_n_u16(out, vextq_u16(data_u16.val[0], data_u16.val[1], 3), _conv_row[3]);</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;        out            = vmlaq_n_u16(out, vextq_u16(data_u16.val[0], data_u16.val[1], 4), _conv_row[4]);</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;        vst1q_u16(reinterpret_cast&lt;uint16_t *&gt;(output.ptr()), out);</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;    },</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output);</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;}</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> NESeparableConvolutionHorKernel&lt;5&gt;::convolve&lt;int16_t&gt;(<span class="keyword">const</span> Window &amp;window)</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;{</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;    Window win_in(window);</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;    win_in.shift(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, -2);</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;    Iterator <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>(_input, win_in);</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;    Iterator output(_output, window);</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(window, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;    {</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;        <span class="keyword">const</span> uint8x16_t data = vld1q_u8(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.ptr());</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;        <span class="keyword">const</span> int16x8x2_t data_s16 =</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;        {</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;            {</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;                vreinterpretq_s16_u16(vmovl_u8(vget_low_u8(data))),</div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;                vreinterpretq_s16_u16(vmovl_u8(vget_high_u8(data)))</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;            }</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;        };</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;        int16x8_t out = vmulq_n_s16(data_s16.val[0], _conv_row[0]);</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;        out           = vmlaq_n_s16(out, vextq_s16(data_s16.val[0], data_s16.val[1], 1), _conv_row[1]);</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;        out           = vmlaq_n_s16(out, vextq_s16(data_s16.val[0], data_s16.val[1], 2), _conv_row[2]);</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;        out           = vmlaq_n_s16(out, vextq_s16(data_s16.val[0], data_s16.val[1], 3), _conv_row[3]);</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;        out           = vmlaq_n_s16(out, vextq_s16(data_s16.val[0], data_s16.val[1], 4), _conv_row[4]);</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;        vst1q_s16(reinterpret_cast&lt;int16_t *&gt;(output.ptr()), out);</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;    },</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output);</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;}</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;<span class="keywordtype">void</span> NESeparableConvolutionHorKernel&lt;5&gt;::convolve&lt;int32_t&gt;(<span class="keyword">const</span> Window &amp;window)</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;{</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;    Window win_in(window);</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;    win_in.shift(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, -2);</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;    Iterator <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>(_input, win_in);</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;    Iterator output(_output, window);</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;</div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(window, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;    {</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;        <span class="keyword">const</span> uint8x16_t data = vld1q_u8(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.ptr());</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;        <span class="keyword">const</span> int16x8x2_t data_s16 =</div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;        {</div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;            {</div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;                vreinterpretq_s16_u16(vmovl_u8(vget_low_u8(data))),</div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;                vreinterpretq_s16_u16(vmovl_u8(vget_high_u8(data)))</div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;            }</div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;        };</div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;</div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;        <span class="keyword">const</span> int16x8_t data_s16_l1 = vextq_s16(data_s16.val[0], data_s16.val[1], 1);</div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;        <span class="keyword">const</span> int16x8_t data_s16_m  = vextq_s16(data_s16.val[0], data_s16.val[1], 2);</div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;        <span class="keyword">const</span> int16x8_t data_s16_r1 = vextq_s16(data_s16.val[0], data_s16.val[1], 3);</div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;        <span class="keyword">const</span> int16x8_t data_s16_r2 = vextq_s16(data_s16.val[0], data_s16.val[1], 4);</div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;        int32x4_t out_low = vmull_n_s16(vget_low_s16(data_s16.val[0]), _conv_row[0]);</div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;        out_low           = vmlal_n_s16(out_low, vget_low_s16(data_s16_l1), _conv_row[1]);</div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;        out_low           = vmlal_n_s16(out_low, vget_low_s16(data_s16_m), _conv_row[2]);</div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;        out_low           = vmlal_n_s16(out_low, vget_low_s16(data_s16_r1), _conv_row[3]);</div><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;        out_low           = vmlal_n_s16(out_low, vget_low_s16(data_s16_r2), _conv_row[4]);</div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;</div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;        vst1q_s32(reinterpret_cast&lt;int32_t *&gt;(output.ptr()), out_low);</div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;</div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;        int32x4_t out_high = vmull_n_s16(vget_high_s16(data_s16.val[0]), _conv_row[0]);</div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;        out_high           = vmlal_n_s16(out_high, vget_high_s16(data_s16_l1), _conv_row[1]);</div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;        out_high           = vmlal_n_s16(out_high, vget_high_s16(data_s16_m), _conv_row[2]);</div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;        out_high           = vmlal_n_s16(out_high, vget_high_s16(data_s16_r1), _conv_row[3]);</div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;        out_high           = vmlal_n_s16(out_high, vget_high_s16(data_s16_r2), _conv_row[4]);</div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;</div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;        vst1q_s32(reinterpret_cast&lt;int32_t *&gt;(output.ptr()) + 4, out_high);</div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;    },</div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output);</div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;}</div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;</div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> NESeparableConvolutionHorKernel&lt;7&gt;::convolve&lt;uint16_t&gt;(<span class="keyword">const</span> Window &amp;window)</div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;{</div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;    Window win_in(window);</div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;    win_in.shift(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, -3);</div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;</div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;    Iterator <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>(_input, win_in);</div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;    Iterator output(_output, window);</div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;</div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(window, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;    {</div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;        <span class="keyword">const</span> uint8x16_t data = vld1q_u8(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.ptr());</div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;</div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;        <span class="keyword">const</span> uint16x8x2_t data_u16 =</div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;        {</div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;            {</div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;                vmovl_u8(vget_low_u8(data)),</div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;                vmovl_u8(vget_high_u8(data))</div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;            }</div><div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;        };</div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;</div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;        uint16x8_t out = vmulq_n_u16(data_u16.val[0], _conv_row[0]);</div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;        out            = vmlaq_n_u16(out, vextq_u16(data_u16.val[0], data_u16.val[1], 1), _conv_row[1]);</div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;        out            = vmlaq_n_u16(out, vextq_u16(data_u16.val[0], data_u16.val[1], 2), _conv_row[2]);</div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;        out            = vmlaq_n_u16(out, vextq_u16(data_u16.val[0], data_u16.val[1], 3), _conv_row[3]);</div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;        out            = vmlaq_n_u16(out, vextq_u16(data_u16.val[0], data_u16.val[1], 4), _conv_row[4]);</div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;        out            = vmlaq_n_u16(out, vextq_u16(data_u16.val[0], data_u16.val[1], 5), _conv_row[5]);</div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;        out            = vmlaq_n_u16(out, vextq_u16(data_u16.val[0], data_u16.val[1], 6), _conv_row[6]);</div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;</div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;        vst1q_u16(reinterpret_cast&lt;uint16_t *&gt;(output.ptr()), out);</div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;    },</div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output);</div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;}</div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;</div><div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> NESeparableConvolutionHorKernel&lt;7&gt;::convolve&lt;int16_t&gt;(<span class="keyword">const</span> Window &amp;window)</div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;{</div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;    Window win_in(window);</div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;    win_in.shift(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, -3);</div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;</div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;    Iterator <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>(_input, win_in);</div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;    Iterator output(_output, window);</div><div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;</div><div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(window, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;    {</div><div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;        <span class="keyword">const</span> uint8x16_t data = vld1q_u8(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.ptr());</div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;</div><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;        <span class="keyword">const</span> int16x8x2_t data_s16 =</div><div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;        {</div><div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;            {</div><div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;                vreinterpretq_s16_u16(vmovl_u8(vget_low_u8(data))),</div><div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;                vreinterpretq_s16_u16(vmovl_u8(vget_high_u8(data)))</div><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;            }</div><div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;        };</div><div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;</div><div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;        int16x8_t out = vmulq_n_s16(data_s16.val[0], _conv_row[0]);</div><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;        out           = vmlaq_n_s16(out, vextq_s16(data_s16.val[0], data_s16.val[1], 1), _conv_row[1]);</div><div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;        out           = vmlaq_n_s16(out, vextq_s16(data_s16.val[0], data_s16.val[1], 2), _conv_row[2]);</div><div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;        out           = vmlaq_n_s16(out, vextq_s16(data_s16.val[0], data_s16.val[1], 3), _conv_row[3]);</div><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;        out           = vmlaq_n_s16(out, vextq_s16(data_s16.val[0], data_s16.val[1], 4), _conv_row[4]);</div><div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;        out           = vmlaq_n_s16(out, vextq_s16(data_s16.val[0], data_s16.val[1], 5), _conv_row[5]);</div><div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;        out           = vmlaq_n_s16(out, vextq_s16(data_s16.val[0], data_s16.val[1], 6), _conv_row[6]);</div><div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;</div><div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;        vst1q_s16(reinterpret_cast&lt;int16_t *&gt;(output.ptr()), out);</div><div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;    },</div><div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output);</div><div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;}</div><div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;</div><div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;<span class="keywordtype">void</span> NESeparableConvolutionHorKernel&lt;7&gt;::convolve&lt;int32_t&gt;(<span class="keyword">const</span> Window &amp;window)</div><div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;{</div><div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;    Window win_in(window);</div><div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;    win_in.shift(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, -3);</div><div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;</div><div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;    Iterator <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>(_input, win_in);</div><div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;    Iterator output(_output, window);</div><div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;</div><div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(window, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;    {</div><div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;        <span class="keyword">const</span> uint8x16_t data = vld1q_u8(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.ptr());</div><div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;</div><div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;        <span class="keyword">const</span> int16x8x2_t data_s16 =</div><div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;        {</div><div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;            {</div><div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;                vreinterpretq_s16_u16(vmovl_u8(vget_low_u8(data))),</div><div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;                vreinterpretq_s16_u16(vmovl_u8(vget_high_u8(data)))</div><div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;            }</div><div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;        };</div><div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;</div><div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;        <span class="keyword">const</span> int16x8_t data_s16_l2 = vextq_s16(data_s16.val[0], data_s16.val[1], 1);</div><div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;        <span class="keyword">const</span> int16x8_t data_s16_l1 = vextq_s16(data_s16.val[0], data_s16.val[1], 2);</div><div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;        <span class="keyword">const</span> int16x8_t data_s16_m  = vextq_s16(data_s16.val[0], data_s16.val[1], 3);</div><div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;        <span class="keyword">const</span> int16x8_t data_s16_r1 = vextq_s16(data_s16.val[0], data_s16.val[1], 4);</div><div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;        <span class="keyword">const</span> int16x8_t data_s16_r2 = vextq_s16(data_s16.val[0], data_s16.val[1], 5);</div><div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;        <span class="keyword">const</span> int16x8_t data_s16_r3 = vextq_s16(data_s16.val[0], data_s16.val[1], 6);</div><div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;</div><div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;        int32x4_t out_low = vmull_n_s16(vget_low_s16(data_s16.val[0]), _conv_row[0]);</div><div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;        out_low           = vmlal_n_s16(out_low, vget_low_s16(data_s16_l2), _conv_row[1]);</div><div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;        out_low           = vmlal_n_s16(out_low, vget_low_s16(data_s16_l1), _conv_row[2]);</div><div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;        out_low           = vmlal_n_s16(out_low, vget_low_s16(data_s16_m), _conv_row[3]);</div><div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;        out_low           = vmlal_n_s16(out_low, vget_low_s16(data_s16_r1), _conv_row[4]);</div><div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;        out_low           = vmlal_n_s16(out_low, vget_low_s16(data_s16_r2), _conv_row[5]);</div><div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;        out_low           = vmlal_n_s16(out_low, vget_low_s16(data_s16_r3), _conv_row[6]);</div><div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;</div><div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;        vst1q_s32(reinterpret_cast&lt;int32_t *&gt;(output.ptr()), out_low);</div><div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;</div><div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;        int32x4_t out_high = vmull_n_s16(vget_high_s16(data_s16.val[0]), _conv_row[0]);</div><div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;        out_high           = vmlal_n_s16(out_high, vget_high_s16(data_s16_l2), _conv_row[1]);</div><div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;        out_high           = vmlal_n_s16(out_high, vget_high_s16(data_s16_l1), _conv_row[2]);</div><div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;        out_high           = vmlal_n_s16(out_high, vget_high_s16(data_s16_m), _conv_row[3]);</div><div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;        out_high           = vmlal_n_s16(out_high, vget_high_s16(data_s16_r1), _conv_row[4]);</div><div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;        out_high           = vmlal_n_s16(out_high, vget_high_s16(data_s16_r2), _conv_row[5]);</div><div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;        out_high           = vmlal_n_s16(out_high, vget_high_s16(data_s16_r3), _conv_row[6]);</div><div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;</div><div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;        vst1q_s32(reinterpret_cast&lt;int32_t *&gt;(output.ptr()) + 4, out_high);</div><div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;    },</div><div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output);</div><div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;}</div><div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;</div><div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> NESeparableConvolutionHorKernel&lt;9&gt;::convolve&lt;uint16_t&gt;(<span class="keyword">const</span> Window &amp;window)</div><div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;{</div><div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;    Window win_in(window);</div><div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;    win_in.shift(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, -4);</div><div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;</div><div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;    Iterator <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>(_input, win_in);</div><div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;    Iterator output(_output, window);</div><div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;</div><div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(window, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;    {</div><div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;        <span class="keyword">const</span> uint8x16_t data = vld1q_u8(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.ptr());</div><div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;</div><div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;        <span class="keyword">const</span> uint16x8x2_t data_u16 =</div><div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;        {</div><div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;            {</div><div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;                vmovl_u8(vget_low_u8(data)),</div><div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;                vmovl_u8(vget_high_u8(data))</div><div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;            }</div><div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;        };</div><div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;</div><div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;        uint16x8_t out = vmulq_n_u16(data_u16.val[0], _conv_row[0]);</div><div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;        out            = vmlaq_n_u16(out, vextq_u16(data_u16.val[0], data_u16.val[1], 1), _conv_row[1]);</div><div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;        out            = vmlaq_n_u16(out, vextq_u16(data_u16.val[0], data_u16.val[1], 2), _conv_row[2]);</div><div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;        out            = vmlaq_n_u16(out, vextq_u16(data_u16.val[0], data_u16.val[1], 3), _conv_row[3]);</div><div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;        out            = vmlaq_n_u16(out, vextq_u16(data_u16.val[0], data_u16.val[1], 4), _conv_row[4]);</div><div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;        out            = vmlaq_n_u16(out, vextq_u16(data_u16.val[0], data_u16.val[1], 5), _conv_row[5]);</div><div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;        out            = vmlaq_n_u16(out, vextq_u16(data_u16.val[0], data_u16.val[1], 6), _conv_row[6]);</div><div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;        out            = vmlaq_n_u16(out, vextq_u16(data_u16.val[0], data_u16.val[1], 7), _conv_row[7]);</div><div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;        out            = vmlaq_n_u16(out, data_u16.val[1], _conv_row[8]);</div><div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;</div><div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;        vst1q_u16(reinterpret_cast&lt;uint16_t *&gt;(output.ptr()), out);</div><div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;    },</div><div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output);</div><div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;}</div><div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;</div><div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> NESeparableConvolutionHorKernel&lt;9&gt;::convolve&lt;int16_t&gt;(<span class="keyword">const</span> Window &amp;window)</div><div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;{</div><div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;    Window win_in(window);</div><div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;    win_in.shift(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, -4);</div><div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;</div><div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;    Iterator <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>(_input, win_in);</div><div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;    Iterator output(_output, window);</div><div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;</div><div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(window, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;    {</div><div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;        <span class="keyword">const</span> uint8x16_t data = vld1q_u8(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.ptr());</div><div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;</div><div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;        <span class="keyword">const</span> int16x8x2_t data_s16 =</div><div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;        {</div><div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;            {</div><div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;                vreinterpretq_s16_u16(vmovl_u8(vget_low_u8(data))),</div><div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;                vreinterpretq_s16_u16(vmovl_u8(vget_high_u8(data)))</div><div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;            }</div><div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;        };</div><div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;</div><div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;        int16x8_t out = vmulq_n_s16(data_s16.val[0], _conv_row[0]);</div><div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;        out           = vmlaq_n_s16(out, vextq_s16(data_s16.val[0], data_s16.val[1], 1), _conv_row[1]);</div><div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;        out           = vmlaq_n_s16(out, vextq_s16(data_s16.val[0], data_s16.val[1], 2), _conv_row[2]);</div><div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;        out           = vmlaq_n_s16(out, vextq_s16(data_s16.val[0], data_s16.val[1], 3), _conv_row[3]);</div><div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;        out           = vmlaq_n_s16(out, vextq_s16(data_s16.val[0], data_s16.val[1], 4), _conv_row[4]);</div><div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;        out           = vmlaq_n_s16(out, vextq_s16(data_s16.val[0], data_s16.val[1], 5), _conv_row[5]);</div><div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;        out           = vmlaq_n_s16(out, vextq_s16(data_s16.val[0], data_s16.val[1], 6), _conv_row[6]);</div><div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;        out           = vmlaq_n_s16(out, vextq_s16(data_s16.val[0], data_s16.val[1], 7), _conv_row[7]);</div><div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;        out           = vmlaq_n_s16(out, data_s16.val[1], _conv_row[8]);</div><div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;</div><div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;        vst1q_s16(reinterpret_cast&lt;int16_t *&gt;(output.ptr()), out);</div><div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;    },</div><div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output);</div><div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;}</div><div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;</div><div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;<span class="keywordtype">void</span> NESeparableConvolutionHorKernel&lt;9&gt;::convolve&lt;int32_t&gt;(<span class="keyword">const</span> Window &amp;window)</div><div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;{</div><div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;    Window win_in(window);</div><div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;    win_in.shift(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, -4);</div><div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;</div><div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;    Iterator <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>(_input, win_in);</div><div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;    Iterator output(_output, window);</div><div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;</div><div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(window, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;    {</div><div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;        <span class="keyword">const</span> uint8x16_t data = vld1q_u8(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.ptr());</div><div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;</div><div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;        <span class="keyword">const</span> int16x8x2_t data_s16 =</div><div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;        {</div><div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;            {</div><div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;                vreinterpretq_s16_u16(vmovl_u8(vget_low_u8(data))),</div><div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;                vreinterpretq_s16_u16(vmovl_u8(vget_high_u8(data)))</div><div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;            }</div><div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;        };</div><div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;</div><div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;        <span class="keyword">const</span> int16x8_t data_s16_l3 = vextq_s16(data_s16.val[0], data_s16.val[1], 1);</div><div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;        <span class="keyword">const</span> int16x8_t data_s16_l2 = vextq_s16(data_s16.val[0], data_s16.val[1], 2);</div><div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;        <span class="keyword">const</span> int16x8_t data_s16_l1 = vextq_s16(data_s16.val[0], data_s16.val[1], 3);</div><div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;        <span class="keyword">const</span> int16x8_t data_s16_m  = vextq_s16(data_s16.val[0], data_s16.val[1], 4);</div><div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;        <span class="keyword">const</span> int16x8_t data_s16_r1 = vextq_s16(data_s16.val[0], data_s16.val[1], 5);</div><div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;        <span class="keyword">const</span> int16x8_t data_s16_r2 = vextq_s16(data_s16.val[0], data_s16.val[1], 6);</div><div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;        <span class="keyword">const</span> int16x8_t data_s16_r3 = vextq_s16(data_s16.val[0], data_s16.val[1], 7);</div><div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;</div><div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;        int32x4_t out_low = vmull_n_s16(vget_low_s16(data_s16.val[0]), _conv_row[0]);</div><div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;        out_low           = vmlal_n_s16(out_low, vget_low_s16(data_s16_l3), _conv_row[1]);</div><div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;        out_low           = vmlal_n_s16(out_low, vget_low_s16(data_s16_l2), _conv_row[2]);</div><div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;        out_low           = vmlal_n_s16(out_low, vget_low_s16(data_s16_l1), _conv_row[3]);</div><div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;        out_low           = vmlal_n_s16(out_low, vget_low_s16(data_s16_m), _conv_row[4]);</div><div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;        out_low           = vmlal_n_s16(out_low, vget_low_s16(data_s16_r1), _conv_row[5]);</div><div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;        out_low           = vmlal_n_s16(out_low, vget_low_s16(data_s16_r2), _conv_row[6]);</div><div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;        out_low           = vmlal_n_s16(out_low, vget_low_s16(data_s16_r3), _conv_row[7]);</div><div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;        out_low           = vmlal_n_s16(out_low, vget_low_s16(data_s16.val[1]), _conv_row[8]);</div><div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;</div><div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;        vst1q_s32(reinterpret_cast&lt;int32_t *&gt;(output.ptr()), out_low);</div><div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;</div><div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;        int32x4_t out_high = vmull_n_s16(vget_high_s16(data_s16.val[0]), _conv_row[0]);</div><div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;        out_high           = vmlal_n_s16(out_high, vget_high_s16(data_s16_l3), _conv_row[1]);</div><div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;        out_high           = vmlal_n_s16(out_high, vget_high_s16(data_s16_l2), _conv_row[2]);</div><div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;        out_high           = vmlal_n_s16(out_high, vget_high_s16(data_s16_l1), _conv_row[3]);</div><div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;        out_high           = vmlal_n_s16(out_high, vget_high_s16(data_s16_m), _conv_row[4]);</div><div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;        out_high           = vmlal_n_s16(out_high, vget_high_s16(data_s16_r1), _conv_row[5]);</div><div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;        out_high           = vmlal_n_s16(out_high, vget_high_s16(data_s16_r2), _conv_row[6]);</div><div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;        out_high           = vmlal_n_s16(out_high, vget_high_s16(data_s16_r3), _conv_row[7]);</div><div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160;        out_high           = vmlal_n_s16(out_high, vget_high_s16(data_s16.val[1]), _conv_row[8]);</div><div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160;</div><div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;        vst1q_s32(reinterpret_cast&lt;int32_t *&gt;(output.ptr()) + 4, out_high);</div><div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;    },</div><div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output);</div><div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;}</div><div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;</div><div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;<span class="keyword">template</span> <span class="keyword">class </span><a class="code" href="classarm__compute_1_1_n_e_separable_convolution_hor_kernel.xhtml">arm_compute::NESeparableConvolutionHorKernel&lt;5&gt;</a>;</div><div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;<span class="keyword">template</span> <span class="keyword">class </span><a class="code" href="classarm__compute_1_1_n_e_separable_convolution_hor_kernel.xhtml">arm_compute::NESeparableConvolutionHorKernel&lt;7&gt;</a>;</div><div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;<span class="keyword">template</span> <span class="keyword">class </span><a class="code" href="classarm__compute_1_1_n_e_separable_convolution_hor_kernel.xhtml">arm_compute::NESeparableConvolutionHorKernel&lt;9&gt;</a>;</div><div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;</div><div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> matrix_size&gt;</div><div class="line"><a name="l01091"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_n_e_separable_convolution_vert_kernel.xhtml#ac3aaa23fc2c41fdb7a6de14841631fbd"> 1091</a></span>&#160;<a class="code" href="classarm__compute_1_1_n_e_separable_convolution_vert_kernel.xhtml#ac3aaa23fc2c41fdb7a6de14841631fbd">NESeparableConvolutionVertKernel&lt;matrix_size&gt;::NESeparableConvolutionVertKernel</a>()</div><div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;    : _conv_col{ { 0 } }, _scale(0)</div><div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;{</div><div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;}</div><div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;</div><div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> matrix_size&gt;</div><div class="line"><a name="l01097"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_n_e_separable_convolution_vert_kernel.xhtml#a423f9a45a52983b4de5e2b347f4369c7"> 1097</a></span>&#160;<a class="code" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a>             <a class="code" href="classarm__compute_1_1_n_e_separable_convolution_vert_kernel.xhtml#a423f9a45a52983b4de5e2b347f4369c7">NESeparableConvolutionVertKernel&lt;matrix_size&gt;::border_size</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a>{ matrix_size / 2, 0 };</div><div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;}</div><div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;</div><div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> matrix_size&gt;</div><div class="line"><a name="l01103"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_n_e_separable_convolution_vert_kernel.xhtml#ad5b2a12ea8d073422e0615efca68ee22"> 1103</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_n_e_separable_convolution_vert_kernel.xhtml#ad5b2a12ea8d073422e0615efca68ee22">NESeparableConvolutionVertKernel&lt;matrix_size&gt;::configure</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, <span class="keyword">const</span> int16_t *conv_col, uint32_t <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acec6d8ad52a28972fa74e071c1a63b6a">scale</a>, <span class="keywordtype">bool</span> border_undefined)</div><div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;{</div><div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;    <a class="code" href="_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, conv_col);</div><div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;</div><div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a9d1a839c51134b2ae171a2264c541b6f">set_shape_if_empty</a>(*output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape());</div><div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;</div><div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;    <a class="code" href="_validate_8h.xhtml#aafce5e9928fac427dcd29d960bcf2ae3">ARM_COMPUTE_ERROR_ON_MISMATCHING_SHAPES</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output);</div><div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;    <a class="code" href="_validate_8h.xhtml#aadf5c9cff86327b96d88d04649d9715e">ARM_COMPUTE_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">DataType::U16</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>);</div><div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;    <a class="code" href="_validate_8h.xhtml#aadf5c9cff86327b96d88d04649d9715e">ARM_COMPUTE_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(output, 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a>);</div><div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acec6d8ad52a28972fa74e071c1a63b6a">scale</a> == 0);</div><div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;</div><div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;    _input  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>;</div><div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;    _output = output;</div><div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;    std::copy_n(conv_col, _conv_col.size(), _conv_col.begin());</div><div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;    _scale = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acec6d8ad52a28972fa74e071c1a63b6a">scale</a>;</div><div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;</div><div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;    <span class="comment">// Configure kernel window</span></div><div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;    constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="_c_l_im2_col_kernel_8cpp.xhtml#a4e45c1f5e4280813a78a77dda71d8799">num_elems_processed_per_iteration</a> = 16;</div><div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;    constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_elems_read_per_iteration      = 16;</div><div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;    constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_elems_written_per_iteration   = 16;</div><div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;</div><div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a>                 win = <a class="code" href="namespacearm__compute.xhtml#ab7980fa5ee693e3282a76da047a1c3b5">calculate_max_window</a>(*<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info(), <a class="code" href="classarm__compute_1_1_steps.xhtml">Steps</a>(<a class="code" href="_c_l_im2_col_kernel_8cpp.xhtml#a4e45c1f5e4280813a78a77dda71d8799">num_elems_processed_per_iteration</a>), border_undefined, border_size());</div><div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160;    <a class="code" href="classarm__compute_1_1_access_window_horizontal.xhtml">AccessWindowHorizontal</a> output_access(output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), 0, num_elems_written_per_iteration);</div><div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;</div><div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#afc4bd8e872567d9c4c57d89eb0bb3da1">update_window_and_padding</a>(win,</div><div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;                              <a class="code" href="classarm__compute_1_1_access_window_rectangle.xhtml">AccessWindowRectangle</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info(), 0, -border_size().top, num_elems_read_per_iteration, matrix_size),</div><div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;                              output_access);</div><div class="line"><a name="l01130"></a><span class="lineno"> 1130</span>&#160;</div><div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;    output_access.set_valid_region(win, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;valid_region(), border_undefined, border_size());</div><div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;</div><div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;    INEKernel::configure(win);</div><div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160;}</div><div class="line"><a name="l01135"></a><span class="lineno"> 1135</span>&#160;</div><div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> matrix_size&gt;</div><div class="line"><a name="l01137"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_n_e_separable_convolution_vert_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82"> 1137</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_n_e_separable_convolution_vert_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">NESeparableConvolutionVertKernel&lt;matrix_size&gt;::run</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>)</div><div class="line"><a name="l01138"></a><span class="lineno"> 1138</span>&#160;{</div><div class="line"><a name="l01139"></a><span class="lineno"> 1139</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>);</div><div class="line"><a name="l01140"></a><span class="lineno"> 1140</span>&#160;    <a class="code" href="_validate_8h.xhtml#a1b35b0d258183cf9ef36adf684d0b88c">ARM_COMPUTE_ERROR_ON_UNCONFIGURED_KERNEL</a>(<span class="keyword">this</span>);</div><div class="line"><a name="l01141"></a><span class="lineno"> 1141</span>&#160;    <a class="code" href="_validate_8h.xhtml#a6eb9ce82815fe429250189da7592ba75">ARM_COMPUTE_ERROR_ON_INVALID_SUBWINDOW</a>(<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">INEKernel::window</a>(), window);</div><div class="line"><a name="l01142"></a><span class="lineno"> 1142</span>&#160;</div><div class="line"><a name="l01143"></a><span class="lineno"> 1143</span>&#160;    <span class="keywordflow">switch</span>(_input-&gt;info()-&gt;data_type())</div><div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160;    {</div><div class="line"><a name="l01145"></a><span class="lineno"> 1145</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">DataType::U16</a>:</div><div class="line"><a name="l01146"></a><span class="lineno"> 1146</span>&#160;            <span class="keywordflow">switch</span>(_output-&gt;<a class="code" href="classarm__compute_1_1_tensor.xhtml#a47d74e4e51f9b1a636c4831bd747a97c">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>())</div><div class="line"><a name="l01147"></a><span class="lineno"> 1147</span>&#160;            {</div><div class="line"><a name="l01148"></a><span class="lineno"> 1148</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>:</div><div class="line"><a name="l01149"></a><span class="lineno"> 1149</span>&#160;                    convolution_u16&lt;uint8_t&gt;(window);</div><div class="line"><a name="l01150"></a><span class="lineno"> 1150</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l01151"></a><span class="lineno"> 1151</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a>:</div><div class="line"><a name="l01152"></a><span class="lineno"> 1152</span>&#160;                    convolution_u16&lt;int16_t&gt;(window);</div><div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l01154"></a><span class="lineno"> 1154</span>&#160;                <span class="keywordflow">default</span>:</div><div class="line"><a name="l01155"></a><span class="lineno"> 1155</span>&#160;                    <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Not supported&quot;</span>);</div><div class="line"><a name="l01156"></a><span class="lineno"> 1156</span>&#160;            }</div><div class="line"><a name="l01157"></a><span class="lineno"> 1157</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01158"></a><span class="lineno"> 1158</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a>:</div><div class="line"><a name="l01159"></a><span class="lineno"> 1159</span>&#160;            <span class="keywordflow">switch</span>(_output-&gt;<a class="code" href="classarm__compute_1_1_tensor.xhtml#a47d74e4e51f9b1a636c4831bd747a97c">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>())</div><div class="line"><a name="l01160"></a><span class="lineno"> 1160</span>&#160;            {</div><div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>:</div><div class="line"><a name="l01162"></a><span class="lineno"> 1162</span>&#160;                    convolution_s16&lt;uint8_t&gt;(window);</div><div class="line"><a name="l01163"></a><span class="lineno"> 1163</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l01164"></a><span class="lineno"> 1164</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a>:</div><div class="line"><a name="l01165"></a><span class="lineno"> 1165</span>&#160;                    convolution_s16&lt;int16_t&gt;(window);</div><div class="line"><a name="l01166"></a><span class="lineno"> 1166</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l01167"></a><span class="lineno"> 1167</span>&#160;                <span class="keywordflow">default</span>:</div><div class="line"><a name="l01168"></a><span class="lineno"> 1168</span>&#160;                    <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Not supported&quot;</span>);</div><div class="line"><a name="l01169"></a><span class="lineno"> 1169</span>&#160;            }</div><div class="line"><a name="l01170"></a><span class="lineno"> 1170</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>:</div><div class="line"><a name="l01172"></a><span class="lineno"> 1172</span>&#160;            <span class="keywordflow">switch</span>(_output-&gt;<a class="code" href="classarm__compute_1_1_tensor.xhtml#a47d74e4e51f9b1a636c4831bd747a97c">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>())</div><div class="line"><a name="l01173"></a><span class="lineno"> 1173</span>&#160;            {</div><div class="line"><a name="l01174"></a><span class="lineno"> 1174</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>:</div><div class="line"><a name="l01175"></a><span class="lineno"> 1175</span>&#160;                    convolution_s32&lt;uint8_t&gt;(window);</div><div class="line"><a name="l01176"></a><span class="lineno"> 1176</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l01177"></a><span class="lineno"> 1177</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a>:</div><div class="line"><a name="l01178"></a><span class="lineno"> 1178</span>&#160;                    convolution_s32&lt;int16_t&gt;(window);</div><div class="line"><a name="l01179"></a><span class="lineno"> 1179</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160;                <span class="keywordflow">default</span>:</div><div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;                    <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Not supported&quot;</span>);</div><div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;            }</div><div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported intermediate data type!&quot;</span>);</div><div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;    }</div><div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160;}</div><div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160;</div><div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> matrix_size&gt;</div><div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> OutputType&gt;</div><div class="line"><a name="l01192"></a><span class="lineno"> 1192</span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_n_e_separable_convolution_vert_kernel.xhtml">NESeparableConvolutionVertKernel&lt;matrix_size&gt;::convolution_u16</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;win)</div><div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160;{</div><div class="line"><a name="l01194"></a><span class="lineno"> 1194</span>&#160;    static_assert(<span class="keyword">sizeof</span>(OutputType) == <span class="keyword">sizeof</span>(uint8_t) || <span class="keyword">sizeof</span>(OutputType) == <span class="keyword">sizeof</span>(int16_t), <span class="stringliteral">&quot;The output buffer can only be u8 or s16&quot;</span>);</div><div class="line"><a name="l01195"></a><span class="lineno"> 1195</span>&#160;</div><div class="line"><a name="l01196"></a><span class="lineno"> 1196</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> win_in(win);</div><div class="line"><a name="l01197"></a><span class="lineno"> 1197</span>&#160;    win_in.set_dimension_step(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, 8);</div><div class="line"><a name="l01198"></a><span class="lineno"> 1198</span>&#160;</div><div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160;    <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> in(_input, win_in);</div><div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;    <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> out(_output, win);</div><div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;</div><div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160;    std::array&lt;unsigned char *, matrix_size&gt; input_ptrs{ {} };</div><div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160;    <span class="keyword">const</span> float32x4_t oneoverscale = vdupq_n_f32(1.0f / _scale);</div><div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>         k_half       = matrix_size / 2;</div><div class="line"><a name="l01205"></a><span class="lineno"> 1205</span>&#160;</div><div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160;    <span class="comment">// Set row pointers</span></div><div class="line"><a name="l01207"></a><span class="lineno"> 1207</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = -k_half; i &lt;= k_half; ++i)</div><div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;    {</div><div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;        input_ptrs[k_half + i] = _input-&gt;ptr_to_element(Coordinates(0, i));</div><div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160;    }</div><div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;</div><div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(win, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l01213"></a><span class="lineno"> 1213</span>&#160;    {</div><div class="line"><a name="l01214"></a><span class="lineno"> 1214</span>&#160;        uint16x8_t out0 = vdupq_n_u16(0);</div><div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160;        uint16x8_t out1 = vdupq_n_u16(0);</div><div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;</div><div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;        <span class="comment">// First half</span></div><div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> r = 0; r &lt; matrix_size; ++r)</div><div class="line"><a name="l01219"></a><span class="lineno"> 1219</span>&#160;        {</div><div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160;            <span class="keyword">const</span> uint16x8_t data = vld1q_u16(reinterpret_cast&lt;const uint16_t *&gt;(input_ptrs[r] + in.offset()));</div><div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;            out0                  = vmlaq_n_u16(out0, data, _conv_col[r]);</div><div class="line"><a name="l01222"></a><span class="lineno"> 1222</span>&#160;        }</div><div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160;</div><div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160;        in.increment(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>);</div><div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160;</div><div class="line"><a name="l01226"></a><span class="lineno"> 1226</span>&#160;        <span class="comment">// Second half</span></div><div class="line"><a name="l01227"></a><span class="lineno"> 1227</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> r = 0; r &lt; matrix_size; ++r)</div><div class="line"><a name="l01228"></a><span class="lineno"> 1228</span>&#160;        {</div><div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;            <span class="keyword">const</span> uint16x8_t data = vld1q_u16(reinterpret_cast&lt;const uint16_t *&gt;(input_ptrs[r] + in.offset()));</div><div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;            out1                  = vmlaq_n_u16(out1, data, _conv_col[r]);</div><div class="line"><a name="l01231"></a><span class="lineno"> 1231</span>&#160;        }</div><div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160;</div><div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;        <span class="comment">//scale the result if needed</span></div><div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160;        <span class="keywordflow">if</span>(_scale != 1)</div><div class="line"><a name="l01235"></a><span class="lineno"> 1235</span>&#160;        {</div><div class="line"><a name="l01236"></a><span class="lineno"> 1236</span>&#160;            float32x4_t out0_f32_high = vcvtq_f32_u32(vmovl_u16(vget_high_u16(out0)));</div><div class="line"><a name="l01237"></a><span class="lineno"> 1237</span>&#160;            float32x4_t out0_f32_low  = vcvtq_f32_u32(vmovl_u16(vget_low_u16(out0)));</div><div class="line"><a name="l01238"></a><span class="lineno"> 1238</span>&#160;            out0_f32_high             = vmulq_f32(out0_f32_high, oneoverscale);</div><div class="line"><a name="l01239"></a><span class="lineno"> 1239</span>&#160;            out0_f32_low              = vmulq_f32(out0_f32_low, oneoverscale);</div><div class="line"><a name="l01240"></a><span class="lineno"> 1240</span>&#160;            <a class="code" href="namespacearm__compute_1_1detail.xhtml#a1ac67082e6f68cb7ed1939240fb6bdb5">store_results</a>(vcvtq_u32_f32(out0_f32_low), vcvtq_u32_f32(out0_f32_high), reinterpret_cast&lt;OutputType *&gt;(out.ptr()));</div><div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;</div><div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;            float32x4_t out1_f32_high = vcvtq_f32_u32(vmovl_u16(vget_high_u16(out1)));</div><div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160;            float32x4_t out1_f32_low  = vcvtq_f32_u32(vmovl_u16(vget_low_u16(out1)));</div><div class="line"><a name="l01244"></a><span class="lineno"> 1244</span>&#160;            out1_f32_high             = vmulq_f32(out1_f32_high, oneoverscale);</div><div class="line"><a name="l01245"></a><span class="lineno"> 1245</span>&#160;            out1_f32_low              = vmulq_f32(out1_f32_low, oneoverscale);</div><div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;            <a class="code" href="namespacearm__compute_1_1detail.xhtml#a1ac67082e6f68cb7ed1939240fb6bdb5">store_results</a>(vcvtq_u32_f32(out1_f32_low), vcvtq_u32_f32(out1_f32_high), reinterpret_cast&lt;OutputType *&gt;(out.ptr()) + 8);</div><div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160;        }</div><div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l01249"></a><span class="lineno"> 1249</span>&#160;        {</div><div class="line"><a name="l01250"></a><span class="lineno"> 1250</span>&#160;            <a class="code" href="namespacearm__compute_1_1detail.xhtml#a1ac67082e6f68cb7ed1939240fb6bdb5">store_results</a>(out0, out1, reinterpret_cast&lt;OutputType *&gt;(out.ptr()));</div><div class="line"><a name="l01251"></a><span class="lineno"> 1251</span>&#160;        }</div><div class="line"><a name="l01252"></a><span class="lineno"> 1252</span>&#160;    },</div><div class="line"><a name="l01253"></a><span class="lineno"> 1253</span>&#160;    in, out);</div><div class="line"><a name="l01254"></a><span class="lineno"> 1254</span>&#160;}</div><div class="line"><a name="l01255"></a><span class="lineno"> 1255</span>&#160;</div><div class="line"><a name="l01256"></a><span class="lineno"> 1256</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> matrix_size&gt;</div><div class="line"><a name="l01257"></a><span class="lineno"> 1257</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> OutputType&gt;</div><div class="line"><a name="l01258"></a><span class="lineno"> 1258</span>&#160;<span class="keywordtype">void</span> NESeparableConvolutionVertKernel&lt;matrix_size&gt;::convolution_s16(<span class="keyword">const</span> Window &amp;win)</div><div class="line"><a name="l01259"></a><span class="lineno"> 1259</span>&#160;{</div><div class="line"><a name="l01260"></a><span class="lineno"> 1260</span>&#160;    static_assert(<span class="keyword">sizeof</span>(OutputType) == <span class="keyword">sizeof</span>(uint8_t) || <span class="keyword">sizeof</span>(OutputType) == <span class="keyword">sizeof</span>(int16_t), <span class="stringliteral">&quot;The output buffer can only be u8 or s16&quot;</span>);</div><div class="line"><a name="l01261"></a><span class="lineno"> 1261</span>&#160;</div><div class="line"><a name="l01262"></a><span class="lineno"> 1262</span>&#160;    Window win_in(win);</div><div class="line"><a name="l01263"></a><span class="lineno"> 1263</span>&#160;    win_in.set_dimension_step(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, 8);</div><div class="line"><a name="l01264"></a><span class="lineno"> 1264</span>&#160;</div><div class="line"><a name="l01265"></a><span class="lineno"> 1265</span>&#160;    Iterator in(_input, win_in);</div><div class="line"><a name="l01266"></a><span class="lineno"> 1266</span>&#160;    Iterator out(_output, win);</div><div class="line"><a name="l01267"></a><span class="lineno"> 1267</span>&#160;</div><div class="line"><a name="l01268"></a><span class="lineno"> 1268</span>&#160;    std::array&lt;unsigned char *, matrix_size&gt; input_ptrs{ {} };</div><div class="line"><a name="l01269"></a><span class="lineno"> 1269</span>&#160;    <span class="keyword">const</span> float32x4_t oneoverscale = vdupq_n_f32(1.0f / _scale);</div><div class="line"><a name="l01270"></a><span class="lineno"> 1270</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>         k_half       = matrix_size / 2;</div><div class="line"><a name="l01271"></a><span class="lineno"> 1271</span>&#160;</div><div class="line"><a name="l01272"></a><span class="lineno"> 1272</span>&#160;    <span class="comment">// Set row pointers</span></div><div class="line"><a name="l01273"></a><span class="lineno"> 1273</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = -k_half; i &lt;= k_half; ++i)</div><div class="line"><a name="l01274"></a><span class="lineno"> 1274</span>&#160;    {</div><div class="line"><a name="l01275"></a><span class="lineno"> 1275</span>&#160;        input_ptrs[k_half + i] = _input-&gt;ptr_to_element(Coordinates(0, i));</div><div class="line"><a name="l01276"></a><span class="lineno"> 1276</span>&#160;    }</div><div class="line"><a name="l01277"></a><span class="lineno"> 1277</span>&#160;</div><div class="line"><a name="l01278"></a><span class="lineno"> 1278</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(win, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l01279"></a><span class="lineno"> 1279</span>&#160;    {</div><div class="line"><a name="l01280"></a><span class="lineno"> 1280</span>&#160;        int16x8_t out0 = vdupq_n_s16(0);</div><div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160;        int16x8_t out1 = vdupq_n_s16(0);</div><div class="line"><a name="l01282"></a><span class="lineno"> 1282</span>&#160;</div><div class="line"><a name="l01283"></a><span class="lineno"> 1283</span>&#160;        <span class="comment">// First half</span></div><div class="line"><a name="l01284"></a><span class="lineno"> 1284</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> r = 0; r &lt; matrix_size; ++r)</div><div class="line"><a name="l01285"></a><span class="lineno"> 1285</span>&#160;        {</div><div class="line"><a name="l01286"></a><span class="lineno"> 1286</span>&#160;            <span class="keyword">const</span> int16x8_t data = vld1q_s16(reinterpret_cast&lt;const int16_t *&gt;(input_ptrs[r] + in.offset()));</div><div class="line"><a name="l01287"></a><span class="lineno"> 1287</span>&#160;            out0                 = vmlaq_n_s16(out0, data, _conv_col[r]);</div><div class="line"><a name="l01288"></a><span class="lineno"> 1288</span>&#160;        }</div><div class="line"><a name="l01289"></a><span class="lineno"> 1289</span>&#160;</div><div class="line"><a name="l01290"></a><span class="lineno"> 1290</span>&#160;        in.increment(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>);</div><div class="line"><a name="l01291"></a><span class="lineno"> 1291</span>&#160;</div><div class="line"><a name="l01292"></a><span class="lineno"> 1292</span>&#160;        <span class="comment">// Second half</span></div><div class="line"><a name="l01293"></a><span class="lineno"> 1293</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> r = 0; r &lt; matrix_size; ++r)</div><div class="line"><a name="l01294"></a><span class="lineno"> 1294</span>&#160;        {</div><div class="line"><a name="l01295"></a><span class="lineno"> 1295</span>&#160;            <span class="keyword">const</span> int16x8_t data = vld1q_s16(reinterpret_cast&lt;const int16_t *&gt;(input_ptrs[r] + in.offset()));</div><div class="line"><a name="l01296"></a><span class="lineno"> 1296</span>&#160;            out1                 = vmlaq_n_s16(out1, data, _conv_col[r]);</div><div class="line"><a name="l01297"></a><span class="lineno"> 1297</span>&#160;        }</div><div class="line"><a name="l01298"></a><span class="lineno"> 1298</span>&#160;</div><div class="line"><a name="l01299"></a><span class="lineno"> 1299</span>&#160;        <span class="comment">//scale the result if needed</span></div><div class="line"><a name="l01300"></a><span class="lineno"> 1300</span>&#160;        <span class="keywordflow">if</span>(_scale != 1)</div><div class="line"><a name="l01301"></a><span class="lineno"> 1301</span>&#160;        {</div><div class="line"><a name="l01302"></a><span class="lineno"> 1302</span>&#160;            float32x4_t out0_f32_high = vcvtq_f32_s32(vmovl_s16(vget_high_s16(out0)));</div><div class="line"><a name="l01303"></a><span class="lineno"> 1303</span>&#160;            float32x4_t out0_f32_low  = vcvtq_f32_s32(vmovl_s16(vget_low_s16(out0)));</div><div class="line"><a name="l01304"></a><span class="lineno"> 1304</span>&#160;            out0_f32_high             = vmulq_f32(out0_f32_high, oneoverscale);</div><div class="line"><a name="l01305"></a><span class="lineno"> 1305</span>&#160;            out0_f32_low              = vmulq_f32(out0_f32_low, oneoverscale);</div><div class="line"><a name="l01306"></a><span class="lineno"> 1306</span>&#160;            <a class="code" href="namespacearm__compute_1_1detail.xhtml#a1ac67082e6f68cb7ed1939240fb6bdb5">store_results</a>(vcvtq_s32_f32(out0_f32_low), vcvtq_s32_f32(out0_f32_high), reinterpret_cast&lt;OutputType *&gt;(out.ptr()));</div><div class="line"><a name="l01307"></a><span class="lineno"> 1307</span>&#160;</div><div class="line"><a name="l01308"></a><span class="lineno"> 1308</span>&#160;            float32x4_t out1_f32_high = vcvtq_f32_s32(vmovl_s16(vget_high_s16(out1)));</div><div class="line"><a name="l01309"></a><span class="lineno"> 1309</span>&#160;            float32x4_t out1_f32_low  = vcvtq_f32_s32(vmovl_s16(vget_low_s16(out1)));</div><div class="line"><a name="l01310"></a><span class="lineno"> 1310</span>&#160;            out1_f32_high             = vmulq_f32(out1_f32_high, oneoverscale);</div><div class="line"><a name="l01311"></a><span class="lineno"> 1311</span>&#160;            out1_f32_low              = vmulq_f32(out1_f32_low, oneoverscale);</div><div class="line"><a name="l01312"></a><span class="lineno"> 1312</span>&#160;            <a class="code" href="namespacearm__compute_1_1detail.xhtml#a1ac67082e6f68cb7ed1939240fb6bdb5">store_results</a>(vcvtq_s32_f32(out1_f32_low), vcvtq_s32_f32(out1_f32_high), reinterpret_cast&lt;OutputType *&gt;(out.ptr()) + 8);</div><div class="line"><a name="l01313"></a><span class="lineno"> 1313</span>&#160;        }</div><div class="line"><a name="l01314"></a><span class="lineno"> 1314</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l01315"></a><span class="lineno"> 1315</span>&#160;        {</div><div class="line"><a name="l01316"></a><span class="lineno"> 1316</span>&#160;            <a class="code" href="namespacearm__compute_1_1detail.xhtml#a1ac67082e6f68cb7ed1939240fb6bdb5">store_results</a>(out0, out1, reinterpret_cast&lt;OutputType *&gt;(out.ptr()));</div><div class="line"><a name="l01317"></a><span class="lineno"> 1317</span>&#160;        }</div><div class="line"><a name="l01318"></a><span class="lineno"> 1318</span>&#160;    },</div><div class="line"><a name="l01319"></a><span class="lineno"> 1319</span>&#160;    in, out);</div><div class="line"><a name="l01320"></a><span class="lineno"> 1320</span>&#160;}</div><div class="line"><a name="l01321"></a><span class="lineno"> 1321</span>&#160;</div><div class="line"><a name="l01322"></a><span class="lineno"> 1322</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> matrix_size&gt;</div><div class="line"><a name="l01323"></a><span class="lineno"> 1323</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> OutputType&gt;</div><div class="line"><a name="l01324"></a><span class="lineno"> 1324</span>&#160;<span class="keywordtype">void</span> NESeparableConvolutionVertKernel&lt;matrix_size&gt;::convolution_s32(<span class="keyword">const</span> Window &amp;win)</div><div class="line"><a name="l01325"></a><span class="lineno"> 1325</span>&#160;{</div><div class="line"><a name="l01326"></a><span class="lineno"> 1326</span>&#160;    static_assert(<span class="keyword">sizeof</span>(OutputType) == <span class="keyword">sizeof</span>(uint8_t) || <span class="keyword">sizeof</span>(OutputType) == <span class="keyword">sizeof</span>(int16_t), <span class="stringliteral">&quot;The output buffer can only be u8 or s16&quot;</span>);</div><div class="line"><a name="l01327"></a><span class="lineno"> 1327</span>&#160;</div><div class="line"><a name="l01328"></a><span class="lineno"> 1328</span>&#160;    Window win_in(win);</div><div class="line"><a name="l01329"></a><span class="lineno"> 1329</span>&#160;    win_in.set_dimension_step(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, 8);</div><div class="line"><a name="l01330"></a><span class="lineno"> 1330</span>&#160;</div><div class="line"><a name="l01331"></a><span class="lineno"> 1331</span>&#160;    Iterator in(_input, win_in);</div><div class="line"><a name="l01332"></a><span class="lineno"> 1332</span>&#160;    Iterator out(_output, win);</div><div class="line"><a name="l01333"></a><span class="lineno"> 1333</span>&#160;</div><div class="line"><a name="l01334"></a><span class="lineno"> 1334</span>&#160;    std::array&lt;unsigned char *, matrix_size&gt; input_ptrs{ {} };</div><div class="line"><a name="l01335"></a><span class="lineno"> 1335</span>&#160;    <span class="keyword">const</span> float32x4_t oneoverscale = vdupq_n_f32(1.0f / _scale);</div><div class="line"><a name="l01336"></a><span class="lineno"> 1336</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>         k_half       = matrix_size / 2;</div><div class="line"><a name="l01337"></a><span class="lineno"> 1337</span>&#160;</div><div class="line"><a name="l01338"></a><span class="lineno"> 1338</span>&#160;    <span class="comment">// Set row pointers</span></div><div class="line"><a name="l01339"></a><span class="lineno"> 1339</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = -k_half; i &lt;= k_half; ++i)</div><div class="line"><a name="l01340"></a><span class="lineno"> 1340</span>&#160;    {</div><div class="line"><a name="l01341"></a><span class="lineno"> 1341</span>&#160;        input_ptrs[k_half + i] = _input-&gt;ptr_to_element(Coordinates(0, i));</div><div class="line"><a name="l01342"></a><span class="lineno"> 1342</span>&#160;    }</div><div class="line"><a name="l01343"></a><span class="lineno"> 1343</span>&#160;</div><div class="line"><a name="l01344"></a><span class="lineno"> 1344</span>&#160;    <span class="keyword">const</span> int32x4_t zero = vdupq_n_s32(0);</div><div class="line"><a name="l01345"></a><span class="lineno"> 1345</span>&#160;</div><div class="line"><a name="l01346"></a><span class="lineno"> 1346</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(win, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l01347"></a><span class="lineno"> 1347</span>&#160;    {</div><div class="line"><a name="l01348"></a><span class="lineno"> 1348</span>&#160;        int32x4x2_t out0 =</div><div class="line"><a name="l01349"></a><span class="lineno"> 1349</span>&#160;        {</div><div class="line"><a name="l01350"></a><span class="lineno"> 1350</span>&#160;            {</div><div class="line"><a name="l01351"></a><span class="lineno"> 1351</span>&#160;                zero,</div><div class="line"><a name="l01352"></a><span class="lineno"> 1352</span>&#160;                zero</div><div class="line"><a name="l01353"></a><span class="lineno"> 1353</span>&#160;            }</div><div class="line"><a name="l01354"></a><span class="lineno"> 1354</span>&#160;        };</div><div class="line"><a name="l01355"></a><span class="lineno"> 1355</span>&#160;</div><div class="line"><a name="l01356"></a><span class="lineno"> 1356</span>&#160;        int32x4x2_t out1 =</div><div class="line"><a name="l01357"></a><span class="lineno"> 1357</span>&#160;        {</div><div class="line"><a name="l01358"></a><span class="lineno"> 1358</span>&#160;            {</div><div class="line"><a name="l01359"></a><span class="lineno"> 1359</span>&#160;                zero,</div><div class="line"><a name="l01360"></a><span class="lineno"> 1360</span>&#160;                zero</div><div class="line"><a name="l01361"></a><span class="lineno"> 1361</span>&#160;            }</div><div class="line"><a name="l01362"></a><span class="lineno"> 1362</span>&#160;        };</div><div class="line"><a name="l01363"></a><span class="lineno"> 1363</span>&#160;</div><div class="line"><a name="l01364"></a><span class="lineno"> 1364</span>&#160;        <span class="comment">// First half</span></div><div class="line"><a name="l01365"></a><span class="lineno"> 1365</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> r = 0; r &lt; matrix_size; ++r)</div><div class="line"><a name="l01366"></a><span class="lineno"> 1366</span>&#160;        {</div><div class="line"><a name="l01367"></a><span class="lineno"> 1367</span>&#160;            <span class="keyword">const</span> int32x4x2_t data = vld2q_s32(reinterpret_cast&lt;const int32_t *&gt;(input_ptrs[r] + in.offset()));</div><div class="line"><a name="l01368"></a><span class="lineno"> 1368</span>&#160;            out0.val[0]            = vmlaq_n_s32(out0.val[0], data.val[0], _conv_col[r]);</div><div class="line"><a name="l01369"></a><span class="lineno"> 1369</span>&#160;            out0.val[1]            = vmlaq_n_s32(out0.val[1], data.val[1], _conv_col[r]);</div><div class="line"><a name="l01370"></a><span class="lineno"> 1370</span>&#160;        }</div><div class="line"><a name="l01371"></a><span class="lineno"> 1371</span>&#160;</div><div class="line"><a name="l01372"></a><span class="lineno"> 1372</span>&#160;        in.increment(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>);</div><div class="line"><a name="l01373"></a><span class="lineno"> 1373</span>&#160;</div><div class="line"><a name="l01374"></a><span class="lineno"> 1374</span>&#160;        <span class="comment">// Second half</span></div><div class="line"><a name="l01375"></a><span class="lineno"> 1375</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> r = 0; r &lt; matrix_size; ++r)</div><div class="line"><a name="l01376"></a><span class="lineno"> 1376</span>&#160;        {</div><div class="line"><a name="l01377"></a><span class="lineno"> 1377</span>&#160;            <span class="keyword">const</span> int32x4x2_t data = vld2q_s32(reinterpret_cast&lt;const int32_t *&gt;(input_ptrs[r] + in.offset()));</div><div class="line"><a name="l01378"></a><span class="lineno"> 1378</span>&#160;            out1.val[0]            = vmlaq_n_s32(out1.val[0], data.val[0], _conv_col[r]);</div><div class="line"><a name="l01379"></a><span class="lineno"> 1379</span>&#160;            out1.val[1]            = vmlaq_n_s32(out1.val[1], data.val[1], _conv_col[r]);</div><div class="line"><a name="l01380"></a><span class="lineno"> 1380</span>&#160;        }</div><div class="line"><a name="l01381"></a><span class="lineno"> 1381</span>&#160;</div><div class="line"><a name="l01382"></a><span class="lineno"> 1382</span>&#160;        <span class="comment">//scale the result if needed</span></div><div class="line"><a name="l01383"></a><span class="lineno"> 1383</span>&#160;        <span class="keywordflow">if</span>(_scale != 1)</div><div class="line"><a name="l01384"></a><span class="lineno"> 1384</span>&#160;        {</div><div class="line"><a name="l01385"></a><span class="lineno"> 1385</span>&#160;            float32x4_t out0_f32_odd  = vcvtq_f32_s32(out0.val[0]);</div><div class="line"><a name="l01386"></a><span class="lineno"> 1386</span>&#160;            float32x4_t out0_f32_even = vcvtq_f32_s32(out0.val[1]);</div><div class="line"><a name="l01387"></a><span class="lineno"> 1387</span>&#160;            out0_f32_odd              = vmulq_f32(out0_f32_odd, oneoverscale);</div><div class="line"><a name="l01388"></a><span class="lineno"> 1388</span>&#160;            out0_f32_even             = vmulq_f32(out0_f32_even, oneoverscale);</div><div class="line"><a name="l01389"></a><span class="lineno"> 1389</span>&#160;            out0.val[0]               = vcvtq_s32_f32(out0_f32_odd);</div><div class="line"><a name="l01390"></a><span class="lineno"> 1390</span>&#160;            out0.val[1]               = vcvtq_s32_f32(out0_f32_even);</div><div class="line"><a name="l01391"></a><span class="lineno"> 1391</span>&#160;</div><div class="line"><a name="l01392"></a><span class="lineno"> 1392</span>&#160;            float32x4_t out1_f32_odd  = vcvtq_f32_s32(out1.val[0]);</div><div class="line"><a name="l01393"></a><span class="lineno"> 1393</span>&#160;            float32x4_t out1_f32_even = vcvtq_f32_s32(out1.val[1]);</div><div class="line"><a name="l01394"></a><span class="lineno"> 1394</span>&#160;            out1_f32_odd              = vmulq_f32(out1_f32_odd, oneoverscale);</div><div class="line"><a name="l01395"></a><span class="lineno"> 1395</span>&#160;            out1_f32_even             = vmulq_f32(out1_f32_even, oneoverscale);</div><div class="line"><a name="l01396"></a><span class="lineno"> 1396</span>&#160;            out1.val[0]               = vcvtq_s32_f32(out1_f32_odd);</div><div class="line"><a name="l01397"></a><span class="lineno"> 1397</span>&#160;            out1.val[1]               = vcvtq_s32_f32(out1_f32_even);</div><div class="line"><a name="l01398"></a><span class="lineno"> 1398</span>&#160;        }</div><div class="line"><a name="l01399"></a><span class="lineno"> 1399</span>&#160;</div><div class="line"><a name="l01400"></a><span class="lineno"> 1400</span>&#160;        <span class="keyword">const</span> int32x4x2_t out0_s32 = vzipq_s32(out0.val[0], out0.val[1]);</div><div class="line"><a name="l01401"></a><span class="lineno"> 1401</span>&#160;        <a class="code" href="namespacearm__compute_1_1detail.xhtml#a1ac67082e6f68cb7ed1939240fb6bdb5">store_results</a>(out0_s32.val[0], out0_s32.val[1], reinterpret_cast&lt;OutputType *&gt;(out.ptr()));</div><div class="line"><a name="l01402"></a><span class="lineno"> 1402</span>&#160;</div><div class="line"><a name="l01403"></a><span class="lineno"> 1403</span>&#160;        <span class="keyword">const</span> int32x4x2_t out1_s32 = vzipq_s32(out1.val[0], out1.val[1]);</div><div class="line"><a name="l01404"></a><span class="lineno"> 1404</span>&#160;        <a class="code" href="namespacearm__compute_1_1detail.xhtml#a1ac67082e6f68cb7ed1939240fb6bdb5">store_results</a>(out1_s32.val[0], out1_s32.val[1], reinterpret_cast&lt;OutputType *&gt;(out.ptr()) + 8);</div><div class="line"><a name="l01405"></a><span class="lineno"> 1405</span>&#160;    },</div><div class="line"><a name="l01406"></a><span class="lineno"> 1406</span>&#160;    in, out);</div><div class="line"><a name="l01407"></a><span class="lineno"> 1407</span>&#160;}</div><div class="line"><a name="l01408"></a><span class="lineno"> 1408</span>&#160;</div><div class="line"><a name="l01409"></a><span class="lineno"> 1409</span>&#160;<span class="keyword">template</span> <span class="keyword">class </span><a class="code" href="classarm__compute_1_1_n_e_separable_convolution_vert_kernel.xhtml">arm_compute::NESeparableConvolutionVertKernel&lt;5&gt;</a>;</div><div class="line"><a name="l01410"></a><span class="lineno"> 1410</span>&#160;<span class="keyword">template</span> <span class="keyword">class </span><a class="code" href="classarm__compute_1_1_n_e_separable_convolution_vert_kernel.xhtml">arm_compute::NESeparableConvolutionVertKernel&lt;7&gt;</a>;</div><div class="line"><a name="l01411"></a><span class="lineno"> 1411</span>&#160;<span class="keyword">template</span> <span class="keyword">class </span><a class="code" href="classarm__compute_1_1_n_e_separable_convolution_vert_kernel.xhtml">arm_compute::NESeparableConvolutionVertKernel&lt;9&gt;</a>;</div><div class="line"><a name="l01412"></a><span class="lineno"> 1412</span>&#160;</div><div class="line"><a name="l01413"></a><span class="lineno"> 1413</span>&#160;<span class="comment">/****************************************************************************************\</span></div><div class="line"><a name="l01414"></a><span class="lineno"> 1414</span>&#160;<span class="comment"> *                                 Rectangle Convolution                                *</span></div><div class="line"><a name="l01415"></a><span class="lineno"> 1415</span>&#160;<span class="comment">\****************************************************************************************/</span></div><div class="line"><a name="l01416"></a><span class="lineno"> 1416</span>&#160;</div><div class="line"><a name="l01417"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_n_e_convolution_rectangle_kernel.xhtml#a437bfa972bdb089215368c344cce05d3"> 1417</a></span>&#160;<a class="code" href="classarm__compute_1_1_n_e_convolution_rectangle_kernel.xhtml#a437bfa972bdb089215368c344cce05d3">NEConvolutionRectangleKernel::NEConvolutionRectangleKernel</a>()</div><div class="line"><a name="l01418"></a><span class="lineno"> 1418</span>&#160;    : _input(nullptr), _output(nullptr), _scale(0), _convolution(), _border_size(), _func_idx(0)</div><div class="line"><a name="l01419"></a><span class="lineno"> 1419</span>&#160;{</div><div class="line"><a name="l01420"></a><span class="lineno"> 1420</span>&#160;}</div><div class="line"><a name="l01421"></a><span class="lineno"> 1421</span>&#160;</div><div class="line"><a name="l01422"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_n_e_convolution_rectangle_kernel.xhtml#a423f9a45a52983b4de5e2b347f4369c7"> 1422</a></span>&#160;<a class="code" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a> <a class="code" href="classarm__compute_1_1_n_e_convolution_rectangle_kernel.xhtml#a423f9a45a52983b4de5e2b347f4369c7">NEConvolutionRectangleKernel::border_size</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01423"></a><span class="lineno"> 1423</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l01424"></a><span class="lineno"> 1424</span>&#160;    <span class="keywordflow">return</span> _border_size;</div><div class="line"><a name="l01425"></a><span class="lineno"> 1425</span>&#160;}</div><div class="line"><a name="l01426"></a><span class="lineno"> 1426</span>&#160;</div><div class="line"><a name="l01427"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_n_e_convolution_rectangle_kernel.xhtml#a3bb75d0640105ec72239550ec8a086b9"> 1427</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_n_e_convolution_rectangle_kernel.xhtml#a3bb75d0640105ec72239550ec8a086b9">NEConvolutionRectangleKernel::configure</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, <span class="keyword">const</span> int16_t *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a006546051719c5fb4b20c966a26b9c76">conv</a>, uint32_t width, uint32_t height, uint32_t <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acec6d8ad52a28972fa74e071c1a63b6a">scale</a>, <span class="keywordtype">bool</span> border_undefined)</div><div class="line"><a name="l01428"></a><span class="lineno"> 1428</span>&#160;{</div><div class="line"><a name="l01429"></a><span class="lineno"> 1429</span>&#160;    <a class="code" href="_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a006546051719c5fb4b20c966a26b9c76">conv</a>);</div><div class="line"><a name="l01430"></a><span class="lineno"> 1430</span>&#160;</div><div class="line"><a name="l01431"></a><span class="lineno"> 1431</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a9d1a839c51134b2ae171a2264c541b6f">set_shape_if_empty</a>(*output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape());</div><div class="line"><a name="l01432"></a><span class="lineno"> 1432</span>&#160;</div><div class="line"><a name="l01433"></a><span class="lineno"> 1433</span>&#160;    <a class="code" href="_validate_8h.xhtml#aafce5e9928fac427dcd29d960bcf2ae3">ARM_COMPUTE_ERROR_ON_MISMATCHING_SHAPES</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output);</div><div class="line"><a name="l01434"></a><span class="lineno"> 1434</span>&#160;    <a class="code" href="_validate_8h.xhtml#aadf5c9cff86327b96d88d04649d9715e">ARM_COMPUTE_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>);</div><div class="line"><a name="l01435"></a><span class="lineno"> 1435</span>&#160;    <a class="code" href="_validate_8h.xhtml#aadf5c9cff86327b96d88d04649d9715e">ARM_COMPUTE_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(output, 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a>);</div><div class="line"><a name="l01436"></a><span class="lineno"> 1436</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(width != 3 &amp;&amp; width != 5 &amp;&amp; width != 7 &amp;&amp; width != 9);</div><div class="line"><a name="l01437"></a><span class="lineno"> 1437</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(height != 3 &amp;&amp; height != 5 &amp;&amp; height != 7 &amp;&amp; height != 9);</div><div class="line"><a name="l01438"></a><span class="lineno"> 1438</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(0 == <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acec6d8ad52a28972fa74e071c1a63b6a">scale</a>);</div><div class="line"><a name="l01439"></a><span class="lineno"> 1439</span>&#160;</div><div class="line"><a name="l01440"></a><span class="lineno"> 1440</span>&#160;    _input       = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>;</div><div class="line"><a name="l01441"></a><span class="lineno"> 1441</span>&#160;    _output      = output;</div><div class="line"><a name="l01442"></a><span class="lineno"> 1442</span>&#160;    _scale       = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acec6d8ad52a28972fa74e071c1a63b6a">scale</a>;</div><div class="line"><a name="l01443"></a><span class="lineno"> 1443</span>&#160;    _border_size = <a class="code" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a>(height / 2, width / 2);</div><div class="line"><a name="l01444"></a><span class="lineno"> 1444</span>&#160;</div><div class="line"><a name="l01445"></a><span class="lineno"> 1445</span>&#160;    <span class="comment">// Setup the convolution matrix</span></div><div class="line"><a name="l01446"></a><span class="lineno"> 1446</span>&#160;    <span class="keyword">const</span> uint32_t nr_elements = width * height;</div><div class="line"><a name="l01447"></a><span class="lineno"> 1447</span>&#160;    _convolution.resize(nr_elements);</div><div class="line"><a name="l01448"></a><span class="lineno"> 1448</span>&#160;    std::copy_n(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a006546051719c5fb4b20c966a26b9c76">conv</a>, nr_elements, _convolution.begin());</div><div class="line"><a name="l01449"></a><span class="lineno"> 1449</span>&#160;</div><div class="line"><a name="l01450"></a><span class="lineno"> 1450</span>&#160;    <span class="comment">// Set function index to help choose appropriate function in run()</span></div><div class="line"><a name="l01451"></a><span class="lineno"> 1451</span>&#160;    _func_idx = get_index(height) * 4 + get_index(width);</div><div class="line"><a name="l01452"></a><span class="lineno"> 1452</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(_func_idx &gt; (_nr_supported_sizes * _nr_supported_sizes));</div><div class="line"><a name="l01453"></a><span class="lineno"> 1453</span>&#160;</div><div class="line"><a name="l01454"></a><span class="lineno"> 1454</span>&#160;    <span class="comment">// Configure kernel window</span></div><div class="line"><a name="l01455"></a><span class="lineno"> 1455</span>&#160;    constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="_c_l_im2_col_kernel_8cpp.xhtml#a4e45c1f5e4280813a78a77dda71d8799">num_elems_processed_per_iteration</a> = 8;</div><div class="line"><a name="l01456"></a><span class="lineno"> 1456</span>&#160;    constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_elems_read_per_iteration      = 16;</div><div class="line"><a name="l01457"></a><span class="lineno"> 1457</span>&#160;    constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_elems_written_per_iteration   = 8;</div><div class="line"><a name="l01458"></a><span class="lineno"> 1458</span>&#160;</div><div class="line"><a name="l01459"></a><span class="lineno"> 1459</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a>                 win = <a class="code" href="namespacearm__compute.xhtml#ab7980fa5ee693e3282a76da047a1c3b5">calculate_max_window</a>(*<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info(), <a class="code" href="classarm__compute_1_1_steps.xhtml">Steps</a>(<a class="code" href="_c_l_im2_col_kernel_8cpp.xhtml#a4e45c1f5e4280813a78a77dda71d8799">num_elems_processed_per_iteration</a>), border_undefined, _border_size);</div><div class="line"><a name="l01460"></a><span class="lineno"> 1460</span>&#160;    <a class="code" href="classarm__compute_1_1_access_window_horizontal.xhtml">AccessWindowHorizontal</a> output_access(output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), 0, num_elems_written_per_iteration);</div><div class="line"><a name="l01461"></a><span class="lineno"> 1461</span>&#160;</div><div class="line"><a name="l01462"></a><span class="lineno"> 1462</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#afc4bd8e872567d9c4c57d89eb0bb3da1">update_window_and_padding</a>(win,</div><div class="line"><a name="l01463"></a><span class="lineno"> 1463</span>&#160;                              <a class="code" href="classarm__compute_1_1_access_window_rectangle.xhtml">AccessWindowRectangle</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info(), -_border_size.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a05374b750b0fc472c34ee61e6f028bba">left</a>, -_border_size.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">top</a>, num_elems_read_per_iteration, height),</div><div class="line"><a name="l01464"></a><span class="lineno"> 1464</span>&#160;                              output_access);</div><div class="line"><a name="l01465"></a><span class="lineno"> 1465</span>&#160;</div><div class="line"><a name="l01466"></a><span class="lineno"> 1466</span>&#160;    output_access.set_valid_region(win, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;valid_region(), border_undefined, _border_size);</div><div class="line"><a name="l01467"></a><span class="lineno"> 1467</span>&#160;</div><div class="line"><a name="l01468"></a><span class="lineno"> 1468</span>&#160;    INEKernel::configure(win);</div><div class="line"><a name="l01469"></a><span class="lineno"> 1469</span>&#160;}</div><div class="line"><a name="l01470"></a><span class="lineno"> 1470</span>&#160;</div><div class="line"><a name="l01471"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_n_e_convolution_rectangle_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82"> 1471</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_n_e_convolution_rectangle_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">NEConvolutionRectangleKernel::run</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>)</div><div class="line"><a name="l01472"></a><span class="lineno"> 1472</span>&#160;{</div><div class="line"><a name="l01473"></a><span class="lineno"> 1473</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>);</div><div class="line"><a name="l01474"></a><span class="lineno"> 1474</span>&#160;    <a class="code" href="_validate_8h.xhtml#a1b35b0d258183cf9ef36adf684d0b88c">ARM_COMPUTE_ERROR_ON_UNCONFIGURED_KERNEL</a>(<span class="keyword">this</span>);</div><div class="line"><a name="l01475"></a><span class="lineno"> 1475</span>&#160;    <a class="code" href="_validate_8h.xhtml#a6eb9ce82815fe429250189da7592ba75">ARM_COMPUTE_ERROR_ON_INVALID_SUBWINDOW</a>(<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">INEKernel::window</a>(), <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>);</div><div class="line"><a name="l01476"></a><span class="lineno"> 1476</span>&#160;</div><div class="line"><a name="l01477"></a><span class="lineno"> 1477</span>&#160;    <span class="keyword">using</span> ConvolutionRectangleFunction = void (<a class="code" href="classarm__compute_1_1_n_e_convolution_rectangle_kernel.xhtml">NEConvolutionRectangleKernel</a>::*)(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp; <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>);</div><div class="line"><a name="l01478"></a><span class="lineno"> 1478</span>&#160;</div><div class="line"><a name="l01479"></a><span class="lineno"> 1479</span>&#160;    <span class="comment">// uint8_t function table</span></div><div class="line"><a name="l01480"></a><span class="lineno"> 1480</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> std::array&lt;ConvolutionRectangleFunction, 16&gt; func_table_u8 =</div><div class="line"><a name="l01481"></a><span class="lineno"> 1481</span>&#160;    {</div><div class="line"><a name="l01482"></a><span class="lineno"> 1482</span>&#160;        {</div><div class="line"><a name="l01483"></a><span class="lineno"> 1483</span>&#160;            &amp;NEConvolutionRectangleKernel::convolution&lt;uint8_t, 3, 3&gt;,</div><div class="line"><a name="l01484"></a><span class="lineno"> 1484</span>&#160;            &amp;NEConvolutionRectangleKernel::convolution&lt;uint8_t, 3, 5&gt;,</div><div class="line"><a name="l01485"></a><span class="lineno"> 1485</span>&#160;            &amp;NEConvolutionRectangleKernel::convolution&lt;uint8_t, 3, 7&gt;,</div><div class="line"><a name="l01486"></a><span class="lineno"> 1486</span>&#160;            &amp;NEConvolutionRectangleKernel::convolution&lt;uint8_t, 3, 9&gt;,</div><div class="line"><a name="l01487"></a><span class="lineno"> 1487</span>&#160;            &amp;NEConvolutionRectangleKernel::convolution&lt;uint8_t, 5, 3&gt;,</div><div class="line"><a name="l01488"></a><span class="lineno"> 1488</span>&#160;            &amp;NEConvolutionRectangleKernel::convolution&lt;uint8_t, 5, 5&gt;,</div><div class="line"><a name="l01489"></a><span class="lineno"> 1489</span>&#160;            &amp;NEConvolutionRectangleKernel::convolution&lt;uint8_t, 5, 7&gt;,</div><div class="line"><a name="l01490"></a><span class="lineno"> 1490</span>&#160;            &amp;NEConvolutionRectangleKernel::convolution&lt;uint8_t, 5, 9&gt;,</div><div class="line"><a name="l01491"></a><span class="lineno"> 1491</span>&#160;            &amp;NEConvolutionRectangleKernel::convolution&lt;uint8_t, 7, 3&gt;,</div><div class="line"><a name="l01492"></a><span class="lineno"> 1492</span>&#160;            &amp;NEConvolutionRectangleKernel::convolution&lt;uint8_t, 7, 5&gt;,</div><div class="line"><a name="l01493"></a><span class="lineno"> 1493</span>&#160;            &amp;NEConvolutionRectangleKernel::convolution&lt;uint8_t, 7, 7&gt;,</div><div class="line"><a name="l01494"></a><span class="lineno"> 1494</span>&#160;            &amp;NEConvolutionRectangleKernel::convolution&lt;uint8_t, 7, 9&gt;,</div><div class="line"><a name="l01495"></a><span class="lineno"> 1495</span>&#160;            &amp;NEConvolutionRectangleKernel::convolution&lt;uint8_t, 9, 3&gt;,</div><div class="line"><a name="l01496"></a><span class="lineno"> 1496</span>&#160;            &amp;NEConvolutionRectangleKernel::convolution&lt;uint8_t, 9, 5&gt;,</div><div class="line"><a name="l01497"></a><span class="lineno"> 1497</span>&#160;            &amp;NEConvolutionRectangleKernel::convolution&lt;uint8_t, 9, 7&gt;,</div><div class="line"><a name="l01498"></a><span class="lineno"> 1498</span>&#160;            &amp;NEConvolutionRectangleKernel::convolution&lt;uint8_t, 9, 9&gt;</div><div class="line"><a name="l01499"></a><span class="lineno"> 1499</span>&#160;        }</div><div class="line"><a name="l01500"></a><span class="lineno"> 1500</span>&#160;    };</div><div class="line"><a name="l01501"></a><span class="lineno"> 1501</span>&#160;    <span class="comment">// int16_t function table</span></div><div class="line"><a name="l01502"></a><span class="lineno"> 1502</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> std::array&lt;ConvolutionRectangleFunction, 16&gt; func_table_s16 =</div><div class="line"><a name="l01503"></a><span class="lineno"> 1503</span>&#160;    {</div><div class="line"><a name="l01504"></a><span class="lineno"> 1504</span>&#160;        {</div><div class="line"><a name="l01505"></a><span class="lineno"> 1505</span>&#160;            &amp;NEConvolutionRectangleKernel::convolution&lt;int16_t, 3, 3&gt;,</div><div class="line"><a name="l01506"></a><span class="lineno"> 1506</span>&#160;            &amp;NEConvolutionRectangleKernel::convolution&lt;int16_t, 3, 5&gt;,</div><div class="line"><a name="l01507"></a><span class="lineno"> 1507</span>&#160;            &amp;NEConvolutionRectangleKernel::convolution&lt;int16_t, 3, 7&gt;,</div><div class="line"><a name="l01508"></a><span class="lineno"> 1508</span>&#160;            &amp;NEConvolutionRectangleKernel::convolution&lt;int16_t, 3, 9&gt;,</div><div class="line"><a name="l01509"></a><span class="lineno"> 1509</span>&#160;            &amp;NEConvolutionRectangleKernel::convolution&lt;int16_t, 5, 3&gt;,</div><div class="line"><a name="l01510"></a><span class="lineno"> 1510</span>&#160;            &amp;NEConvolutionRectangleKernel::convolution&lt;int16_t, 5, 5&gt;,</div><div class="line"><a name="l01511"></a><span class="lineno"> 1511</span>&#160;            &amp;NEConvolutionRectangleKernel::convolution&lt;int16_t, 5, 7&gt;,</div><div class="line"><a name="l01512"></a><span class="lineno"> 1512</span>&#160;            &amp;NEConvolutionRectangleKernel::convolution&lt;int16_t, 5, 9&gt;,</div><div class="line"><a name="l01513"></a><span class="lineno"> 1513</span>&#160;            &amp;NEConvolutionRectangleKernel::convolution&lt;int16_t, 7, 3&gt;,</div><div class="line"><a name="l01514"></a><span class="lineno"> 1514</span>&#160;            &amp;NEConvolutionRectangleKernel::convolution&lt;int16_t, 7, 5&gt;,</div><div class="line"><a name="l01515"></a><span class="lineno"> 1515</span>&#160;            &amp;NEConvolutionRectangleKernel::convolution&lt;int16_t, 7, 7&gt;,</div><div class="line"><a name="l01516"></a><span class="lineno"> 1516</span>&#160;            &amp;NEConvolutionRectangleKernel::convolution&lt;int16_t, 7, 9&gt;,</div><div class="line"><a name="l01517"></a><span class="lineno"> 1517</span>&#160;            &amp;NEConvolutionRectangleKernel::convolution&lt;int16_t, 9, 3&gt;,</div><div class="line"><a name="l01518"></a><span class="lineno"> 1518</span>&#160;            &amp;NEConvolutionRectangleKernel::convolution&lt;int16_t, 9, 5&gt;,</div><div class="line"><a name="l01519"></a><span class="lineno"> 1519</span>&#160;            &amp;NEConvolutionRectangleKernel::convolution&lt;int16_t, 9, 7&gt;,</div><div class="line"><a name="l01520"></a><span class="lineno"> 1520</span>&#160;            &amp;NEConvolutionRectangleKernel::convolution&lt;int16_t, 9, 9&gt;</div><div class="line"><a name="l01521"></a><span class="lineno"> 1521</span>&#160;        }</div><div class="line"><a name="l01522"></a><span class="lineno"> 1522</span>&#160;    };</div><div class="line"><a name="l01523"></a><span class="lineno"> 1523</span>&#160;</div><div class="line"><a name="l01524"></a><span class="lineno"> 1524</span>&#160;    <span class="comment">// Run appropriate function</span></div><div class="line"><a name="l01525"></a><span class="lineno"> 1525</span>&#160;    <span class="keywordflow">switch</span>(_output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>())</div><div class="line"><a name="l01526"></a><span class="lineno"> 1526</span>&#160;    {</div><div class="line"><a name="l01527"></a><span class="lineno"> 1527</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>:</div><div class="line"><a name="l01528"></a><span class="lineno"> 1528</span>&#160;            <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(_func_idx &gt;= func_table_u8.size());</div><div class="line"><a name="l01529"></a><span class="lineno"> 1529</span>&#160;            (this-&gt;*func_table_u8[_func_idx])(<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>);</div><div class="line"><a name="l01530"></a><span class="lineno"> 1530</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01531"></a><span class="lineno"> 1531</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a>:</div><div class="line"><a name="l01532"></a><span class="lineno"> 1532</span>&#160;            <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(_func_idx &gt;= func_table_s16.size());</div><div class="line"><a name="l01533"></a><span class="lineno"> 1533</span>&#160;            (this-&gt;*func_table_s16[_func_idx])(<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>);</div><div class="line"><a name="l01534"></a><span class="lineno"> 1534</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01535"></a><span class="lineno"> 1535</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l01536"></a><span class="lineno"> 1536</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Not supported&quot;</span>);</div><div class="line"><a name="l01537"></a><span class="lineno"> 1537</span>&#160;    }</div><div class="line"><a name="l01538"></a><span class="lineno"> 1538</span>&#160;}</div><div class="line"><a name="l01539"></a><span class="lineno"> 1539</span>&#160;</div><div class="line"><a name="l01540"></a><span class="lineno"> 1540</span>&#160;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> NEConvolutionRectangleKernel::get_index(uint32_t val)</div><div class="line"><a name="l01541"></a><span class="lineno"> 1541</span>&#160;{</div><div class="line"><a name="l01542"></a><span class="lineno"> 1542</span>&#160;    <span class="keywordflow">switch</span>(val)</div><div class="line"><a name="l01543"></a><span class="lineno"> 1543</span>&#160;    {</div><div class="line"><a name="l01544"></a><span class="lineno"> 1544</span>&#160;        <span class="keywordflow">case</span> 3:</div><div class="line"><a name="l01545"></a><span class="lineno"> 1545</span>&#160;            <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l01546"></a><span class="lineno"> 1546</span>&#160;        <span class="keywordflow">case</span> 5:</div><div class="line"><a name="l01547"></a><span class="lineno"> 1547</span>&#160;            <span class="keywordflow">return</span> 1;</div><div class="line"><a name="l01548"></a><span class="lineno"> 1548</span>&#160;        <span class="keywordflow">case</span> 7:</div><div class="line"><a name="l01549"></a><span class="lineno"> 1549</span>&#160;            <span class="keywordflow">return</span> 2;</div><div class="line"><a name="l01550"></a><span class="lineno"> 1550</span>&#160;        <span class="keywordflow">case</span> 9:</div><div class="line"><a name="l01551"></a><span class="lineno"> 1551</span>&#160;            <span class="keywordflow">return</span> 3;</div><div class="line"><a name="l01552"></a><span class="lineno"> 1552</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l01553"></a><span class="lineno"> 1553</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Not supported dimension size&quot;</span>);</div><div class="line"><a name="l01554"></a><span class="lineno"> 1554</span>&#160;            <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l01555"></a><span class="lineno"> 1555</span>&#160;    }</div><div class="line"><a name="l01556"></a><span class="lineno"> 1556</span>&#160;}</div><div class="line"><a name="l01557"></a><span class="lineno"> 1557</span>&#160;</div><div class="line"><a name="l01558"></a><span class="lineno"> 1558</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> OutputType, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> rows, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> cols&gt;</div><div class="line"><a name="l01559"></a><span class="lineno"> 1559</span>&#160;<span class="keywordtype">void</span> NEConvolutionRectangleKernel::convolution(<span class="keyword">const</span> Window &amp;win)</div><div class="line"><a name="l01560"></a><span class="lineno"> 1560</span>&#160;{</div><div class="line"><a name="l01561"></a><span class="lineno"> 1561</span>&#160;    static_assert(<span class="keyword">sizeof</span>(OutputType) == <span class="keyword">sizeof</span>(uint8_t) || <span class="keyword">sizeof</span>(OutputType) == <span class="keyword">sizeof</span>(int16_t), <span class="stringliteral">&quot;The output buffer can only be u8 or s16&quot;</span>);</div><div class="line"><a name="l01562"></a><span class="lineno"> 1562</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(_input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#ab988210662dbd3bf32fd563c7dd1bdbf">buffer</a>() == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l01563"></a><span class="lineno"> 1563</span>&#160;</div><div class="line"><a name="l01564"></a><span class="lineno"> 1564</span>&#160;    Iterator <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>(_input, win);</div><div class="line"><a name="l01565"></a><span class="lineno"> 1565</span>&#160;    Iterator output(_output, win);</div><div class="line"><a name="l01566"></a><span class="lineno"> 1566</span>&#160;</div><div class="line"><a name="l01567"></a><span class="lineno"> 1567</span>&#160;    std::array&lt;unsigned char *, rows&gt; input_ptrs{ {} };</div><div class="line"><a name="l01568"></a><span class="lineno"> 1568</span>&#160;    <span class="keyword">const</span> int16_t    *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a006546051719c5fb4b20c966a26b9c76">conv</a>       = _convolution.data();</div><div class="line"><a name="l01569"></a><span class="lineno"> 1569</span>&#160;    <span class="keyword">const</span> float32x4_t scale_val  = vdupq_n_f32(1.0f / _scale);</div><div class="line"><a name="l01570"></a><span class="lineno"> 1570</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>         k_row_half = rows / 2;</div><div class="line"><a name="l01571"></a><span class="lineno"> 1571</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>         k_col_half = cols / 2;</div><div class="line"><a name="l01572"></a><span class="lineno"> 1572</span>&#160;</div><div class="line"><a name="l01573"></a><span class="lineno"> 1573</span>&#160;    <span class="comment">// Set row pointers</span></div><div class="line"><a name="l01574"></a><span class="lineno"> 1574</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = -k_row_half; i &lt;= k_row_half; ++i)</div><div class="line"><a name="l01575"></a><span class="lineno"> 1575</span>&#160;    {</div><div class="line"><a name="l01576"></a><span class="lineno"> 1576</span>&#160;        input_ptrs[k_row_half + i] = _input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#ab988210662dbd3bf32fd563c7dd1bdbf">buffer</a>() + _input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#ac80aea0e8c7c5c812ea8c7221fbfd4b2">offset_element_in_bytes</a>(Coordinates(-k_col_half, i));</div><div class="line"><a name="l01577"></a><span class="lineno"> 1577</span>&#160;    }</div><div class="line"><a name="l01578"></a><span class="lineno"> 1578</span>&#160;</div><div class="line"><a name="l01579"></a><span class="lineno"> 1579</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(win, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l01580"></a><span class="lineno"> 1580</span>&#160;    {</div><div class="line"><a name="l01581"></a><span class="lineno"> 1581</span>&#160;        int32x4_t out  = vdupq_n_s32(0);</div><div class="line"><a name="l01582"></a><span class="lineno"> 1582</span>&#160;        int32x4_t out2 = vdupq_n_s32(0);</div><div class="line"><a name="l01583"></a><span class="lineno"> 1583</span>&#160;</div><div class="line"><a name="l01584"></a><span class="lineno"> 1584</span>&#160;        <span class="comment">// Perform appropriate convolution</span></div><div class="line"><a name="l01585"></a><span class="lineno"> 1585</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> r = 0; r &lt; rows; ++r)</div><div class="line"><a name="l01586"></a><span class="lineno"> 1586</span>&#160;        {</div><div class="line"><a name="l01587"></a><span class="lineno"> 1587</span>&#160;            <span class="keyword">const</span> uint8x16_t data = vld1q_u8(input_ptrs[r] + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.offset());</div><div class="line"><a name="l01588"></a><span class="lineno"> 1588</span>&#160;            <span class="keywordflow">if</span>(3 == cols)</div><div class="line"><a name="l01589"></a><span class="lineno"> 1589</span>&#160;            {</div><div class="line"><a name="l01590"></a><span class="lineno"> 1590</span>&#160;                convolve_row3x1(out, out2, data, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a006546051719c5fb4b20c966a26b9c76">conv</a> + r * cols);</div><div class="line"><a name="l01591"></a><span class="lineno"> 1591</span>&#160;            }</div><div class="line"><a name="l01592"></a><span class="lineno"> 1592</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span>(5 == cols)</div><div class="line"><a name="l01593"></a><span class="lineno"> 1593</span>&#160;            {</div><div class="line"><a name="l01594"></a><span class="lineno"> 1594</span>&#160;                convolve_row5x1(out, out2, data, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a006546051719c5fb4b20c966a26b9c76">conv</a> + r * cols);</div><div class="line"><a name="l01595"></a><span class="lineno"> 1595</span>&#160;            }</div><div class="line"><a name="l01596"></a><span class="lineno"> 1596</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span>(7 == cols)</div><div class="line"><a name="l01597"></a><span class="lineno"> 1597</span>&#160;            {</div><div class="line"><a name="l01598"></a><span class="lineno"> 1598</span>&#160;                convolve_row7x1(out, out2, data, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a006546051719c5fb4b20c966a26b9c76">conv</a> + r * cols);</div><div class="line"><a name="l01599"></a><span class="lineno"> 1599</span>&#160;            }</div><div class="line"><a name="l01600"></a><span class="lineno"> 1600</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span>(9 == cols)</div><div class="line"><a name="l01601"></a><span class="lineno"> 1601</span>&#160;            {</div><div class="line"><a name="l01602"></a><span class="lineno"> 1602</span>&#160;                convolve_row9x1(out, out2, data, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a006546051719c5fb4b20c966a26b9c76">conv</a> + r * cols);</div><div class="line"><a name="l01603"></a><span class="lineno"> 1603</span>&#160;            }</div><div class="line"><a name="l01604"></a><span class="lineno"> 1604</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l01605"></a><span class="lineno"> 1605</span>&#160;            {</div><div class="line"><a name="l01606"></a><span class="lineno"> 1606</span>&#160;                <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported number of columns&quot;</span>);</div><div class="line"><a name="l01607"></a><span class="lineno"> 1607</span>&#160;            }</div><div class="line"><a name="l01608"></a><span class="lineno"> 1608</span>&#160;        }</div><div class="line"><a name="l01609"></a><span class="lineno"> 1609</span>&#160;</div><div class="line"><a name="l01610"></a><span class="lineno"> 1610</span>&#160;        <span class="comment">// Apply scale</span></div><div class="line"><a name="l01611"></a><span class="lineno"> 1611</span>&#160;        <span class="keywordflow">if</span>(_scale != 1)</div><div class="line"><a name="l01612"></a><span class="lineno"> 1612</span>&#160;        {</div><div class="line"><a name="l01613"></a><span class="lineno"> 1613</span>&#160;            <span class="comment">// Convert to F32, scale and convert back to S32</span></div><div class="line"><a name="l01614"></a><span class="lineno"> 1614</span>&#160;            out  = vcvtq_s32_f32(vmulq_f32(vcvtq_f32_s32(out), scale_val));</div><div class="line"><a name="l01615"></a><span class="lineno"> 1615</span>&#160;            out2 = vcvtq_s32_f32(vmulq_f32(vcvtq_f32_s32(out2), scale_val));</div><div class="line"><a name="l01616"></a><span class="lineno"> 1616</span>&#160;        }</div><div class="line"><a name="l01617"></a><span class="lineno"> 1617</span>&#160;</div><div class="line"><a name="l01618"></a><span class="lineno"> 1618</span>&#160;        <span class="comment">// Clamp and store as U8 or S16:</span></div><div class="line"><a name="l01619"></a><span class="lineno"> 1619</span>&#160;        <a class="code" href="namespacearm__compute_1_1detail.xhtml#a1ac67082e6f68cb7ed1939240fb6bdb5">store_results</a>(out, out2, reinterpret_cast&lt;OutputType *&gt;(output.ptr()));</div><div class="line"><a name="l01620"></a><span class="lineno"> 1620</span>&#160;    },</div><div class="line"><a name="l01621"></a><span class="lineno"> 1621</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output);</div><div class="line"><a name="l01622"></a><span class="lineno"> 1622</span>&#160;}</div><div class="line"><a name="l01623"></a><span class="lineno"> 1623</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="ttc" id="structarm__compute_1_1_border_size_xhtml_a3fdd42ea34070a54e696b3adc28c4be3"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">arm_compute::BorderSize::top</a></div><div class="ttdeci">unsigned int top</div><div class="ttdoc">top of the border</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00349">Types.h:349</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_kernel_xhtml_ad34a46f53686c12a5c5e717cc9617fb6"><div class="ttname"><a href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">arm_compute::IKernel::window</a></div><div class="ttdeci">const Window &amp; window() const</div><div class="ttdoc">The maximum window the kernel can be executed on.</div><div class="ttdef"><b>Definition:</b> <a href="_i_kernel_8cpp_source.xhtml#l00028">IKernel.cpp:28</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_separable_convolution_vert_kernel_xhtml"><div class="ttname"><a href="classarm__compute_1_1_n_e_separable_convolution_vert_kernel.xhtml">arm_compute::NESeparableConvolutionVertKernel</a></div><div class="ttdoc">Kernel for the Vertical pass of a Separable Convolution.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_convolution_kernel_8h_source.xhtml#l00146">NEConvolutionKernel.h:146</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_convolution_kernel_xhtml"><div class="ttname"><a href="classarm__compute_1_1_n_e_convolution_kernel.xhtml">arm_compute::NEConvolutionKernel</a></div><div class="ttdoc">Interface for the kernel to run an arbitrary size convolution on a tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_convolution_kernel_8h_source.xhtml#l00055">NEConvolutionKernel.h:55</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_convolution_kernel_xhtml_a8873a8f053f3d2322e297409645c6222"><div class="ttname"><a href="classarm__compute_1_1_n_e_convolution_kernel.xhtml#a8873a8f053f3d2322e297409645c6222">arm_compute::NEConvolutionKernel::configure</a></div><div class="ttdeci">void configure(const ITensor *input, ITensor *output, const int16_t *conv, uint32_t scale, bool border_undefined)</div><div class="ttdoc">Initialise the kernel's input, output and border mode.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_convolution_kernel_8cpp_source.xhtml#l00324">NEConvolutionKernel.cpp:324</a></div></div>
<div class="ttc" id="_i_tensor_8h_xhtml"><div class="ttname"><a href="_i_tensor_8h.xhtml">ITensor.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_ac80aea0e8c7c5c812ea8c7221fbfd4b2"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#ac80aea0e8c7c5c812ea8c7221fbfd4b2">arm_compute::ITensorInfo::offset_element_in_bytes</a></div><div class="ttdeci">virtual int32_t offset_element_in_bytes(const Coordinates &amp;pos) const =0</div><div class="ttdoc">The offset in bytes from the beginning of the memory allocation to access the element at position (x,...</div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_separable_convolution_hor_kernel_xhtml_a423f9a45a52983b4de5e2b347f4369c7"><div class="ttname"><a href="classarm__compute_1_1_n_e_separable_convolution_hor_kernel.xhtml#a423f9a45a52983b4de5e2b347f4369c7">arm_compute::NESeparableConvolutionHorKernel::border_size</a></div><div class="ttdeci">BorderSize border_size() const override</div><div class="ttdoc">The size of the border for that kernel.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_convolution_kernel_8cpp_source.xhtml#l00660">NEConvolutionKernel.cpp:660</a></div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml">arm_compute::BorderSize</a></div><div class="ttdoc">Container for 2D border size.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00269">Types.h:269</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00352">Error.h:352</a></div></div>
<div class="ttc" id="_n_e_convolution_kernel_8h_xhtml"><div class="ttname"><a href="_n_e_convolution_kernel_8h.xhtml">NEConvolutionKernel.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::Format::U8</a></div><div class="ttdoc">1 channel, 1 U8 per channel</div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a7cfb31af63202568efef5214acfbf3ba"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">arm_compute::ITensorInfo::data_type</a></div><div class="ttdeci">virtual DataType data_type() const =0</div><div class="ttdoc">Data type used for each element of the tensor.</div></div>
<div class="ttc" id="_window_8h_xhtml"><div class="ttname"><a href="_window_8h.xhtml">Window.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_separable_convolution_vert_kernel_xhtml_a112b35dd205c62ea6ed1447ef226da82"><div class="ttname"><a href="classarm__compute_1_1_n_e_separable_convolution_vert_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">arm_compute::NESeparableConvolutionVertKernel::run</a></div><div class="ttdeci">void run(const Window &amp;window, const ThreadInfo &amp;info) override</div><div class="ttdoc">Execute the kernel on the passed window.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_convolution_kernel_8cpp_source.xhtml#l01137">NEConvolutionKernel.cpp:1137</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_separable_convolution_hor_kernel_xhtml_a112b35dd205c62ea6ed1447ef226da82"><div class="ttname"><a href="classarm__compute_1_1_n_e_separable_convolution_hor_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">arm_compute::NESeparableConvolutionHorKernel::run</a></div><div class="ttdeci">void run(const Window &amp;window, const ThreadInfo &amp;info) override</div><div class="ttdoc">Execute the kernel on the passed window.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_convolution_kernel_8cpp_source.xhtml#l00699">NEConvolutionKernel.cpp:699</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_convolution_rectangle_kernel_xhtml_a437bfa972bdb089215368c344cce05d3"><div class="ttname"><a href="classarm__compute_1_1_n_e_convolution_rectangle_kernel.xhtml#a437bfa972bdb089215368c344cce05d3">arm_compute::NEConvolutionRectangleKernel::NEConvolutionRectangleKernel</a></div><div class="ttdeci">NEConvolutionRectangleKernel()</div><div class="ttdoc">Default constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_convolution_kernel_8cpp_source.xhtml#l01417">NEConvolutionKernel.cpp:1417</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">arm_compute::Format::U16</a></div><div class="ttdoc">1 channel, 1 U16 per channel</div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_separable_convolution_hor_kernel_xhtml"><div class="ttname"><a href="classarm__compute_1_1_n_e_separable_convolution_hor_kernel.xhtml">arm_compute::NESeparableConvolutionHorKernel</a></div><div class="ttdoc">Kernel for the Horizontal pass of a Separable Convolution.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_convolution_kernel_8h_source.xhtml#l00102">NEConvolutionKernel.h:102</a></div></div>
<div class="ttc" id="_tensor_info_8h_xhtml"><div class="ttname"><a href="_tensor_info_8h.xhtml">TensorInfo.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_p_p_simple_kernel_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_c_p_p_simple_kernel.xhtml">arm_compute::ICPPSimpleKernel</a></div><div class="ttdoc">Interface for simple C++ kernels having 1 tensor input and 1 tensor output.</div><div class="ttdef"><b>Definition:</b> <a href="_i_c_p_p_simple_kernel_8h_source.xhtml#l00034">ICPPSimpleKernel.h:34</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a0101a40c4a6acc2af3b55afa7632f16a"><div class="ttname"><a href="namespacearm__compute.xhtml#a0101a40c4a6acc2af3b55afa7632f16a">arm_compute::calculate_matrix_scale</a></div><div class="ttdeci">uint32_t calculate_matrix_scale(const int16_t *matrix, unsigned int matrix_size)</div><div class="ttdoc">Calculate the scale of the given square matrix.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_utils_8h_source.xhtml#l00709">Utils.h:709</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml">arm_compute::ITensor</a></div><div class="ttdoc">Interface for NEON tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_8h_source.xhtml#l00036">ITensor.h:36</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_convolution_rectangle_kernel_xhtml_a423f9a45a52983b4de5e2b347f4369c7"><div class="ttname"><a href="classarm__compute_1_1_n_e_convolution_rectangle_kernel.xhtml#a423f9a45a52983b4de5e2b347f4369c7">arm_compute::NEConvolutionRectangleKernel::border_size</a></div><div class="ttdeci">BorderSize border_size() const override</div><div class="ttdoc">The size of the border for that kernel.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_convolution_kernel_8cpp_source.xhtml#l01422">NEConvolutionKernel.cpp:1422</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab7980fa5ee693e3282a76da047a1c3b5"><div class="ttname"><a href="namespacearm__compute.xhtml#ab7980fa5ee693e3282a76da047a1c3b5">arm_compute::calculate_max_window</a></div><div class="ttdeci">Window calculate_max_window(const ValidRegion &amp;valid_region, const Steps &amp;steps=Steps(), bool skip_border=false, BorderSize border_size=BorderSize())</div><div class="ttdoc">Calculate the maximum window for a given tensor shape and border setting.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_helpers_8cpp_source.xhtml#l00028">Helpers.cpp:28</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2020 ARM Limited.</div><div class="ttdef"><b>Definition:</b> <a href="00__introduction_8dox_source.xhtml#l00024">00_introduction.dox:24</a></div></div>
<div class="ttc" id="_validate_8h_xhtml_aafce5e9928fac427dcd29d960bcf2ae3"><div class="ttname"><a href="_validate_8h.xhtml#aafce5e9928fac427dcd29d960bcf2ae3">ARM_COMPUTE_ERROR_ON_MISMATCHING_SHAPES</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MISMATCHING_SHAPES(...)</div><div class="ttdef"><b>Definition:</b> <a href="_validate_8h_source.xhtml#l00441">Validate.h:441</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_xhtml_a47d74e4e51f9b1a636c4831bd747a97c"><div class="ttname"><a href="classarm__compute_1_1_tensor.xhtml#a47d74e4e51f9b1a636c4831bd747a97c">arm_compute::Tensor::info</a></div><div class="ttdeci">ITensorInfo * info() const override</div><div class="ttdoc">Interface to be implemented by the child class to return the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_tensor_8cpp_source.xhtml#l00033">Tensor.cpp:33</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a006546051719c5fb4b20c966a26b9c76"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a006546051719c5fb4b20c966a26b9c76">arm_compute::test::validation::conv</a></div><div class="ttdeci">std::array&lt; int16_t, 25 &gt; conv</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_8cpp_source.xhtml#l00125">Convolution.cpp:125</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::Format::S32</a></div><div class="ttdoc">1 channel, 1 S32 per channel</div></div>
<div class="ttc" id="arm__compute_2core_2_utils_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_utils_8h.xhtml">Utils.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_access_window_rectangle_xhtml"><div class="ttname"><a href="classarm__compute_1_1_access_window_rectangle.xhtml">arm_compute::AccessWindowRectangle</a></div><div class="ttdoc">Implementation of a rectangular access pattern.</div><div class="ttdef"><b>Definition:</b> <a href="_i_access_window_8h_source.xhtml#l00107">IAccessWindow.h:107</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_convolution_rectangle_kernel_xhtml_a3bb75d0640105ec72239550ec8a086b9"><div class="ttname"><a href="classarm__compute_1_1_n_e_convolution_rectangle_kernel.xhtml#a3bb75d0640105ec72239550ec8a086b9">arm_compute::NEConvolutionRectangleKernel::configure</a></div><div class="ttdeci">void configure(const ITensor *input, ITensor *output, const int16_t *conv, uint32_t width, uint32_t height, uint32_t scale, bool border_undefined)</div><div class="ttdoc">Initialise the kernel's input, output and border mode.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_convolution_kernel_8cpp_source.xhtml#l01427">NEConvolutionKernel.cpp:1427</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_aa96e81276ee4f87ab386cd05a5539a7d"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">arm_compute::Window::DimX</a></div><div class="ttdeci">static constexpr size_t DimX</div><div class="ttdoc">Alias for dimension 0 also known as X dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00043">Window.h:43</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_afc4bd8e872567d9c4c57d89eb0bb3da1"><div class="ttname"><a href="namespacearm__compute.xhtml#afc4bd8e872567d9c4c57d89eb0bb3da1">arm_compute::update_window_and_padding</a></div><div class="ttdeci">bool update_window_and_padding(Window &amp;win, Ts &amp;&amp;... patterns)</div><div class="ttdoc">Update window and padding size for each of the access patterns.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_helpers_8h_source.xhtml#l00402">Helpers.h:402</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1detail_xhtml_a1ac67082e6f68cb7ed1939240fb6bdb5"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#a1ac67082e6f68cb7ed1939240fb6bdb5">arm_compute::detail::store_results</a></div><div class="ttdeci">void store_results(float *buffer, const float32x4x2_t &amp;values)</div><div class="ttdoc">Stores a float32x4x2_t array into a memory location.</div></div>
<div class="ttc" id="classarm__compute_1_1_steps_xhtml"><div class="ttname"><a href="classarm__compute_1_1_steps.xhtml">arm_compute::Steps</a></div><div class="ttdoc">Class to describe a number of elements in each dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_steps_8h_source.xhtml#l00040">Steps.h:40</a></div></div>
<div class="ttc" id="classarm__compute_1_1_coordinates_xhtml"><div class="ttname"><a href="classarm__compute_1_1_coordinates.xhtml">arm_compute::Coordinates</a></div><div class="ttdoc">Coordinates of an item.</div><div class="ttdef"><b>Definition:</b> <a href="_coordinates_8h_source.xhtml#l00037">Coordinates.h:37</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml_ab988210662dbd3bf32fd563c7dd1bdbf"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml#ab988210662dbd3bf32fd563c7dd1bdbf">arm_compute::ITensor::buffer</a></div><div class="ttdeci">virtual uint8_t * buffer() const =0</div><div class="ttdoc">Interface to be implemented by the child class to return a pointer to CPU memory.</div></div>
<div class="ttc" id="classarm__compute_1_1_access_window_horizontal_xhtml"><div class="ttname"><a href="classarm__compute_1_1_access_window_horizontal.xhtml">arm_compute::AccessWindowHorizontal</a></div><div class="ttdoc">Implementation of a row access pattern.</div><div class="ttdef"><b>Definition:</b> <a href="_i_access_window_8h_source.xhtml#l00232">IAccessWindow.h:232</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ae38161fda91461cff23b750a95e47e6f"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ae38161fda91461cff23b750a95e47e6f">arm_compute::test::validation::convolution</a></div><div class="ttdeci">CLConvolution5x5 convolution</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_8cpp_source.xhtml#l00131">Convolution.cpp:131</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_convolution_rectangle_kernel_xhtml"><div class="ttname"><a href="classarm__compute_1_1_n_e_convolution_rectangle_kernel.xhtml">arm_compute::NEConvolutionRectangleKernel</a></div><div class="ttdoc">Kernel for the running convolution on a rectangle matrix.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_convolution_kernel_8h_source.xhtml#l00212">NEConvolutionKernel.h:212</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml_a0e95dc1e53c361348314873b168ae237"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">arm_compute::ITensor::info</a></div><div class="ttdeci">virtual ITensorInfo * info() const =0</div><div class="ttdoc">Interface to be implemented by the child class to return the tensor's metadata.</div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_convolution_kernel_xhtml_a112b35dd205c62ea6ed1447ef226da82"><div class="ttname"><a href="classarm__compute_1_1_n_e_convolution_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">arm_compute::NEConvolutionKernel::run</a></div><div class="ttdeci">void run(const Window &amp;window, const ThreadInfo &amp;info) override</div><div class="ttdoc">Execute the kernel on the passed window.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_convolution_kernel_8cpp_source.xhtml#l00624">NEConvolutionKernel.cpp:624</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_convolution_kernel_xhtml_a423f9a45a52983b4de5e2b347f4369c7"><div class="ttname"><a href="classarm__compute_1_1_n_e_convolution_kernel.xhtml#a423f9a45a52983b4de5e2b347f4369c7">arm_compute::NEConvolutionKernel::border_size</a></div><div class="ttdeci">BorderSize border_size() const override</div><div class="ttdoc">The size of the border for that kernel.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_convolution_kernel_8cpp_source.xhtml#l00318">NEConvolutionKernel.cpp:318</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_separable_convolution_hor_kernel_xhtml_a965a154580e00968b45aa6268986cd51"><div class="ttname"><a href="classarm__compute_1_1_n_e_separable_convolution_hor_kernel.xhtml#a965a154580e00968b45aa6268986cd51">arm_compute::NESeparableConvolutionHorKernel::NESeparableConvolutionHorKernel</a></div><div class="ttdeci">NESeparableConvolutionHorKernel()</div><div class="ttdoc">Default constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_convolution_kernel_8cpp_source.xhtml#l00654">NEConvolutionKernel.cpp:654</a></div></div>
<div class="ttc" id="_error_8h_xhtml"><div class="ttname"><a href="_error_8h.xhtml">Error.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_convolution_kernel_xhtml_a230a4894adf8380eca9e8c2aac03e9b8"><div class="ttname"><a href="classarm__compute_1_1_n_e_convolution_kernel.xhtml#a230a4894adf8380eca9e8c2aac03e9b8">arm_compute::NEConvolutionKernel::NEConvolutionKernel</a></div><div class="ttdeci">NEConvolutionKernel()</div><div class="ttdoc">Default constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_convolution_kernel_8cpp_source.xhtml#l00312">NEConvolutionKernel.cpp:312</a></div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml_a05374b750b0fc472c34ee61e6f028bba"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a05374b750b0fc472c34ee61e6f028bba">arm_compute::BorderSize::left</a></div><div class="ttdeci">unsigned int left</div><div class="ttdoc">left of the border</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00352">Types.h:352</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">arm_compute::Format::S16</a></div><div class="ttdoc">1 channel, 1 S16 per channel</div></div>
<div class="ttc" id="_validate_8h_xhtml_aadf5c9cff86327b96d88d04649d9715e"><div class="ttname"><a href="_validate_8h.xhtml#aadf5c9cff86327b96d88d04649d9715e">ARM_COMPUTE_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN(t, c,...)</div><div class="ttdef"><b>Definition:</b> <a href="_validate_8h_source.xhtml#l00790">Validate.h:790</a></div></div>
<div class="ttc" id="_validate_8h_xhtml_a921b705e9e3e0fe928928447869e62a5"><div class="ttname"><a href="_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_NULLPTR(...)</div><div class="ttdef"><b>Definition:</b> <a href="_validate_8h_source.xhtml#l00161">Validate.h:161</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_separable_convolution_vert_kernel_xhtml_ad5b2a12ea8d073422e0615efca68ee22"><div class="ttname"><a href="classarm__compute_1_1_n_e_separable_convolution_vert_kernel.xhtml#ad5b2a12ea8d073422e0615efca68ee22">arm_compute::NESeparableConvolutionVertKernel::configure</a></div><div class="ttdeci">void configure(const ITensor *input, ITensor *output, const int16_t *conv_col, uint32_t scale, bool border_undefined)</div><div class="ttdoc">Initialise the kernel's input, output and border mode.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_convolution_kernel_8cpp_source.xhtml#l01103">NEConvolutionKernel.cpp:1103</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_separable_convolution_vert_kernel_xhtml_ac3aaa23fc2c41fdb7a6de14841631fbd"><div class="ttname"><a href="classarm__compute_1_1_n_e_separable_convolution_vert_kernel.xhtml#ac3aaa23fc2c41fdb7a6de14841631fbd">arm_compute::NESeparableConvolutionVertKernel::NESeparableConvolutionVertKernel</a></div><div class="ttdeci">NESeparableConvolutionVertKernel()</div><div class="ttdoc">Default constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_convolution_kernel_8cpp_source.xhtml#l01091">NEConvolutionKernel.cpp:1091</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_acec6d8ad52a28972fa74e071c1a63b6a"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#acec6d8ad52a28972fa74e071c1a63b6a">arm_compute::test::validation::scale</a></div><div class="ttdeci">scale</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_pixel_wise_multiplication_8cpp_source.xhtml#l00375">PixelWiseMultiplication.cpp:375</a></div></div>
<div class="ttc" id="structarm__compute_1_1_thread_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_thread_info.xhtml">arm_compute::ThreadInfo</a></div><div class="ttdoc">Information about executing thread and CPU.</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_types_8h_source.xhtml#l00225">CPPTypes.h:225</a></div></div>
<div class="ttc" id="_coordinates_8h_xhtml"><div class="ttname"><a href="_coordinates_8h.xhtml">Coordinates.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_separable_convolution_hor_kernel_xhtml_a2047b01f2cdd57602126cccb6bd08625"><div class="ttname"><a href="classarm__compute_1_1_n_e_separable_convolution_hor_kernel.xhtml#a2047b01f2cdd57602126cccb6bd08625">arm_compute::NESeparableConvolutionHorKernel::configure</a></div><div class="ttdeci">void configure(const ITensor *input, ITensor *output, const int16_t *conv_row, bool border_undefined)</div><div class="ttdoc">Initialise the kernel's input, output and border mode.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_convolution_kernel_8cpp_source.xhtml#l00666">NEConvolutionKernel.cpp:666</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a9d1a839c51134b2ae171a2264c541b6f"><div class="ttname"><a href="namespacearm__compute.xhtml#a9d1a839c51134b2ae171a2264c541b6f">arm_compute::set_shape_if_empty</a></div><div class="ttdeci">bool set_shape_if_empty(ITensorInfo &amp;info, const TensorShape &amp;shape)</div><div class="ttdoc">Set the shape to the specified value if the current assignment is empty.</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00235">Helpers.inl:235</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_separable_convolution_vert_kernel_xhtml_a423f9a45a52983b4de5e2b347f4369c7"><div class="ttname"><a href="classarm__compute_1_1_n_e_separable_convolution_vert_kernel.xhtml#a423f9a45a52983b4de5e2b347f4369c7">arm_compute::NESeparableConvolutionVertKernel::border_size</a></div><div class="ttdeci">BorderSize border_size() const override</div><div class="ttdoc">The size of the border for that kernel.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_convolution_kernel_8cpp_source.xhtml#l01097">NEConvolutionKernel.cpp:1097</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_convolution_rectangle_kernel_xhtml_a112b35dd205c62ea6ed1447ef226da82"><div class="ttname"><a href="classarm__compute_1_1_n_e_convolution_rectangle_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">arm_compute::NEConvolutionRectangleKernel::run</a></div><div class="ttdeci">void run(const Window &amp;window, const ThreadInfo &amp;info) override</div><div class="ttdoc">Execute the kernel on the passed window.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_convolution_kernel_8cpp_source.xhtml#l01471">NEConvolutionKernel.cpp:1471</a></div></div>
<div class="ttc" id="_c_l_im2_col_kernel_8cpp_xhtml_a4e45c1f5e4280813a78a77dda71d8799"><div class="ttname"><a href="_c_l_im2_col_kernel_8cpp.xhtml#a4e45c1f5e4280813a78a77dda71d8799">num_elems_processed_per_iteration</a></div><div class="ttdeci">unsigned int num_elems_processed_per_iteration</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_im2_col_kernel_8cpp_source.xhtml#l00054">CLIm2ColKernel.cpp:54</a></div></div>
<div class="ttc" id="arm__compute_2core_2_helpers_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_helpers_8h.xhtml">Helpers.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5002bf7ec46d52971f9526e94172cfee"><div class="ttname"><a href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;... iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00123">Helpers.inl:123</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a4f4125dba5283887b34f889b1c615c0c"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">arm_compute::test::validation::info</a></div><div class="ttdeci">info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00182">ConvolutionLayer.cpp:182</a></div></div>
<div class="ttc" id="classarm__compute_1_1_iterator_xhtml"><div class="ttname"><a href="classarm__compute_1_1_iterator.xhtml">arm_compute::Iterator</a></div><div class="ttdoc">Iterator updated by execute_window_loop for each window element.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_helpers_8h_source.xhtml#l00318">Helpers.h:318</a></div></div>
<div class="ttc" id="arm__compute_2core_2_types_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_types_8h.xhtml">Types.h</a></div></div>
<div class="ttc" id="_validate_8h_xhtml_a6eb9ce82815fe429250189da7592ba75"><div class="ttname"><a href="_validate_8h.xhtml#a6eb9ce82815fe429250189da7592ba75">ARM_COMPUTE_ERROR_ON_INVALID_SUBWINDOW</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_INVALID_SUBWINDOW(f, s)</div><div class="ttdef"><b>Definition:</b> <a href="_validate_8h_source.xhtml#l00205">Validate.h:205</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml">arm_compute::Window</a></div><div class="ttdoc">Describe a multidimensional execution window.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00039">Window.h:39</a></div></div>
<div class="ttc" id="_validate_8h_xhtml_a1b35b0d258183cf9ef36adf684d0b88c"><div class="ttname"><a href="_validate_8h.xhtml#a1b35b0d258183cf9ef36adf684d0b88c">ARM_COMPUTE_ERROR_ON_UNCONFIGURED_KERNEL</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_UNCONFIGURED_KERNEL(k)</div><div class="ttdef"><b>Definition:</b> <a href="_validate_8h_source.xhtml#l00941">Validate.h:941</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a9047a414d692d8814181a667a7ee68c4"><div class="ttname"><a href="namespacearm__compute.xhtml#a9047a414d692d8814181a667a7ee68c4">arm_compute::calculate_max_window_horizontal</a></div><div class="ttdeci">Window calculate_max_window_horizontal(const ValidRegion &amp;valid_region, const Steps &amp;steps=Steps(), bool skip_border=false, BorderSize border_size=BorderSize())</div><div class="ttdoc">Calculate the maximum window used by a horizontal kernel for a given tensor shape and border setting.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_helpers_8cpp_source.xhtml#l00131">Helpers.cpp:131</a></div></div>
<div class="ttc" id="_validate_8h_xhtml"><div class="ttname"><a href="_validate_8h.xhtml">Validate.h</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aebb8dcc11953d78e620bbef0b9e2183.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_d91e1966cc57df4f49d1e07be7697713.xhtml">NEON</a></li><li class="navelem"><a class="el" href="dir_1ce938f580a6f304b99685e2c1dd19db.xhtml">kernels</a></li><li class="navelem"><a class="el" href="_n_e_convolution_kernel_8cpp.xhtml">NEConvolutionKernel.cpp</a></li>
    <li class="footer">Generated on Thu Mar 5 2020 16:07:00 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
