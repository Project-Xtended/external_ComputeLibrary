<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute::support::cpp11 Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('namespacearm__compute_1_1support_1_1cpp11.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">arm_compute::support::cpp11 Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:aebc1ea57c14482b68dac0c0dab766126"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aebc1ea57c14482b68dac0c0dab766126">NumericBase</a> { <a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aebc1ea57c14482b68dac0c0dab766126a329acff975f3cc434528bec43bd5b6aa">BASE_10</a>, 
<a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aebc1ea57c14482b68dac0c0dab766126a027219c7702304969c898aeffed504af">BASE_16</a>
 }</td></tr>
<tr class="separator:aebc1ea57c14482b68dac0c0dab766126"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:abdba606a789b8d664774f17d18f45cfe"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#abdba606a789b8d664774f17d18f45cfe">stoi</a> (const std::string &amp;str, std::size_t *pos=0, <a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aebc1ea57c14482b68dac0c0dab766126">NumericBase</a> base=<a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aebc1ea57c14482b68dac0c0dab766126a329acff975f3cc434528bec43bd5b6aa">NumericBase::BASE_10</a>)</td></tr>
<tr class="memdesc:abdba606a789b8d664774f17d18f45cfe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert string values to integer.  <a href="#abdba606a789b8d664774f17d18f45cfe">More...</a><br /></td></tr>
<tr class="separator:abdba606a789b8d664774f17d18f45cfe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae7b85c41ac94d98f07b1cef18b33d2d1"><td class="memItemLeft" align="right" valign="top">unsigned long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ae7b85c41ac94d98f07b1cef18b33d2d1">stoul</a> (const std::string &amp;str, std::size_t *pos=0, <a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aebc1ea57c14482b68dac0c0dab766126">NumericBase</a> base=<a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aebc1ea57c14482b68dac0c0dab766126a329acff975f3cc434528bec43bd5b6aa">NumericBase::BASE_10</a>)</td></tr>
<tr class="memdesc:ae7b85c41ac94d98f07b1cef18b33d2d1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert string values to unsigned long.  <a href="#ae7b85c41ac94d98f07b1cef18b33d2d1">More...</a><br /></td></tr>
<tr class="separator:ae7b85c41ac94d98f07b1cef18b33d2d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc5dddee1cbe93a4eaf0a9f74ee96bb7"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:acc5dddee1cbe93a4eaf0a9f74ee96bb7"><td class="memTemplItemLeft" align="right" valign="top">std::string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">to_string</a> (T &amp;&amp;value)</td></tr>
<tr class="memdesc:acc5dddee1cbe93a4eaf0a9f74ee96bb7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert integer and float values to string.  <a href="#acc5dddee1cbe93a4eaf0a9f74ee96bb7">More...</a><br /></td></tr>
<tr class="separator:acc5dddee1cbe93a4eaf0a9f74ee96bb7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac26a2b6f5d8e0c60e67684eea7e71e7c"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ac26a2b6f5d8e0c60e67684eea7e71e7c"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ac26a2b6f5d8e0c60e67684eea7e71e7c">nearbyint</a> (T value)</td></tr>
<tr class="memdesc:ac26a2b6f5d8e0c60e67684eea7e71e7c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Rounds the floating-point argument arg to an integer value in floating-point format, using the current rounding mode.  <a href="#ac26a2b6f5d8e0c60e67684eea7e71e7c">More...</a><br /></td></tr>
<tr class="separator:ac26a2b6f5d8e0c60e67684eea7e71e7c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1df10cffb9f2dea9f3b007ce411e105f"><td class="memTemplParams" colspan="2">template&lt;typename... Ts&gt; </td></tr>
<tr class="memitem:a1df10cffb9f2dea9f3b007ce411e105f"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a1df10cffb9f2dea9f3b007ce411e105f">stof</a> (Ts &amp;&amp;... args)</td></tr>
<tr class="memdesc:a1df10cffb9f2dea9f3b007ce411e105f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert string values to float.  <a href="#a1df10cffb9f2dea9f3b007ce411e105f">More...</a><br /></td></tr>
<tr class="separator:a1df10cffb9f2dea9f3b007ce411e105f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab71c35ca207b916a9f8b0336ab88484e"><td class="memTemplParams" colspan="2">template&lt;typename T , typename  = typename std::enable_if&lt;std::is_floating_point&lt;T&gt;::value&gt;::type&gt; </td></tr>
<tr class="memitem:ab71c35ca207b916a9f8b0336ab88484e"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ab71c35ca207b916a9f8b0336ab88484e">round</a> (T value)</td></tr>
<tr class="memdesc:ab71c35ca207b916a9f8b0336ab88484e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Round floating-point value with half value rounding away from zero.  <a href="#ab71c35ca207b916a9f8b0336ab88484e">More...</a><br /></td></tr>
<tr class="separator:ab71c35ca207b916a9f8b0336ab88484e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae04d407202e3d50ce6a4c79ac00a5d59"><td class="memTemplParams" colspan="2">template&lt;typename T , typename  = typename std::enable_if&lt;std::is_floating_point&lt;T&gt;::value&gt;::type&gt; </td></tr>
<tr class="memitem:ae04d407202e3d50ce6a4c79ac00a5d59"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ae04d407202e3d50ce6a4c79ac00a5d59">trunc</a> (T value)</td></tr>
<tr class="memdesc:ae04d407202e3d50ce6a4c79ac00a5d59"><td class="mdescLeft">&#160;</td><td class="mdescRight">Truncate floating-point value.  <a href="#ae04d407202e3d50ce6a4c79ac00a5d59">More...</a><br /></td></tr>
<tr class="separator:ae04d407202e3d50ce6a4c79ac00a5d59"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a28096f8372c0ad762864c790917375e2"><td class="memTemplParams" colspan="2">template&lt;typename T , typename  = typename std::enable_if&lt;std::is_floating_point&lt;T&gt;::value&gt;::type&gt; </td></tr>
<tr class="memitem:a28096f8372c0ad762864c790917375e2"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a28096f8372c0ad762864c790917375e2">copysign</a> (T x, T y)</td></tr>
<tr class="memdesc:a28096f8372c0ad762864c790917375e2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Composes a floating point value with the magnitude of <code>x</code> and the sign of <code>y</code>.  <a href="#a28096f8372c0ad762864c790917375e2">More...</a><br /></td></tr>
<tr class="separator:a28096f8372c0ad762864c790917375e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af399bedeaeb8dc177d3a301a12c3a5d0"><td class="memTemplParams" colspan="2">template&lt;typename T , typename  = typename std::enable_if &lt; std::is_floating_point&lt;T&gt;::value                                                             &gt;::type&gt; </td></tr>
<tr class="memitem:af399bedeaeb8dc177d3a301a12c3a5d0"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#af399bedeaeb8dc177d3a301a12c3a5d0">fma</a> (T x, T y, T z)</td></tr>
<tr class="memdesc:af399bedeaeb8dc177d3a301a12c3a5d0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Computes (x*y) + z as if to infinite precision and rounded only once to fit the result type.  <a href="#af399bedeaeb8dc177d3a301a12c3a5d0">More...</a><br /></td></tr>
<tr class="separator:af399bedeaeb8dc177d3a301a12c3a5d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9429515817425d10f4b662eaa069cc5c"><td class="memTemplParams" colspan="2">template&lt;typename... Ts&gt; </td></tr>
<tr class="memitem:a9429515817425d10f4b662eaa069cc5c"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a9429515817425d10f4b662eaa069cc5c">snprintf</a> (char *s, std::size_t n, const char *fmt, Ts &amp;&amp;... args)</td></tr>
<tr class="memdesc:a9429515817425d10f4b662eaa069cc5c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Loads the data from the given location, converts them to character string equivalents and writes the result to a character string buffer.  <a href="#a9429515817425d10f4b662eaa069cc5c">More...</a><br /></td></tr>
<tr class="separator:a9429515817425d10f4b662eaa069cc5c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae1437f4a38c4ada64e7a2586aa35bf8"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aae1437f4a38c4ada64e7a2586aa35bf8">to_string</a> (bool value)</td></tr>
<tr class="separator:aae1437f4a38c4ada64e7a2586aa35bf8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e51e04e3f86c823883757ef22d4f39a"><td class="memItemLeft" align="right" valign="top">void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a9e51e04e3f86c823883757ef22d4f39a">align</a> (std::size_t alignment, std::size_t size, void *&amp;ptr, std::size_t &amp;space)</td></tr>
<tr class="separator:a9e51e04e3f86c823883757ef22d4f39a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a73e352c61baaf9c1178da2d30105b04e"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a73e352c61baaf9c1178da2d30105b04e"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">lowest</a> ()</td></tr>
<tr class="separator:a73e352c61baaf9c1178da2d30105b04e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a079a0ecb5fc05e0a107785f2573bc854"><td class="memTemplParams" colspan="2">template&lt;typename T , typename  = typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt; </td></tr>
<tr class="memitem:a079a0ecb5fc05e0a107785f2573bc854"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a079a0ecb5fc05e0a107785f2573bc854">isfinite</a> (T value)</td></tr>
<tr class="separator:a079a0ecb5fc05e0a107785f2573bc854"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a81dc1c64fed4ed4e9e4f4bf32cb8ba46"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a81dc1c64fed4ed4e9e4f4bf32cb8ba46">isfinite</a> (half_float::half value)</td></tr>
<tr class="separator:a81dc1c64fed4ed4e9e4f4bf32cb8ba46"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Enumeration Type Documentation</h2>
<a id="aebc1ea57c14482b68dac0c0dab766126"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aebc1ea57c14482b68dac0c0dab766126">&#9670;&nbsp;</a></span>NumericBase</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aebc1ea57c14482b68dac0c0dab766126">NumericBase</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="aebc1ea57c14482b68dac0c0dab766126a329acff975f3cc434528bec43bd5b6aa"></a>BASE_10&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="aebc1ea57c14482b68dac0c0dab766126a027219c7702304969c898aeffed504af"></a>BASE_16&#160;</td><td class="fielddoc"></td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="_toolchain_support_8h_source.xhtml#l00050">50</a> of file <a class="el" href="_toolchain_support_8h_source.xhtml">ToolchainSupport.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;{</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aebc1ea57c14482b68dac0c0dab766126a329acff975f3cc434528bec43bd5b6aa">BASE_10</a>,</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aebc1ea57c14482b68dac0c0dab766126a027219c7702304969c898aeffed504af">BASE_16</a></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;};</div><div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_aebc1ea57c14482b68dac0c0dab766126a027219c7702304969c898aeffed504af"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aebc1ea57c14482b68dac0c0dab766126a027219c7702304969c898aeffed504af">arm_compute::support::cpp11::NumericBase::BASE_16</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_aebc1ea57c14482b68dac0c0dab766126a329acff975f3cc434528bec43bd5b6aa"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aebc1ea57c14482b68dac0c0dab766126a329acff975f3cc434528bec43bd5b6aa">arm_compute::support::cpp11::NumericBase::BASE_10</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="a9e51e04e3f86c823883757ef22d4f39a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9e51e04e3f86c823883757ef22d4f39a">&#9670;&nbsp;</a></span>align()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void* arm_compute::support::cpp11::align </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>alignment</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&amp;&#160;</td>
          <td class="paramname"><em>ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t &amp;&#160;</td>
          <td class="paramname"><em>space</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_toolchain_support_8h_source.xhtml#l00402">402</a> of file <a class="el" href="_toolchain_support_8h_source.xhtml">ToolchainSupport.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;{</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;    std::uintptr_t pn      = reinterpret_cast&lt;std::uintptr_t&gt;(ptr);</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    std::uintptr_t aligned = (pn + alignment - 1) &amp; -alignment;</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    std::size_t    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a735a025fce26c1ef147b54426df18181">padding</a> = aligned - pn;</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    <span class="keywordflow">if</span>(space &lt; size + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a735a025fce26c1ef147b54426df18181">padding</a>)</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    {</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    }</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    space -= <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a735a025fce26c1ef147b54426df18181">padding</a>;</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    <span class="keywordflow">return</span> ptr = reinterpret_cast&lt;void *&gt;(aligned);</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a735a025fce26c1ef147b54426df18181"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a735a025fce26c1ef147b54426df18181">arm_compute::test::validation::padding</a></div><div class="ttdeci">const PaddingSize padding</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_absolute_difference_8cpp_source.xhtml#l00113">AbsoluteDifference.cpp:113</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_absolute_difference_8cpp_source.xhtml#l00113">arm_compute::test::validation::padding</a>.</p>

<p class="reference">Referenced by <a class="el" href="_memory_region_8h_source.xhtml#l00045">MemoryRegion::MemoryRegion()</a>, and <a class="el" href="tests_2validation_2_c_l_2_u_n_i_t_2_tensor_allocator_8cpp_source.xhtml#l00111">arm_compute::test::validation::TEST_CASE()</a>.</p>

</div>
</div>
<a id="a28096f8372c0ad762864c790917375e2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a28096f8372c0ad762864c790917375e2">&#9670;&nbsp;</a></span>copysign()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T arm_compute::support::cpp11::copysign </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Composes a floating point value with the magnitude of <code>x</code> and the sign of <code>y</code>. </p>
<dl class="section note"><dt>Note</dt><dd>This function implements the same behaviour as std::copysign except that it doesn't support Integral type. The latter is not in the namespace std in some Android toolchains.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>value that contains the magnitude to be used in constructing the result. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">y</td><td>value that contains the sign to be used in construct in the result.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Floating-point value with magnitude of <code>x</code> and sign of <code>y</code>. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_toolchain_support_8h_source.xhtml#l00349">349</a> of file <a class="el" href="_toolchain_support_8h_source.xhtml">ToolchainSupport.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;{</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a28096f8372c0ad762864c790917375e2">std::copysign</a>(x, y);</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_a28096f8372c0ad762864c790917375e2"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a28096f8372c0ad762864c790917375e2">arm_compute::support::cpp11::copysign</a></div><div class="ttdeci">T copysign(T x, T y)</div><div class="ttdoc">Composes a floating point value with the magnitude of x and the sign of y.</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00349">ToolchainSupport.h:349</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af399bedeaeb8dc177d3a301a12c3a5d0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af399bedeaeb8dc177d3a301a12c3a5d0">&#9670;&nbsp;</a></span>fma()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T arm_compute::support::cpp11::fma </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>z</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Computes (x*y) + z as if to infinite precision and rounded only once to fit the result type. </p>
<dl class="section note"><dt>Note</dt><dd>This function implements the same behaviour as std::fma except that it doesn't support Integral type. The latter is not in the namespace std in some Android toolchains.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>floating-point value </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">y</td><td>floating-point value </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">z</td><td>floating-point value</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Result floating point value equal to (x*y) + z. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_toolchain_support_8h_source.xhtml#l00370">370</a> of file <a class="el" href="_toolchain_support_8h_source.xhtml">ToolchainSupport.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;{</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#af399bedeaeb8dc177d3a301a12c3a5d0">std::fma</a>(x, y, z);</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_af399bedeaeb8dc177d3a301a12c3a5d0"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#af399bedeaeb8dc177d3a301a12c3a5d0">arm_compute::support::cpp11::fma</a></div><div class="ttdeci">T fma(T x, T y, T z)</div><div class="ttdoc">Computes (x*y) + z as if to infinite precision and rounded only once to fit the result type.</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00370">ToolchainSupport.h:370</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a079a0ecb5fc05e0a107785f2573bc854"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a079a0ecb5fc05e0a107785f2573bc854">&#9670;&nbsp;</a></span>isfinite() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::support::cpp11::isfinite </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_toolchain_support_8h_source.xhtml#l00433">433</a> of file <a class="el" href="_toolchain_support_8h_source.xhtml">ToolchainSupport.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;{</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a81dc1c64fed4ed4e9e4f4bf32cb8ba46">std::isfinite</a>(value);</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_a81dc1c64fed4ed4e9e4f4bf32cb8ba46"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a81dc1c64fed4ed4e9e4f4bf32cb8ba46">arm_compute::support::cpp11::isfinite</a></div><div class="ttdeci">bool isfinite(half_float::half value)</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00438">ToolchainSupport.h:438</a></div></div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_validation_8h_source.xhtml#l00309">compare&lt; AbsoluteTolerance&lt; U &gt; &gt;::operator bool()</a>, <a class="el" href="_validation_8h_source.xhtml#l00335">compare&lt; RelativeTolerance&lt; U &gt; &gt;::operator bool()</a>, and <a class="el" href="_validation_8h_source.xhtml#l00456">arm_compute::test::validation::validate_wrap()</a>.</p>

</div>
</div>
<a id="a81dc1c64fed4ed4e9e4f4bf32cb8ba46"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a81dc1c64fed4ed4e9e4f4bf32cb8ba46">&#9670;&nbsp;</a></span>isfinite() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::support::cpp11::isfinite </td>
          <td>(</td>
          <td class="paramtype">half_float::half&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_toolchain_support_8h_source.xhtml#l00438">438</a> of file <a class="el" href="_toolchain_support_8h_source.xhtml">ToolchainSupport.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;{</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a81dc1c64fed4ed4e9e4f4bf32cb8ba46">half_float::isfinite</a>(value);</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_a81dc1c64fed4ed4e9e4f4bf32cb8ba46"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a81dc1c64fed4ed4e9e4f4bf32cb8ba46">arm_compute::support::cpp11::isfinite</a></div><div class="ttdeci">bool isfinite(half_float::half value)</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00438">ToolchainSupport.h:438</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a73e352c61baaf9c1178da2d30105b04e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a73e352c61baaf9c1178da2d30105b04e">&#9670;&nbsp;</a></span>lowest()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T arm_compute::support::cpp11::lowest </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_toolchain_support_8h_source.xhtml#l00418">418</a> of file <a class="el" href="_toolchain_support_8h_source.xhtml">ToolchainSupport.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;{</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;T&gt;::lowest</a>();</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_a73e352c61baaf9c1178da2d30105b04e"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">arm_compute::support::cpp11::lowest</a></div><div class="ttdeci">T lowest()</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00418">ToolchainSupport.h:418</a></div></div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="tensor__transform_8cpp_source.xhtml#l00072">arm_compute::helpers::tensor_transform::calculate_end_on_index()</a>, <a class="el" href="tensor__transform_8cpp_source.xhtml#l00039">arm_compute::helpers::tensor_transform::calculate_start_on_index()</a>, <a class="el" href="arm__compute_2core_2_utils_8h_source.xhtml#l01248">arm_compute::check_value_range()</a>, <a class="el" href="_c_l_pooling_layer_8cpp_source.xhtml#l00033">CLPoolingLayer::configure()</a>, <a class="el" href="_c_l_min_max_location_kernel_8cpp_source.xhtml#l00062">CLMinMaxKernel::configure()</a>, <a class="el" href="_c_l_pooling_layer_kernel_8cpp_source.xhtml#l00177">CLPoolingLayerKernel::configure()</a>, <a class="el" href="_assets_library_8h_source.xhtml#l00658">AssetsLibrary::fill_tensor_uniform()</a>, <a class="el" href="_assets_library_8h_source.xhtml#l00748">AssetsLibrary::fill_tensor_uniform_ranged()</a>, <a class="el" href="arm__compute_2core_2_utils_8h_source.xhtml#l00558">arm_compute::get_min_max()</a>, <a class="el" href="reference_2_pooling_layer_8cpp_source.xhtml#l00041">arm_compute::test::validation::reference::pooling_layer_internal()</a>, <a class="el" href="_n_e_min_max_location_kernel_8cpp_source.xhtml#l00094">NEMinMaxKernel::reset()</a>, <a class="el" href="_n_e_min_max_layer_kernel_8cpp_source.xhtml#l00192">NEMinMaxLayerKernel::reset()</a>, <a class="el" href="_n_e_min_max_layer_kernel_8cpp_source.xhtml#l00117">NEMinMaxLayerKernel::run()</a>, <a class="el" href="_saturate_cast_8h_source.xhtml#l00072">arm_compute::utils::cast::saturate_cast()</a>, and <a class="el" href="tests_2_utils_8h_source.xhtml#l00410">arm_compute::test::saturate_cast()</a>.</p>

</div>
</div>
<a id="ac26a2b6f5d8e0c60e67684eea7e71e7c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac26a2b6f5d8e0c60e67684eea7e71e7c">&#9670;&nbsp;</a></span>nearbyint()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T arm_compute::support::cpp11::nearbyint </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Rounds the floating-point argument arg to an integer value in floating-point format, using the current rounding mode. </p>
<dl class="section note"><dt>Note</dt><dd>This function acts as a convenience wrapper around std::nearbyint. The latter is missing in some Android toolchains.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>Value to be rounded.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The rounded value. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_toolchain_support_8h_source.xhtml#l00287">287</a> of file <a class="el" href="_toolchain_support_8h_source.xhtml">ToolchainSupport.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;{</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    <span class="keywordflow">return</span> static_cast&lt;T&gt;(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ac26a2b6f5d8e0c60e67684eea7e71e7c">std::nearbyint</a>(value));</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_ac26a2b6f5d8e0c60e67684eea7e71e7c"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ac26a2b6f5d8e0c60e67684eea7e71e7c">arm_compute::support::cpp11::nearbyint</a></div><div class="ttdeci">T nearbyint(T value)</div><div class="ttdoc">Rounds the floating-point argument arg to an integer value in floating-point format,...</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00287">ToolchainSupport.h:287</a></div></div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_element_wise_unary_8cpp_source.xhtml#l00035">arm_compute::test::validation::reference::elementwise_unary()</a>.</p>

</div>
</div>
<a id="ab71c35ca207b916a9f8b0336ab88484e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab71c35ca207b916a9f8b0336ab88484e">&#9670;&nbsp;</a></span>round()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T arm_compute::support::cpp11::round </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Round floating-point value with half value rounding away from zero. </p>
<dl class="section note"><dt>Note</dt><dd>This function implements the same behaviour as std::round except that it doesn't support Integral type. The latter is not in the namespace std in some Android toolchains.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>floating-point value to be rounded.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Floating-point value of rounded <code>value</code>. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_toolchain_support_8h_source.xhtml#l00317">317</a> of file <a class="el" href="_toolchain_support_8h_source.xhtml">ToolchainSupport.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;{</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    <span class="comment">//Workaround Valgrind&#39;s mismatches: when running from Valgrind the call to std::round(-4.500000) == -4.000000 instead of 5.00000</span></div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    <span class="keywordflow">return</span> (value &lt; 0.f) ? static_cast&lt;int&gt;(value - 0.5f) : static_cast&lt;int&gt;(value + 0.5f);</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;}</div></div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00084">arm_compute::quantization::calculate_quantized_multiplier_greater_than_one()</a>, <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00052">arm_compute::quantization::calculate_quantized_multiplier_less_than_one()</a>, <a class="el" href="_rounding_8cpp_source.xhtml#l00035">arm_compute::round()</a>, and <a class="el" href="_n_e_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00097">NEROIPoolingLayerKernel::run()</a>.</p>

</div>
</div>
<a id="a9429515817425d10f4b662eaa069cc5c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9429515817425d10f4b662eaa069cc5c">&#9670;&nbsp;</a></span>snprintf()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int arm_compute::support::cpp11::snprintf </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>n</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>fmt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Ts &amp;&amp;...&#160;</td>
          <td class="paramname"><em>args</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Loads the data from the given location, converts them to character string equivalents and writes the result to a character string buffer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">s</td><td>Pointer to a character string to write to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">n</td><td>Up to buf_size - 1 characters may be written, plus the null terminator </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fmt</td><td>Pointer to a null-terminated multibyte string specifying how to interpret the data. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">args</td><td>Arguments forwarded to std::snprintf.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Number of characters that would have been written for a sufficiently large buffer if successful (not including the terminating null character), or a negative value if an error occurred. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_toolchain_support_8h_source.xhtml#l00387">387</a> of file <a class="el" href="_toolchain_support_8h_source.xhtml">ToolchainSupport.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;{</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a9429515817425d10f4b662eaa069cc5c">std::snprintf</a>(s, n, fmt, std::forward&lt;Ts&gt;(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>)...);</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;}</div><div class="ttc" id="namespace_gemm_tuner_xhtml_a8187411843a6284ffb964ef3fb9fcab3"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">GemmTuner.args</a></div><div class="ttdeci">args</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00555">GemmTuner.py:555</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_a9429515817425d10f4b662eaa069cc5c"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a9429515817425d10f4b662eaa069cc5c">arm_compute::support::cpp11::snprintf</a></div><div class="ttdeci">int snprintf(char *s, std::size_t n, const char *fmt, Ts &amp;&amp;... args)</div><div class="ttdoc">Loads the data from the given location, converts them to character string equivalents and writes the ...</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00387">ToolchainSupport.h:387</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_gemm_tuner_8py_source.xhtml#l00555">GemmTuner::args</a>.</p>

<p class="reference">Referenced by <a class="el" href="_error_8cpp_source.xhtml#l00039">arm_compute::create_error_msg()</a>, and <a class="el" href="arm__compute_2core_2utils_2logging_2_helpers_8h_source.xhtml#l00048">arm_compute::logging::string_with_format()</a>.</p>

</div>
</div>
<a id="a1df10cffb9f2dea9f3b007ce411e105f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1df10cffb9f2dea9f3b007ce411e105f">&#9670;&nbsp;</a></span>stof()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int arm_compute::support::cpp11::stof </td>
          <td>(</td>
          <td class="paramtype">Ts &amp;&amp;...&#160;</td>
          <td class="paramname"><em>args</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert string values to float. </p>
<dl class="section note"><dt>Note</dt><dd>This function acts as a convenience wrapper around std::stof. The latter is missing in some Android toolchains.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">args</td><td>Arguments forwarded to std::stof.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Float representation of input string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_toolchain_support_8h_source.xhtml#l00302">302</a> of file <a class="el" href="_toolchain_support_8h_source.xhtml">ToolchainSupport.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;{</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a1df10cffb9f2dea9f3b007ce411e105f">return ::std::stof</a>(std::forward&lt;Ts&gt;(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>)...);</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;}</div><div class="ttc" id="namespace_gemm_tuner_xhtml_a8187411843a6284ffb964ef3fb9fcab3"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">GemmTuner.args</a></div><div class="ttdeci">args</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00555">GemmTuner.py:555</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_a1df10cffb9f2dea9f3b007ce411e105f"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a1df10cffb9f2dea9f3b007ce411e105f">arm_compute::support::cpp11::stof</a></div><div class="ttdeci">int stof(Ts &amp;&amp;... args)</div><div class="ttdoc">Convert string values to float.</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00302">ToolchainSupport.h:302</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_gemm_tuner_8py_source.xhtml#l00555">GemmTuner::args</a>.</p>

</div>
</div>
<a id="abdba606a789b8d664774f17d18f45cfe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abdba606a789b8d664774f17d18f45cfe">&#9670;&nbsp;</a></span>stoi()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int arm_compute::support::cpp11::stoi </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t *&#160;</td>
          <td class="paramname"><em>pos</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aebc1ea57c14482b68dac0c0dab766126">NumericBase</a>&#160;</td>
          <td class="paramname"><em>base</em> = <code><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aebc1ea57c14482b68dac0c0dab766126a329acff975f3cc434528bec43bd5b6aa">NumericBase::BASE_10</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Convert string values to integer. </p>
<dl class="section note"><dt>Note</dt><dd>This function implements the same behaviour as std::stoi. The latter is missing in some Android toolchains.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">str</td><td>String to be converted to int. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pos</td><td>If idx is not a null pointer, the function sets the value of pos to the position of the first character in str after the number. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">base</td><td>Numeric base used to interpret the string.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Integer representation of <code>str</code>. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_toolchain_support_8h_source.xhtml#l00067">67</a> of file <a class="el" href="_toolchain_support_8h_source.xhtml">ToolchainSupport.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;{</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    assert(base == NumericBase::BASE_10 || base == NumericBase::BASE_16);</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>      x;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    std::stringstream ss;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keywordflow">if</span>(base == NumericBase::BASE_16)</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    {</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        ss &lt;&lt; std::hex;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    }</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    ss &lt;&lt; str;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    ss &gt;&gt; x;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keywordflow">if</span>(pos)</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    {</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        std::string       s;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        std::stringstream ss_p;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        ss_p &lt;&lt; x;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        ss_p &gt;&gt; s;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        *pos = s.length();</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    }</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keywordflow">return</span> x;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;}</div></div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aebc1ea57c14482b68dac0c0dab766126a329acff975f3cc434528bec43bd5b6aa">BASE_10</a>, and <a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aebc1ea57c14482b68dac0c0dab766126a027219c7702304969c898aeffed504af">BASE_16</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_tuner_8cpp_source.xhtml#l00233">CLTuner::load_from_file()</a>.</p>

</div>
</div>
<a id="ae7b85c41ac94d98f07b1cef18b33d2d1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae7b85c41ac94d98f07b1cef18b33d2d1">&#9670;&nbsp;</a></span>stoul()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned long arm_compute::support::cpp11::stoul </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t *&#160;</td>
          <td class="paramname"><em>pos</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aebc1ea57c14482b68dac0c0dab766126">NumericBase</a>&#160;</td>
          <td class="paramname"><em>base</em> = <code><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aebc1ea57c14482b68dac0c0dab766126a329acff975f3cc434528bec43bd5b6aa">NumericBase::BASE_10</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Convert string values to unsigned long. </p>
<dl class="section note"><dt>Note</dt><dd>This function implements the same behaviour as std::stoul. The latter is missing in some Android toolchains.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">str</td><td>String to be converted to unsigned long. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pos</td><td>If idx is not a null pointer, the function sets the value of pos to the position of the first character in str after the number. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">base</td><td>Numeric base used to interpret the string.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Unsigned long representation of <code>str</code>. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_toolchain_support_8h_source.xhtml#l00103">103</a> of file <a class="el" href="_toolchain_support_8h_source.xhtml">ToolchainSupport.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;{</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    assert(base == NumericBase::BASE_10 || base == NumericBase::BASE_16);</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    std::stringstream stream;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>     value = 0;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="keywordflow">if</span>(base == NumericBase::BASE_16)</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    {</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        stream &lt;&lt; std::hex;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    }</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    stream &lt;&lt; str;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    stream &gt;&gt; value;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keywordflow">if</span>(pos)</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    {</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        std::string       s;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        std::stringstream ss_p;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        ss_p &lt;&lt; value;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        ss_p &gt;&gt; s;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        *pos = s.length();</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    }</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="keywordflow">return</span> value;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;}</div></div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aebc1ea57c14482b68dac0c0dab766126a329acff975f3cc434528bec43bd5b6aa">BASE_10</a>, and <a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aebc1ea57c14482b68dac0c0dab766126a027219c7702304969c898aeffed504af">BASE_16</a>.</p>

</div>
</div>
<a id="acc5dddee1cbe93a4eaf0a9f74ee96bb7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acc5dddee1cbe93a4eaf0a9f74ee96bb7">&#9670;&nbsp;</a></span>to_string() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::support::cpp11::to_string </td>
          <td>(</td>
          <td class="paramtype">T &amp;&amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Convert integer and float values to string. </p>
<dl class="section note"><dt>Note</dt><dd>This function acts as a convenience wrapper around std::to_string. The latter is missing in some Android toolchains.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>Value to be converted to string.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>String representation of <code>value</code>. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_toolchain_support_8h_source.xhtml#l00272">272</a> of file <a class="el" href="_toolchain_support_8h_source.xhtml">ToolchainSupport.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;{</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aae1437f4a38c4ada64e7a2586aa35bf8">return ::std::to_string</a>(std::forward&lt;T&gt;(value));</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_aae1437f4a38c4ada64e7a2586aa35bf8"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aae1437f4a38c4ada64e7a2586aa35bf8">arm_compute::support::cpp11::to_string</a></div><div class="ttdeci">std::string to_string(bool value)</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00393">ToolchainSupport.h:393</a></div></div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_g_c_softmax_layer_kernel_8cpp_source.xhtml#l00042">GCLogits1DMaxKernel::configure()</a>, <a class="el" href="_c_l_integral_image_kernel_8cpp_source.xhtml#l00039">CLIntegralImageHorKernel::configure()</a>, <a class="el" href="_c_l_element_wise_unary_layer_kernel_8cpp_source.xhtml#l00052">CLElementWiseUnaryLayerKernel::configure()</a>, <a class="el" href="_c_l_median3x3_kernel_8cpp_source.xhtml#l00039">CLMedian3x3Kernel::configure()</a>, <a class="el" href="_g_c_transpose_kernel_8cpp_source.xhtml#l00040">GCTransposeKernel::configure()</a>, <a class="el" href="_c_l_warp_affine_kernel_8cpp_source.xhtml#l00061">CLWarpAffineKernel::configure()</a>, <a class="el" href="_g_c_scale_kernel_8cpp_source.xhtml#l00047">GCScaleKernel::configure()</a>, <a class="el" href="_c_l_scale_kernel_8cpp_source.xhtml#l00182">CLScaleKernel::configure()</a>, <a class="el" href="_g_c_g_e_m_m_matrix_accumulate_biases_kernel_8cpp_source.xhtml#l00044">GCGEMMMatrixAccumulateBiasesKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_matrix_accumulate_biases_kernel_8cpp_source.xhtml#l00079">CLGEMMMatrixAccumulateBiasesKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_matrix_vector_multiply_kernel_8cpp_source.xhtml#l00083">CLGEMMMatrixVectorMultiplyKernel::configure()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_reshape_weights_kernel_8cpp_source.xhtml#l00088">CLDepthwiseConvolutionLayerReshapeWeightsKernel::configure()</a>, <a class="el" href="_c_l_dequantization_layer_kernel_8cpp_source.xhtml#l00077">CLDequantizationLayerKernel::configure()</a>, <a class="el" href="_c_l_min_max_layer_kernel_8cpp_source.xhtml#l00088">CLMinMaxLayerKernel::configure()</a>, <a class="el" href="_c_l_floor_kernel_8cpp_source.xhtml#l00079">CLFloorKernel::configure()</a>, <a class="el" href="_c_l_flatten_layer_kernel_8cpp_source.xhtml#l00083">CLFlattenLayerKernel::configure()</a>, <a class="el" href="_c_l_copy_kernel_8cpp_source.xhtml#l00157">CLCopyKernel::configure()</a>, <a class="el" href="_c_l_gaussian_pyramid_kernel_8cpp_source.xhtml#l00044">CLGaussianPyramidHorKernel::configure()</a>, <a class="el" href="_c_l_reverse_kernel_8cpp_source.xhtml#l00065">CLReverseKernel::configure()</a>, <a class="el" href="_c_l_channel_shuffle_layer_kernel_8cpp_source.xhtml#l00092">CLChannelShuffleLayerKernel::configure()</a>, <a class="el" href="_c_l_histogram_kernel_8cpp_source.xhtml#l00053">CLHistogramKernel::configure()</a>, <a class="el" href="_c_l_normalization_layer_kernel_8cpp_source.xhtml#l00107">CLNormalizationLayerKernel::configure()</a>, <a class="el" href="_c_l_batch_to_space_layer_kernel_8cpp_source.xhtml#l00085">CLBatchToSpaceLayerKernel::configure()</a>, <a class="el" href="_c_l_space_to_depth_layer_kernel_8cpp_source.xhtml#l00068">CLSpaceToDepthLayerKernel::configure()</a>, <a class="el" href="_c_l_depth_to_space_layer_kernel_8cpp_source.xhtml#l00067">CLDepthToSpaceLayerKernel::configure()</a>, <a class="el" href="_c_l_canny_edge_kernel_8cpp_source.xhtml#l00040">CLGradientKernel::configure()</a>, <a class="el" href="_c_l_generate_proposals_layer_kernel_8cpp_source.xhtml#l00073">CLComputeAllAnchorsKernel::configure()</a>, <a class="el" href="_c_l_min_max_location_kernel_8cpp_source.xhtml#l00062">CLMinMaxKernel::configure()</a>, <a class="el" href="_c_l_reorg_layer_kernel_8cpp_source.xhtml#l00072">CLReorgLayerKernel::configure()</a>, <a class="el" href="_c_l_gather_kernel_8cpp_source.xhtml#l00089">CLGatherKernel::configure()</a>, <a class="el" href="_c_l_space_to_batch_layer_kernel_8cpp_source.xhtml#l00091">CLSpaceToBatchLayerKernel::configure()</a>, <a class="el" href="_c_l_upsample_layer_kernel_8cpp_source.xhtml#l00066">CLUpsampleLayerKernel::configure()</a>, <a class="el" href="_c_l_tile_kernel_8cpp_source.xhtml#l00069">CLTileKernel::configure()</a>, <a class="el" href="_c_l_depthwise_convolution_layer3x3_n_c_h_w_kernel_8cpp_source.xhtml#l00244">CLDepthwiseConvolutionLayer3x3NCHWKernel::configure()</a>, <a class="el" href="_c_l_derivative_kernel_8cpp_source.xhtml#l00050">CLDerivativeKernel::configure()</a>, <a class="el" href="_g_c_pooling_layer_kernel_8cpp_source.xhtml#l00226">GCPoolingLayerKernel::configure()</a>, <a class="el" href="_c_l_activation_layer_kernel_8cpp_source.xhtml#l00122">CLActivationLayerKernel::configure()</a>, <a class="el" href="_g_c_pixel_wise_multiplication_kernel_8cpp_source.xhtml#l00047">GCPixelWiseMultiplicationKernel::configure()</a>, <a class="el" href="_c_l_comparison_kernel_8cpp_source.xhtml#l00108">CLComparisonKernel::configure()</a>, <a class="el" href="_c_l_mean_std_dev_normalization_kernel_8cpp_source.xhtml#l00085">CLMeanStdDevNormalizationKernel::configure()</a>, <a class="el" href="_c_l_memset_kernel_8cpp_source.xhtml#l00042">CLMemsetKernel::configure()</a>, <a class="el" href="_c_l_permute_kernel_8cpp_source.xhtml#l00078">CLPermuteKernel::configure()</a>, <a class="el" href="_c_l_f_f_t_scale_kernel_8cpp_source.xhtml#l00078">CLFFTScaleKernel::configure()</a>, <a class="el" href="_c_l_sobel3x3_kernel_8cpp_source.xhtml#l00050">CLSobel3x3Kernel::configure()</a>, <a class="el" href="_c_l_depth_convert_layer_kernel_8cpp_source.xhtml#l00074">CLDepthConvertLayerKernel::configure()</a>, <a class="el" href="_c_l_depthwise_convolution_layer3x3_n_h_w_c_kernel_8cpp_source.xhtml#l00197">CLDepthwiseConvolutionLayer3x3NHWCKernel::configure()</a>, <a class="el" href="_g_c_depthwise_convolution_layer3x3_kernel_8cpp_source.xhtml#l00051">GCDepthwiseConvolutionLayer3x3Kernel::configure()</a>, <a class="el" href="_g_c_g_e_m_m_matrix_addition_kernel_8cpp_source.xhtml#l00043">GCGEMMMatrixAdditionKernel::configure()</a>, <a class="el" href="_c_l_h_o_g_descriptor_kernel_8cpp_source.xhtml#l00048">CLHOGOrientationBinningKernel::configure()</a>, <a class="el" href="_g_c_normalization_layer_kernel_8cpp_source.xhtml#l00049">GCNormalizationLayerKernel::configure()</a>, <a class="el" href="_c_l_f_f_t_digit_reverse_kernel_8cpp_source.xhtml#l00075">CLFFTDigitReverseKernel::configure()</a>, <a class="el" href="_c_l_fill_border_kernel_8cpp_source.xhtml#l00062">CLFillBorderKernel::configure()</a>, <a class="el" href="_c_l_normalize_planar_y_u_v_layer_kernel_8cpp_source.xhtml#l00098">CLNormalizePlanarYUVLayerKernel::configure()</a>, <a class="el" href="_c_l_pixel_wise_multiplication_kernel_8cpp_source.xhtml#l00149">CLPixelWiseMultiplicationKernel::configure()</a>, <a class="el" href="_c_l_pooling_layer_kernel_8cpp_source.xhtml#l00177">CLPoolingLayerKernel::configure()</a>, <a class="el" href="_c_l_quantization_layer_kernel_8cpp_source.xhtml#l00081">CLQuantizationLayerKernel::configure()</a>, <a class="el" href="_c_l_sobel5x5_kernel_8cpp_source.xhtml#l00050">CLSobel5x5HorKernel::configure()</a>, <a class="el" href="_c_l_sobel7x7_kernel_8cpp_source.xhtml#l00050">CLSobel7x7HorKernel::configure()</a>, <a class="el" href="_c_l_width_concatenate2_tensors_kernel_8cpp_source.xhtml#l00097">CLWidthConcatenate2TensorsKernel::configure()</a>, <a class="el" href="_g_c_fill_border_kernel_8cpp_source.xhtml#l00060">GCFillBorderKernel::configure()</a>, <a class="el" href="_c_l_height_concatenate_layer_kernel_8cpp_source.xhtml#l00092">CLHeightConcatenateLayerKernel::configure()</a>, <a class="el" href="_g_c_normalize_planar_y_u_v_layer_kernel_8cpp_source.xhtml#l00094">GCNormalizePlanarYUVLayerKernel::configure()</a>, <a class="el" href="_c_l_instance_normalization_layer_kernel_8cpp_source.xhtml#l00078">CLInstanceNormalizationLayerKernel::configure()</a>, <a class="el" href="_c_l_pad_layer_kernel_8cpp_source.xhtml#l00098">CLPadLayerKernel::configure()</a>, <a class="el" href="_c_l_prior_box_layer_kernel_8cpp_source.xhtml#l00103">CLPriorBoxLayerKernel::configure()</a>, <a class="el" href="_c_l_crop_kernel_8cpp_source.xhtml#l00049">CLCropKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_matrix_multiply_native_kernel_8cpp_source.xhtml#l00173">CLGEMMLowpMatrixMultiplyNativeKernel::configure()</a>, <a class="el" href="_c_l_width_concatenate_layer_kernel_8cpp_source.xhtml#l00093">CLWidthConcatenateLayerKernel::configure()</a>, <a class="el" href="_g_c_absolute_difference_kernel_8cpp_source.xhtml#l00047">GCAbsoluteDifferenceKernel::configure()</a>, <a class="el" href="_g_c_g_e_m_m_transpose1x_w_kernel_8cpp_source.xhtml#l00041">GCGEMMTranspose1xWKernel::configure()</a>, <a class="el" href="_c_l_l2_normalize_layer_kernel_8cpp_source.xhtml#l00098">CLL2NormalizeLayerKernel::configure()</a>, <a class="el" href="_c_l_magnitude_phase_kernel_8cpp_source.xhtml#l00046">CLMagnitudePhaseKernel::configure()</a>, <a class="el" href="_c_l_color_convert_kernel_8cpp_source.xhtml#l00048">CLColorConvertKernel::configure()</a>, <a class="el" href="_c_l_range_kernel_8cpp_source.xhtml#l00093">CLRangeKernel::configure()</a>, <a class="el" href="_c_l_reduction_operation_kernel_8cpp_source.xhtml#l00137">CLReductionOperationKernel::configure()</a>, <a class="el" href="_c_l_bounding_box_transform_kernel_8cpp_source.xhtml#l00090">CLBoundingBoxTransformKernel::configure()</a>, <a class="el" href="_c_l_width_concatenate4_tensors_kernel_8cpp_source.xhtml#l00115">CLWidthConcatenate4TensorsKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_reshape_r_h_s_matrix_kernel_8cpp_source.xhtml#l00102">CLGEMMReshapeRHSMatrixKernel::configure()</a>, <a class="el" href="_g_c_arithmetic_addition_kernel_8cpp_source.xhtml#l00091">GCArithmeticAdditionKernel::configure()</a>, <a class="el" href="_c_l_f_f_t_radix_stage_kernel_8cpp_source.xhtml#l00085">CLFFTRadixStageKernel::configure()</a>, <a class="el" href="_c_l_select_kernel_8cpp_source.xhtml#l00105">CLSelectKernel::configure()</a>, <a class="el" href="_c_l_convert_fully_connected_weights_kernel_8cpp_source.xhtml#l00040">CLConvertFullyConnectedWeightsKernel::configure()</a>, <a class="el" href="_c_l_batch_concatenate_layer_kernel_8cpp_source.xhtml#l00087">CLBatchConcatenateLayerKernel::configure()</a>, <a class="el" href="_c_l_depth_concatenate_layer_kernel_8cpp_source.xhtml#l00085">CLDepthConcatenateLayerKernel::configure()</a>, <a class="el" href="_g_c_batch_normalization_layer_kernel_8cpp_source.xhtml#l00139">GCBatchNormalizationLayerKernel::configure()</a>, <a class="el" href="_c_l_stack_layer_kernel_8cpp_source.xhtml#l00083">CLStackLayerKernel::configure()</a>, <a class="el" href="_g_c_activation_layer_kernel_8cpp_source.xhtml#l00047">GCActivationLayerKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_reshape_l_h_s_matrix_kernel_8cpp_source.xhtml#l00121">CLGEMMReshapeLHSMatrixKernel::configure()</a>, <a class="el" href="_g_c_depth_concatenate_layer_kernel_8cpp_source.xhtml#l00044">GCDepthConcatenateLayerKernel::configure()</a>, <a class="el" href="_c_l_integral_image_kernel_8cpp_source.xhtml#l00085">CLIntegralImageVertKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_matrix_multiply_reshaped_only_r_h_s_kernel_8cpp_source.xhtml#l00173">CLGEMMLowpMatrixMultiplyReshapedOnlyRHSKernel::configure()</a>, <a class="el" href="_c_l_winograd_input_transform_kernel_8cpp_source.xhtml#l00111">CLWinogradInputTransformKernel::configure()</a>, <a class="el" href="_c_l_y_o_l_o_layer_kernel_8cpp_source.xhtml#l00103">CLYOLOLayerKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_matrix_multiply_native_kernel_8cpp_source.xhtml#l00213">CLGEMMMatrixMultiplyNativeKernel::configure()</a>, <a class="el" href="_c_l_fuse_batch_normalization_kernel_8cpp_source.xhtml#l00107">CLFuseBatchNormalizationKernel::configure()</a>, <a class="el" href="_c_l_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00073">CLROIPoolingLayerKernel::configure()</a>, <a class="el" href="_g_c_softmax_layer_kernel_8cpp_source.xhtml#l00107">GCLogits1DShiftExpSumKernel::configure()</a>, <a class="el" href="_c_l_winograd_filter_transform_kernel_8cpp_source.xhtml#l00102">CLWinogradFilterTransformKernel::configure()</a>, <a class="el" href="_c_l_batch_normalization_layer_kernel_8cpp_source.xhtml#l00139">CLBatchNormalizationLayerKernel::configure()</a>, <a class="el" href="_c_l_r_o_i_align_layer_kernel_8cpp_source.xhtml#l00105">CLROIAlignLayerKernel::configure()</a>, <a class="el" href="_g_c_dropout_layer_kernel_8cpp_source.xhtml#l00048">GCDropoutLayerKernel::configure()</a>, <a class="el" href="_g_c_g_e_m_m_matrix_multiply_kernel_8cpp_source.xhtml#l00185">GCGEMMMatrixMultiplyKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00168">CLGEMMLowpMatrixMultiplyReshapedKernel::configure()</a>, <a class="el" href="_c_l_harris_corners_kernel_8cpp_source.xhtml#l00054">CLHarrisScoreKernel::configure()</a>, <a class="el" href="_c_l_strided_slice_kernel_8cpp_source.xhtml#l00100">CLStridedSliceKernel::configure()</a>, <a class="el" href="_c_l_arg_min_max_layer_kernel_8cpp_source.xhtml#l00117">CLArgMinMaxLayerKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_matrix_multiply_reshaped_only_r_h_s_kernel_8cpp_source.xhtml#l00216">CLGEMMMatrixMultiplyReshapedOnlyRHSKernel::configure()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_native_kernel_8cpp_source.xhtml#l00194">CLDepthwiseConvolutionLayerNativeKernel::configure()</a>, <a class="el" href="_c_l_fast_corners_kernel_8cpp_source.xhtml#l00050">CLFastCornersKernel::configure()</a>, <a class="el" href="_c_l_winograd_output_transform_kernel_8cpp_source.xhtml#l00138">CLWinogradOutputTransformKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_matrix_multiply_kernel_8cpp_source.xhtml#l00305">CLGEMMMatrixMultiplyKernel::configure()</a>, <a class="el" href="_c_l_h_o_g_detector_kernel_8cpp_source.xhtml#l00044">CLHOGDetectorKernel::configure()</a>, <a class="el" href="_g_c_g_e_m_m_interleave4x4_kernel_8cpp_source.xhtml#l00044">GCGEMMInterleave4x4Kernel::configure()</a>, <a class="el" href="_c_l_direct_convolution_layer_kernel_8cpp_source.xhtml#l00424">CLDirectConvolutionLayerKernel::configure()</a>, <a class="el" href="_c_l_deconvolution_reshape_output_kernel_8cpp_source.xhtml#l00115">CLDeconvolutionReshapeOutputKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_quantize_down_int32_to_int8_scale_by_fixed_point_kernel_8cpp_source.xhtml#l00118">CLGEMMLowpQuantizeDownInt32ToInt8ScaleByFixedPointKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_quantize_down_int32_to_uint8_scale_by_fixed_point_kernel_8cpp_source.xhtml#l00118">CLGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_offset_contribution_kernel_8cpp_source.xhtml#l00145">CLGEMMLowpOffsetContributionKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_offset_contribution_output_stage_kernel_8cpp_source.xhtml#l00196">CLGEMMLowpOffsetContributionOutputStageKernel::configure()</a>, <a class="el" href="_g_c_tensor_shift_kernel_8cpp_source.xhtml#l00045">GCTensorShiftKernel::configure()</a>, <a class="el" href="_c_l_col2_im_kernel_8cpp_source.xhtml#l00091">CLCol2ImKernel::configure()</a>, <a class="el" href="_g_c_weights_reshape_kernel_8cpp_source.xhtml#l00046">GCWeightsReshapeKernel::configure()</a>, <a class="el" href="_g_c_col2_im_kernel_8cpp_source.xhtml#l00044">GCCol2ImKernel::configure()</a>, <a class="el" href="_g_c_im2_col_kernel_8cpp_source.xhtml#l00067">GCIm2ColKernel::configure()</a>, <a class="el" href="_c_l_weights_reshape_kernel_8cpp_source.xhtml#l00079">CLWeightsReshapeKernel::configure()</a>, <a class="el" href="_c_l_im2_col_kernel_8cpp_source.xhtml#l00295">CLIm2ColKernel::configure()</a>, <a class="el" href="_c_l_histogram_kernel_8cpp_source.xhtml#l00158">CLHistogramBorderKernel::configure()</a>, <a class="el" href="_c_l_gaussian_pyramid_kernel_8cpp_source.xhtml#l00150">CLGaussianPyramidVertKernel::configure()</a>, <a class="el" href="_c_l_canny_edge_kernel_8cpp_source.xhtml#l00120">CLEdgeNonMaxSuppressionKernel::configure()</a>, <a class="el" href="_c_l_h_o_g_descriptor_kernel_8cpp_source.xhtml#l00139">CLHOGBlockNormalizationKernel::configure()</a>, <a class="el" href="_g_c_softmax_layer_kernel_8cpp_source.xhtml#l00201">GCLogits1DNormKernel::configure()</a>, <a class="el" href="_c_l_sobel5x5_kernel_8cpp_source.xhtml#l00148">CLSobel5x5VertKernel::configure()</a>, <a class="el" href="_c_l_sobel7x7_kernel_8cpp_source.xhtml#l00150">CLSobel7x7VertKernel::configure()</a>, <a class="el" href="_c_l_fast_corners_kernel_8cpp_source.xhtml#l00133">CLCopyToArrayKernel::configure()</a>, <a class="el" href="_c_l_softmax_layer_kernel_8cpp_source.xhtml#l00220">CLLogits1DMaxShiftExpSumKernel::configure()</a>, <a class="el" href="_c_l_canny_edge_kernel_8cpp_source.xhtml#l00194">CLEdgeTraceKernel::configure()</a>, <a class="el" href="_c_l_convolution_kernel_8cpp_source.xhtml#l00281">CLConvolutionRectangleKernel::configure()</a>, <a class="el" href="_c_l_softmax_layer_kernel_8cpp_source.xhtml#l00343">CLLogits1DNormKernel::configure()</a>, <a class="el" href="_c_l_kernel_library_8cpp_source.xhtml#l01078">CLKernelLibrary::create_kernel()</a>, <a class="el" href="_range_dataset_8h_source.xhtml#l00087">RangeDataset&lt; T &gt;::iterator::description()</a>, <a class="el" href="_singleton_dataset_8h_source.xhtml#l00094">SingletonDataset&lt; T &gt;::iterator::description()</a>, <a class="el" href="_container_dataset_8h_source.xhtml#l00101">ContainerDataset&lt; T &gt;::iterator::description()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00154">arm_compute::utils::get_typestring()</a>, <a class="el" href="tests_2_utils_8h_source.xhtml#l00738">arm_compute::test::get_typestring()</a>, <a class="el" href="tests_2framework_2_utils_8h_source.xhtml#l00136">arm_compute::test::join()</a>, <a class="el" href="main_8cpp_source.xhtml#l00093">main()</a>, <a class="el" href="_open_c_l_timer_8cpp_source.xhtml#l00184">OpenCLClock&lt; output_timestamps &gt;::measurements()</a>, <a class="el" href="_mali_counter_8cpp_source.xhtml#l00423">MaliCounter::measurements()</a>, <a class="el" href="_scheduler_timer_8cpp_source.xhtml#l00207">SchedulerClock&lt; output_timestamps &gt;::measurements()</a>, <a class="el" href="_size2_d_8h_source.xhtml#l00068">Size2D::to_string()</a>, <a class="el" href="utils_2_type_printer_8h_source.xhtml#l02300">arm_compute::to_string()</a>, and <a class="el" href="_c_l_tuner_8cpp_source.xhtml#l00077">CLTuner::tune_kernel_dynamic()</a>.</p>

</div>
</div>
<a id="aae1437f4a38c4ada64e7a2586aa35bf8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aae1437f4a38c4ada64e7a2586aa35bf8">&#9670;&nbsp;</a></span>to_string() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::support::cpp11::to_string </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_toolchain_support_8h_source.xhtml#l00393">393</a> of file <a class="el" href="_toolchain_support_8h_source.xhtml">ToolchainSupport.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;{</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    std::stringstream str;</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    str &lt;&lt; std::boolalpha &lt;&lt; value;</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ae04d407202e3d50ce6a4c79ac00a5d59"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae04d407202e3d50ce6a4c79ac00a5d59">&#9670;&nbsp;</a></span>trunc()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T arm_compute::support::cpp11::trunc </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Truncate floating-point value. </p>
<dl class="section note"><dt>Note</dt><dd>This function implements the same behaviour as std::truncate except that it doesn't support Integral type. The latter is not in the namespace std in some Android toolchains.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>floating-point value to be truncated.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Floating-point value of truncated <code>value</code>. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_toolchain_support_8h_source.xhtml#l00333">333</a> of file <a class="el" href="_toolchain_support_8h_source.xhtml">ToolchainSupport.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;{</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ae04d407202e3d50ce6a4c79ac00a5d59">std::trunc</a>(value);</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_ae04d407202e3d50ce6a4c79ac00a5d59"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ae04d407202e3d50ce6a4c79ac00a5d59">arm_compute::support::cpp11::trunc</a></div><div class="ttdeci">T trunc(T value)</div><div class="ttdoc">Truncate floating-point value.</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00333">ToolchainSupport.h:333</a></div></div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="tests_2validation_2reference_2_utils_8h_source.xhtml#l00098">arm_compute::test::validation::apply_2d_spatial_filter()</a>, and <a class="el" href="_file_printer_8cpp_source.xhtml#l00028">FilePrinter::FilePrinter()</a>.</p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1support.xhtml">support</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml">cpp11</a></li>
    <li class="footer">Generated on Fri Feb 21 2020 11:10:32 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
