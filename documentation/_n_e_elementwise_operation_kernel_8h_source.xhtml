<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute/core/NEON/kernels/NEElementwiseOperationKernel.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('_n_e_elementwise_operation_kernel_8h_source.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">NEElementwiseOperationKernel.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_n_e_elementwise_operation_kernel_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2018-2020 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_NEELEMENTWISEOPERATIONKERNEL_H</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define ARM_COMPUTE_NEELEMENTWISEOPERATIONKERNEL_H</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_n_e_kernel_8h.xhtml">arm_compute/core/NEON/INEKernel.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_types_8h.xhtml">arm_compute/core/Types.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;{</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword">class </span>ITensor;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment">/** Interface for an element-wise operation kernel</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment"> * Element-wise operation is computed by:</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment"> * @f[ output(x,y) = OP(input1(x,y), input2(x,y))@f]</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00040"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_n_e_elementwise_operation_kernel.xhtml">   40</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1_n_e_elementwise_operation_kernel.xhtml">NEElementwiseOperationKernel</a> : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1_i_c_p_p_kernel.xhtml">INEKernel</a></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00043"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_n_e_elementwise_operation_kernel.xhtml#ab5656bb5b6334bdbe6e606c715872828">   43</a></span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="classarm__compute_1_1_n_e_elementwise_operation_kernel.xhtml#ab5656bb5b6334bdbe6e606c715872828">name</a>()<span class="keyword"> const override</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        <span class="keywordflow">return</span> <span class="stringliteral">&quot;NEElementwiseOperationKernel&quot;</span>;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment">    /** Default constructor */</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <a class="code" href="classarm__compute_1_1_n_e_elementwise_operation_kernel.xhtml#accf25709b8d911f24214eaf7eecf30ae">NEElementwiseOperationKernel</a>();<span class="comment"></span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment">    /** Prevent instances of this class from being copied (As this class contains pointers) */</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <a class="code" href="classarm__compute_1_1_n_e_elementwise_operation_kernel.xhtml#accf25709b8d911f24214eaf7eecf30ae">NEElementwiseOperationKernel</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_n_e_elementwise_operation_kernel.xhtml">NEElementwiseOperationKernel</a> &amp;) = <span class="keyword">delete</span>;<span class="comment"></span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment">    /** Prevent instances of this class from being copied (As this class contains pointers) */</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <a class="code" href="classarm__compute_1_1_n_e_elementwise_operation_kernel.xhtml">NEElementwiseOperationKernel</a> &amp;<a class="code" href="classarm__compute_1_1_n_e_elementwise_operation_kernel.xhtml#a8cd25f359e632367671a50a5c894689b">operator=</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_n_e_elementwise_operation_kernel.xhtml">NEElementwiseOperationKernel</a> &amp;) = <span class="keyword">delete</span>;<span class="comment"></span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment">    /** Allow instances of this class to be moved */</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <a class="code" href="classarm__compute_1_1_n_e_elementwise_operation_kernel.xhtml#accf25709b8d911f24214eaf7eecf30ae">NEElementwiseOperationKernel</a>(<a class="code" href="classarm__compute_1_1_n_e_elementwise_operation_kernel.xhtml">NEElementwiseOperationKernel</a> &amp;&amp;) = <span class="keywordflow">default</span>;<span class="comment"></span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment">    /** Allow instances of this class to be moved */</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <a class="code" href="classarm__compute_1_1_n_e_elementwise_operation_kernel.xhtml">NEElementwiseOperationKernel</a> &amp;<a class="code" href="classarm__compute_1_1_n_e_elementwise_operation_kernel.xhtml#a8cd25f359e632367671a50a5c894689b">operator=</a>(<a class="code" href="classarm__compute_1_1_n_e_elementwise_operation_kernel.xhtml">NEElementwiseOperationKernel</a> &amp;&amp;) = <span class="keywordflow">default</span>;<span class="comment"></span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment">    /** Default destructor */</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <a class="code" href="classarm__compute_1_1_n_e_elementwise_operation_kernel.xhtml#a64919a3d8616028caff9cc55c995e638">~NEElementwiseOperationKernel</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="comment">// Inherited methods overridden:</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_n_e_elementwise_operation_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">run</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>) <span class="keyword">override</span>;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment">    /** Common signature for all the specialised arithmetic functions</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment">     * @param[in] input1 First tensor input. Data types supported: QASYMM8/S16/F16/S32/F32.</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment">     * @param[in] input2 Second tensor input. Data types supported: Same as @p input1.</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment">     * @param[in] output Output tensor. Data types supported: Dependent on subclass.</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment">     * @param[in] window Region on which to execute the kernel.</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00070"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_n_e_elementwise_operation_kernel.xhtml#aa5fcf9ebe19c4a2282c79ced2ac72096">   70</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="classarm__compute_1_1_n_e_elementwise_operation_kernel.xhtml#aa5fcf9ebe19c4a2282c79ced2ac72096">ElementwiseFunction</a> = void(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input2, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>);</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="keyword">protected</span>:<span class="comment"></span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment">    /** Validate the argument passed to the kernel</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment">     * @param[in] input1 First tensor input. Data types supported: QASYMM8/S16/F16/S32/F32.</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment">     * @param[in] input2 Second tensor input. Data types supported: Same as @p input1.</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment">     * @param[in] output Output tensor. Data types supported: Dependent on subclass.</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keyword">static</span> <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> validate_arguments_common(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input2, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;output);</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment">    /** Commmon configure function for element-wise operators with no additional options (e.g. Min, Max, SquaredDiff)</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keywordtype">void</span> configure_common(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input2, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output);</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment">    /** Function to use for the particular tensor types passed to configure() */</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    std::function&lt;void(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input2, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>)&gt; _function;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *_input1;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *_input2;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>       *_output;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;};</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_n_e_arithmetic_operation_kernel.xhtml">   94</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1_n_e_arithmetic_operation_kernel.xhtml">NEArithmeticOperationKernel</a> : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1_n_e_elementwise_operation_kernel.xhtml">NEElementwiseOperationKernel</a></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;{</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment">    /** Default constructor */</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <a class="code" href="classarm__compute_1_1_n_e_arithmetic_operation_kernel.xhtml#a2f102d09a50ed7a0f75e242f7ca53b68">NEArithmeticOperationKernel</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment">    /** Static function to check if given info will lead to a valid configuration of @ref NEArithmeticOperationKernel</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment">     * @param[in] op     Arithmetic operation to be executed.</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment">     * @param[in] input1 First tensor input. Data types supported: QASYMM8/S16/F16/S32/F32.</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment">     * @param[in] input2 Second tensor input. Data types supported: Same as @p input1.</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">     * @param[in] output Output tensor. Data types supported: Same as @p input1.</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_n_e_arithmetic_operation_kernel.xhtml#ada5fe786261e1a1a8e84d1cd6ec557a5">configure</a>(<a class="code" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8ae">ArithmeticOperation</a> op, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input2, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output);</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment">    /** Static function to check if given info will lead to a valid configuration of @ref NEArithmeticOperationKernel</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment">     * @param[in] op     Arithmetic operation to be executed.</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment">     * @param[in] input1 First tensor input info. Data types supported: QASYMM8/S16/F16/S32/F32.</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment">     * @param[in] input2 Second tensor input info. Data types supported: Same as @p input1.</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment">     * @param[in] output Output tensor info. Data types supported: Same as @p input1.</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment">     * @return a Status</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="keyword">static</span> <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="classarm__compute_1_1_n_e_arithmetic_operation_kernel.xhtml#a52095bfe8f4fc368d3ec84a8dac4d616">validate</a>(<a class="code" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8ae">ArithmeticOperation</a> op, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input2, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *output);</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="keyword">protected</span>:</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="comment">// Inherited methods overridden:</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keyword">static</span> <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> validate_arguments(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input2, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;output);</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;};</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00125"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_n_e_division_operation_kernel.xhtml">  125</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1_n_e_division_operation_kernel.xhtml">NEDivisionOperationKernel</a> : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1_n_e_arithmetic_operation_kernel.xhtml">NEArithmeticOperationKernel</a></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;{</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment">    /** Default constructor */</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <a class="code" href="classarm__compute_1_1_n_e_division_operation_kernel.xhtml#afc96fa047235667233e73836c97aa774">NEDivisionOperationKernel</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment">    /** Static function to check if given info will lead to a valid configuration of @ref NEArithmeticOperationKernel</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment">     * @param[in] input1 First tensor input. Data types supported: F16/F32.</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment">     * @param[in] input2 Second tensor input. Data types supported: Same as @p input1.</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment">     * @param[in] output Output tensor. Data types supported: Same as @p input1.</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_n_e_division_operation_kernel.xhtml#a837b139cf977a6c4530e3d574fcceef2">configure</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input2, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output);</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment">    /** Static function to check if given info will lead to a valid configuration of @ref NEArithmeticOperationKernel</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment">     * @param[in] input1 First tensor input info. Data types supported: F16/F32.</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="comment">     * @param[in] input2 Second tensor input info. Data types supported: Same as @p input1.</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment">     * @param[in] output Output tensor info. Data types supported: Same as @p input1.</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment">     * @return a Status</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keyword">static</span> <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="classarm__compute_1_1_n_e_division_operation_kernel.xhtml#afe71126bef1735fe1613a6da30d2c0c4">validate</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input2, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *output);</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="keyword">protected</span>:</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="comment">// Inherited methods overridden:</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="keyword">static</span> <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> validate_arguments(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input2, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;output);</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;};</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00154"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_n_e_power_operation_kernel.xhtml">  154</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1_n_e_power_operation_kernel.xhtml">NEPowerOperationKernel</a> : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1_n_e_arithmetic_operation_kernel.xhtml">NEArithmeticOperationKernel</a></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;{</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment">    /** Default constructor */</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <a class="code" href="classarm__compute_1_1_n_e_power_operation_kernel.xhtml#a8fa201bf255c597c74656ebba8f9ac44">NEPowerOperationKernel</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment">    /** Static function to check if given info will lead to a valid configuration of @ref NEArithmeticOperationKernel</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="comment">     * @param[in]  input1 First tensor input. Data types supported: F16/F32.</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="comment">     * @param[in]  input2 Second tensor input. Data types supported: Same as @p input1.</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="comment">     * @param[out] output Output tensor. Data types supported: Same as @p input1.</span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_n_e_power_operation_kernel.xhtml#a837b139cf977a6c4530e3d574fcceef2">configure</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input2, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output);</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment">    /** Static function to check if given info will lead to a valid configuration of @ref NEArithmeticOperationKernel</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment">     * @param[in]  input1 First tensor input info. Data types supported: F16/F32.</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment">     * @param[in]  input2 Second tensor input info. Data types supported: Same as @p input1.</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="comment">     * @param[out] output Output tensor info. Data types supported: Same as @p input1.</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="comment">     * @return a Status</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="keyword">static</span> <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="classarm__compute_1_1_n_e_power_operation_kernel.xhtml#afe71126bef1735fe1613a6da30d2c0c4">validate</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input2, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *output);</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="keyword">protected</span>:</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <span class="comment">// Inherited methods overridden:</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <span class="keyword">static</span> <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> validate_arguments(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input2, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;output);</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;};</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div><div class="line"><a name="l00183"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_n_e_comparison_operation_kernel.xhtml">  183</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1_n_e_comparison_operation_kernel.xhtml">NEComparisonOperationKernel</a> : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1_n_e_elementwise_operation_kernel.xhtml">NEElementwiseOperationKernel</a></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;{</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="comment">    /** Default constructor */</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <a class="code" href="classarm__compute_1_1_n_e_comparison_operation_kernel.xhtml#ade3c44c85aeecbf179e0327c9856c39e">NEComparisonOperationKernel</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment">    /** Static function to check if given info will lead to a valid configuration of @ref NEComparisonOperationKernel</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="comment">     * @param[in] op     Comparison operation to be executed.</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="comment">     * @param[in] input1 First tensor input. Data types supported: QASYMM8/QASYMM8_SIGNED/S16/F16/S32/F32.</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="comment">     * @param[in] input2 Second tensor input. Data types supported: Same as @p input1.</span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="comment">     * @param[in] output Output tensor. Data types supported: U16/U32.</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_n_e_comparison_operation_kernel.xhtml#a800127190e2c741812159a46f38600ef">configure</a>(<a class="code" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58c">ComparisonOperation</a> op, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input2, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output);</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="comment">    /** Static function to check if given info will lead to a valid configuration of @ref NEComparisonOperationKernel</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="comment">     * @param[in] op     Comparison operation to be executed.</span></div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="comment">     * @param[in] input1 First tensor input info. Data types supported: QASYMM8/QASYMM8_SIGNED/S16/F16/S32/F32.</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="comment">     * @param[in] input2 Second tensor input info. Data types supported: Same as @p input1.</span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="comment">     * @param[in] output Output tensor info. Data types supported: U16/U32.</span></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="comment">     * @return a Status</span></div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keyword">static</span> <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="classarm__compute_1_1_n_e_comparison_operation_kernel.xhtml#aa4dc6e8191da7608f894b446ee19b6b3">validate</a>(<a class="code" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58c">ComparisonOperation</a> op, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input2, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *output);</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="keyword">protected</span>:</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <span class="comment">// Inherited methods overridden:</span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <span class="keyword">static</span> <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> validate_arguments(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input2, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;output);</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;};</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_NEELEMENTWISEOPERATIONKERNEL_H */</span><span class="preprocessor"></span></div><div class="ttc" id="classarm__compute_1_1_n_e_comparison_operation_kernel_xhtml_ade3c44c85aeecbf179e0327c9856c39e"><div class="ttname"><a href="classarm__compute_1_1_n_e_comparison_operation_kernel.xhtml#ade3c44c85aeecbf179e0327c9856c39e">arm_compute::NEComparisonOperationKernel::NEComparisonOperationKernel</a></div><div class="ttdeci">NEComparisonOperationKernel()=default</div><div class="ttdoc">Default constructor.</div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_elementwise_operation_kernel_xhtml_a8cd25f359e632367671a50a5c894689b"><div class="ttname"><a href="classarm__compute_1_1_n_e_elementwise_operation_kernel.xhtml#a8cd25f359e632367671a50a5c894689b">arm_compute::NEElementwiseOperationKernel::operator=</a></div><div class="ttdeci">NEElementwiseOperationKernel &amp; operator=(const NEElementwiseOperationKernel &amp;)=delete</div><div class="ttdoc">Prevent instances of this class from being copied (As this class contains pointers)</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23d9f0c01c9e120dfb828ee922b7a8ae"><div class="ttname"><a href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8ae">arm_compute::ArithmeticOperation</a></div><div class="ttdeci">ArithmeticOperation</div><div class="ttdoc">Available element-wise operations.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00508">Types.h:508</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_kernel_xhtml_ad34a46f53686c12a5c5e717cc9617fb6"><div class="ttname"><a href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">arm_compute::IKernel::window</a></div><div class="ttdeci">const Window &amp; window() const</div><div class="ttdoc">The maximum window the kernel can be executed on.</div><div class="ttdef"><b>Definition:</b> <a href="_i_kernel_8cpp_source.xhtml#l00028">IKernel.cpp:28</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_elementwise_operation_kernel_xhtml_ab5656bb5b6334bdbe6e606c715872828"><div class="ttname"><a href="classarm__compute_1_1_n_e_elementwise_operation_kernel.xhtml#ab5656bb5b6334bdbe6e606c715872828">arm_compute::NEElementwiseOperationKernel::name</a></div><div class="ttdeci">const char * name() const override</div><div class="ttdoc">Name of the kernel.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_elementwise_operation_kernel_8h_source.xhtml#l00043">NEElementwiseOperationKernel.h:43</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_p_p_kernel_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_c_p_p_kernel.xhtml">arm_compute::ICPPKernel</a></div><div class="ttdoc">Common interface for all kernels implemented in C++.</div><div class="ttdef"><b>Definition:</b> <a href="_i_c_p_p_kernel_8h_source.xhtml#l00035">ICPPKernel.h:35</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_elementwise_operation_kernel_xhtml_a112b35dd205c62ea6ed1447ef226da82"><div class="ttname"><a href="classarm__compute_1_1_n_e_elementwise_operation_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">arm_compute::NEElementwiseOperationKernel::run</a></div><div class="ttdeci">void run(const Window &amp;window, const ThreadInfo &amp;info) override</div><div class="ttdoc">Execute the kernel on the passed window.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_elementwise_operation_kernel_8cpp_source.xhtml#l01125">NEElementwiseOperationKernel.cpp:1125</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a></div><div class="ttdoc">Store the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_info_8h_source.xhtml#l00040">ITensorInfo.h:40</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_division_operation_kernel_xhtml_afe71126bef1735fe1613a6da30d2c0c4"><div class="ttname"><a href="classarm__compute_1_1_n_e_division_operation_kernel.xhtml#afe71126bef1735fe1613a6da30d2c0c4">arm_compute::NEDivisionOperationKernel::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *input1, const ITensorInfo *input2, const ITensorInfo *output)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of NEArithmeticOperationKer...</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_elementwise_operation_kernel_8cpp_source.xhtml#l01192">NEElementwiseOperationKernel.cpp:1192</a></div></div>
<div class="ttc" id="classarm__compute_1_1_status_xhtml"><div class="ttname"><a href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a></div><div class="ttdoc">Status class.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00052">Error.h:52</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_elementwise_operation_kernel_xhtml"><div class="ttname"><a href="classarm__compute_1_1_n_e_elementwise_operation_kernel.xhtml">arm_compute::NEElementwiseOperationKernel</a></div><div class="ttdoc">Interface for an element-wise operation kernel.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_elementwise_operation_kernel_8h_source.xhtml#l00040">NEElementwiseOperationKernel.h:40</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_division_operation_kernel_xhtml"><div class="ttname"><a href="classarm__compute_1_1_n_e_division_operation_kernel.xhtml">arm_compute::NEDivisionOperationKernel</a></div><div class="ttdef"><b>Definition:</b> <a href="_n_e_elementwise_operation_kernel_8h_source.xhtml#l00125">NEElementwiseOperationKernel.h:125</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml">arm_compute::ITensor</a></div><div class="ttdoc">Interface for NEON tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_8h_source.xhtml#l00036">ITensor.h:36</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2020 ARM Limited.</div><div class="ttdef"><b>Definition:</b> <a href="00__introduction_8dox_source.xhtml#l00024">00_introduction.dox:24</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_power_operation_kernel_xhtml_a837b139cf977a6c4530e3d574fcceef2"><div class="ttname"><a href="classarm__compute_1_1_n_e_power_operation_kernel.xhtml#a837b139cf977a6c4530e3d574fcceef2">arm_compute::NEPowerOperationKernel::configure</a></div><div class="ttdeci">void configure(const ITensor *input1, const ITensor *input2, ITensor *output)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of NEArithmeticOperationKer...</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_elementwise_operation_kernel_8cpp_source.xhtml#l01200">NEElementwiseOperationKernel.cpp:1200</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_division_operation_kernel_xhtml_afc96fa047235667233e73836c97aa774"><div class="ttname"><a href="classarm__compute_1_1_n_e_division_operation_kernel.xhtml#afc96fa047235667233e73836c97aa774">arm_compute::NEDivisionOperationKernel::NEDivisionOperationKernel</a></div><div class="ttdeci">NEDivisionOperationKernel()=default</div><div class="ttdoc">Default constructor.</div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_arithmetic_operation_kernel_xhtml_a52095bfe8f4fc368d3ec84a8dac4d616"><div class="ttname"><a href="classarm__compute_1_1_n_e_arithmetic_operation_kernel.xhtml#a52095bfe8f4fc368d3ec84a8dac4d616">arm_compute::NEArithmeticOperationKernel::validate</a></div><div class="ttdeci">static Status validate(ArithmeticOperation op, const ITensorInfo *input1, const ITensorInfo *input2, const ITensorInfo *output)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of NEArithmeticOperationKer...</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_elementwise_operation_kernel_8cpp_source.xhtml#l01169">NEElementwiseOperationKernel.cpp:1169</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_comparison_operation_kernel_xhtml"><div class="ttname"><a href="classarm__compute_1_1_n_e_comparison_operation_kernel.xhtml">arm_compute::NEComparisonOperationKernel</a></div><div class="ttdef"><b>Definition:</b> <a href="_n_e_elementwise_operation_kernel_8h_source.xhtml#l00183">NEElementwiseOperationKernel.h:183</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_power_operation_kernel_xhtml_afe71126bef1735fe1613a6da30d2c0c4"><div class="ttname"><a href="classarm__compute_1_1_n_e_power_operation_kernel.xhtml#afe71126bef1735fe1613a6da30d2c0c4">arm_compute::NEPowerOperationKernel::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *input1, const ITensorInfo *input2, const ITensorInfo *output)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of NEArithmeticOperationKer...</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_elementwise_operation_kernel_8cpp_source.xhtml#l01213">NEElementwiseOperationKernel.cpp:1213</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_arithmetic_operation_kernel_xhtml_a2f102d09a50ed7a0f75e242f7ca53b68"><div class="ttname"><a href="classarm__compute_1_1_n_e_arithmetic_operation_kernel.xhtml#a2f102d09a50ed7a0f75e242f7ca53b68">arm_compute::NEArithmeticOperationKernel::NEArithmeticOperationKernel</a></div><div class="ttdeci">NEArithmeticOperationKernel()=default</div><div class="ttdoc">Default constructor.</div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_elementwise_operation_kernel_xhtml_aa5fcf9ebe19c4a2282c79ced2ac72096"><div class="ttname"><a href="classarm__compute_1_1_n_e_elementwise_operation_kernel.xhtml#aa5fcf9ebe19c4a2282c79ced2ac72096">arm_compute::NEElementwiseOperationKernel::ElementwiseFunction</a></div><div class="ttdeci">void(const ITensor *input1, const ITensor *input2, ITensor *output, const Window &amp;window) ElementwiseFunction</div><div class="ttdoc">Common signature for all the specialised arithmetic functions.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_elementwise_operation_kernel_8h_source.xhtml#l00070">NEElementwiseOperationKernel.h:70</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_elementwise_operation_kernel_xhtml_accf25709b8d911f24214eaf7eecf30ae"><div class="ttname"><a href="classarm__compute_1_1_n_e_elementwise_operation_kernel.xhtml#accf25709b8d911f24214eaf7eecf30ae">arm_compute::NEElementwiseOperationKernel::NEElementwiseOperationKernel</a></div><div class="ttdeci">NEElementwiseOperationKernel()</div><div class="ttdoc">Default constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_elementwise_operation_kernel_8cpp_source.xhtml#l01079">NEElementwiseOperationKernel.cpp:1079</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a2d299363c9fc33334c571fa29ca4f58c"><div class="ttname"><a href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58c">arm_compute::ComparisonOperation</a></div><div class="ttdeci">ComparisonOperation</div><div class="ttdoc">Supported comparison operations.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00173">Types.h:173</a></div></div>
<div class="ttc" id="structarm__compute_1_1_thread_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_thread_info.xhtml">arm_compute::ThreadInfo</a></div><div class="ttdoc">Information about executing thread and CPU.</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_types_8h_source.xhtml#l00225">CPPTypes.h:225</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_power_operation_kernel_xhtml_a8fa201bf255c597c74656ebba8f9ac44"><div class="ttname"><a href="classarm__compute_1_1_n_e_power_operation_kernel.xhtml#a8fa201bf255c597c74656ebba8f9ac44">arm_compute::NEPowerOperationKernel::NEPowerOperationKernel</a></div><div class="ttdeci">NEPowerOperationKernel()=default</div><div class="ttdoc">Default constructor.</div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_arithmetic_operation_kernel_xhtml_ada5fe786261e1a1a8e84d1cd6ec557a5"><div class="ttname"><a href="classarm__compute_1_1_n_e_arithmetic_operation_kernel.xhtml#ada5fe786261e1a1a8e84d1cd6ec557a5">arm_compute::NEArithmeticOperationKernel::configure</a></div><div class="ttdeci">void configure(ArithmeticOperation op, const ITensor *input1, const ITensor *input2, ITensor *output)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of NEArithmeticOperationKer...</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_elementwise_operation_kernel_8cpp_source.xhtml#l01136">NEElementwiseOperationKernel.cpp:1136</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_division_operation_kernel_xhtml_a837b139cf977a6c4530e3d574fcceef2"><div class="ttname"><a href="classarm__compute_1_1_n_e_division_operation_kernel.xhtml#a837b139cf977a6c4530e3d574fcceef2">arm_compute::NEDivisionOperationKernel::configure</a></div><div class="ttdeci">void configure(const ITensor *input1, const ITensor *input2, ITensor *output)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of NEArithmeticOperationKer...</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_elementwise_operation_kernel_8cpp_source.xhtml#l01179">NEElementwiseOperationKernel.cpp:1179</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_comparison_operation_kernel_xhtml_a800127190e2c741812159a46f38600ef"><div class="ttname"><a href="classarm__compute_1_1_n_e_comparison_operation_kernel.xhtml#a800127190e2c741812159a46f38600ef">arm_compute::NEComparisonOperationKernel::configure</a></div><div class="ttdeci">void configure(ComparisonOperation op, const ITensor *input1, const ITensor *input2, ITensor *output)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of NEComparisonOperationKer...</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_elementwise_operation_kernel_8cpp_source.xhtml#l01222">NEElementwiseOperationKernel.cpp:1222</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a4f4125dba5283887b34f889b1c615c0c"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">arm_compute::test::validation::info</a></div><div class="ttdeci">info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00182">ConvolutionLayer.cpp:182</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_elementwise_operation_kernel_xhtml_a64919a3d8616028caff9cc55c995e638"><div class="ttname"><a href="classarm__compute_1_1_n_e_elementwise_operation_kernel.xhtml#a64919a3d8616028caff9cc55c995e638">arm_compute::NEElementwiseOperationKernel::~NEElementwiseOperationKernel</a></div><div class="ttdeci">~NEElementwiseOperationKernel()=default</div><div class="ttdoc">Default destructor.</div></div>
<div class="ttc" id="_i_n_e_kernel_8h_xhtml"><div class="ttname"><a href="_i_n_e_kernel_8h.xhtml">INEKernel.h</a></div></div>
<div class="ttc" id="arm__compute_2core_2_types_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_types_8h.xhtml">Types.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_power_operation_kernel_xhtml"><div class="ttname"><a href="classarm__compute_1_1_n_e_power_operation_kernel.xhtml">arm_compute::NEPowerOperationKernel</a></div><div class="ttdef"><b>Definition:</b> <a href="_n_e_elementwise_operation_kernel_8h_source.xhtml#l00154">NEElementwiseOperationKernel.h:154</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml">arm_compute::Window</a></div><div class="ttdoc">Describe a multidimensional execution window.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00039">Window.h:39</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_arithmetic_operation_kernel_xhtml"><div class="ttname"><a href="classarm__compute_1_1_n_e_arithmetic_operation_kernel.xhtml">arm_compute::NEArithmeticOperationKernel</a></div><div class="ttdef"><b>Definition:</b> <a href="_n_e_elementwise_operation_kernel_8h_source.xhtml#l00094">NEElementwiseOperationKernel.h:94</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_comparison_operation_kernel_xhtml_aa4dc6e8191da7608f894b446ee19b6b3"><div class="ttname"><a href="classarm__compute_1_1_n_e_comparison_operation_kernel.xhtml#aa4dc6e8191da7608f894b446ee19b6b3">arm_compute::NEComparisonOperationKernel::validate</a></div><div class="ttdeci">static Status validate(ComparisonOperation op, const ITensorInfo *input1, const ITensorInfo *input2, const ITensorInfo *output)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of NEComparisonOperationKer...</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_elementwise_operation_kernel_8cpp_source.xhtml#l01261">NEElementwiseOperationKernel.cpp:1261</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_214608ef36d61442cb2b0c1c4e9a7def.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="dir_1fb090f0c6070330bfaccc4236d3ca0d.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_315f6cf1ec0b2df3ae747ff8286a19f5.xhtml">NEON</a></li><li class="navelem"><a class="el" href="dir_2c3c4cb85e732569e2614ad40a451d53.xhtml">kernels</a></li><li class="navelem"><a class="el" href="_n_e_elementwise_operation_kernel_8h.xhtml">NEElementwiseOperationKernel.h</a></li>
    <li class="footer">Generated on Fri Feb 21 2020 11:10:09 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
