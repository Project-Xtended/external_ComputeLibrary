<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/core/CL/cl_kernels/direct_convolution9x9.cl Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('direct__convolution9x9_8cl_source.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">direct_convolution9x9.cl</div>  </div>
</div><!--header-->
<div class="contents">
<a href="direct__convolution9x9_8cl.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2019 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml">helpers.h</a>&quot;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#undef CONVERT_SAT</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#if defined(DATA_TYPE) &amp;&amp; defined(STRIDE_X) &amp;&amp; defined(WEIGHTS_DEPTH) &amp;&amp; defined(DATA_LAYOUT_NHWC)</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#define PTR_TO_VALUE(PTR, DATA_TYPE) *((__global DATA_TYPE *)(PTR))</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#define CONVOLUTION1x9_STRIDE1_NHWC(acc, row_ptr, weights_ptr)                                                                         \</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">    ({                                                                                                                                 \</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(DATA_TYPE, 8)                                                                                                    \</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">        src0 = (VEC_DATA_TYPE(DATA_TYPE, 8))(                                                                                          \</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">                PTR_TO_VALUE(row_ptr + 0 * src_stride_y, DATA_TYPE), PTR_TO_VALUE(row_ptr + 1 * src_stride_y, DATA_TYPE),                  \</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">                PTR_TO_VALUE(row_ptr + 2 * src_stride_y, DATA_TYPE), PTR_TO_VALUE(row_ptr + 3 * src_stride_y, DATA_TYPE),                  \</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">                PTR_TO_VALUE(row_ptr + 4 * src_stride_y, DATA_TYPE), PTR_TO_VALUE(row_ptr + 5 * src_stride_y, DATA_TYPE),                  \</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">                PTR_TO_VALUE(row_ptr + 6 * src_stride_y, DATA_TYPE), PTR_TO_VALUE(row_ptr + 7 * src_stride_y, DATA_TYPE));                 \</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(DATA_TYPE, 8)                                                                                                    \</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor">        src1 = (VEC_DATA_TYPE(DATA_TYPE, 8))(                                                                                          \</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor">                PTR_TO_VALUE(row_ptr + 8 * src_stride_y, DATA_TYPE), PTR_TO_VALUE(row_ptr + 9 * src_stride_y, DATA_TYPE),                  \</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="preprocessor">                PTR_TO_VALUE(row_ptr + 10 * src_stride_y, DATA_TYPE), PTR_TO_VALUE(row_ptr + 11 * src_stride_y, DATA_TYPE),                \</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="preprocessor">                PTR_TO_VALUE(row_ptr + 12 * src_stride_y, DATA_TYPE), PTR_TO_VALUE(row_ptr + 13 * src_stride_y, DATA_TYPE),                \</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="preprocessor">                PTR_TO_VALUE(row_ptr + 14 * src_stride_y, DATA_TYPE), PTR_TO_VALUE(row_ptr + 15 * src_stride_y, DATA_TYPE));               \</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(DATA_TYPE, 8)                                                                                                    \</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="preprocessor">        weights_values0 = (VEC_DATA_TYPE(DATA_TYPE, 8))(                                                                               \</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="preprocessor">                          PTR_TO_VALUE(weights_ptr + 0 * weights_stride_y, DATA_TYPE), PTR_TO_VALUE(weights_ptr + 1 * weights_stride_y, DATA_TYPE),  \</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="preprocessor">                          PTR_TO_VALUE(weights_ptr + 2 * weights_stride_y, DATA_TYPE), PTR_TO_VALUE(weights_ptr + 3 * weights_stride_y, DATA_TYPE),  \</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="preprocessor">                          PTR_TO_VALUE(weights_ptr + 4 * weights_stride_y, DATA_TYPE), PTR_TO_VALUE(weights_ptr + 5 * weights_stride_y, DATA_TYPE),  \</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="preprocessor">                          PTR_TO_VALUE(weights_ptr + 6 * weights_stride_y, DATA_TYPE), PTR_TO_VALUE(weights_ptr + 7 * weights_stride_y, DATA_TYPE)); \</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="preprocessor">        DATA_TYPE weights_value1 = PTR_TO_VALUE(weights_ptr + 8 * weights_stride_y, DATA_TYPE);                                        \</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="preprocessor">        acc += src0 * (VEC_DATA_TYPE(DATA_TYPE, 8))weights_values0.s0;                                                                 \</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="preprocessor">        acc += (VEC_DATA_TYPE(DATA_TYPE, 8))(src0.s1234, src0.s567, src1.s0) * (VEC_DATA_TYPE(DATA_TYPE, 8))weights_values0.s1;        \</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="preprocessor">        acc += (VEC_DATA_TYPE(DATA_TYPE, 8))(src0.s234, src0.s567, src1.s01) * (VEC_DATA_TYPE(DATA_TYPE, 8))weights_values0.s2;        \</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="preprocessor">        acc += (VEC_DATA_TYPE(DATA_TYPE, 8))(src0.s345, src0.s67, src1.s012) * (VEC_DATA_TYPE(DATA_TYPE, 8))weights_values0.s3;        \</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="preprocessor">        acc += (VEC_DATA_TYPE(DATA_TYPE, 8))(src0.s4567, src1.s0123) * (VEC_DATA_TYPE(DATA_TYPE, 8))weights_values0.s4;                \</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="preprocessor">        acc += (VEC_DATA_TYPE(DATA_TYPE, 8))(src0.s567, src1.s0123, src1.s4) * (VEC_DATA_TYPE(DATA_TYPE, 8))weights_values0.s5;        \</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="preprocessor">        acc += (VEC_DATA_TYPE(DATA_TYPE, 8))(src0.s67, src1.s012, src1.s345) * (VEC_DATA_TYPE(DATA_TYPE, 8))weights_values0.s6;        \</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="preprocessor">        acc += (VEC_DATA_TYPE(DATA_TYPE, 8))(src0.s7, src1.s0123, src1.s456) * (VEC_DATA_TYPE(DATA_TYPE, 8))weights_values0.s7;        \</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="preprocessor">        acc += src1 * (VEC_DATA_TYPE(DATA_TYPE, 8))weights_value1;                                                                     \</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="preprocessor">    })</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="preprocessor">#define CONVOLUTION1x9_STRIDE2_NHWC(acc, row_ptr, weights_ptr)                                                                         \</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="preprocessor">    ({                                                                                                                                 \</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(DATA_TYPE, 16)                                                                                                   \</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="preprocessor">        src0 = (VEC_DATA_TYPE(DATA_TYPE, 16))(                                                                                         \</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="preprocessor">                PTR_TO_VALUE(row_ptr + 0 * src_stride_y, DATA_TYPE), PTR_TO_VALUE(row_ptr + 1 * src_stride_y, DATA_TYPE),                  \</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="preprocessor">                PTR_TO_VALUE(row_ptr + 2 * src_stride_y, DATA_TYPE), PTR_TO_VALUE(row_ptr + 3 * src_stride_y, DATA_TYPE),                  \</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="preprocessor">                PTR_TO_VALUE(row_ptr + 4 * src_stride_y, DATA_TYPE), PTR_TO_VALUE(row_ptr + 5 * src_stride_y, DATA_TYPE),                  \</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="preprocessor">                PTR_TO_VALUE(row_ptr + 6 * src_stride_y, DATA_TYPE), PTR_TO_VALUE(row_ptr + 7 * src_stride_y, DATA_TYPE),                  \</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="preprocessor">                PTR_TO_VALUE(row_ptr + 8 * src_stride_y, DATA_TYPE), PTR_TO_VALUE(row_ptr + 9 * src_stride_y, DATA_TYPE),                  \</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="preprocessor">                PTR_TO_VALUE(row_ptr + 10 * src_stride_y, DATA_TYPE), PTR_TO_VALUE(row_ptr + 11 * src_stride_y, DATA_TYPE),                \</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="preprocessor">                PTR_TO_VALUE(row_ptr + 12 * src_stride_y, DATA_TYPE), PTR_TO_VALUE(row_ptr + 13 * src_stride_y, DATA_TYPE),                \</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="preprocessor">                PTR_TO_VALUE(row_ptr + 14 * src_stride_y, DATA_TYPE), PTR_TO_VALUE(row_ptr + 15 * src_stride_y, DATA_TYPE));               \</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(DATA_TYPE, 8)                                                                                                    \</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="preprocessor">        src1 = (VEC_DATA_TYPE(DATA_TYPE, 8))(                                                                                          \</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="preprocessor">                PTR_TO_VALUE(row_ptr + 16 * src_stride_y, DATA_TYPE), PTR_TO_VALUE(row_ptr + 17 * src_stride_y, DATA_TYPE),                \</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="preprocessor">                PTR_TO_VALUE(row_ptr + 18 * src_stride_y, DATA_TYPE), PTR_TO_VALUE(row_ptr + 19 * src_stride_y, DATA_TYPE),                \</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="preprocessor">                PTR_TO_VALUE(row_ptr + 20 * src_stride_y, DATA_TYPE), PTR_TO_VALUE(row_ptr + 21 * src_stride_y, DATA_TYPE),                \</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="preprocessor">                PTR_TO_VALUE(row_ptr + 22 * src_stride_y, DATA_TYPE), PTR_TO_VALUE(row_ptr + 23 * src_stride_y, DATA_TYPE));               \</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(DATA_TYPE, 8)                                                                                                    \</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="preprocessor">        weights_values0 = (VEC_DATA_TYPE(DATA_TYPE, 8))(                                                                               \</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="preprocessor">                          PTR_TO_VALUE(weights_ptr + 0 * weights_stride_y, DATA_TYPE), PTR_TO_VALUE(weights_ptr + 1 * weights_stride_y, DATA_TYPE),  \</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="preprocessor">                          PTR_TO_VALUE(weights_ptr + 2 * weights_stride_y, DATA_TYPE), PTR_TO_VALUE(weights_ptr + 3 * weights_stride_y, DATA_TYPE),  \</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="preprocessor">                          PTR_TO_VALUE(weights_ptr + 4 * weights_stride_y, DATA_TYPE), PTR_TO_VALUE(weights_ptr + 5 * weights_stride_y, DATA_TYPE),  \</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="preprocessor">                          PTR_TO_VALUE(weights_ptr + 6 * weights_stride_y, DATA_TYPE), PTR_TO_VALUE(weights_ptr + 7 * weights_stride_y, DATA_TYPE)); \</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="preprocessor">        DATA_TYPE weights_value1 = PTR_TO_VALUE(weights_ptr + 8 * weights_stride_y, DATA_TYPE);                                        \</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="preprocessor">        acc += src0.s02468ACE * (VEC_DATA_TYPE(DATA_TYPE, 8))weights_values0.s0;                                                       \</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="preprocessor">        acc += (VEC_DATA_TYPE(DATA_TYPE, 8))(src0.s1357, src0.s9BDF) * (VEC_DATA_TYPE(DATA_TYPE, 8))weights_values0.s1;                \</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="preprocessor">        acc += (VEC_DATA_TYPE(DATA_TYPE, 8))(src0.s2468, src0.sACE, src1.s0) * (VEC_DATA_TYPE(DATA_TYPE, 8))weights_values0.s2;        \</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="preprocessor">        acc += (VEC_DATA_TYPE(DATA_TYPE, 8))(src0.s3579, src0.sBDF, src1.s1) * (VEC_DATA_TYPE(DATA_TYPE, 8))weights_values0.s3;        \</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="preprocessor">        acc += (VEC_DATA_TYPE(DATA_TYPE, 8))(src0.s468A, src0.sCE, src1.s02) * (VEC_DATA_TYPE(DATA_TYPE, 8))weights_values0.s4;        \</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="preprocessor">        acc += (VEC_DATA_TYPE(DATA_TYPE, 8))(src0.s579, src0.sBDF, src1.s13) * (VEC_DATA_TYPE(DATA_TYPE, 8))weights_values0.s5;        \</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="preprocessor">        acc += (VEC_DATA_TYPE(DATA_TYPE, 8))(src0.s68A, src0.sCE, src1.s024) * (VEC_DATA_TYPE(DATA_TYPE, 8))weights_values0.s6;        \</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="preprocessor">        acc += (VEC_DATA_TYPE(DATA_TYPE, 8))(src0.s79B, src0.sDF, src1.s135) * (VEC_DATA_TYPE(DATA_TYPE, 8))weights_values0.s7;        \</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="preprocessor">        acc += (VEC_DATA_TYPE(DATA_TYPE, 8))(src0.s8AC, src0.sE, src1.s0246) * (VEC_DATA_TYPE(DATA_TYPE, 8))weights_value1;            \</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="preprocessor">    })</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="preprocessor">#if defined(VEC_SIZE)</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="preprocessor">#define VFMA(acc, w, src0, src1, src2, src3, src4, src5, src6, src7) \</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="preprocessor">    ({                                                               \</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="preprocessor">        acc##0 = fma(src0, w, acc##0);                               \</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="preprocessor">        acc##1 = fma(src1, w, acc##1);                               \</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="preprocessor">        acc##2 = fma(src2, w, acc##2);                               \</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="preprocessor">        acc##3 = fma(src3, w, acc##3);                               \</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="preprocessor">        acc##4 = fma(src4, w, acc##4);                               \</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="preprocessor">        acc##5 = fma(src5, w, acc##5);                               \</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="preprocessor">        acc##6 = fma(src6, w, acc##6);                               \</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="preprocessor">        acc##7 = fma(src7, w, acc##7);                               \</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="preprocessor">    })</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="preprocessor">#define CONVOLUTION1x9_STRIDE1_NHWC_BIFROST(acc, row_ptr, weights_ptr)                       \</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="preprocessor">    ({                                                                                       \</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(DATA_TYPE, VEC_SIZE)                                                   \</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="preprocessor">        src0 = VLOAD(VEC_SIZE)(0, (__global DATA_TYPE *)row_ptr);                            \</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(DATA_TYPE, VEC_SIZE)                                                   \</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="preprocessor">        src1 = VLOAD(VEC_SIZE)(0, (__global DATA_TYPE *)(row_ptr + src_stride_y));           \</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(DATA_TYPE, VEC_SIZE)                                                   \</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="preprocessor">        src2 = VLOAD(VEC_SIZE)(0, (__global DATA_TYPE *)(row_ptr + 2 * src_stride_y));       \</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(DATA_TYPE, VEC_SIZE)                                                   \</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="preprocessor">        src3 = VLOAD(VEC_SIZE)(0, (__global DATA_TYPE *)(row_ptr + 3 * src_stride_y));       \</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(DATA_TYPE, VEC_SIZE)                                                   \</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="preprocessor">        src4 = VLOAD(VEC_SIZE)(0, (__global DATA_TYPE *)(row_ptr + 4 * src_stride_y));       \</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(DATA_TYPE, VEC_SIZE)                                                   \</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="preprocessor">        src5 = VLOAD(VEC_SIZE)(0, (__global DATA_TYPE *)(row_ptr + 5 * src_stride_y));       \</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(DATA_TYPE, VEC_SIZE)                                                   \</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="preprocessor">        src6 = VLOAD(VEC_SIZE)(0, (__global DATA_TYPE *)(row_ptr + 6 * src_stride_y));       \</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(DATA_TYPE, VEC_SIZE)                                                   \</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="preprocessor">        src7 = VLOAD(VEC_SIZE)(0, (__global DATA_TYPE *)(row_ptr + 7 * src_stride_y));       \</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(DATA_TYPE, VEC_SIZE)                                                   \</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="preprocessor">        src8 = VLOAD(VEC_SIZE)(0, (__global DATA_TYPE *)(row_ptr + 8 * src_stride_y));       \</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(DATA_TYPE, VEC_SIZE)                                                   \</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="preprocessor">        src9 = VLOAD(VEC_SIZE)(0, (__global DATA_TYPE *)(row_ptr + 9 * src_stride_y));       \</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(DATA_TYPE, VEC_SIZE)                                                   \</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="preprocessor">        src10 = VLOAD(VEC_SIZE)(0, (__global DATA_TYPE *)(row_ptr + 10 * src_stride_y));     \</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(DATA_TYPE, VEC_SIZE)                                                   \</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="preprocessor">        src11 = VLOAD(VEC_SIZE)(0, (__global DATA_TYPE *)(row_ptr + 11 * src_stride_y));     \</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(DATA_TYPE, VEC_SIZE)                                                   \</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="preprocessor">        src12 = VLOAD(VEC_SIZE)(0, (__global DATA_TYPE *)(row_ptr + 12 * src_stride_y));     \</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(DATA_TYPE, VEC_SIZE)                                                   \</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="preprocessor">        src13 = VLOAD(VEC_SIZE)(0, (__global DATA_TYPE *)(row_ptr + 13 * src_stride_y));     \</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(DATA_TYPE, VEC_SIZE)                                                   \</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="preprocessor">        src14 = VLOAD(VEC_SIZE)(0, (__global DATA_TYPE *)(row_ptr + 14 * src_stride_y));     \</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(DATA_TYPE, VEC_SIZE)                                                   \</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="preprocessor">        src15 = VLOAD(VEC_SIZE)(0, (__global DATA_TYPE *)(row_ptr + 15 * src_stride_y));     \</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="preprocessor">        \</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(DATA_TYPE, VEC_SIZE)                                                   \</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="preprocessor">        w0 = VLOAD(VEC_SIZE)(0, (__global DATA_TYPE *)(weights_ptr + 0 * weights_stride_y)); \</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(DATA_TYPE, VEC_SIZE)                                                   \</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="preprocessor">        w1 = VLOAD(VEC_SIZE)(0, (__global DATA_TYPE *)(weights_ptr + 1 * weights_stride_y)); \</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(DATA_TYPE, VEC_SIZE)                                                   \</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="preprocessor">        w2 = VLOAD(VEC_SIZE)(0, (__global DATA_TYPE *)(weights_ptr + 2 * weights_stride_y)); \</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(DATA_TYPE, VEC_SIZE)                                                   \</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="preprocessor">        w3 = VLOAD(VEC_SIZE)(0, (__global DATA_TYPE *)(weights_ptr + 3 * weights_stride_y)); \</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(DATA_TYPE, VEC_SIZE)                                                   \</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="preprocessor">        w4 = VLOAD(VEC_SIZE)(0, (__global DATA_TYPE *)(weights_ptr + 4 * weights_stride_y)); \</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(DATA_TYPE, VEC_SIZE)                                                   \</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="preprocessor">        w5 = VLOAD(VEC_SIZE)(0, (__global DATA_TYPE *)(weights_ptr + 5 * weights_stride_y)); \</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(DATA_TYPE, VEC_SIZE)                                                   \</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="preprocessor">        w6 = VLOAD(VEC_SIZE)(0, (__global DATA_TYPE *)(weights_ptr + 6 * weights_stride_y)); \</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(DATA_TYPE, VEC_SIZE)                                                   \</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="preprocessor">        w7 = VLOAD(VEC_SIZE)(0, (__global DATA_TYPE *)(weights_ptr + 7 * weights_stride_y)); \</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(DATA_TYPE, VEC_SIZE)                                                   \</span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="preprocessor">        w8 = VLOAD(VEC_SIZE)(0, (__global DATA_TYPE *)(weights_ptr + 8 * weights_stride_y)); \</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="preprocessor">        \</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="preprocessor">        VFMA(acc, w0, src0, src1, src2, src3, src4, src5, src6, src7);                       \</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="preprocessor">        VFMA(acc, w1, src1, src2, src3, src4, src5, src6, src7, src8);                       \</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="preprocessor">        VFMA(acc, w2, src2, src3, src4, src5, src6, src7, src8, src9);                       \</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="preprocessor">        VFMA(acc, w3, src3, src4, src5, src6, src7, src8, src9, src10);                      \</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="preprocessor">        VFMA(acc, w4, src4, src5, src6, src7, src8, src9, src10, src11);                     \</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="preprocessor">        VFMA(acc, w5, src5, src6, src7, src8, src9, src10, src11, src12);                    \</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="preprocessor">        VFMA(acc, w6, src6, src7, src8, src9, src10, src11, src12, src13);                   \</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="preprocessor">        VFMA(acc, w7, src7, src8, src9, src10, src11, src12, src13, src14);                  \</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="preprocessor">        VFMA(acc, w8, src8, src9, src10, src11, src12, src13, src14, src15);                 \</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="preprocessor">    })</span></div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="preprocessor">#if VEC_SIZE == 4</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="preprocessor">#define REDUCE(out, vec)            \</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="preprocessor">    ({                              \</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(DATA_TYPE, 2) \</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="preprocessor">        tmp1 = vec.s01 + vec.s23;   \</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="preprocessor">        out  = tmp1.s0 + tmp1.s1;   \</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="preprocessor">    })</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="preprocessor">#else // VEC_SIZE == 4</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="preprocessor">#error(&quot;Not supported&quot;)</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="preprocessor">#endif // VEC_SIZE == 4</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="preprocessor">#if STRIDE_X == 1</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="preprocessor">#define CONVOLUTION1x9_NHWC(acc, row_ptr, weights_ptr) CONVOLUTION1x9_STRIDE1_NHWC_BIFROST(acc, row_ptr, weights_ptr)</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="preprocessor">#else // STRIDE_X == 1</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="preprocessor">#error &quot;Not supported&quot;</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="preprocessor">#endif // STRIDE_X == 1</span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="preprocessor">#else // defined(VEC_SIZE)</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="preprocessor">#if STRIDE_X == 1</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="preprocessor">#define CONVOLUTION1x9_NHWC(acc, row_ptr, weights_ptr) CONVOLUTION1x9_STRIDE1_NHWC(acc, row_ptr, weights_ptr)</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="preprocessor">#elif STRIDE_X == 2 // STRIDE_X == 1</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="preprocessor">#define CONVOLUTION1x9_NHWC(acc, row_ptr, weights_ptr) CONVOLUTION1x9_STRIDE2_NHWC(acc, row_ptr, weights_ptr)</span></div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="preprocessor">#else // STRIDE_X == 1</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="preprocessor">#error &quot;STRIDE_X larger than 2 is not supported&quot;</span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="preprocessor">#endif // STRIDE_X == 1</span></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="preprocessor">#endif // defined(VEC_SIZE)</span></div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="comment">//#if defined(VEC_SIZE)</span><span class="comment"></span></div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="comment">/** This kernel performs a direct convolution to convolve the low three dimensions in a tensor with the NHWC data layout</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="comment"> * @note The data type must be passed at compile time using -DDATA_TYPE: e.g. -DDATA_TYPE=float</span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="comment"> * @note The third dimensions of the weights tensors must be passed at compile time using -DWEIGHTS_DEPTH</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="comment"> * @note If biases are used then -DHAS_BIAS has to be passed at compile time</span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="comment"> * @param[in]  src_ptr                               Pointer to the source tensor. Supported data types: F16/F32</span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="comment"> * @param[in]  src_stride_x                          Stride of the source tensor in X dimension (in bytes)</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="comment"> * @param[in]  src_step_x                            src_stride_x * number of elements along X processed per workitem(in bytes)</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="comment"> * @param[in]  src_stride_y                          Stride of the source tensor in Y dimension (in bytes)</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="comment"> * @param[in]  src_step_y                            src_stride_y * number of elements along Y processed per workitem(in bytes)</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="comment"> * @param[in]  src_stride_z                          Stride of the source tensor in Z dimension (in bytes)</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="comment"> * @param[in]  src_step_z                            src_stride_z * number of elements along Z processed per workitem(in bytes)</span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="comment"> * @param[in]  src_offset_first_element_in_bytes     The offset of the first element in the source tensor</span></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="comment"> * @param[out] dst_ptr                               Pointer to the destination tensor. Supported data types: same as @p src_ptr</span></div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="comment"> * @param[in]  dst_stride_x                          Stride of the destination tensor in X dimension (in bytes)</span></div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="comment"> * @param[in]  dst_step_x                            dst_stride_x * number of elements along X processed per workitem(in bytes)</span></div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="comment"> * @param[in]  dst_stride_y                          Stride of the destination tensor in Y dimension (in bytes)</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="comment"> * @param[in]  dst_step_y                            dst_stride_y * number of elements along Z processed per workitem(in bytes)</span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="comment"> * @param[in]  dst_stride_z                          Stride of the destination tensor in Z dimension (in bytes)</span></div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="comment"> * @param[in]  dst_step_z                            dst_stride_z * number of elements along Z processed per workitem(in bytes)</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="comment"> * @param[in]  dst_offset_first_element_in_bytes     The offset of the first element in the destination tensor</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="comment"> * @param[in]  weights_ptr                           Pointer to the weights tensor. Supported data types: same as @p src_ptr</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="comment"> * @param[in]  weights_stride_x                      Stride of the weights tensor in X dimension (in bytes)</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="comment"> * @param[in]  weights_step_x                        weights_stride_x * number of elements along X processed per workitem(in bytes)</span></div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="comment"> * @param[in]  weights_stride_y                      Stride of the weights tensor in Y dimension (in bytes)</span></div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="comment"> * @param[in]  weights_step_y                        weights_stride_y * number of elements along y processed per workitem(in bytes)</span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="comment"> * @param[in]  weights_stride_z                      Stride of the weights tensor in Z dimension (in bytes)</span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="comment"> * @param[in]  weights_step_z                        weights_stride_z * number of elements along Z processed per workitem(in bytes)</span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="comment"> * @param[in]  weights_offset_first_element_in_bytes The offset of the first element in the weights tensor</span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="comment"> * @param[in]  biases_ptr                            (Optional) Pointer to the biases tensor. Same as @p src_ptr</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="comment"> * @param[in]  biases_stride_x                       (Optional) Stride of the biases tensor in X dimension (in bytes)</span></div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="comment"> * @param[in]  biases_step_x                         (Optional) biases_stride_x * number of elements along X processed per workitem(in bytes)</span></div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="comment"> * @param[in]  biases_offset_first_element_in_bytes  (Optional) The offset of the first element in the biases tensor</span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="comment"> * @param[in]  weights_stride_w                      (Optional) Stride of the weights tensor in the 4th dimension</span></div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;__kernel <span class="keywordtype">void</span> direct_convolution9x9_nhwc(</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a>),</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>),</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>),</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;#ifdef HAS_BIAS</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a>(biases),</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;#endif <span class="comment">/* defined(HAS_BIAS) */</span></div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> weights_stride_w)</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;{</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a>    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a>     = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a>);</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <a class="code" href="struct_tensor3_d.xhtml">Tensor3D</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a> = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a79e8e562daa6599317d2d1cd86ef1bf2">CONVERT_TO_TENSOR3D_STRUCT_NO_STEP</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>);</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <a class="code" href="struct_tensor3_d.xhtml">Tensor3D</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>     = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a31c8c760f08fb1a331b16b7c204321dc">CONVERT_TO_TENSOR3D_STRUCT</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>);</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>, 8)</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    values = 0;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="preprocessor">#if defined(VEC_SIZE)</span></div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>, <a class="code" href="depthwise__convolution__quantized_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>)</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    values0 = 0;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>, <a class="code" href="depthwise__convolution__quantized_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>)</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    values1 = 0;</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>, <a class="code" href="depthwise__convolution__quantized_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>)</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    values2 = 0;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>, <a class="code" href="depthwise__convolution__quantized_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>)</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    values3 = 0;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>, <a class="code" href="depthwise__convolution__quantized_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>)</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    values4 = 0;</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>, <a class="code" href="depthwise__convolution__quantized_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>)</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    values5 = 0;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>, <a class="code" href="depthwise__convolution__quantized_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>)</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    values6 = 0;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>, <a class="code" href="depthwise__convolution__quantized_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>)</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    values7 = 0;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;<span class="preprocessor">#define STEP_X (VEC_SIZE)</span></div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="preprocessor">#else // defined(VEC_SIZE)</span></div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="preprocessor">#define STEP_X (1)</span></div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="preprocessor">#endif // defined(VEC_SIZE)</span></div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> id0 = get_global_id(0);</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> id1 = get_global_id(1);</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> id2 = get_global_id(2);</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    __global uchar *weights_addr = (__global uchar *)<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a2101b2fe0193ce227ae4e0945e321d85">tensor3D_offset</a>(&amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, 0, 0, 0);</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    __global uchar *src_addr     = (__global uchar *)<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a>, 0, 0) - src_stride_x * id0 + ((id2 * STRIDE_Y) - PAD_TOP) * (int)src_stride_z;</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    weights_addr += id0 * weights_stride_w;</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="preprocessor">#if(PAD_TOP == 1)</span></div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> coordy = id2 - PAD_TOP;</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">volatile</span> <span class="keywordtype">int</span> d = 0; d &lt; WEIGHTS_DEPTH; d += STEP_X)</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    {</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        <span class="keywordflow">if</span>(coordy &lt; 0) <span class="comment">// special case Z = -1 doesn&#39;t exists</span></div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;        {</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;            <span class="comment">//skip first row and load the two next ones</span></div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 1 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 1 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 2 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 2 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 3 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 3 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 4 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 4 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 5 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 5 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 6 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 6 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 7 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 7 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 8 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 8 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;        }</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span>(coordy == (DST_HEIGHT - PAD_TOP - 1))</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        {</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;            <span class="comment">// special case when computing the last row of the output we must read the last three rows from the input buffer (including padding) but the</span></div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;            <span class="comment">// Z axis has no padding at all.</span></div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;            CONVOLUTION1x9_NHWC(values, src_addr, weights_addr);</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 1 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 1 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 2 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 2 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 3 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 3 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 4 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 4 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 5 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 5 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 6 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 6 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 7 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 7 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;        }</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;        {</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;            CONVOLUTION1x9_NHWC(values, src_addr, weights_addr);</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 1 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 1 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 2 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 2 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 3 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 3 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 4 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 4 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 5 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 5 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 6 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 6 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 7 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 7 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 8 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 8 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        }</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;        src_addr += STEP_X * <span class="keyword">sizeof</span>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>);</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        weights_addr += STEP_X * <span class="keyword">sizeof</span>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>);</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    }</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;<span class="preprocessor">#elif(PAD_TOP == 2) // PAD_TOP == 1</span></div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> coordy = id2 * STRIDE_Y;</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">volatile</span> <span class="keywordtype">int</span> d = 0; d &lt; WEIGHTS_DEPTH; d += STEP_X)</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    {</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;        <span class="keywordflow">if</span>(coordy == 0) <span class="comment">// special case Z = -2 doesn&#39;t exists</span></div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;        {</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;            <span class="comment">//skip first row and load the two next ones</span></div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 2 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 2 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 3 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 3 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 4 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 4 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 5 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 5 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 6 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 6 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 7 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 7 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 8 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 8 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;        }</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span>(coordy == 1) <span class="comment">// special case Z = -1 doesn&#39;t exists</span></div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;        {</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;            <span class="comment">//skip first row and load the two next ones</span></div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 1 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 1 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 2 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 2 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 3 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 3 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 4 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 4 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 5 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 5 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 6 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 6 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 7 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 7 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 8 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 8 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;        }</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span>(coordy == (SRC_HEIGHT - 5))</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;        {</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;            <span class="comment">// special case when computing the last row of the output we must read the last three rows from the input buffer (including padding) but the</span></div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;            <span class="comment">// Z axis has no padding at all.</span></div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;            CONVOLUTION1x9_NHWC(values, src_addr, weights_addr);</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 1 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 1 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 2 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 2 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 3 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 3 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 4 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 4 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 5 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 5 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 6 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 6 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;        }</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span>(coordy == (SRC_HEIGHT - 6))</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;        {</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;            <span class="comment">// special case when computing the last row of the output we must read the last three rows from the input buffer (including padding) but the</span></div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;            <span class="comment">// Z axis has no padding at all.</span></div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;            CONVOLUTION1x9_NHWC(values, src_addr, weights_addr);</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 1 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 1 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 2 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 2 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 3 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 3 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 4 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 4 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 5 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 5 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 6 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 6 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 7 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 7 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;        }</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;        {</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;            CONVOLUTION1x9_NHWC(values, src_addr, weights_addr);</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 1 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 1 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 2 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 2 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 3 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 3 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 4 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 4 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 5 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 5 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 6 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 6 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 7 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 7 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;            CONVOLUTION1x9_NHWC(values, (src_addr + 8 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 8 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;        }</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;        src_addr += STEP_X * <span class="keyword">sizeof</span>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>);</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;        weights_addr += STEP_X * <span class="keyword">sizeof</span>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>);</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    }</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;<span class="preprocessor">#else  // PAD_TOP == 1</span></div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">volatile</span> <span class="keywordtype">int</span> d = 0; d &lt; WEIGHTS_DEPTH; d += STEP_X)</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    {</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;        CONVOLUTION1x9_NHWC(values, src_addr, weights_addr);</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;        CONVOLUTION1x9_NHWC(values, (src_addr + 1 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 1 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;        CONVOLUTION1x9_NHWC(values, (src_addr + 2 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 2 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;        CONVOLUTION1x9_NHWC(values, (src_addr + 3 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 3 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;        CONVOLUTION1x9_NHWC(values, (src_addr + 4 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 4 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;        CONVOLUTION1x9_NHWC(values, (src_addr + 5 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 5 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;        CONVOLUTION1x9_NHWC(values, (src_addr + 6 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 6 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;        CONVOLUTION1x9_NHWC(values, (src_addr + 7 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 7 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;        CONVOLUTION1x9_NHWC(values, (src_addr + 8 * (<span class="keywordtype">int</span>)src_stride_z), (weights_addr + 8 * (<span class="keywordtype">int</span>)weights_stride_z));</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;        src_addr += STEP_X * <span class="keyword">sizeof</span>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>);</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;        weights_addr += STEP_X * <span class="keyword">sizeof</span>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>);</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    }</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;<span class="preprocessor">#endif // PAD_TOP == 1</span></div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;<span class="preprocessor">#if defined(VEC_SIZE)</span></div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    REDUCE(values.s0, values0);</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    REDUCE(values.s1, values1);</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    REDUCE(values.s2, values2);</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    REDUCE(values.s3, values3);</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    REDUCE(values.s4, values4);</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    REDUCE(values.s5, values5);</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;    REDUCE(values.s6, values6);</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    REDUCE(values.s7, values7);</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;<span class="preprocessor">#endif // defined(VEC_SIZE)</span></div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;<span class="preprocessor">#if defined(HAS_BIAS)</span></div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    <a class="code" href="struct_vector.xhtml">Vector</a> biases = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a64d779f80eeb923e0ab2313433f7b40b">CONVERT_TO_VECTOR_STRUCT_NO_STEP</a>(biases);</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;    values += (<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>, 8)) * ((__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a7e4940407322d6f0ccb8b6b86b856019">vector_offset</a>(&amp;biases, id0)));</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;<span class="preprocessor">#endif // defined(HAS_BIAS)</span></div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    *((__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.ptr + 0 * dst_stride_y)) = values.s0;</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    *((__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.ptr + 1 * dst_stride_y)) = values.s1;</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    *((__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.ptr + 2 * dst_stride_y)) = values.s2;</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    *((__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.ptr + 3 * dst_stride_y)) = values.s3;</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    *((__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.ptr + 4 * dst_stride_y)) = values.s4;</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    *((__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.ptr + 5 * dst_stride_y)) = values.s5;</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;    *((__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.ptr + 6 * dst_stride_y)) = values.s6;</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    *((__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.ptr + 7 * dst_stride_y)) = values.s7;</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;<span class="preprocessor">#undef STEP_X</span></div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;}</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;<span class="preprocessor">#endif // defined(DATA_TYPE) &amp;&amp; defined(STRIDE_X) &amp;&amp; defined(WEIGHTS_DEPTH) &amp;&amp; defined(DATA_LAYOUT_NHWC)</span></div><div class="ttc" id="struct_vector_xhtml"><div class="ttname"><a href="struct_vector.xhtml">Vector</a></div><div class="ttdoc">Structure to hold Vector information.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00341">helpers.h:341</a></div></div>
<div class="ttc" id="src_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a009469e4d9b8fce3b6d5e97d2077827d"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a></div><div class="ttdeci">__global uchar * offset(const Image *img, int x, int y)</div><div class="ttdoc">Get the pointer position of a Image.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00510">helpers.h:510</a></div></div>
<div class="ttc" id="src_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_aebe814363556c244be043b13e7969197"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a></div><div class="ttdeci">#define CONVERT_TO_IMAGE_STRUCT(name)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00311">helpers.h:311</a></div></div>
<div class="ttc" id="depthwise__convolution__quantized_8cl_xhtml_a3fffea119c04c7680f2e9cf3fadf63b4"><div class="ttname"><a href="depthwise__convolution__quantized_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a></div><div class="ttdeci">#define VEC_SIZE</div><div class="ttdef"><b>Definition:</b> <a href="depthwise__convolution__quantized_8cl_source.xhtml#l00031">depthwise_convolution_quantized.cl:31</a></div></div>
<div class="ttc" id="convolution3x3_8cl_xhtml_afb8c72ce35c4a1f4a2588d6573e54aa1"><div class="ttname"><a href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a></div><div class="ttdeci">#define DATA_TYPE</div><div class="ttdef"><b>Definition:</b> <a href="convolution3x3_8cl_source.xhtml#l00027">convolution3x3.cl:27</a></div></div>
<div class="ttc" id="struct_tensor3_d_xhtml"><div class="ttname"><a href="struct_tensor3_d.xhtml">Tensor3D</a></div><div class="ttdoc">Structure to hold 3D tensor information.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00358">helpers.h:358</a></div></div>
<div class="ttc" id="src_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a79e8e562daa6599317d2d1cd86ef1bf2"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a79e8e562daa6599317d2d1cd86ef1bf2">CONVERT_TO_TENSOR3D_STRUCT_NO_STEP</a></div><div class="ttdeci">#define CONVERT_TO_TENSOR3D_STRUCT_NO_STEP(name)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00330">helpers.h:330</a></div></div>
<div class="ttc" id="src_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a40a6eb9f2a7712f08d6bb8ff6c9e6ca7"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a></div><div class="ttdeci">#define VECTOR_DECLARATION(name)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00269">helpers.h:269</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">CLTensor dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_absolute_difference_8cpp_source.xhtml#l00102">AbsoluteDifference.cpp:102</a></div></div>
<div class="ttc" id="struct_image_xhtml"><div class="ttname"><a href="struct_image.xhtml">Image</a></div><div class="ttdoc">Structure to hold Image information.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00349">helpers.h:349</a></div></div>
<div class="ttc" id="src_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a31c8c760f08fb1a331b16b7c204321dc"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a31c8c760f08fb1a331b16b7c204321dc">CONVERT_TO_TENSOR3D_STRUCT</a></div><div class="ttdeci">#define CONVERT_TO_TENSOR3D_STRUCT(name)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00326">helpers.h:326</a></div></div>
<div class="ttc" id="src_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a7e4940407322d6f0ccb8b6b86b856019"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a7e4940407322d6f0ccb8b6b86b856019">vector_offset</a></div><div class="ttdeci">__global const uchar * vector_offset(const Vector *vec, int x)</div><div class="ttdoc">Get the pointer position of a Vector.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00499">helpers.h:499</a></div></div>
<div class="ttc" id="src_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml">helpers.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a64a08a9fec5aeee8650e7182b6d171d0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">arm_compute::test::validation::weights</a></div><div class="ttdeci">CLTensor weights</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00188">ConvolutionLayer.cpp:188</a></div></div>
<div class="ttc" id="src_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a6b83038822d1ae7ab619b684ed3b7fc0"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a></div><div class="ttdeci">#define TENSOR3D_DECLARATION(name)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00283">helpers.h:283</a></div></div>
<div class="ttc" id="src_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a64d779f80eeb923e0ab2313433f7b40b"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a64d779f80eeb923e0ab2313433f7b40b">CONVERT_TO_VECTOR_STRUCT_NO_STEP</a></div><div class="ttdeci">#define CONVERT_TO_VECTOR_STRUCT_NO_STEP(name)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00308">helpers.h:308</a></div></div>
<div class="ttc" id="src_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a2101b2fe0193ce227ae4e0945e321d85"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a2101b2fe0193ce227ae4e0945e321d85">tensor3D_offset</a></div><div class="ttdeci">__global const uchar * tensor3D_offset(const Tensor3D *tensor, int x, int y, int z)</div><div class="ttdoc">Get the pointer position of a Tensor3D.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00522">helpers.h:522</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a989ab3e96426615bb98e04e0235088ca"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">arm_compute::test::validation::src</a></div><div class="ttdeci">cast configure &amp; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_cast_8cpp_source.xhtml#l00169">Cast.cpp:169</a></div></div>
<div class="ttc" id="src_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a36f754c05b6fddf6df0d8d0a74f8159f"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a></div><div class="ttdeci">#define VEC_DATA_TYPE(type, size)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00255">helpers.h:255</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aebb8dcc11953d78e620bbef0b9e2183.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_8c278f79c760e5c5fbd911f9870614c1.xhtml">CL</a></li><li class="navelem"><a class="el" href="dir_25885286e9dad4fa105b7b25a8031bbf.xhtml">cl_kernels</a></li><li class="navelem"><a class="el" href="direct__convolution9x9_8cl.xhtml">direct_convolution9x9.cl</a></li>
    <li class="footer">Generated on Fri Feb 21 2020 11:10:11 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
