<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: utils/TypePrinter.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.02.1</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('utils_2_type_printer_8h_source.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">TypePrinter.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="utils_2_type_printer_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017-2020 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef __ARM_COMPUTE_TYPE_PRINTER_H__</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define __ARM_COMPUTE_TYPE_PRINTER_H__</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_c_p_p_types_8h.xhtml">arm_compute/core/CPP/CPPTypes.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_dimensions_8h.xhtml">arm_compute/core/Dimensions.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_error_8h.xhtml">arm_compute/core/Error.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_g_p_u_target_8h.xhtml">arm_compute/core/GPUTarget.h</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_h_o_g_info_8h.xhtml">arm_compute/core/HOGInfo.h</a>&quot;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_size2_d_8h.xhtml">arm_compute/core/Size2D.h</a>&quot;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_strides_8h.xhtml">arm_compute/core/Strides.h</a>&quot;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_tensor_info_8h.xhtml">arm_compute/core/TensorInfo.h</a>&quot;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_types_8h.xhtml">arm_compute/core/Types.h</a>&quot;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_c_l_tuner_types_8h.xhtml">arm_compute/runtime/CL/CLTunerTypes.h</a>&quot;</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#include &lt;ostream&gt;</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#include &lt;sstream&gt;</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;{<span class="comment"></span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment">/** Formatted output if arg is not null</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment"> * @param[in] arg Object to print</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment"> * @return String representing arg.</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00051"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#ad023d4ca1d3facf3975c941fd728a6f4">   51</a></span>&#160;std::string <a class="code" href="namespacearm__compute.xhtml#ad023d4ca1d3facf3975c941fd728a6f4">to_string_if_not_null</a>(T *arg)</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;{</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keywordflow">if</span>(arg == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    {</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        <span class="keywordflow">return</span> <span class="stringliteral">&quot;nullptr&quot;</span>;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    }</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    {</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(*arg);</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    }</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;}<span class="comment"></span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment">/** Formatted output of the Dimensions type.</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment"> * @param[out] os         Output stream.</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment"> * @param[in]  dimensions Type to output.</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment"> * @return Modified output stream.</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00070"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a18d43401e8f84ed020429b41ec4e99f5">   70</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute.xhtml#af3985189d478b45014e7dead9d002e2a">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_dimensions.xhtml">Dimensions&lt;T&gt;</a> &amp;dimensions)</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;{</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keywordflow">if</span>(dimensions.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">num_dimensions</a>() &gt; 0)</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    {</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        os &lt;&lt; dimensions[0];</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> d = 1; d &lt; dimensions.num_dimensions(); ++d)</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        {</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;x&quot;</span> &lt;&lt; dimensions[d];</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        }</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    }</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;}</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment">/** Formatted output of the NonLinearFilterFunction type.</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment"> * @param[out] os       Output stream.</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment"> * @param[in]  function Type to output.</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment"> * @return Modified output stream.</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00092"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#ae8c2a3451bcf739a75aa7438e7a78d45">   92</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute.xhtml#af3985189d478b45014e7dead9d002e2a">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#adf2ced65e536375a1c96425d9fced858">NonLinearFilterFunction</a> &amp;<span class="keyword">function</span>)</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;{</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keywordflow">switch</span>(<span class="keyword">function</span>)</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    {</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#adf2ced65e536375a1c96425d9fced858a26a4b44a837bf97b972628509912b4a5">NonLinearFilterFunction::MAX</a>:</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;MAX&quot;</span>;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#adf2ced65e536375a1c96425d9fced858a8ab0c3a037e882577dec378985477074">NonLinearFilterFunction::MEDIAN</a>:</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;MEDIAN&quot;</span>;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#adf2ced65e536375a1c96425d9fced858ace31e2a082d17e038fcc6e3006166653">NonLinearFilterFunction::MIN</a>:</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;MIN&quot;</span>;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    }</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;}</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment">/** Formatted output of the NonLinearFilterFunction type.</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment"> * @param[in] function Type to output.</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment"> * @return Formatted string.</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00118"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#aabe16be22edb41656e66ed9eae3b69e6">  118</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#adf2ced65e536375a1c96425d9fced858">NonLinearFilterFunction</a> &amp;<span class="keyword">function</span>)</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;{</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    std::stringstream str;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    str &lt;&lt; <span class="keyword">function</span>;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;}</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment">/** Formatted output of the MatrixPattern type.</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment"> * @param[out] os      Output stream.</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment"> * @param[in]  pattern Type to output.</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment"> * @return Modified output stream.</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00132"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#acec416ec5af175a7aad47a518fefb770">  132</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute.xhtml#af3985189d478b45014e7dead9d002e2a">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#afdda916edc7502967bbec17ea3c06c02">MatrixPattern</a> &amp;pattern)</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;{</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keywordflow">switch</span>(pattern)</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    {</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#afdda916edc7502967bbec17ea3c06c02ae657cce1913c857166b0475f18668ef5">MatrixPattern::BOX</a>:</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;BOX&quot;</span>;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#afdda916edc7502967bbec17ea3c06c02a04dd53a8e6c2306e9bbf944c1d6047f2">MatrixPattern::CROSS</a>:</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;CROSS&quot;</span>;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#afdda916edc7502967bbec17ea3c06c02a290d4b81f4e2b47d86fd1b0170e9aab7">MatrixPattern::DISK</a>:</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;DISK&quot;</span>;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#afdda916edc7502967bbec17ea3c06c02a03570470bad94692ce93e32700d2e1cb">MatrixPattern::OTHER</a>:</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;OTHER&quot;</span>;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    }</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;}</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment">/** Formatted output of the MatrixPattern type.</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment"> * @param[in] pattern Type to output.</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment"> * @return Formatted string.</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00161"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a27f0ebddef1b83e0ac31c7a7a23a8d36">  161</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#afdda916edc7502967bbec17ea3c06c02">MatrixPattern</a> &amp;pattern)</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;{</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    std::stringstream str;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    str &lt;&lt; pattern;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;}</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment">/** Formatted output of the RoundingPolicy type.</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment"> * @param[out] os              Output stream.</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment"> * @param[in]  rounding_policy Type to output.</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="comment"> * @return Modified output stream.</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00175"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a295edc9f8caf95838db2c5e251153514">  175</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute.xhtml#af3985189d478b45014e7dead9d002e2a">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a60ad1078faeaf3f59266d69ad937339f">rounding_policy</a>)</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;{</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keywordflow">switch</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a60ad1078faeaf3f59266d69ad937339f">rounding_policy</a>)</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    {</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea5631ad8e27788edfca7e13535d862c06">RoundingPolicy::TO_ZERO</a>:</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;TO_ZERO&quot;</span>;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea8c0084566b290fa9e5e429f4ae241f95">RoundingPolicy::TO_NEAREST_UP</a>:</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;TO_NEAREST_UP&quot;</span>;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">RoundingPolicy::TO_NEAREST_EVEN</a>:</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;TO_NEAREST_EVEN&quot;</span>;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    }</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;}</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="comment">/** Formatted output of the WeightsInfo type.</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="comment"> * @param[out] os           Output stream.</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="comment"> * @param[in]  weights_info Type to output.</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="comment"> * @return Modified output stream.</span></div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00202"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a5972c7131d378f567af9c2961f088a0b">  202</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute.xhtml#af3985189d478b45014e7dead9d002e2a">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_weights_info.xhtml">WeightsInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7cb842ebfe255726066039853a4322f0">weights_info</a>)</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;{</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    os &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7cb842ebfe255726066039853a4322f0">weights_info</a>.are_reshaped() &lt;&lt; <span class="stringliteral">&quot;;&quot;</span>;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    os &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7cb842ebfe255726066039853a4322f0">weights_info</a>.num_kernels() &lt;&lt; <span class="stringliteral">&quot;;&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7cb842ebfe255726066039853a4322f0">weights_info</a>.kernel_size().first &lt;&lt; <span class="stringliteral">&quot;,&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7cb842ebfe255726066039853a4322f0">weights_info</a>.kernel_size().second;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;}</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="comment">/** Formatted output of the ROIPoolingInfo type.</span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="comment"> * @param[out] os        Output stream.</span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="comment"> * @param[in]  pool_info Type to output.</span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="comment"> * @return Modified output stream.</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00217"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a352b805b77fde4f32f44af271580677b">  217</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute.xhtml#af3985189d478b45014e7dead9d002e2a">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml">ROIPoolingLayerInfo</a> &amp;pool_info)</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;{</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    os &lt;&lt; pool_info.<a class="code" href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml#a5a00bf3cb11be124771cf7e3958e218e">pooled_width</a>() &lt;&lt; <span class="stringliteral">&quot;x&quot;</span> &lt;&lt; pool_info.<a class="code" href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml#aee6a0c75a44f00d3306101e14ffc3ebb">pooled_height</a>() &lt;&lt; <span class="stringliteral">&quot;~&quot;</span> &lt;&lt; pool_info.<a class="code" href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml#a70fd561a558e9f433088b64587a9cb62">spatial_scale</a>();</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;}</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="comment">/** Formatted output of the ROIPoolingInfo type.</span></div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="comment"> * @param[in] pool_info Type to output.</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="comment"> * @return Formatted string.</span></div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00229"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#ac7e5dca61375f7583860ab07d951a323">  229</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml">ROIPoolingLayerInfo</a> &amp;pool_info)</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;{</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    std::stringstream str;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    str &lt;&lt; pool_info;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;}</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="comment">/** Formatted output of the BoundingBoxTransformInfo type.</span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="comment"> * @param[out] os        Output stream.</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="comment"> * @param[in]  bbox_info Type to output.</span></div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="comment"> * @return Modified output stream.</span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00243"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#af81bb4f87d418311c7ca43a28c74bf03">  243</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute.xhtml#af3985189d478b45014e7dead9d002e2a">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_bounding_box_transform_info.xhtml">BoundingBoxTransformInfo</a> &amp;bbox_info)</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;{</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a> = bbox_info.<a class="code" href="classarm__compute_1_1_bounding_box_transform_info.xhtml#a8f456133a1d886f466a79264a10f42ea">weights</a>();</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;(&quot;</span> &lt;&lt; bbox_info.<a class="code" href="classarm__compute_1_1_bounding_box_transform_info.xhtml#a4a5b4a276ace0cc81f724921643ceb85">img_width</a>() &lt;&lt; <span class="stringliteral">&quot;x&quot;</span> &lt;&lt; bbox_info.<a class="code" href="classarm__compute_1_1_bounding_box_transform_info.xhtml#a7f5fdd9585e3de60e819aa6cc7356b7e">img_height</a>() &lt;&lt; <span class="stringliteral">&quot;)~&quot;</span> &lt;&lt; bbox_info.<a class="code" href="classarm__compute_1_1_bounding_box_transform_info.xhtml#ade87abafbd6b200b22de988f32b66dea">scale</a>() &lt;&lt; <span class="stringliteral">&quot;(weights = {&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>[0] &lt;&lt; <span class="stringliteral">&quot;, &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>[1] &lt;&lt; <span class="stringliteral">&quot;, &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>[2] &lt;&lt; <span class="stringliteral">&quot;, &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>[3] &lt;&lt;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;       <span class="stringliteral">&quot;})&quot;</span>;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;}</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="comment">/** Formatted output of the BoundingBoxTransformInfo type.</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="comment"> * @param[in] bbox_info Type to output.</span></div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;<span class="comment"> * @return Formatted string.</span></div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00257"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#aadd27b86f0ff4fbb03ed673a549e91a8">  257</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_bounding_box_transform_info.xhtml">BoundingBoxTransformInfo</a> &amp;bbox_info)</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;{</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    std::stringstream str;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    str &lt;&lt; bbox_info;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;}</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="comment">/** Formatted output of the ComputeAnchorsInfo type.</span></div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="comment"> * @param[out] os           Output stream.</span></div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="comment"> * @param[in]  anchors_info Type to output.</span></div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="comment"> * @return Modified output stream.</span></div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00271"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a59ea8b6694897a281eb3105f5c99f28f">  271</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute.xhtml#af3985189d478b45014e7dead9d002e2a">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_compute_anchors_info.xhtml">ComputeAnchorsInfo</a> &amp;anchors_info)</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;{</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;(&quot;</span> &lt;&lt; anchors_info.<a class="code" href="classarm__compute_1_1_compute_anchors_info.xhtml#a5b8b00c38aee11870396f12e764fa3ce">feat_width</a>() &lt;&lt; <span class="stringliteral">&quot;x&quot;</span> &lt;&lt; anchors_info.<a class="code" href="classarm__compute_1_1_compute_anchors_info.xhtml#a1938a8fb37c002870984041e630f8b07">feat_height</a>() &lt;&lt; <span class="stringliteral">&quot;)~&quot;</span> &lt;&lt; anchors_info.<a class="code" href="classarm__compute_1_1_compute_anchors_info.xhtml#a70fd561a558e9f433088b64587a9cb62">spatial_scale</a>();</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;}</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;<span class="comment">/** Formatted output of the ComputeAnchorsInfo type.</span></div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="comment"> * @param[in] anchors_info Type to output.</span></div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="comment"> * @return Formatted string.</span></div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00283"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a24bc4de5c636b56f9b59533fead920c2">  283</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_compute_anchors_info.xhtml">ComputeAnchorsInfo</a> &amp;anchors_info)</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;{</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    std::stringstream str;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    str &lt;&lt; anchors_info;</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;}</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="comment">/** Formatted output of the GenerateProposalsInfo type.</span></div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;<span class="comment"> * @param[out] os             Output stream.</span></div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;<span class="comment"> * @param[in]  proposals_info Type to output.</span></div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;<span class="comment"> * @return Modified output stream.</span></div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00297"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a1a54a883f8acc0664accdae9bed93494">  297</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute.xhtml#af3985189d478b45014e7dead9d002e2a">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_generate_proposals_info.xhtml">GenerateProposalsInfo</a> &amp;proposals_info)</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;{</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;(&quot;</span> &lt;&lt; proposals_info.<a class="code" href="classarm__compute_1_1_generate_proposals_info.xhtml#a5d68f71fde6fb8401332cbe3973368a2">im_width</a>() &lt;&lt; <span class="stringliteral">&quot;x&quot;</span> &lt;&lt; proposals_info.<a class="code" href="classarm__compute_1_1_generate_proposals_info.xhtml#ac2a327bd7d58d9fa1c49c302fefbbcba">im_height</a>() &lt;&lt; <span class="stringliteral">&quot;)~&quot;</span> &lt;&lt; proposals_info.<a class="code" href="classarm__compute_1_1_generate_proposals_info.xhtml#af5d260b8c4c285dbdc1b6f545f86b160">im_scale</a>();</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;}</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;<span class="comment">/** Formatted output of the GenerateProposalsInfo type.</span></div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="comment"> * @param[in] proposals_info Type to output.</span></div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;<span class="comment"> * @return Formatted string.</span></div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00309"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#aa597016c0aaa2990ed31b8aaa6f2ccc3">  309</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_generate_proposals_info.xhtml">GenerateProposalsInfo</a> &amp;proposals_info)</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;{</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    std::stringstream str;</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    str &lt;&lt; proposals_info;</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;}</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;<span class="comment">/** Formatted output of the QuantizationInfo type.</span></div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;<span class="comment"> * @param[out] os    Output stream.</span></div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;<span class="comment"> * @param[in]  qinfo Type to output.</span></div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;<span class="comment"> * @return Modified output stream.</span></div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00323"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a759d06440ed4adc531dd10c8c76e3b88">  323</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute.xhtml#af3985189d478b45014e7dead9d002e2a">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad85d7becf0c6e3cffbc255489808e219">qinfo</a>)</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;{</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> uqinfo = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad85d7becf0c6e3cffbc255489808e219">qinfo</a>.<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">uniform</a>();</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;Scale:&quot;</span> &lt;&lt; uqinfo.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a> &lt;&lt; <span class="stringliteral">&quot;~&quot;</span>;</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;Offset:&quot;</span> &lt;&lt; uqinfo.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a97bd6c077f3c7769f575b82988b9b668">offset</a>;</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;}</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;<span class="comment">/** Formatted output of the QuantizationInfo type.</span></div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;<span class="comment"> * @param[in] quantization_info Type to output.</span></div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;<span class="comment"> * @return Formatted string.</span></div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00337"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#ad9fd48b3c01116b217a684aaeaf8b24f">  337</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;quantization_info)</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;{</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    std::stringstream str;</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    str &lt;&lt; quantization_info;</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;}</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;<span class="comment">/** Formatted output of the activation function type.</span></div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;<span class="comment"> * @param[out] os           Output stream.</span></div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;<span class="comment"> * @param[in]  act_function Type to output.</span></div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;<span class="comment"> * @return Modified output stream.</span></div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00351"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a9d79efe2673aeb3f9a9160b6a78de50c">  351</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute.xhtml#af3985189d478b45014e7dead9d002e2a">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9ea">ActivationLayerInfo::ActivationFunction</a> &amp;act_function)</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;{</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    <span class="keywordflow">switch</span>(act_function)</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    {</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa7d8a220d2262f9d6c658d549ee12cf2c">ActivationLayerInfo::ActivationFunction::ABS</a>:</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;ABS&quot;</span>;</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaaaac544aacc3615aada24897a215f5046">ActivationLayerInfo::ActivationFunction::LINEAR</a>:</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;LINEAR&quot;</span>;</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa72ee60fba0509af07cbbd91398d8db9d">ActivationLayerInfo::ActivationFunction::LOGISTIC</a>:</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;LOGISTIC&quot;</span>;</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaad346bb4679d29be241279f15d7795c1c">ActivationLayerInfo::ActivationFunction::RELU</a>:</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;RELU&quot;</span>;</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaacc516ab03b98f1c908ddf6ed4a7c45e9">ActivationLayerInfo::ActivationFunction::BOUNDED_RELU</a>:</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;BOUNDED_RELU&quot;</span>;</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaac7e80a3de04936f4e423e1b564fdca10">ActivationLayerInfo::ActivationFunction::LEAKY_RELU</a>:</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;LEAKY_RELU&quot;</span>;</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaadcc44a50c791a591c74e00ecdda7c58d">ActivationLayerInfo::ActivationFunction::SOFT_RELU</a>:</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;SOFT_RELU&quot;</span>;</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa36875f2500a09ee35d0bb7eb8c0b91b0">ActivationLayerInfo::ActivationFunction::SQRT</a>:</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;SQRT&quot;</span>;</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaaab1d4411a9e7f5e82002512cddfdc33a">ActivationLayerInfo::ActivationFunction::LU_BOUNDED_RELU</a>:</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;LU_BOUNDED_RELU&quot;</span>;</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa5b44c930bf0ddeef48b50ef11e5ddd58">ActivationLayerInfo::ActivationFunction::ELU</a>:</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;ELU&quot;</span>;</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa12dec4e1f7ec620651b2b95c440ffac0">ActivationLayerInfo::ActivationFunction::SQUARE</a>:</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;SQUARE&quot;</span>;</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa143c8c6f51b9bb893ce71e38702e3cc1">ActivationLayerInfo::ActivationFunction::TANH</a>:</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;TANH&quot;</span>;</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaad8156d3c6735d75d8a1b8dedd0e79c8b">ActivationLayerInfo::ActivationFunction::IDENTITY</a>:</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;IDENTITY&quot;</span>;</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    }</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;}</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;<span class="comment">/** Formatted output of the activation function info type.</span></div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;<span class="comment"> * @param[in] info Type to output.</span></div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;<span class="comment"> * @return Formatted string.</span></div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00407"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a72626d2cca3922127c41526e37e9e623">  407</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">arm_compute::ActivationLayerInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>)</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;{</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    std::stringstream str;</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.enabled())</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    {</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;        str &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.activation();</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    }</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;}</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;<span class="comment">/** Formatted output of the activation function type.</span></div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;<span class="comment"> * @param[in] function Type to output.</span></div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;<span class="comment"> * @return Formatted string.</span></div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00423"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a8a18c453150ab547c1add44b3ed3bc56">  423</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9ea">arm_compute::ActivationLayerInfo::ActivationFunction</a> &amp;<span class="keyword">function</span>)</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;{</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    std::stringstream str;</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    str &lt;&lt; <span class="keyword">function</span>;</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;}</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;<span class="comment">/** Formatted output of the NormType type.</span></div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;<span class="comment"> * @param[out] os        Output stream.</span></div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;<span class="comment"> * @param[in]  norm_type Type to output.</span></div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;<span class="comment"> * @return Modified output stream.</span></div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00437"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a2ab7370aab6e5698990c50c8871fa6fb">  437</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute.xhtml#af3985189d478b45014e7dead9d002e2a">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59ca">NormType</a> &amp;norm_type)</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;{</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    <span class="keywordflow">switch</span>(norm_type)</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    {</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59caa980fef040549733973683b1a868f96e5">NormType::CROSS_MAP</a>:</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;CROSS_MAP&quot;</span>;</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59caaca2475ab7883ebb9f125241141896190">NormType::IN_MAP_1D</a>:</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;IN_MAP_1D&quot;</span>;</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59caa6ff8bd96743aae9fd283cd822b84278e">NormType::IN_MAP_2D</a>:</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;IN_MAP_2D&quot;</span>;</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    }</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;}</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;<span class="comment">/** Formatted output of @ref NormalizationLayerInfo.</span></div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;<span class="comment"> * @param[in] info Type to output.</span></div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;<span class="comment"> * @return Formatted string.</span></div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00463"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a45dd771bdecbafb975fd267c2ae320a7">  463</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_normalization_layer_info.xhtml">arm_compute::NormalizationLayerInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>)</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;{</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;    std::stringstream str;</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    str &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.type() &lt;&lt; <span class="stringliteral">&quot;:NormSize=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.norm_size();</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;}</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;<span class="comment">/** Formatted output of @ref NormalizationLayerInfo.</span></div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;<span class="comment"> * @param[out] os   Output stream.</span></div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;<span class="comment"> * @param[in]  info Type to output.</span></div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;<span class="comment"> * @return Modified output stream.</span></div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00477"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a6e422c610c91f611590173cd595c94c5">  477</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute.xhtml#af3985189d478b45014e7dead9d002e2a">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_normalization_layer_info.xhtml">NormalizationLayerInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>)</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;{</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;    os &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.type() &lt;&lt; <span class="stringliteral">&quot;:NormSize=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.norm_size();</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;}</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;<span class="comment">/** Formatted output of the PoolingType type.</span></div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;<span class="comment"> * @param[out] os        Output stream.</span></div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;<span class="comment"> * @param[in]  pool_type Type to output.</span></div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;<span class="comment"> * @return Modified output stream.</span></div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00490"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a336cf1e870f467e44c184587a13feeec">  490</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute.xhtml#af3985189d478b45014e7dead9d002e2a">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93">PoolingType</a> &amp;pool_type)</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;{</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;    <span class="keywordflow">switch</span>(pool_type)</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    {</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93afcefd647d6a866603c627b11347c707a">PoolingType::AVG</a>:</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;AVG&quot;</span>;</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#adf2ced65e536375a1c96425d9fced858a26a4b44a837bf97b972628509912b4a5">PoolingType::MAX</a>:</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;MAX&quot;</span>;</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93a7e6aa2d53f6ee2b1a34b017fa403cb76">PoolingType::L2</a>:</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;L2&quot;</span>;</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;    }</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;}</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;<span class="comment">/** Formatted output of @ref PoolingLayerInfo.</span></div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;<span class="comment"> * @param[out] os   Output stream.</span></div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;<span class="comment"> * @param[in]  info Type to output.</span></div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;<span class="comment"> * @return Modified output stream.</span></div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00517"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#ae72a61a2ca5c962ab1d37065e5598060">  517</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute.xhtml#af3985189d478b45014e7dead9d002e2a">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>)</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;{</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    os &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.pool_type;</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;}</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;<span class="comment">/** Formatted output of @ref RoundingPolicy.</span></div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;<span class="comment"> * @param[in] rounding_policy Type to output.</span></div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;<span class="comment"> * @return Formatted string.</span></div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00530"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a25dac68b6321b9e53027e79222a0eb7f">  530</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a60ad1078faeaf3f59266d69ad937339f">rounding_policy</a>)</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;{</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;    std::stringstream str;</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;    str &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a60ad1078faeaf3f59266d69ad937339f">rounding_policy</a>;</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;}</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;<span class="comment">/** [Print DataLayout type] **/</span><span class="comment"></span></div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;<span class="comment">/** Formatted output of the DataLayout type.</span></div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;<span class="comment"> * @param[out] os          Output stream.</span></div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;<span class="comment"> * @param[in]  data_layout Type to output.</span></div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;<span class="comment"> * @return Modified output stream.</span></div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00545"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a1698cb24508a2bc45962bc887f18a8d0">  545</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute.xhtml#af3985189d478b45014e7dead9d002e2a">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a>)</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;{</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;    <span class="keywordflow">switch</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a>)</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;    {</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a3a440b3893fa10608d4428958be1c52ea696b031073e74bf2cb98e5ef201d4aa3">DataLayout::UNKNOWN</a>:</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;UNKNOWN&quot;</span>;</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>:</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;NHWC&quot;</span>;</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>:</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;NCHW&quot;</span>;</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;    }</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;}</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;<span class="comment">/** Formatted output of the DataLayout type.</span></div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;<span class="comment"> * @param[in] data_layout Type to output.</span></div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;<span class="comment"> * @return Formatted string.</span></div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00571"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#ae1240e4698e8a901179e519102b5e033">  571</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">arm_compute::DataLayout</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a>)</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;{</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;    std::stringstream str;</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;    str &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a>;</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;}<span class="comment"></span></div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;<span class="comment">/** [Print DataLayout type] **/</span></div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;<span class="comment">/** Formatted output of the DataLayoutDimension type.</span></div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;<span class="comment"> * @param[out] os              Output stream.</span></div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;<span class="comment"> * @param[in]  data_layout_dim Data layout dimension to print.</span></div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;<span class="comment"> * @return Modified output stream.</span></div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00586"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#adec19acb64bfca26fa53ef76f03b79ef">  586</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute.xhtml#af3985189d478b45014e7dead9d002e2a">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02">DataLayoutDimension</a> &amp;data_layout_dim)</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;{</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;    <span class="keywordflow">switch</span>(data_layout_dim)</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;    {</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">DataLayoutDimension::WIDTH</a>:</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;WIDTH&quot;</span>;</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">DataLayoutDimension::HEIGHT</a>:</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;HEIGHT&quot;</span>;</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">DataLayoutDimension::CHANNEL</a>:</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;CHANNEL&quot;</span>;</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a628bcf7e10fc1c2a984f379a1ec3393a">DataLayoutDimension::BATCHES</a>:</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;BATCHES&quot;</span>;</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;    }</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;}</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;<span class="comment">/** Formatted output of the DataType type.</span></div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;<span class="comment"> * @param[out] os        Output stream.</span></div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;<span class="comment"> * @param[in]  data_type Type to output.</span></div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;<span class="comment"> * @return Modified output stream.</span></div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00615"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a685af15532d70b8682bcc52f06f034f9">  615</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute.xhtml#af3985189d478b45014e7dead9d002e2a">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>)</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;{</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;    <span class="keywordflow">switch</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>)</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;    {</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a3a440b3893fa10608d4428958be1c52ea696b031073e74bf2cb98e5ef201d4aa3">DataType::UNKNOWN</a>:</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;UNKNOWN&quot;</span>;</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>:</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;U8&quot;</span>;</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a5f007421a4becd11c0666c2058b0b36c">DataType::QSYMM8</a>:</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;QSYMM8&quot;</span>;</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>:</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;QASYMM8&quot;</span>;</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">DataType::QASYMM8_SIGNED</a>:</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;QASYMM8_SIGNED&quot;</span>;</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a34f500e941c4df30b870126ec868ebd5">DataType::QSYMM8_PER_CHANNEL</a>:</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;QSYMM8_PER_CHANNEL&quot;</span>;</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">DataType::S8</a>:</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;S8&quot;</span>;</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">DataType::U16</a>:</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;U16&quot;</span>;</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a>:</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;S16&quot;</span>;</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">DataType::QSYMM16</a>:</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;QSYMM16&quot;</span>;</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3b989c6b5398b3b9538ad103a324205e">DataType::QASYMM16</a>:</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;QASYMM16&quot;</span>;</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">DataType::U32</a>:</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;U32&quot;</span>;</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>:</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;S32&quot;</span>;</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a31d65cccd6593e4101db93fb878abcaa">DataType::U64</a>:</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;U64&quot;</span>;</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a115dca124dc6423c7a400b8a8a0270cc">DataType::S64</a>:</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;S64&quot;</span>;</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">DataType::F16</a>:</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;F16&quot;</span>;</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>:</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;F32&quot;</span>;</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a1ad5f6f3069070ec4cbbdc94d5e61e0e">DataType::F64</a>:</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;F64&quot;</span>;</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6abd7ef6d4f35bc7d05c559b65032f15d1">DataType::SIZET</a>:</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;SIZET&quot;</span>;</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;    }</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;}</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;<span class="comment">/** Formatted output of the DataType type.</span></div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;<span class="comment"> * @param[in] data_type Type to output.</span></div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;<span class="comment"> * @return Formatted string.</span></div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00689"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a96b47511b549b48d2ead05b5c757ccc9">  689</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">arm_compute::DataType</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>)</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;{</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;    std::stringstream str;</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;    str &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>;</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;}</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;<span class="comment">/** Formatted output of the Format type.</span></div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;<span class="comment"> * @param[out] os     Output stream.</span></div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;<span class="comment"> * @param[in]  format Type to output.</span></div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;<span class="comment"> * @return Modified output stream.</span></div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00703"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a3b22e54b0ac0204c3b89aebcd695fa03">  703</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute.xhtml#af3985189d478b45014e7dead9d002e2a">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> &amp;format)</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;{</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;    <span class="keywordflow">switch</span>(format)</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;    {</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a3a440b3893fa10608d4428958be1c52ea696b031073e74bf2cb98e5ef201d4aa3">Format::UNKNOWN</a>:</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;UNKNOWN&quot;</span>;</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>:</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;U8&quot;</span>;</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">Format::S16</a>:</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;S16&quot;</span>;</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">Format::U16</a>:</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;U16&quot;</span>;</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">Format::S32</a>:</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;S32&quot;</span>;</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">Format::U32</a>:</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;U32&quot;</span>;</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">Format::F16</a>:</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;F16&quot;</span>;</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">Format::F32</a>:</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;F32&quot;</span>;</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a079eb95759d2ad31254f659d63651825">Format::UV88</a>:</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;UV88&quot;</span>;</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a30ff380a3be74628024063a99fba10f0">Format::RGB888</a>:</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;RGB888&quot;</span>;</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a165f06116e7b8d9b2481dfc805db4619">Format::RGBA8888</a>:</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;RGBA8888&quot;</span>;</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a11cfa56ee0ddbbc30a2fd189d7475f4c">Format::YUV444</a>:</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;YUV444&quot;</span>;</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a481e7a6945eb9f23e87f2de780b2e164">Format::YUYV422</a>:</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;YUYV422&quot;</span>;</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a202f5d8c2c70d31048154d8b8b28e755">Format::NV12</a>:</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;NV12&quot;</span>;</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a8e9f6aa1af7e0abbc7e64521e6ffe1b4">Format::NV21</a>:</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;NV21&quot;</span>;</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ab08f0cb36474118c5bbc03b3a172a778">Format::IYUV</a>:</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;IYUV&quot;</span>;</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58af557448a61ad2927194f63442e131dfa">Format::UYVY422</a>:</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;UYVY422&quot;</span>;</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;    }</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;}</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;<span class="comment">/** Formatted output of the Format type.</span></div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;<span class="comment"> * @param[in] format Type to output.</span></div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;<span class="comment"> * @return Formatted string.</span></div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00771"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#ab0e6381843dc9901bb59285ec846dc5d">  771</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> &amp;format)</div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;{</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;    std::stringstream str;</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;    str &lt;&lt; format;</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;}</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;<span class="comment">/** Formatted output of the Channel type.</span></div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;<span class="comment"> * @param[out] os      Output stream.</span></div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;<span class="comment"> * @param[in]  channel Type to output.</span></div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;<span class="comment"> * @return Modified output stream.</span></div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00785"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#aa66be15c012986ebd4c1934b97e08a36">  785</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute.xhtml#af3985189d478b45014e7dead9d002e2a">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">Channel</a> &amp;channel)</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;{</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;    <span class="keywordflow">switch</span>(channel)</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;    {</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a3a440b3893fa10608d4428958be1c52ea696b031073e74bf2cb98e5ef201d4aa3">Channel::UNKNOWN</a>:</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;UNKNOWN&quot;</span>;</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa9c5959e6f08f10d0edbadf5be1f33c53">Channel::C0</a>:</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;C0&quot;</span>;</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa1a2ddc2db4693cfd16d534cde5572cc1">Channel::C1</a>:</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;C1&quot;</span>;</div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aaf1a543f5a2c5d49bc5dde298fcf716e4">Channel::C2</a>:</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;C2&quot;</span>;</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa3abe124ecc82bf2c2e22e6058f38c50c">Channel::C3</a>:</div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;C3&quot;</span>;</div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aae1e1d3d40573127e9ee0480caf1283d6">Channel::R</a>:</div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;R&quot;</span>;</div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aadfcf28d0734569a6a693bc8194de62bf">Channel::G</a>:</div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;G&quot;</span>;</div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa9d5ed678fe57bcca610140957afab571">Channel::B</a>:</div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;B&quot;</span>;</div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa7fc56270e7a70fa81a5935b72eacbe29">Channel::A</a>:</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;A&quot;</span>;</div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa57cec4137b614c87cb4e24a3d003a3e0">Channel::Y</a>:</div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;Y&quot;</span>;</div><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">Channel::U</a>:</div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;U&quot;</span>;</div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa5206560a306a2e085a437fd258eb57ce">Channel::V</a>:</div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;V&quot;</span>;</div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;    }</div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;</div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;}</div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;<span class="comment">/** Formatted output of the Channel type.</span></div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;<span class="comment"> * @param[in] channel Type to output.</span></div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;<span class="comment"> * @return Formatted string.</span></div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00838"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a813e71cd70c2bbcbf0743fa83a3608b9">  838</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">Channel</a> &amp;channel)</div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;{</div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;    std::stringstream str;</div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;    str &lt;&lt; channel;</div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;}</div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;<span class="comment">/** Formatted output of the BorderMode type.</span></div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;<span class="comment"> * @param[out] os   Output stream.</span></div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;<span class="comment"> * @param[in]  mode Type to output.</span></div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;<span class="comment"> * @return Modified output stream.</span></div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00852"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a7929032d41d5f23cd1778a70508d0219">  852</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute.xhtml#af3985189d478b45014e7dead9d002e2a">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a> &amp;mode)</div><div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;{</div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;    <span class="keywordflow">switch</span>(mode)</div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;    {</div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a0db45d2a4141101bdfe48e3314cfbca3">BorderMode::UNDEFINED</a>:</div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;UNDEFINED&quot;</span>;</div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92">BorderMode::CONSTANT</a>:</div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;CONSTANT&quot;</span>;</div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a4ef59320fbe90fe47d40f1f71e4c5daa">BorderMode::REPLICATE</a>:</div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;REPLICATE&quot;</span>;</div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;    }</div><div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;</div><div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;}</div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;<span class="comment">/** Formatted output of the BorderSize type.</span></div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;<span class="comment"> * @param[out] os     Output stream.</span></div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;<span class="comment"> * @param[in]  border Type to output.</span></div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;<span class="comment"> * @return Modified output stream.</span></div><div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00879"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#af32c4c5cdd0efde09774eb803bc8a0bd">  879</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute.xhtml#af3985189d478b45014e7dead9d002e2a">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a> &amp;border)</div><div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;{</div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;    os &lt;&lt; border.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">top</a> &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;       &lt;&lt; border.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a78b0fed184c642b78f32fd34b228a5f9">right</a> &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div><div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;       &lt;&lt; border.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a802ffcf1b49237efe5be8a314d3f3869">bottom</a> &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div><div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;       &lt;&lt; border.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a05374b750b0fc472c34ee61e6f028bba">left</a>;</div><div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;</div><div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;}</div><div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;<span class="comment">/** Formatted output of the PaddingList type.</span></div><div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;<span class="comment"> * @param[out] os      Output stream.</span></div><div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;<span class="comment"> * @param[in]  padding Type to output.</span></div><div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;<span class="comment"> * @return Modified output stream.</span></div><div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00896"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#af15a06b73e1fde15f0809ce07bf1ab7d">  896</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute.xhtml#af3985189d478b45014e7dead9d002e2a">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ac1a1b012674e0f1de071a611391828ad">PaddingList</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a735a025fce26c1ef147b54426df18181">padding</a>)</div><div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;{</div><div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;{&quot;</span>;</div><div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> <span class="keyword">const</span> &amp;p : <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a735a025fce26c1ef147b54426df18181">padding</a>)</div><div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;    {</div><div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;        os &lt;&lt; <span class="stringliteral">&quot;{&quot;</span> &lt;&lt; p.first &lt;&lt; <span class="stringliteral">&quot;,&quot;</span> &lt;&lt; p.second &lt;&lt; <span class="stringliteral">&quot;}&quot;</span>;</div><div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;    }</div><div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;}&quot;</span>;</div><div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;}</div><div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;<span class="comment">/** Formatted output of the Multiples type.</span></div><div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;<span class="comment"> * @param[out] os        Output stream.</span></div><div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;<span class="comment"> * @param[in]  multiples Type to output.</span></div><div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;<span class="comment"> * @return Modified output stream.</span></div><div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00914"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a9caac285297030f50a972095e767aff9">  914</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute.xhtml#af3985189d478b45014e7dead9d002e2a">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#afe9e10e5fdfd1e2665ac17c75c0cacd8">Multiples</a> &amp;multiples)</div><div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;{</div><div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;(&quot;</span>;</div><div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i = 0; i &lt; multiples.size() - 1; i++)</div><div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;    {</div><div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;        os &lt;&lt; multiples[i] &lt;&lt; <span class="stringliteral">&quot;, &quot;</span>;</div><div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;    }</div><div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;    os &lt;&lt; multiples.back() &lt;&lt; <span class="stringliteral">&quot;)&quot;</span>;</div><div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;}</div><div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;<span class="comment">/** Formatted output of the InterpolationPolicy type.</span></div><div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;<span class="comment"> * @param[out] os     Output stream.</span></div><div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;<span class="comment"> * @param[in]  policy Type to output.</span></div><div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;<span class="comment"> * @return Modified output stream.</span></div><div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00932"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a509047aefc691398f1bb60b1f967a98b">  932</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute.xhtml#af3985189d478b45014e7dead9d002e2a">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad986b73e9d5f47a623a9b6d773c25e34">policy</a>)</div><div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;{</div><div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;    <span class="keywordflow">switch</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad986b73e9d5f47a623a9b6d773c25e34">policy</a>)</div><div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;    {</div><div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9a7f5ccbc3d30c2cd3fd04d567946cbde2">InterpolationPolicy::NEAREST_NEIGHBOR</a>:</div><div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;NEAREST_NEIGHBOR&quot;</span>;</div><div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9aad6fddf718ad19b063e02fdd7e8e3e65">InterpolationPolicy::BILINEAR</a>:</div><div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;BILINEAR&quot;</span>;</div><div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9a639aaa22a784d5e5cb03a522267e79c4">InterpolationPolicy::AREA</a>:</div><div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;AREA&quot;</span>;</div><div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div><div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;    }</div><div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;</div><div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;}</div><div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;<span class="comment">/** Formatted output of the SamplingPolicy type.</span></div><div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;<span class="comment"> * @param[out] os     Output stream.</span></div><div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;<span class="comment"> * @param[in]  policy Type to output.</span></div><div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;<span class="comment"> * @return Modified output stream.</span></div><div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00959"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#aab8eb6dc1ba89bb8a69f1c3845988a2b">  959</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute.xhtml#af3985189d478b45014e7dead9d002e2a">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a16a59381d4d74d17d86d69eb4d286d7b">SamplingPolicy</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad986b73e9d5f47a623a9b6d773c25e34">policy</a>)</div><div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;{</div><div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;    <span class="keywordflow">switch</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad986b73e9d5f47a623a9b6d773c25e34">policy</a>)</div><div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;    {</div><div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a16a59381d4d74d17d86d69eb4d286d7bac397289ee45877be0cd49811fe245b4e">SamplingPolicy::CENTER</a>:</div><div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;CENTER&quot;</span>;</div><div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a16a59381d4d74d17d86d69eb4d286d7ba747385047b85ae751f83adb36435a3c1">SamplingPolicy::TOP_LEFT</a>:</div><div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;TOP_LEFT&quot;</span>;</div><div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div><div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;    }</div><div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;</div><div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;}</div><div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;<span class="comment">/** Formatted output of the TensorInfo type.</span></div><div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;<span class="comment"> * @param[out] os   Output stream.</span></div><div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;<span class="comment"> * @param[in]  info Type to output.</span></div><div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;<span class="comment"> * @return Modified output stream.</span></div><div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00983"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#ab398837465010958bfccff032ad1ee51">  983</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute.xhtml#af3985189d478b45014e7dead9d002e2a">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>)</div><div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;{</div><div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;{Shape=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.tensor_shape() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div><div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;Type=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.data_type() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div><div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;Channels=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.num_channels() &lt;&lt; <span class="stringliteral">&quot;}&quot;</span>;</div><div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;}<span class="comment"></span></div><div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;<span class="comment">/** Formatted output of the TensorInfo type.</span></div><div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;<span class="comment"> * @param[in] info Type to output.</span></div><div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;<span class="comment"> * @return Formatted string.</span></div><div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00996"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a48fd5e28bdb4975c141841f0b96f8707">  996</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>)</div><div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;{</div><div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;    std::stringstream str;</div><div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;    str &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>;</div><div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;}</div><div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;<span class="comment">/** Formatted output of the Dimensions type.</span></div><div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;<span class="comment"> * @param[in] dimensions Type to output.</span></div><div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;<span class="comment"> * @return Formatted string.</span></div><div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l01010"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#aa32488ee1dd78e0464ed23e8cc2b6e49"> 1010</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_dimensions.xhtml">Dimensions&lt;T&gt;</a> &amp;dimensions)</div><div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;{</div><div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;    std::stringstream str;</div><div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;    str &lt;&lt; dimensions;</div><div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;}</div><div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;<span class="comment">/** Formatted output of the Strides type.</span></div><div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;<span class="comment"> * @param[in] stride Type to output.</span></div><div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;<span class="comment"> * @return Formatted string.</span></div><div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01023"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a1c4486f45128be7156e38e6dea345a16"> 1023</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_strides.xhtml">Strides</a> &amp;stride)</div><div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;{</div><div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;    std::stringstream str;</div><div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;    str &lt;&lt; stride;</div><div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;}</div><div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;<span class="comment">/** Formatted output of the TensorShape type.</span></div><div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;<span class="comment"> * @param[in] shape Type to output.</span></div><div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;<span class="comment"> * @return Formatted string.</span></div><div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01036"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a9d9b56d1b106b79fc5c5411372222d0f"> 1036</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>)</div><div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;{</div><div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;    std::stringstream str;</div><div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;    str &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>;</div><div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;}</div><div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;<span class="comment">/** Formatted output of the Coordinates type.</span></div><div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;<span class="comment"> * @param[in] coord Type to output.</span></div><div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;<span class="comment"> * @return Formatted string.</span></div><div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01049"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a805a74997e303d29108845956a674387"> 1049</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;coord)</div><div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;{</div><div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;    std::stringstream str;</div><div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;    str &lt;&lt; coord;</div><div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;}</div><div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;<span class="comment">/** Formatted output of the GEMMReshapeInfo type.</span></div><div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;<span class="comment"> * @param[out] os   Output stream.</span></div><div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;<span class="comment"> * @param[in]  info Type to output.</span></div><div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;<span class="comment"> * @return Modified output stream.</span></div><div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01063"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a0fc75dce8064a37effa5e71344b6a5d2"> 1063</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute.xhtml#af3985189d478b45014e7dead9d002e2a">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml">GEMMReshapeInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>)</div><div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;{</div><div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;{m=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.m() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span>;</div><div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;n=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.n() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span>;</div><div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;k=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.k() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span>;</div><div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;mult_transpose1xW_width=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.mult_transpose1xW_width() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span>;</div><div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;mult_interleave4x4_height=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.mult_interleave4x4_height();</div><div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;}&quot;</span>;</div><div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;</div><div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;}</div><div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;<span class="comment">/** Formatted output of the GEMMInfo type.</span></div><div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;<span class="comment"> * @param[out] os   Output stream.</span></div><div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;<span class="comment"> * @param[in]  info Type to output.</span></div><div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160;<span class="comment"> * @return Modified output stream.</span></div><div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01082"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a5fdae5de2d2cf2e7957f0299d17ce5ec"> 1082</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute.xhtml#af3985189d478b45014e7dead9d002e2a">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_g_e_m_m_info.xhtml">GEMMInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>)</div><div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;{</div><div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;{is_a_reshaped=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.is_a_reshaped() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span>;</div><div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;is_b_reshaped=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.is_b_reshaped() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span>;</div><div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;reshape_b_only_on_first_run=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.reshape_b_only_on_first_run() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span>;</div><div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;}&quot;</span>;</div><div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;</div><div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;}</div><div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;<span class="comment">/** Formatted output of the Window::Dimension type.</span></div><div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;<span class="comment"> * @param[out] os  Output stream.</span></div><div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;<span class="comment"> * @param[in]  dim Type to output.</span></div><div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;<span class="comment"> * @return Modified output stream.</span></div><div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01099"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a6ed8dc0f587448d14a1a33cbd5fc4f70"> 1099</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute.xhtml#af3985189d478b45014e7dead9d002e2a">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a> &amp;dim)</div><div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;{</div><div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;{start=&quot;</span> &lt;&lt; dim.<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>() &lt;&lt; <span class="stringliteral">&quot;, end=&quot;</span> &lt;&lt; dim.<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">end</a>() &lt;&lt; <span class="stringliteral">&quot;, step=&quot;</span> &lt;&lt; dim.<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a918580dc9188825d67dbb203a43d02fe">step</a>() &lt;&lt; <span class="stringliteral">&quot;}&quot;</span>;</div><div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;</div><div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;}<span class="comment"></span></div><div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;<span class="comment">/** Formatted output of the Window type.</span></div><div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;<span class="comment"> * @param[out] os  Output stream.</span></div><div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;<span class="comment"> * @param[in]  win Type to output.</span></div><div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;<span class="comment"> * @return Modified output stream.</span></div><div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01112"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#afc6e49991e36423027a467eab1e405b2"> 1112</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute.xhtml#af3985189d478b45014e7dead9d002e2a">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;win)</div><div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;{</div><div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;{&quot;</span>;</div><div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">Coordinates::num_max_dimensions</a>; i++)</div><div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;    {</div><div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;        <span class="keywordflow">if</span>(i &gt; 0)</div><div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;        {</div><div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;, &quot;</span>;</div><div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;        }</div><div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;        os &lt;&lt; win[i];</div><div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;    }</div><div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;}&quot;</span>;</div><div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;</div><div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;}</div><div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;<span class="comment">/** Formatted output of the WeightsInfo type.</span></div><div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01130"></a><span class="lineno"> 1130</span>&#160;<span class="comment"> * @param[in] info Type to output.</span></div><div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;<span class="comment"> * @return Formatted string.</span></div><div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01134"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a26a595cd5522bae4fa1c4f2fb9b8f4d5"> 1134</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_weights_info.xhtml">WeightsInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>)</div><div class="line"><a name="l01135"></a><span class="lineno"> 1135</span>&#160;{</div><div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;    std::stringstream str;</div><div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;    str &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>;</div><div class="line"><a name="l01138"></a><span class="lineno"> 1138</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l01139"></a><span class="lineno"> 1139</span>&#160;}</div><div class="line"><a name="l01140"></a><span class="lineno"> 1140</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01141"></a><span class="lineno"> 1141</span>&#160;<span class="comment">/** Formatted output of the GEMMReshapeInfo type.</span></div><div class="line"><a name="l01142"></a><span class="lineno"> 1142</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01143"></a><span class="lineno"> 1143</span>&#160;<span class="comment"> * @param[in] info Type to output.</span></div><div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01145"></a><span class="lineno"> 1145</span>&#160;<span class="comment"> * @return Formatted string.</span></div><div class="line"><a name="l01146"></a><span class="lineno"> 1146</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01147"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#adac3c1908846c6361e664a353ad1c3cf"> 1147</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml">GEMMReshapeInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>)</div><div class="line"><a name="l01148"></a><span class="lineno"> 1148</span>&#160;{</div><div class="line"><a name="l01149"></a><span class="lineno"> 1149</span>&#160;    std::stringstream str;</div><div class="line"><a name="l01150"></a><span class="lineno"> 1150</span>&#160;    str &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>;</div><div class="line"><a name="l01151"></a><span class="lineno"> 1151</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l01152"></a><span class="lineno"> 1152</span>&#160;}</div><div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01154"></a><span class="lineno"> 1154</span>&#160;<span class="comment">/** Formatted output of the GEMMInfo type.</span></div><div class="line"><a name="l01155"></a><span class="lineno"> 1155</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01156"></a><span class="lineno"> 1156</span>&#160;<span class="comment"> * @param[in] info Type to output.</span></div><div class="line"><a name="l01157"></a><span class="lineno"> 1157</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01158"></a><span class="lineno"> 1158</span>&#160;<span class="comment"> * @return Formatted string.</span></div><div class="line"><a name="l01159"></a><span class="lineno"> 1159</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01160"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a8ac2dfdfad6db71a5cf2ecee6b70f722"> 1160</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_g_e_m_m_info.xhtml">GEMMInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>)</div><div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;{</div><div class="line"><a name="l01162"></a><span class="lineno"> 1162</span>&#160;    std::stringstream str;</div><div class="line"><a name="l01163"></a><span class="lineno"> 1163</span>&#160;    str &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>;</div><div class="line"><a name="l01164"></a><span class="lineno"> 1164</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l01165"></a><span class="lineno"> 1165</span>&#160;}</div><div class="line"><a name="l01166"></a><span class="lineno"> 1166</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01167"></a><span class="lineno"> 1167</span>&#160;<span class="comment">/** Formatted output of the Window::Dimension type.</span></div><div class="line"><a name="l01168"></a><span class="lineno"> 1168</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01169"></a><span class="lineno"> 1169</span>&#160;<span class="comment"> * @param[in] dim Type to output.</span></div><div class="line"><a name="l01170"></a><span class="lineno"> 1170</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;<span class="comment"> * @return Formatted string.</span></div><div class="line"><a name="l01172"></a><span class="lineno"> 1172</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01173"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#ab6ea50ec0a98c2180e6530cfcb5eb366"> 1173</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a> &amp;dim)</div><div class="line"><a name="l01174"></a><span class="lineno"> 1174</span>&#160;{</div><div class="line"><a name="l01175"></a><span class="lineno"> 1175</span>&#160;    std::stringstream str;</div><div class="line"><a name="l01176"></a><span class="lineno"> 1176</span>&#160;    str &lt;&lt; dim;</div><div class="line"><a name="l01177"></a><span class="lineno"> 1177</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l01178"></a><span class="lineno"> 1178</span>&#160;}<span class="comment"></span></div><div class="line"><a name="l01179"></a><span class="lineno"> 1179</span>&#160;<span class="comment">/** Formatted output of the Window type.</span></div><div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;<span class="comment"> * @param[in] win Type to output.</span></div><div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;<span class="comment"> * @return Formatted string.</span></div><div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01185"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a99aba2774f142d36c6a286cbfe027772"> 1185</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;win)</div><div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;{</div><div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;    std::stringstream str;</div><div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160;    str &lt;&lt; win;</div><div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;}</div><div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01192"></a><span class="lineno"> 1192</span>&#160;<span class="comment">/** Formatted output of the Rectangle type.</span></div><div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01194"></a><span class="lineno"> 1194</span>&#160;<span class="comment"> * @param[out] os   Output stream.</span></div><div class="line"><a name="l01195"></a><span class="lineno"> 1195</span>&#160;<span class="comment"> * @param[in]  rect Type to output.</span></div><div class="line"><a name="l01196"></a><span class="lineno"> 1196</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01197"></a><span class="lineno"> 1197</span>&#160;<span class="comment"> * @return Modified output stream.</span></div><div class="line"><a name="l01198"></a><span class="lineno"> 1198</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01199"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a17881750c427aedd95deba46a4366ace"> 1199</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute.xhtml#af3985189d478b45014e7dead9d002e2a">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_rectangle.xhtml">Rectangle</a> &amp;rect)</div><div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;{</div><div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;    os &lt;&lt; rect.<a class="code" href="structarm__compute_1_1_rectangle.xhtml#ad0eab1042455a2067c812ab8071d5376">width</a> &lt;&lt; <span class="stringliteral">&quot;x&quot;</span> &lt;&lt; rect.<a class="code" href="structarm__compute_1_1_rectangle.xhtml#a81c9f8d0b8c3b49d770be14dbe9f0d37">height</a>;</div><div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;+&quot;</span> &lt;&lt; rect.<a class="code" href="structarm__compute_1_1_rectangle.xhtml#a4dde988b1b2adba65ae3efa69f65d960">x</a> &lt;&lt; <span class="stringliteral">&quot;+&quot;</span> &lt;&lt; rect.<a class="code" href="structarm__compute_1_1_rectangle.xhtml#ab0580f504a7428539be299fa71565f30">y</a>;</div><div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160;</div><div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l01205"></a><span class="lineno"> 1205</span>&#160;}</div><div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01207"></a><span class="lineno"> 1207</span>&#160;<span class="comment">/** Formatted output of the PaddingMode type.</span></div><div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;<span class="comment"> * @param[out] os   Output stream.</span></div><div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160;<span class="comment"> * @param[in]  mode Type to output.</span></div><div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160;<span class="comment"> * @return Modified output stream.</span></div><div class="line"><a name="l01213"></a><span class="lineno"> 1213</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01214"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a23cde8eb733fe42667cd5b2c79141dba"> 1214</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute.xhtml#af3985189d478b45014e7dead9d002e2a">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91">PaddingMode</a> &amp;mode)</div><div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160;{</div><div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;    <span class="keywordflow">switch</span>(mode)</div><div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;    {</div><div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92">PaddingMode::CONSTANT</a>:</div><div class="line"><a name="l01219"></a><span class="lineno"> 1219</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;CONSTANT&quot;</span>;</div><div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91ae4f6a05f82ed398f984f4bc1a55838df">PaddingMode::REFLECT</a>:</div><div class="line"><a name="l01222"></a><span class="lineno"> 1222</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;REFLECT&quot;</span>;</div><div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a161b3d9016563aba9ac190fc02ada9bb">PaddingMode::SYMMETRIC</a>:</div><div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;SYMMETRIC&quot;</span>;</div><div class="line"><a name="l01226"></a><span class="lineno"> 1226</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01227"></a><span class="lineno"> 1227</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l01228"></a><span class="lineno"> 1228</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div><div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;    }</div><div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;</div><div class="line"><a name="l01231"></a><span class="lineno"> 1231</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160;}</div><div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160;<span class="comment">/** Formatted output of the PaddingMode type.</span></div><div class="line"><a name="l01235"></a><span class="lineno"> 1235</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01236"></a><span class="lineno"> 1236</span>&#160;<span class="comment"> * @param[in] mode Type to output.</span></div><div class="line"><a name="l01237"></a><span class="lineno"> 1237</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01238"></a><span class="lineno"> 1238</span>&#160;<span class="comment"> * @return Formatted string.</span></div><div class="line"><a name="l01239"></a><span class="lineno"> 1239</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01240"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a58c3c62a56ede81c516f987a263bc95a"> 1240</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91">PaddingMode</a> &amp;mode)</div><div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;{</div><div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;    std::stringstream str;</div><div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160;    str &lt;&lt; mode;</div><div class="line"><a name="l01244"></a><span class="lineno"> 1244</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l01245"></a><span class="lineno"> 1245</span>&#160;}</div><div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160;<span class="comment">/** Formatted output of the PadStrideInfo type.</span></div><div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01249"></a><span class="lineno"> 1249</span>&#160;<span class="comment"> * @param[out] os              Output stream.</span></div><div class="line"><a name="l01250"></a><span class="lineno"> 1250</span>&#160;<span class="comment"> * @param[in]  pad_stride_info Type to output.</span></div><div class="line"><a name="l01251"></a><span class="lineno"> 1251</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01252"></a><span class="lineno"> 1252</span>&#160;<span class="comment"> * @return Modified output stream.</span></div><div class="line"><a name="l01253"></a><span class="lineno"> 1253</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01254"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a8af36ae3a3613112c3a95e57f606359a"> 1254</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute.xhtml#af3985189d478b45014e7dead9d002e2a">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;pad_stride_info)</div><div class="line"><a name="l01255"></a><span class="lineno"> 1255</span>&#160;{</div><div class="line"><a name="l01256"></a><span class="lineno"> 1256</span>&#160;    os &lt;&lt; pad_stride_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a6e324c1bd1111876469ea247da156147">stride</a>().first &lt;&lt; <span class="stringliteral">&quot;,&quot;</span> &lt;&lt; pad_stride_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a6e324c1bd1111876469ea247da156147">stride</a>().second;</div><div class="line"><a name="l01257"></a><span class="lineno"> 1257</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;;&quot;</span>;</div><div class="line"><a name="l01258"></a><span class="lineno"> 1258</span>&#160;    os &lt;&lt; pad_stride_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a7144874ab401f5c4e249a1115dfb5166">pad_left</a>() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span> &lt;&lt; pad_stride_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a3860caeeaa259d59ccf69c3aea23f549">pad_right</a>() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div><div class="line"><a name="l01259"></a><span class="lineno"> 1259</span>&#160;       &lt;&lt; pad_stride_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a3fea0ce4e6eeee7bf3a511c31b51d44f">pad_top</a>() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span> &lt;&lt; pad_stride_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#ac49df0924d183da42cffc04cf9aba1f8">pad_bottom</a>();</div><div class="line"><a name="l01260"></a><span class="lineno"> 1260</span>&#160;</div><div class="line"><a name="l01261"></a><span class="lineno"> 1261</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l01262"></a><span class="lineno"> 1262</span>&#160;}</div><div class="line"><a name="l01263"></a><span class="lineno"> 1263</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01264"></a><span class="lineno"> 1264</span>&#160;<span class="comment">/** Formatted output of the PadStrideInfo type.</span></div><div class="line"><a name="l01265"></a><span class="lineno"> 1265</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01266"></a><span class="lineno"> 1266</span>&#160;<span class="comment"> * @param[in] pad_stride_info Type to output.</span></div><div class="line"><a name="l01267"></a><span class="lineno"> 1267</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01268"></a><span class="lineno"> 1268</span>&#160;<span class="comment"> * @return Formatted string.</span></div><div class="line"><a name="l01269"></a><span class="lineno"> 1269</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01270"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a2c0e6c1c4cf10da25e7a7362ba151ba2"> 1270</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;pad_stride_info)</div><div class="line"><a name="l01271"></a><span class="lineno"> 1271</span>&#160;{</div><div class="line"><a name="l01272"></a><span class="lineno"> 1272</span>&#160;    std::stringstream str;</div><div class="line"><a name="l01273"></a><span class="lineno"> 1273</span>&#160;    str &lt;&lt; pad_stride_info;</div><div class="line"><a name="l01274"></a><span class="lineno"> 1274</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l01275"></a><span class="lineno"> 1275</span>&#160;}</div><div class="line"><a name="l01276"></a><span class="lineno"> 1276</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01277"></a><span class="lineno"> 1277</span>&#160;<span class="comment">/** Formatted output of the BorderMode type.</span></div><div class="line"><a name="l01278"></a><span class="lineno"> 1278</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01279"></a><span class="lineno"> 1279</span>&#160;<span class="comment"> * @param[in] mode Type to output.</span></div><div class="line"><a name="l01280"></a><span class="lineno"> 1280</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160;<span class="comment"> * @return Formatted string.</span></div><div class="line"><a name="l01282"></a><span class="lineno"> 1282</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01283"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a0604106dd269acd58152a81ba87cc265"> 1283</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a> &amp;mode)</div><div class="line"><a name="l01284"></a><span class="lineno"> 1284</span>&#160;{</div><div class="line"><a name="l01285"></a><span class="lineno"> 1285</span>&#160;    std::stringstream str;</div><div class="line"><a name="l01286"></a><span class="lineno"> 1286</span>&#160;    str &lt;&lt; mode;</div><div class="line"><a name="l01287"></a><span class="lineno"> 1287</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l01288"></a><span class="lineno"> 1288</span>&#160;}</div><div class="line"><a name="l01289"></a><span class="lineno"> 1289</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01290"></a><span class="lineno"> 1290</span>&#160;<span class="comment">/** Formatted output of the BorderSize type.</span></div><div class="line"><a name="l01291"></a><span class="lineno"> 1291</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01292"></a><span class="lineno"> 1292</span>&#160;<span class="comment"> * @param[in] border Type to output.</span></div><div class="line"><a name="l01293"></a><span class="lineno"> 1293</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01294"></a><span class="lineno"> 1294</span>&#160;<span class="comment"> * @return Formatted string.</span></div><div class="line"><a name="l01295"></a><span class="lineno"> 1295</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01296"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a5c9cde9144eaeceaf086377b9bc5a5be"> 1296</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a> &amp;border)</div><div class="line"><a name="l01297"></a><span class="lineno"> 1297</span>&#160;{</div><div class="line"><a name="l01298"></a><span class="lineno"> 1298</span>&#160;    std::stringstream str;</div><div class="line"><a name="l01299"></a><span class="lineno"> 1299</span>&#160;    str &lt;&lt; border;</div><div class="line"><a name="l01300"></a><span class="lineno"> 1300</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l01301"></a><span class="lineno"> 1301</span>&#160;}</div><div class="line"><a name="l01302"></a><span class="lineno"> 1302</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01303"></a><span class="lineno"> 1303</span>&#160;<span class="comment">/** Formatted output of the PaddingList type.</span></div><div class="line"><a name="l01304"></a><span class="lineno"> 1304</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01305"></a><span class="lineno"> 1305</span>&#160;<span class="comment"> * @param[in] padding Type to output.</span></div><div class="line"><a name="l01306"></a><span class="lineno"> 1306</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01307"></a><span class="lineno"> 1307</span>&#160;<span class="comment"> * @return Formatted string.</span></div><div class="line"><a name="l01308"></a><span class="lineno"> 1308</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01309"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a09b674dcee4a1b59f9c7c51ecaae40a6"> 1309</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ac1a1b012674e0f1de071a611391828ad">PaddingList</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a735a025fce26c1ef147b54426df18181">padding</a>)</div><div class="line"><a name="l01310"></a><span class="lineno"> 1310</span>&#160;{</div><div class="line"><a name="l01311"></a><span class="lineno"> 1311</span>&#160;    std::stringstream str;</div><div class="line"><a name="l01312"></a><span class="lineno"> 1312</span>&#160;    str &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a735a025fce26c1ef147b54426df18181">padding</a>;</div><div class="line"><a name="l01313"></a><span class="lineno"> 1313</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l01314"></a><span class="lineno"> 1314</span>&#160;}</div><div class="line"><a name="l01315"></a><span class="lineno"> 1315</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01316"></a><span class="lineno"> 1316</span>&#160;<span class="comment">/** Formatted output of the Multiples type.</span></div><div class="line"><a name="l01317"></a><span class="lineno"> 1317</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01318"></a><span class="lineno"> 1318</span>&#160;<span class="comment"> * @param[in] multiples Type to output.</span></div><div class="line"><a name="l01319"></a><span class="lineno"> 1319</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01320"></a><span class="lineno"> 1320</span>&#160;<span class="comment"> * @return Formatted string.</span></div><div class="line"><a name="l01321"></a><span class="lineno"> 1321</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01322"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#ad710fdad147ab4ab21e14a7c49b3516a"> 1322</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#afe9e10e5fdfd1e2665ac17c75c0cacd8">Multiples</a> &amp;multiples)</div><div class="line"><a name="l01323"></a><span class="lineno"> 1323</span>&#160;{</div><div class="line"><a name="l01324"></a><span class="lineno"> 1324</span>&#160;    std::stringstream str;</div><div class="line"><a name="l01325"></a><span class="lineno"> 1325</span>&#160;    str &lt;&lt; multiples;</div><div class="line"><a name="l01326"></a><span class="lineno"> 1326</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l01327"></a><span class="lineno"> 1327</span>&#160;}</div><div class="line"><a name="l01328"></a><span class="lineno"> 1328</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01329"></a><span class="lineno"> 1329</span>&#160;<span class="comment">/** Formatted output of the InterpolationPolicy type.</span></div><div class="line"><a name="l01330"></a><span class="lineno"> 1330</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01331"></a><span class="lineno"> 1331</span>&#160;<span class="comment"> * @param[in] policy Type to output.</span></div><div class="line"><a name="l01332"></a><span class="lineno"> 1332</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01333"></a><span class="lineno"> 1333</span>&#160;<span class="comment"> * @return Formatted string.</span></div><div class="line"><a name="l01334"></a><span class="lineno"> 1334</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01335"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a94bd78942b683c05cba85048537d3ee7"> 1335</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad986b73e9d5f47a623a9b6d773c25e34">policy</a>)</div><div class="line"><a name="l01336"></a><span class="lineno"> 1336</span>&#160;{</div><div class="line"><a name="l01337"></a><span class="lineno"> 1337</span>&#160;    std::stringstream str;</div><div class="line"><a name="l01338"></a><span class="lineno"> 1338</span>&#160;    str &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad986b73e9d5f47a623a9b6d773c25e34">policy</a>;</div><div class="line"><a name="l01339"></a><span class="lineno"> 1339</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l01340"></a><span class="lineno"> 1340</span>&#160;}</div><div class="line"><a name="l01341"></a><span class="lineno"> 1341</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01342"></a><span class="lineno"> 1342</span>&#160;<span class="comment">/** Formatted output of the SamplingPolicy type.</span></div><div class="line"><a name="l01343"></a><span class="lineno"> 1343</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01344"></a><span class="lineno"> 1344</span>&#160;<span class="comment"> * @param[in] policy Type to output.</span></div><div class="line"><a name="l01345"></a><span class="lineno"> 1345</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01346"></a><span class="lineno"> 1346</span>&#160;<span class="comment"> * @return Formatted string.</span></div><div class="line"><a name="l01347"></a><span class="lineno"> 1347</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01348"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a5b8e815072ae54278cb1c91e254be4d3"> 1348</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a16a59381d4d74d17d86d69eb4d286d7b">SamplingPolicy</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad986b73e9d5f47a623a9b6d773c25e34">policy</a>)</div><div class="line"><a name="l01349"></a><span class="lineno"> 1349</span>&#160;{</div><div class="line"><a name="l01350"></a><span class="lineno"> 1350</span>&#160;    std::stringstream str;</div><div class="line"><a name="l01351"></a><span class="lineno"> 1351</span>&#160;    str &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad986b73e9d5f47a623a9b6d773c25e34">policy</a>;</div><div class="line"><a name="l01352"></a><span class="lineno"> 1352</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l01353"></a><span class="lineno"> 1353</span>&#160;}</div><div class="line"><a name="l01354"></a><span class="lineno"> 1354</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01355"></a><span class="lineno"> 1355</span>&#160;<span class="comment">/** Formatted output of the ConvertPolicy type.</span></div><div class="line"><a name="l01356"></a><span class="lineno"> 1356</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01357"></a><span class="lineno"> 1357</span>&#160;<span class="comment"> * @param[out] os     Output stream.</span></div><div class="line"><a name="l01358"></a><span class="lineno"> 1358</span>&#160;<span class="comment"> * @param[in]  policy Type to output.</span></div><div class="line"><a name="l01359"></a><span class="lineno"> 1359</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01360"></a><span class="lineno"> 1360</span>&#160;<span class="comment"> * @return Modified output stream.</span></div><div class="line"><a name="l01361"></a><span class="lineno"> 1361</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01362"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a4287c6842a60e5f6bf309e55f8813527"> 1362</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute.xhtml#af3985189d478b45014e7dead9d002e2a">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad986b73e9d5f47a623a9b6d773c25e34">policy</a>)</div><div class="line"><a name="l01363"></a><span class="lineno"> 1363</span>&#160;{</div><div class="line"><a name="l01364"></a><span class="lineno"> 1364</span>&#160;    <span class="keywordflow">switch</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad986b73e9d5f47a623a9b6d773c25e34">policy</a>)</div><div class="line"><a name="l01365"></a><span class="lineno"> 1365</span>&#160;    {</div><div class="line"><a name="l01366"></a><span class="lineno"> 1366</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fae1c8555fcf0ea2bb648a6fd527d658c0">ConvertPolicy::WRAP</a>:</div><div class="line"><a name="l01367"></a><span class="lineno"> 1367</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;WRAP&quot;</span>;</div><div class="line"><a name="l01368"></a><span class="lineno"> 1368</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01369"></a><span class="lineno"> 1369</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>:</div><div class="line"><a name="l01370"></a><span class="lineno"> 1370</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;SATURATE&quot;</span>;</div><div class="line"><a name="l01371"></a><span class="lineno"> 1371</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01372"></a><span class="lineno"> 1372</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l01373"></a><span class="lineno"> 1373</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div><div class="line"><a name="l01374"></a><span class="lineno"> 1374</span>&#160;    }</div><div class="line"><a name="l01375"></a><span class="lineno"> 1375</span>&#160;</div><div class="line"><a name="l01376"></a><span class="lineno"> 1376</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l01377"></a><span class="lineno"> 1377</span>&#160;}</div><div class="line"><a name="l01378"></a><span class="lineno"> 1378</span>&#160;</div><div class="line"><a name="l01379"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#adcc7e107e7dbd2ffac02189089c33e4f"> 1379</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad986b73e9d5f47a623a9b6d773c25e34">policy</a>)</div><div class="line"><a name="l01380"></a><span class="lineno"> 1380</span>&#160;{</div><div class="line"><a name="l01381"></a><span class="lineno"> 1381</span>&#160;    std::stringstream str;</div><div class="line"><a name="l01382"></a><span class="lineno"> 1382</span>&#160;    str &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad986b73e9d5f47a623a9b6d773c25e34">policy</a>;</div><div class="line"><a name="l01383"></a><span class="lineno"> 1383</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l01384"></a><span class="lineno"> 1384</span>&#160;}</div><div class="line"><a name="l01385"></a><span class="lineno"> 1385</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01386"></a><span class="lineno"> 1386</span>&#160;<span class="comment">/** Formatted output of the ArithmeticOperation type.</span></div><div class="line"><a name="l01387"></a><span class="lineno"> 1387</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01388"></a><span class="lineno"> 1388</span>&#160;<span class="comment"> * @param[out] os Output stream.</span></div><div class="line"><a name="l01389"></a><span class="lineno"> 1389</span>&#160;<span class="comment"> * @param[in]  op Operation to output.</span></div><div class="line"><a name="l01390"></a><span class="lineno"> 1390</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01391"></a><span class="lineno"> 1391</span>&#160;<span class="comment"> * @return Modified output stream.</span></div><div class="line"><a name="l01392"></a><span class="lineno"> 1392</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01393"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a7b94aeca99a5d6b1a5723014a01faac0"> 1393</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute.xhtml#af3985189d478b45014e7dead9d002e2a">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8ae">ArithmeticOperation</a> &amp;op)</div><div class="line"><a name="l01394"></a><span class="lineno"> 1394</span>&#160;{</div><div class="line"><a name="l01395"></a><span class="lineno"> 1395</span>&#160;    <span class="keywordflow">switch</span>(op)</div><div class="line"><a name="l01396"></a><span class="lineno"> 1396</span>&#160;    {</div><div class="line"><a name="l01397"></a><span class="lineno"> 1397</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea9eeb52badb613229884838847294b90d">ArithmeticOperation::ADD</a>:</div><div class="line"><a name="l01398"></a><span class="lineno"> 1398</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;ADD&quot;</span>;</div><div class="line"><a name="l01399"></a><span class="lineno"> 1399</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01400"></a><span class="lineno"> 1400</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea241dd841abade20fcb27b8a9f494e1eb">ArithmeticOperation::SUB</a>:</div><div class="line"><a name="l01401"></a><span class="lineno"> 1401</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;SUB&quot;</span>;</div><div class="line"><a name="l01402"></a><span class="lineno"> 1402</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01403"></a><span class="lineno"> 1403</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea29bbf66f7f8529ec47e394fb5a36c646">ArithmeticOperation::DIV</a>:</div><div class="line"><a name="l01404"></a><span class="lineno"> 1404</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;DIV&quot;</span>;</div><div class="line"><a name="l01405"></a><span class="lineno"> 1405</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01406"></a><span class="lineno"> 1406</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#adf2ced65e536375a1c96425d9fced858a26a4b44a837bf97b972628509912b4a5">ArithmeticOperation::MAX</a>:</div><div class="line"><a name="l01407"></a><span class="lineno"> 1407</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;MAX&quot;</span>;</div><div class="line"><a name="l01408"></a><span class="lineno"> 1408</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01409"></a><span class="lineno"> 1409</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#adf2ced65e536375a1c96425d9fced858ace31e2a082d17e038fcc6e3006166653">ArithmeticOperation::MIN</a>:</div><div class="line"><a name="l01410"></a><span class="lineno"> 1410</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;MIN&quot;</span>;</div><div class="line"><a name="l01411"></a><span class="lineno"> 1411</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01412"></a><span class="lineno"> 1412</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea46ea186b87dc545033d86ba8d6e63916">ArithmeticOperation::SQUARED_DIFF</a>:</div><div class="line"><a name="l01413"></a><span class="lineno"> 1413</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;SQUARED_DIFF&quot;</span>;</div><div class="line"><a name="l01414"></a><span class="lineno"> 1414</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01415"></a><span class="lineno"> 1415</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aeac9c9c146c630ca5ef9197c73c032f4a6">ArithmeticOperation::POWER</a>:</div><div class="line"><a name="l01416"></a><span class="lineno"> 1416</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;POWER&quot;</span>;</div><div class="line"><a name="l01417"></a><span class="lineno"> 1417</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01418"></a><span class="lineno"> 1418</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l01419"></a><span class="lineno"> 1419</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div><div class="line"><a name="l01420"></a><span class="lineno"> 1420</span>&#160;    }</div><div class="line"><a name="l01421"></a><span class="lineno"> 1421</span>&#160;</div><div class="line"><a name="l01422"></a><span class="lineno"> 1422</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l01423"></a><span class="lineno"> 1423</span>&#160;}</div><div class="line"><a name="l01424"></a><span class="lineno"> 1424</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01425"></a><span class="lineno"> 1425</span>&#160;<span class="comment">/** Formatted output of the Arithmetic Operation</span></div><div class="line"><a name="l01426"></a><span class="lineno"> 1426</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01427"></a><span class="lineno"> 1427</span>&#160;<span class="comment"> * @param[in] op Type to output.</span></div><div class="line"><a name="l01428"></a><span class="lineno"> 1428</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01429"></a><span class="lineno"> 1429</span>&#160;<span class="comment"> * @return Formatted string.</span></div><div class="line"><a name="l01430"></a><span class="lineno"> 1430</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01431"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#aca516517d47534e06d4c57e7bc706b2a"> 1431</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8ae">ArithmeticOperation</a> &amp;op)</div><div class="line"><a name="l01432"></a><span class="lineno"> 1432</span>&#160;{</div><div class="line"><a name="l01433"></a><span class="lineno"> 1433</span>&#160;    std::stringstream str;</div><div class="line"><a name="l01434"></a><span class="lineno"> 1434</span>&#160;    str &lt;&lt; op;</div><div class="line"><a name="l01435"></a><span class="lineno"> 1435</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l01436"></a><span class="lineno"> 1436</span>&#160;}</div><div class="line"><a name="l01437"></a><span class="lineno"> 1437</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01438"></a><span class="lineno"> 1438</span>&#160;<span class="comment">/** Formatted output of the Reduction Operations.</span></div><div class="line"><a name="l01439"></a><span class="lineno"> 1439</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01440"></a><span class="lineno"> 1440</span>&#160;<span class="comment"> * @param[out] os Output stream.</span></div><div class="line"><a name="l01441"></a><span class="lineno"> 1441</span>&#160;<span class="comment"> * @param[in]  op Type to output.</span></div><div class="line"><a name="l01442"></a><span class="lineno"> 1442</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01443"></a><span class="lineno"> 1443</span>&#160;<span class="comment"> * @return Modified output stream.</span></div><div class="line"><a name="l01444"></a><span class="lineno"> 1444</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01445"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a292505a0ec686541cfe0dcfd1d651ec5"> 1445</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute.xhtml#af3985189d478b45014e7dead9d002e2a">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45b">ReductionOperation</a> &amp;op)</div><div class="line"><a name="l01446"></a><span class="lineno"> 1446</span>&#160;{</div><div class="line"><a name="l01447"></a><span class="lineno"> 1447</span>&#160;    <span class="keywordflow">switch</span>(op)</div><div class="line"><a name="l01448"></a><span class="lineno"> 1448</span>&#160;    {</div><div class="line"><a name="l01449"></a><span class="lineno"> 1449</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45ba6970bdc2201030b9c03fbdcf3973858a">ReductionOperation::SUM</a>:</div><div class="line"><a name="l01450"></a><span class="lineno"> 1450</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;SUM&quot;</span>;</div><div class="line"><a name="l01451"></a><span class="lineno"> 1451</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01452"></a><span class="lineno"> 1452</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45ba2ce6e134b828b72fad160fa17c8d1b64">ReductionOperation::SUM_SQUARE</a>:</div><div class="line"><a name="l01453"></a><span class="lineno"> 1453</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;SUM_SQUARE&quot;</span>;</div><div class="line"><a name="l01454"></a><span class="lineno"> 1454</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01455"></a><span class="lineno"> 1455</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45bafc54513dae613e117ffc4169e48bfce5">ReductionOperation::MEAN_SUM</a>:</div><div class="line"><a name="l01456"></a><span class="lineno"> 1456</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;MEAN_SUM&quot;</span>;</div><div class="line"><a name="l01457"></a><span class="lineno"> 1457</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01458"></a><span class="lineno"> 1458</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45ba654fed6e9b6c154d04bcaa439e32d0d5">ReductionOperation::ARG_IDX_MAX</a>:</div><div class="line"><a name="l01459"></a><span class="lineno"> 1459</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;ARG_IDX_MAX&quot;</span>;</div><div class="line"><a name="l01460"></a><span class="lineno"> 1460</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01461"></a><span class="lineno"> 1461</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45ba39102811589b9a0d7a6aa8721663b4d1">ReductionOperation::ARG_IDX_MIN</a>:</div><div class="line"><a name="l01462"></a><span class="lineno"> 1462</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;ARG_IDX_MIN&quot;</span>;</div><div class="line"><a name="l01463"></a><span class="lineno"> 1463</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01464"></a><span class="lineno"> 1464</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45bac8074bb318fb85693233e64acc64c1ed">ReductionOperation::PROD</a>:</div><div class="line"><a name="l01465"></a><span class="lineno"> 1465</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;PROD&quot;</span>;</div><div class="line"><a name="l01466"></a><span class="lineno"> 1466</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01467"></a><span class="lineno"> 1467</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#adf2ced65e536375a1c96425d9fced858ace31e2a082d17e038fcc6e3006166653">ReductionOperation::MIN</a>:</div><div class="line"><a name="l01468"></a><span class="lineno"> 1468</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;MIN&quot;</span>;</div><div class="line"><a name="l01469"></a><span class="lineno"> 1469</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01470"></a><span class="lineno"> 1470</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#adf2ced65e536375a1c96425d9fced858a26a4b44a837bf97b972628509912b4a5">ReductionOperation::MAX</a>:</div><div class="line"><a name="l01471"></a><span class="lineno"> 1471</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;MAX&quot;</span>;</div><div class="line"><a name="l01472"></a><span class="lineno"> 1472</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01473"></a><span class="lineno"> 1473</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l01474"></a><span class="lineno"> 1474</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div><div class="line"><a name="l01475"></a><span class="lineno"> 1475</span>&#160;    }</div><div class="line"><a name="l01476"></a><span class="lineno"> 1476</span>&#160;</div><div class="line"><a name="l01477"></a><span class="lineno"> 1477</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l01478"></a><span class="lineno"> 1478</span>&#160;}</div><div class="line"><a name="l01479"></a><span class="lineno"> 1479</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01480"></a><span class="lineno"> 1480</span>&#160;<span class="comment">/** Formatted output of the Reduction Operations.</span></div><div class="line"><a name="l01481"></a><span class="lineno"> 1481</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01482"></a><span class="lineno"> 1482</span>&#160;<span class="comment"> * @param[in] op Type to output.</span></div><div class="line"><a name="l01483"></a><span class="lineno"> 1483</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01484"></a><span class="lineno"> 1484</span>&#160;<span class="comment"> * @return Formatted string.</span></div><div class="line"><a name="l01485"></a><span class="lineno"> 1485</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01486"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#aae534105c7ea67999ccbb34a0ed567cd"> 1486</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45b">ReductionOperation</a> &amp;op)</div><div class="line"><a name="l01487"></a><span class="lineno"> 1487</span>&#160;{</div><div class="line"><a name="l01488"></a><span class="lineno"> 1488</span>&#160;    std::stringstream str;</div><div class="line"><a name="l01489"></a><span class="lineno"> 1489</span>&#160;    str &lt;&lt; op;</div><div class="line"><a name="l01490"></a><span class="lineno"> 1490</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l01491"></a><span class="lineno"> 1491</span>&#160;}</div><div class="line"><a name="l01492"></a><span class="lineno"> 1492</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01493"></a><span class="lineno"> 1493</span>&#160;<span class="comment">/** Formatted output of the Comparison Operations.</span></div><div class="line"><a name="l01494"></a><span class="lineno"> 1494</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01495"></a><span class="lineno"> 1495</span>&#160;<span class="comment"> * @param[out] os Output stream.</span></div><div class="line"><a name="l01496"></a><span class="lineno"> 1496</span>&#160;<span class="comment"> * @param[in]  op Type to output.</span></div><div class="line"><a name="l01497"></a><span class="lineno"> 1497</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01498"></a><span class="lineno"> 1498</span>&#160;<span class="comment"> * @return Modified output stream.</span></div><div class="line"><a name="l01499"></a><span class="lineno"> 1499</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01500"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#aac34f5e54ad35f26328f8706b3d28b43"> 1500</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute.xhtml#af3985189d478b45014e7dead9d002e2a">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58c">ComparisonOperation</a> &amp;op)</div><div class="line"><a name="l01501"></a><span class="lineno"> 1501</span>&#160;{</div><div class="line"><a name="l01502"></a><span class="lineno"> 1502</span>&#160;    <span class="keywordflow">switch</span>(op)</div><div class="line"><a name="l01503"></a><span class="lineno"> 1503</span>&#160;    {</div><div class="line"><a name="l01504"></a><span class="lineno"> 1504</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58caf5f286e73bda105e538310b3190f75c5">ComparisonOperation::Equal</a>:</div><div class="line"><a name="l01505"></a><span class="lineno"> 1505</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;Equal&quot;</span>;</div><div class="line"><a name="l01506"></a><span class="lineno"> 1506</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01507"></a><span class="lineno"> 1507</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca19bb0af2c3c530538cb41aff7f235b96">ComparisonOperation::NotEqual</a>:</div><div class="line"><a name="l01508"></a><span class="lineno"> 1508</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;NotEqual&quot;</span>;</div><div class="line"><a name="l01509"></a><span class="lineno"> 1509</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01510"></a><span class="lineno"> 1510</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">ComparisonOperation::Greater</a>:</div><div class="line"><a name="l01511"></a><span class="lineno"> 1511</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;Greater&quot;</span>;</div><div class="line"><a name="l01512"></a><span class="lineno"> 1512</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01513"></a><span class="lineno"> 1513</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca758b05d899def79c9eb864ad4f96be1f">ComparisonOperation::GreaterEqual</a>:</div><div class="line"><a name="l01514"></a><span class="lineno"> 1514</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;GreaterEqual&quot;</span>;</div><div class="line"><a name="l01515"></a><span class="lineno"> 1515</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01516"></a><span class="lineno"> 1516</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca1cfdf0e8d0c87a228c1f40d9bee7888b">ComparisonOperation::Less</a>:</div><div class="line"><a name="l01517"></a><span class="lineno"> 1517</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;Less&quot;</span>;</div><div class="line"><a name="l01518"></a><span class="lineno"> 1518</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01519"></a><span class="lineno"> 1519</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58cad3e6fdac55bb7b0edd7834c968ba1f38">ComparisonOperation::LessEqual</a>:</div><div class="line"><a name="l01520"></a><span class="lineno"> 1520</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;LessEqual&quot;</span>;</div><div class="line"><a name="l01521"></a><span class="lineno"> 1521</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01522"></a><span class="lineno"> 1522</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l01523"></a><span class="lineno"> 1523</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div><div class="line"><a name="l01524"></a><span class="lineno"> 1524</span>&#160;    }</div><div class="line"><a name="l01525"></a><span class="lineno"> 1525</span>&#160;</div><div class="line"><a name="l01526"></a><span class="lineno"> 1526</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l01527"></a><span class="lineno"> 1527</span>&#160;}</div><div class="line"><a name="l01528"></a><span class="lineno"> 1528</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01529"></a><span class="lineno"> 1529</span>&#160;<span class="comment">/** Formatted output of the Elementwise unary Operations.</span></div><div class="line"><a name="l01530"></a><span class="lineno"> 1530</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01531"></a><span class="lineno"> 1531</span>&#160;<span class="comment"> * @param[out] os Output stream.</span></div><div class="line"><a name="l01532"></a><span class="lineno"> 1532</span>&#160;<span class="comment"> * @param[in]  op Type to output.</span></div><div class="line"><a name="l01533"></a><span class="lineno"> 1533</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01534"></a><span class="lineno"> 1534</span>&#160;<span class="comment"> * @return Modified output stream.</span></div><div class="line"><a name="l01535"></a><span class="lineno"> 1535</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01536"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#accfc6f2e5fb354e1fb19a7067b6efdec"> 1536</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute.xhtml#af3985189d478b45014e7dead9d002e2a">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">ElementWiseUnary</a> &amp;op)</div><div class="line"><a name="l01537"></a><span class="lineno"> 1537</span>&#160;{</div><div class="line"><a name="l01538"></a><span class="lineno"> 1538</span>&#160;    <span class="keywordflow">switch</span>(op)</div><div class="line"><a name="l01539"></a><span class="lineno"> 1539</span>&#160;    {</div><div class="line"><a name="l01540"></a><span class="lineno"> 1540</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da66bac724670f51e77f3688d33ca0d781">ElementWiseUnary::RSQRT</a>:</div><div class="line"><a name="l01541"></a><span class="lineno"> 1541</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;RSQRT&quot;</span>;</div><div class="line"><a name="l01542"></a><span class="lineno"> 1542</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01543"></a><span class="lineno"> 1543</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da8c670f8c37b95e1ed14a0ce414b049c7">ElementWiseUnary::EXP</a>:</div><div class="line"><a name="l01544"></a><span class="lineno"> 1544</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;EXP&quot;</span>;</div><div class="line"><a name="l01545"></a><span class="lineno"> 1545</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01546"></a><span class="lineno"> 1546</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da5dd68b1a7db42a1cce4dce09dbaa179e">ElementWiseUnary::NEG</a>:</div><div class="line"><a name="l01547"></a><span class="lineno"> 1547</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;NEG&quot;</span>;</div><div class="line"><a name="l01548"></a><span class="lineno"> 1548</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01549"></a><span class="lineno"> 1549</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da4b5ffcdaf38ce4d463171f5c977c5ab3">ElementWiseUnary::LOG</a>:</div><div class="line"><a name="l01550"></a><span class="lineno"> 1550</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;LOG&quot;</span>;</div><div class="line"><a name="l01551"></a><span class="lineno"> 1551</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01552"></a><span class="lineno"> 1552</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da2ea77cf582892014b30e6fa7e558350d">ElementWiseUnary::ROUND</a>:</div><div class="line"><a name="l01553"></a><span class="lineno"> 1553</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;ROUND&quot;</span>;</div><div class="line"><a name="l01554"></a><span class="lineno"> 1554</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01555"></a><span class="lineno"> 1555</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l01556"></a><span class="lineno"> 1556</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div><div class="line"><a name="l01557"></a><span class="lineno"> 1557</span>&#160;    }</div><div class="line"><a name="l01558"></a><span class="lineno"> 1558</span>&#160;</div><div class="line"><a name="l01559"></a><span class="lineno"> 1559</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l01560"></a><span class="lineno"> 1560</span>&#160;}</div><div class="line"><a name="l01561"></a><span class="lineno"> 1561</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01562"></a><span class="lineno"> 1562</span>&#160;<span class="comment">/** Formatted output of the Comparison Operations.</span></div><div class="line"><a name="l01563"></a><span class="lineno"> 1563</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01564"></a><span class="lineno"> 1564</span>&#160;<span class="comment"> * @param[in] op Type to output.</span></div><div class="line"><a name="l01565"></a><span class="lineno"> 1565</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01566"></a><span class="lineno"> 1566</span>&#160;<span class="comment"> * @return Formatted string.</span></div><div class="line"><a name="l01567"></a><span class="lineno"> 1567</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01568"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a77007283b591963074b8398202e90f5a"> 1568</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58c">ComparisonOperation</a> &amp;op)</div><div class="line"><a name="l01569"></a><span class="lineno"> 1569</span>&#160;{</div><div class="line"><a name="l01570"></a><span class="lineno"> 1570</span>&#160;    std::stringstream str;</div><div class="line"><a name="l01571"></a><span class="lineno"> 1571</span>&#160;    str &lt;&lt; op;</div><div class="line"><a name="l01572"></a><span class="lineno"> 1572</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l01573"></a><span class="lineno"> 1573</span>&#160;}</div><div class="line"><a name="l01574"></a><span class="lineno"> 1574</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01575"></a><span class="lineno"> 1575</span>&#160;<span class="comment">/** Formatted output of the Elementwise unary Operations.</span></div><div class="line"><a name="l01576"></a><span class="lineno"> 1576</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01577"></a><span class="lineno"> 1577</span>&#160;<span class="comment"> * @param[in] op Type to output.</span></div><div class="line"><a name="l01578"></a><span class="lineno"> 1578</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01579"></a><span class="lineno"> 1579</span>&#160;<span class="comment"> * @return Formatted string.</span></div><div class="line"><a name="l01580"></a><span class="lineno"> 1580</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01581"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#ab76157462925ad1b13149317ded2e404"> 1581</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">ElementWiseUnary</a> &amp;op)</div><div class="line"><a name="l01582"></a><span class="lineno"> 1582</span>&#160;{</div><div class="line"><a name="l01583"></a><span class="lineno"> 1583</span>&#160;    std::stringstream str;</div><div class="line"><a name="l01584"></a><span class="lineno"> 1584</span>&#160;    str &lt;&lt; op;</div><div class="line"><a name="l01585"></a><span class="lineno"> 1585</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l01586"></a><span class="lineno"> 1586</span>&#160;}</div><div class="line"><a name="l01587"></a><span class="lineno"> 1587</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01588"></a><span class="lineno"> 1588</span>&#160;<span class="comment">/** Formatted output of the Norm Type.</span></div><div class="line"><a name="l01589"></a><span class="lineno"> 1589</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01590"></a><span class="lineno"> 1590</span>&#160;<span class="comment"> * @param[in] type Type to output.</span></div><div class="line"><a name="l01591"></a><span class="lineno"> 1591</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01592"></a><span class="lineno"> 1592</span>&#160;<span class="comment"> * @return Formatted string.</span></div><div class="line"><a name="l01593"></a><span class="lineno"> 1593</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01594"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#ad8b676c38d9b8d9d9bde7caec5720bd9"> 1594</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59ca">NormType</a> &amp;<a class="code" href="namespace_gemm_tuner.xhtml#a7aead736a07eaf25623ad7bfa1f0ee2d">type</a>)</div><div class="line"><a name="l01595"></a><span class="lineno"> 1595</span>&#160;{</div><div class="line"><a name="l01596"></a><span class="lineno"> 1596</span>&#160;    std::stringstream str;</div><div class="line"><a name="l01597"></a><span class="lineno"> 1597</span>&#160;    str &lt;&lt; <a class="code" href="namespace_gemm_tuner.xhtml#a7aead736a07eaf25623ad7bfa1f0ee2d">type</a>;</div><div class="line"><a name="l01598"></a><span class="lineno"> 1598</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l01599"></a><span class="lineno"> 1599</span>&#160;}</div><div class="line"><a name="l01600"></a><span class="lineno"> 1600</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01601"></a><span class="lineno"> 1601</span>&#160;<span class="comment">/** Formatted output of the Pooling Type.</span></div><div class="line"><a name="l01602"></a><span class="lineno"> 1602</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01603"></a><span class="lineno"> 1603</span>&#160;<span class="comment"> * @param[in] type Type to output.</span></div><div class="line"><a name="l01604"></a><span class="lineno"> 1604</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01605"></a><span class="lineno"> 1605</span>&#160;<span class="comment"> * @return Formatted string.</span></div><div class="line"><a name="l01606"></a><span class="lineno"> 1606</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01607"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a2872d19dd10dc3117813d291c08e0383"> 1607</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93">PoolingType</a> &amp;<a class="code" href="namespace_gemm_tuner.xhtml#a7aead736a07eaf25623ad7bfa1f0ee2d">type</a>)</div><div class="line"><a name="l01608"></a><span class="lineno"> 1608</span>&#160;{</div><div class="line"><a name="l01609"></a><span class="lineno"> 1609</span>&#160;    std::stringstream str;</div><div class="line"><a name="l01610"></a><span class="lineno"> 1610</span>&#160;    str &lt;&lt; <a class="code" href="namespace_gemm_tuner.xhtml#a7aead736a07eaf25623ad7bfa1f0ee2d">type</a>;</div><div class="line"><a name="l01611"></a><span class="lineno"> 1611</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l01612"></a><span class="lineno"> 1612</span>&#160;}</div><div class="line"><a name="l01613"></a><span class="lineno"> 1613</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01614"></a><span class="lineno"> 1614</span>&#160;<span class="comment">/** Formatted output of the Pooling Layer Info.</span></div><div class="line"><a name="l01615"></a><span class="lineno"> 1615</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01616"></a><span class="lineno"> 1616</span>&#160;<span class="comment"> * @param[in] info Type to output.</span></div><div class="line"><a name="l01617"></a><span class="lineno"> 1617</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01618"></a><span class="lineno"> 1618</span>&#160;<span class="comment"> * @return Formatted string.</span></div><div class="line"><a name="l01619"></a><span class="lineno"> 1619</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01620"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#acef515348c5f7f73c89aa4b8a47a02bc"> 1620</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>)</div><div class="line"><a name="l01621"></a><span class="lineno"> 1621</span>&#160;{</div><div class="line"><a name="l01622"></a><span class="lineno"> 1622</span>&#160;    std::stringstream str;</div><div class="line"><a name="l01623"></a><span class="lineno"> 1623</span>&#160;    str &lt;&lt; <span class="stringliteral">&quot;{Type=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.pool_type &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div><div class="line"><a name="l01624"></a><span class="lineno"> 1624</span>&#160;        &lt;&lt; <span class="stringliteral">&quot;DataLayout=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.data_layout &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div><div class="line"><a name="l01625"></a><span class="lineno"> 1625</span>&#160;        &lt;&lt; <span class="stringliteral">&quot;IsGlobalPooling=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.is_global_pooling;</div><div class="line"><a name="l01626"></a><span class="lineno"> 1626</span>&#160;    <span class="keywordflow">if</span>(!<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.is_global_pooling)</div><div class="line"><a name="l01627"></a><span class="lineno"> 1627</span>&#160;    {</div><div class="line"><a name="l01628"></a><span class="lineno"> 1628</span>&#160;        str &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div><div class="line"><a name="l01629"></a><span class="lineno"> 1629</span>&#160;            &lt;&lt; <span class="stringliteral">&quot;PoolSize=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.pool_size.width &lt;&lt; <span class="stringliteral">&quot;,&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.pool_size.height &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div><div class="line"><a name="l01630"></a><span class="lineno"> 1630</span>&#160;            &lt;&lt; <span class="stringliteral">&quot;PadStride=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.pad_stride_info;</div><div class="line"><a name="l01631"></a><span class="lineno"> 1631</span>&#160;    }</div><div class="line"><a name="l01632"></a><span class="lineno"> 1632</span>&#160;    str &lt;&lt; <span class="stringliteral">&quot;}&quot;</span>;</div><div class="line"><a name="l01633"></a><span class="lineno"> 1633</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l01634"></a><span class="lineno"> 1634</span>&#160;}</div><div class="line"><a name="l01635"></a><span class="lineno"> 1635</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01636"></a><span class="lineno"> 1636</span>&#160;<span class="comment">/** Formatted output of the PriorBoxLayerInfo.</span></div><div class="line"><a name="l01637"></a><span class="lineno"> 1637</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01638"></a><span class="lineno"> 1638</span>&#160;<span class="comment"> * @param[in] info Type to output.</span></div><div class="line"><a name="l01639"></a><span class="lineno"> 1639</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01640"></a><span class="lineno"> 1640</span>&#160;<span class="comment"> * @return Formatted string.</span></div><div class="line"><a name="l01641"></a><span class="lineno"> 1641</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01642"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#ae62747a5179626328bf7e67c709d5fcf"> 1642</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_prior_box_layer_info.xhtml">PriorBoxLayerInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>)</div><div class="line"><a name="l01643"></a><span class="lineno"> 1643</span>&#160;{</div><div class="line"><a name="l01644"></a><span class="lineno"> 1644</span>&#160;    std::stringstream str;</div><div class="line"><a name="l01645"></a><span class="lineno"> 1645</span>&#160;    str &lt;&lt; <span class="stringliteral">&quot;{&quot;</span>;</div><div class="line"><a name="l01646"></a><span class="lineno"> 1646</span>&#160;    str &lt;&lt; <span class="stringliteral">&quot;Clip:&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.clip()</div><div class="line"><a name="l01647"></a><span class="lineno"> 1647</span>&#160;        &lt;&lt; <span class="stringliteral">&quot;Flip:&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.flip()</div><div class="line"><a name="l01648"></a><span class="lineno"> 1648</span>&#160;        &lt;&lt; <span class="stringliteral">&quot;StepX:&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.steps()[0]</div><div class="line"><a name="l01649"></a><span class="lineno"> 1649</span>&#160;        &lt;&lt; <span class="stringliteral">&quot;StepY:&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.steps()[1]</div><div class="line"><a name="l01650"></a><span class="lineno"> 1650</span>&#160;        &lt;&lt; <span class="stringliteral">&quot;MinSizes:&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.min_sizes().size()</div><div class="line"><a name="l01651"></a><span class="lineno"> 1651</span>&#160;        &lt;&lt; <span class="stringliteral">&quot;MaxSizes:&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.max_sizes().size()</div><div class="line"><a name="l01652"></a><span class="lineno"> 1652</span>&#160;        &lt;&lt; <span class="stringliteral">&quot;ImgSizeX:&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.img_size().x</div><div class="line"><a name="l01653"></a><span class="lineno"> 1653</span>&#160;        &lt;&lt; <span class="stringliteral">&quot;ImgSizeY:&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.img_size().y</div><div class="line"><a name="l01654"></a><span class="lineno"> 1654</span>&#160;        &lt;&lt; <span class="stringliteral">&quot;Offset:&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.offset()</div><div class="line"><a name="l01655"></a><span class="lineno"> 1655</span>&#160;        &lt;&lt; <span class="stringliteral">&quot;Variances:&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.variances().size();</div><div class="line"><a name="l01656"></a><span class="lineno"> 1656</span>&#160;    str &lt;&lt; <span class="stringliteral">&quot;}&quot;</span>;</div><div class="line"><a name="l01657"></a><span class="lineno"> 1657</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l01658"></a><span class="lineno"> 1658</span>&#160;}</div><div class="line"><a name="l01659"></a><span class="lineno"> 1659</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01660"></a><span class="lineno"> 1660</span>&#160;<span class="comment">/** Formatted output of the KeyPoint type.</span></div><div class="line"><a name="l01661"></a><span class="lineno"> 1661</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01662"></a><span class="lineno"> 1662</span>&#160;<span class="comment"> * @param[out] os    Output stream</span></div><div class="line"><a name="l01663"></a><span class="lineno"> 1663</span>&#160;<span class="comment"> * @param[in]  point Type to output.</span></div><div class="line"><a name="l01664"></a><span class="lineno"> 1664</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01665"></a><span class="lineno"> 1665</span>&#160;<span class="comment"> * @return Modified output stream.</span></div><div class="line"><a name="l01666"></a><span class="lineno"> 1666</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01667"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a9a2e48a508dc85b7280f955876bb4462"> 1667</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute.xhtml#af3985189d478b45014e7dead9d002e2a">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_key_point.xhtml">KeyPoint</a> &amp;point)</div><div class="line"><a name="l01668"></a><span class="lineno"> 1668</span>&#160;{</div><div class="line"><a name="l01669"></a><span class="lineno"> 1669</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;{x=&quot;</span> &lt;&lt; point.<a class="code" href="structarm__compute_1_1_key_point.xhtml#af6d3062751bd565decb1a2cd3b63bdb2">x</a> &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div><div class="line"><a name="l01670"></a><span class="lineno"> 1670</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;y=&quot;</span> &lt;&lt; point.<a class="code" href="structarm__compute_1_1_key_point.xhtml#af64066d134a77e01b3d6eb8da813627a">y</a> &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div><div class="line"><a name="l01671"></a><span class="lineno"> 1671</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;strength=&quot;</span> &lt;&lt; point.<a class="code" href="structarm__compute_1_1_key_point.xhtml#a2c1c8f9331368f38bfc3eaee260b59a6">strength</a> &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div><div class="line"><a name="l01672"></a><span class="lineno"> 1672</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;scale=&quot;</span> &lt;&lt; point.<a class="code" href="structarm__compute_1_1_key_point.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a> &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div><div class="line"><a name="l01673"></a><span class="lineno"> 1673</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;orientation=&quot;</span> &lt;&lt; point.<a class="code" href="structarm__compute_1_1_key_point.xhtml#a0e3266fc15309697502533db62b682af">orientation</a> &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div><div class="line"><a name="l01674"></a><span class="lineno"> 1674</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;tracking_status=&quot;</span> &lt;&lt; point.<a class="code" href="structarm__compute_1_1_key_point.xhtml#a8ca2aae59762685dd38143e5f8267147">tracking_status</a> &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div><div class="line"><a name="l01675"></a><span class="lineno"> 1675</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;error=&quot;</span> &lt;&lt; point.<a class="code" href="structarm__compute_1_1_key_point.xhtml#a7cfd13d282af770aaa971755fa092fca">error</a> &lt;&lt; <span class="stringliteral">&quot;}&quot;</span>;</div><div class="line"><a name="l01676"></a><span class="lineno"> 1676</span>&#160;</div><div class="line"><a name="l01677"></a><span class="lineno"> 1677</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l01678"></a><span class="lineno"> 1678</span>&#160;}</div><div class="line"><a name="l01679"></a><span class="lineno"> 1679</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01680"></a><span class="lineno"> 1680</span>&#160;<span class="comment">/** Formatted output of the PhaseType type.</span></div><div class="line"><a name="l01681"></a><span class="lineno"> 1681</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01682"></a><span class="lineno"> 1682</span>&#160;<span class="comment"> * @param[out] os         Output stream</span></div><div class="line"><a name="l01683"></a><span class="lineno"> 1683</span>&#160;<span class="comment"> * @param[in]  phase_type Type to output.</span></div><div class="line"><a name="l01684"></a><span class="lineno"> 1684</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01685"></a><span class="lineno"> 1685</span>&#160;<span class="comment"> * @return Modified output stream.</span></div><div class="line"><a name="l01686"></a><span class="lineno"> 1686</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01687"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#abe52a76af2aa88876d54ce8a5969e509"> 1687</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute.xhtml#af3985189d478b45014e7dead9d002e2a">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#af00a42ecad444bbda75cde1b64bd7e72">PhaseType</a> &amp;phase_type)</div><div class="line"><a name="l01688"></a><span class="lineno"> 1688</span>&#160;{</div><div class="line"><a name="l01689"></a><span class="lineno"> 1689</span>&#160;    <span class="keywordflow">switch</span>(phase_type)</div><div class="line"><a name="l01690"></a><span class="lineno"> 1690</span>&#160;    {</div><div class="line"><a name="l01691"></a><span class="lineno"> 1691</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#af00a42ecad444bbda75cde1b64bd7e72a6898b46a1cde8a1572e2722c44c5ab07">PhaseType::SIGNED</a>:</div><div class="line"><a name="l01692"></a><span class="lineno"> 1692</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;SIGNED&quot;</span>;</div><div class="line"><a name="l01693"></a><span class="lineno"> 1693</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01694"></a><span class="lineno"> 1694</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#af00a42ecad444bbda75cde1b64bd7e72aaf36b47f395cd01f48b8fc1013665054">PhaseType::UNSIGNED</a>:</div><div class="line"><a name="l01695"></a><span class="lineno"> 1695</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;UNSIGNED&quot;</span>;</div><div class="line"><a name="l01696"></a><span class="lineno"> 1696</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01697"></a><span class="lineno"> 1697</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l01698"></a><span class="lineno"> 1698</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div><div class="line"><a name="l01699"></a><span class="lineno"> 1699</span>&#160;    }</div><div class="line"><a name="l01700"></a><span class="lineno"> 1700</span>&#160;</div><div class="line"><a name="l01701"></a><span class="lineno"> 1701</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l01702"></a><span class="lineno"> 1702</span>&#160;}</div><div class="line"><a name="l01703"></a><span class="lineno"> 1703</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01704"></a><span class="lineno"> 1704</span>&#160;<span class="comment">/** Formatted output of the PhaseType type.</span></div><div class="line"><a name="l01705"></a><span class="lineno"> 1705</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01706"></a><span class="lineno"> 1706</span>&#160;<span class="comment"> * @param[in] type Type to output.</span></div><div class="line"><a name="l01707"></a><span class="lineno"> 1707</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01708"></a><span class="lineno"> 1708</span>&#160;<span class="comment"> * @return Formatted string.</span></div><div class="line"><a name="l01709"></a><span class="lineno"> 1709</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01710"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#ae4ead564f3c96ea5f1ec7fe035b941f3"> 1710</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#af00a42ecad444bbda75cde1b64bd7e72">arm_compute::PhaseType</a> &amp;<a class="code" href="namespace_gemm_tuner.xhtml#a7aead736a07eaf25623ad7bfa1f0ee2d">type</a>)</div><div class="line"><a name="l01711"></a><span class="lineno"> 1711</span>&#160;{</div><div class="line"><a name="l01712"></a><span class="lineno"> 1712</span>&#160;    std::stringstream str;</div><div class="line"><a name="l01713"></a><span class="lineno"> 1713</span>&#160;    str &lt;&lt; <a class="code" href="namespace_gemm_tuner.xhtml#a7aead736a07eaf25623ad7bfa1f0ee2d">type</a>;</div><div class="line"><a name="l01714"></a><span class="lineno"> 1714</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l01715"></a><span class="lineno"> 1715</span>&#160;}</div><div class="line"><a name="l01716"></a><span class="lineno"> 1716</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01717"></a><span class="lineno"> 1717</span>&#160;<span class="comment">/** Formatted output of the MagnitudeType type.</span></div><div class="line"><a name="l01718"></a><span class="lineno"> 1718</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01719"></a><span class="lineno"> 1719</span>&#160;<span class="comment"> * @param[out] os             Output stream</span></div><div class="line"><a name="l01720"></a><span class="lineno"> 1720</span>&#160;<span class="comment"> * @param[in]  magnitude_type Type to output.</span></div><div class="line"><a name="l01721"></a><span class="lineno"> 1721</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01722"></a><span class="lineno"> 1722</span>&#160;<span class="comment"> * @return Modified output stream.</span></div><div class="line"><a name="l01723"></a><span class="lineno"> 1723</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01724"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a530d86eec3dbd22cab6336ffdceb0d37"> 1724</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute.xhtml#af3985189d478b45014e7dead9d002e2a">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a7b3ec6413f000b02fdb4e39a951d9f8a">MagnitudeType</a> &amp;magnitude_type)</div><div class="line"><a name="l01725"></a><span class="lineno"> 1725</span>&#160;{</div><div class="line"><a name="l01726"></a><span class="lineno"> 1726</span>&#160;    <span class="keywordflow">switch</span>(magnitude_type)</div><div class="line"><a name="l01727"></a><span class="lineno"> 1727</span>&#160;    {</div><div class="line"><a name="l01728"></a><span class="lineno"> 1728</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a7b3ec6413f000b02fdb4e39a951d9f8aac2f1be73bf576190d1f42bdaf5162ae8">MagnitudeType::L1NORM</a>:</div><div class="line"><a name="l01729"></a><span class="lineno"> 1729</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;L1NORM&quot;</span>;</div><div class="line"><a name="l01730"></a><span class="lineno"> 1730</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01731"></a><span class="lineno"> 1731</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a7b3ec6413f000b02fdb4e39a951d9f8aad927ac799e8b24f80fc80d89b2eb7131">MagnitudeType::L2NORM</a>:</div><div class="line"><a name="l01732"></a><span class="lineno"> 1732</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;L2NORM&quot;</span>;</div><div class="line"><a name="l01733"></a><span class="lineno"> 1733</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01734"></a><span class="lineno"> 1734</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l01735"></a><span class="lineno"> 1735</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div><div class="line"><a name="l01736"></a><span class="lineno"> 1736</span>&#160;    }</div><div class="line"><a name="l01737"></a><span class="lineno"> 1737</span>&#160;</div><div class="line"><a name="l01738"></a><span class="lineno"> 1738</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l01739"></a><span class="lineno"> 1739</span>&#160;}</div><div class="line"><a name="l01740"></a><span class="lineno"> 1740</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01741"></a><span class="lineno"> 1741</span>&#160;<span class="comment">/** Formatted output of the MagnitudeType type.</span></div><div class="line"><a name="l01742"></a><span class="lineno"> 1742</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01743"></a><span class="lineno"> 1743</span>&#160;<span class="comment"> * @param[in] type Type to output.</span></div><div class="line"><a name="l01744"></a><span class="lineno"> 1744</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01745"></a><span class="lineno"> 1745</span>&#160;<span class="comment"> * @return Formatted string.</span></div><div class="line"><a name="l01746"></a><span class="lineno"> 1746</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01747"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a42e6f8761f01b5846f56c3b8025c8c0a"> 1747</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a7b3ec6413f000b02fdb4e39a951d9f8a">arm_compute::MagnitudeType</a> &amp;<a class="code" href="namespace_gemm_tuner.xhtml#a7aead736a07eaf25623ad7bfa1f0ee2d">type</a>)</div><div class="line"><a name="l01748"></a><span class="lineno"> 1748</span>&#160;{</div><div class="line"><a name="l01749"></a><span class="lineno"> 1749</span>&#160;    std::stringstream str;</div><div class="line"><a name="l01750"></a><span class="lineno"> 1750</span>&#160;    str &lt;&lt; <a class="code" href="namespace_gemm_tuner.xhtml#a7aead736a07eaf25623ad7bfa1f0ee2d">type</a>;</div><div class="line"><a name="l01751"></a><span class="lineno"> 1751</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l01752"></a><span class="lineno"> 1752</span>&#160;}</div><div class="line"><a name="l01753"></a><span class="lineno"> 1753</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01754"></a><span class="lineno"> 1754</span>&#160;<span class="comment">/** Formatted output of the HOGNormType type.</span></div><div class="line"><a name="l01755"></a><span class="lineno"> 1755</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01756"></a><span class="lineno"> 1756</span>&#160;<span class="comment"> * @param[out] os        Output stream</span></div><div class="line"><a name="l01757"></a><span class="lineno"> 1757</span>&#160;<span class="comment"> * @param[in]  norm_type Type to output</span></div><div class="line"><a name="l01758"></a><span class="lineno"> 1758</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01759"></a><span class="lineno"> 1759</span>&#160;<span class="comment"> * @return Modified output stream.</span></div><div class="line"><a name="l01760"></a><span class="lineno"> 1760</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01761"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a5e7a61df2b926347b42ecadf8bcc8969"> 1761</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute.xhtml#af3985189d478b45014e7dead9d002e2a">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a673665b4587a2956fcbad5f0e9ba89d3">HOGNormType</a> &amp;norm_type)</div><div class="line"><a name="l01762"></a><span class="lineno"> 1762</span>&#160;{</div><div class="line"><a name="l01763"></a><span class="lineno"> 1763</span>&#160;    <span class="keywordflow">switch</span>(norm_type)</div><div class="line"><a name="l01764"></a><span class="lineno"> 1764</span>&#160;    {</div><div class="line"><a name="l01765"></a><span class="lineno"> 1765</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a673665b4587a2956fcbad5f0e9ba89d3a68616ae21712c00705b962f4eff06eaa">HOGNormType::L1_NORM</a>:</div><div class="line"><a name="l01766"></a><span class="lineno"> 1766</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;L1_NORM&quot;</span>;</div><div class="line"><a name="l01767"></a><span class="lineno"> 1767</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01768"></a><span class="lineno"> 1768</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a673665b4587a2956fcbad5f0e9ba89d3a80485e54c7a3c93a0f74637c6b918ce5">HOGNormType::L2_NORM</a>:</div><div class="line"><a name="l01769"></a><span class="lineno"> 1769</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;L2_NORM&quot;</span>;</div><div class="line"><a name="l01770"></a><span class="lineno"> 1770</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01771"></a><span class="lineno"> 1771</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a673665b4587a2956fcbad5f0e9ba89d3ac9e68c0594494ec85805b225a7acb9c2">HOGNormType::L2HYS_NORM</a>:</div><div class="line"><a name="l01772"></a><span class="lineno"> 1772</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;L2HYS_NORM&quot;</span>;</div><div class="line"><a name="l01773"></a><span class="lineno"> 1773</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01774"></a><span class="lineno"> 1774</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l01775"></a><span class="lineno"> 1775</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div><div class="line"><a name="l01776"></a><span class="lineno"> 1776</span>&#160;    }</div><div class="line"><a name="l01777"></a><span class="lineno"> 1777</span>&#160;</div><div class="line"><a name="l01778"></a><span class="lineno"> 1778</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l01779"></a><span class="lineno"> 1779</span>&#160;}</div><div class="line"><a name="l01780"></a><span class="lineno"> 1780</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01781"></a><span class="lineno"> 1781</span>&#160;<span class="comment">/** Formatted output of the HOGNormType type.</span></div><div class="line"><a name="l01782"></a><span class="lineno"> 1782</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01783"></a><span class="lineno"> 1783</span>&#160;<span class="comment"> * @param[in] type Type to output</span></div><div class="line"><a name="l01784"></a><span class="lineno"> 1784</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01785"></a><span class="lineno"> 1785</span>&#160;<span class="comment"> * @return Formatted string.</span></div><div class="line"><a name="l01786"></a><span class="lineno"> 1786</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01787"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a950ba288e8136db4bf52f7c51dea20eb"> 1787</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a673665b4587a2956fcbad5f0e9ba89d3">HOGNormType</a> &amp;<a class="code" href="namespace_gemm_tuner.xhtml#a7aead736a07eaf25623ad7bfa1f0ee2d">type</a>)</div><div class="line"><a name="l01788"></a><span class="lineno"> 1788</span>&#160;{</div><div class="line"><a name="l01789"></a><span class="lineno"> 1789</span>&#160;    std::stringstream str;</div><div class="line"><a name="l01790"></a><span class="lineno"> 1790</span>&#160;    str &lt;&lt; <a class="code" href="namespace_gemm_tuner.xhtml#a7aead736a07eaf25623ad7bfa1f0ee2d">type</a>;</div><div class="line"><a name="l01791"></a><span class="lineno"> 1791</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l01792"></a><span class="lineno"> 1792</span>&#160;}</div><div class="line"><a name="l01793"></a><span class="lineno"> 1793</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01794"></a><span class="lineno"> 1794</span>&#160;<span class="comment">/** Formatted output of the Size2D type.</span></div><div class="line"><a name="l01795"></a><span class="lineno"> 1795</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01796"></a><span class="lineno"> 1796</span>&#160;<span class="comment"> * @param[out] os   Output stream</span></div><div class="line"><a name="l01797"></a><span class="lineno"> 1797</span>&#160;<span class="comment"> * @param[in]  size Type to output</span></div><div class="line"><a name="l01798"></a><span class="lineno"> 1798</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01799"></a><span class="lineno"> 1799</span>&#160;<span class="comment"> * @return Modified output stream.</span></div><div class="line"><a name="l01800"></a><span class="lineno"> 1800</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01801"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#ab91d110e020f6ed987e05e82df3e350b"> 1801</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute.xhtml#af3985189d478b45014e7dead9d002e2a">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;size)</div><div class="line"><a name="l01802"></a><span class="lineno"> 1802</span>&#160;{</div><div class="line"><a name="l01803"></a><span class="lineno"> 1803</span>&#160;    os &lt;&lt; size.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02bed8590a9ddf520e58a060059518ec">width</a> &lt;&lt; <span class="stringliteral">&quot;x&quot;</span> &lt;&lt; size.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02afeaaf8574e7a78d6b466ff2695052">height</a>;</div><div class="line"><a name="l01804"></a><span class="lineno"> 1804</span>&#160;</div><div class="line"><a name="l01805"></a><span class="lineno"> 1805</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l01806"></a><span class="lineno"> 1806</span>&#160;}</div><div class="line"><a name="l01807"></a><span class="lineno"> 1807</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01808"></a><span class="lineno"> 1808</span>&#160;<span class="comment">/** Formatted output of the Size2D type.</span></div><div class="line"><a name="l01809"></a><span class="lineno"> 1809</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01810"></a><span class="lineno"> 1810</span>&#160;<span class="comment"> * @param[in] type Type to output</span></div><div class="line"><a name="l01811"></a><span class="lineno"> 1811</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01812"></a><span class="lineno"> 1812</span>&#160;<span class="comment"> * @return Formatted string.</span></div><div class="line"><a name="l01813"></a><span class="lineno"> 1813</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01814"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#aee88a2c259879eb9dc18cb5965e87c29"> 1814</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;<a class="code" href="namespace_gemm_tuner.xhtml#a7aead736a07eaf25623ad7bfa1f0ee2d">type</a>)</div><div class="line"><a name="l01815"></a><span class="lineno"> 1815</span>&#160;{</div><div class="line"><a name="l01816"></a><span class="lineno"> 1816</span>&#160;    std::stringstream str;</div><div class="line"><a name="l01817"></a><span class="lineno"> 1817</span>&#160;    str &lt;&lt; <a class="code" href="namespace_gemm_tuner.xhtml#a7aead736a07eaf25623ad7bfa1f0ee2d">type</a>;</div><div class="line"><a name="l01818"></a><span class="lineno"> 1818</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l01819"></a><span class="lineno"> 1819</span>&#160;}</div><div class="line"><a name="l01820"></a><span class="lineno"> 1820</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01821"></a><span class="lineno"> 1821</span>&#160;<span class="comment">/** Formatted output of the HOGInfo type.</span></div><div class="line"><a name="l01822"></a><span class="lineno"> 1822</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01823"></a><span class="lineno"> 1823</span>&#160;<span class="comment"> * @param[out] os       Output stream</span></div><div class="line"><a name="l01824"></a><span class="lineno"> 1824</span>&#160;<span class="comment"> * @param[in]  hog_info Type to output</span></div><div class="line"><a name="l01825"></a><span class="lineno"> 1825</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01826"></a><span class="lineno"> 1826</span>&#160;<span class="comment"> * @return Modified output stream.</span></div><div class="line"><a name="l01827"></a><span class="lineno"> 1827</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01828"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a4228b490e13b79a60737929d9d9e5957"> 1828</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute.xhtml#af3985189d478b45014e7dead9d002e2a">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_h_o_g_info.xhtml">HOGInfo</a> &amp;hog_info)</div><div class="line"><a name="l01829"></a><span class="lineno"> 1829</span>&#160;{</div><div class="line"><a name="l01830"></a><span class="lineno"> 1830</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;{CellSize=&quot;</span> &lt;&lt; hog_info.<a class="code" href="classarm__compute_1_1_h_o_g_info.xhtml#aaefa291ad3cc3e3210c8b8ef2ffde476">cell_size</a>() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div><div class="line"><a name="l01831"></a><span class="lineno"> 1831</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;BlockSize=&quot;</span> &lt;&lt; hog_info.<a class="code" href="classarm__compute_1_1_h_o_g_info.xhtml#ae561964ccc0e0a5750676b9c7dd7cd44">block_size</a>() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div><div class="line"><a name="l01832"></a><span class="lineno"> 1832</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;DetectionWindowSize=&quot;</span> &lt;&lt; hog_info.<a class="code" href="classarm__compute_1_1_h_o_g_info.xhtml#a7cbda2c789c461237f0c6eaee8f8cd2a">detection_window_size</a>() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div><div class="line"><a name="l01833"></a><span class="lineno"> 1833</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;BlockStride=&quot;</span> &lt;&lt; hog_info.<a class="code" href="classarm__compute_1_1_h_o_g_info.xhtml#a207391d3ac69d9a0839104f784f888fd">block_stride</a>() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div><div class="line"><a name="l01834"></a><span class="lineno"> 1834</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;NumBins=&quot;</span> &lt;&lt; hog_info.<a class="code" href="classarm__compute_1_1_h_o_g_info.xhtml#ad96530ddba514601d376f991b568b346">num_bins</a>() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div><div class="line"><a name="l01835"></a><span class="lineno"> 1835</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;NormType=&quot;</span> &lt;&lt; hog_info.<a class="code" href="classarm__compute_1_1_h_o_g_info.xhtml#a5a4a2ab2f4396cc64b4a5676a90d7f07">normalization_type</a>() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div><div class="line"><a name="l01836"></a><span class="lineno"> 1836</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;L2HystThreshold=&quot;</span> &lt;&lt; hog_info.<a class="code" href="classarm__compute_1_1_h_o_g_info.xhtml#ac3f834a0c4744ccbc55d3b8bc810fdff">l2_hyst_threshold</a>() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div><div class="line"><a name="l01837"></a><span class="lineno"> 1837</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;PhaseType=&quot;</span> &lt;&lt; hog_info.<a class="code" href="classarm__compute_1_1_h_o_g_info.xhtml#a039b8ebcdd462041d3988e6d2c145323">phase_type</a>() &lt;&lt; <span class="stringliteral">&quot;}&quot;</span>;</div><div class="line"><a name="l01838"></a><span class="lineno"> 1838</span>&#160;</div><div class="line"><a name="l01839"></a><span class="lineno"> 1839</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l01840"></a><span class="lineno"> 1840</span>&#160;}</div><div class="line"><a name="l01841"></a><span class="lineno"> 1841</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01842"></a><span class="lineno"> 1842</span>&#160;<span class="comment">/** Formatted output of the HOGInfo type.</span></div><div class="line"><a name="l01843"></a><span class="lineno"> 1843</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01844"></a><span class="lineno"> 1844</span>&#160;<span class="comment"> * @param[in] type Type to output</span></div><div class="line"><a name="l01845"></a><span class="lineno"> 1845</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01846"></a><span class="lineno"> 1846</span>&#160;<span class="comment"> * @return Formatted string.</span></div><div class="line"><a name="l01847"></a><span class="lineno"> 1847</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01848"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a3cf43a216912b361eaffc3c71452a31e"> 1848</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_h_o_g_info.xhtml">HOGInfo</a> &amp;<a class="code" href="namespace_gemm_tuner.xhtml#a7aead736a07eaf25623ad7bfa1f0ee2d">type</a>)</div><div class="line"><a name="l01849"></a><span class="lineno"> 1849</span>&#160;{</div><div class="line"><a name="l01850"></a><span class="lineno"> 1850</span>&#160;    std::stringstream str;</div><div class="line"><a name="l01851"></a><span class="lineno"> 1851</span>&#160;    str &lt;&lt; <a class="code" href="namespace_gemm_tuner.xhtml#a7aead736a07eaf25623ad7bfa1f0ee2d">type</a>;</div><div class="line"><a name="l01852"></a><span class="lineno"> 1852</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l01853"></a><span class="lineno"> 1853</span>&#160;}</div><div class="line"><a name="l01854"></a><span class="lineno"> 1854</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01855"></a><span class="lineno"> 1855</span>&#160;<span class="comment">/** Formatted output of the ConvolutionMethod type.</span></div><div class="line"><a name="l01856"></a><span class="lineno"> 1856</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01857"></a><span class="lineno"> 1857</span>&#160;<span class="comment"> * @param[out] os          Output stream</span></div><div class="line"><a name="l01858"></a><span class="lineno"> 1858</span>&#160;<span class="comment"> * @param[in]  conv_method Type to output</span></div><div class="line"><a name="l01859"></a><span class="lineno"> 1859</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01860"></a><span class="lineno"> 1860</span>&#160;<span class="comment"> * @return Modified output stream.</span></div><div class="line"><a name="l01861"></a><span class="lineno"> 1861</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01862"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#abd35c1c3fb716078b1f4a25981defac4"> 1862</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute.xhtml#af3985189d478b45014e7dead9d002e2a">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517d">ConvolutionMethod</a> &amp;conv_method)</div><div class="line"><a name="l01863"></a><span class="lineno"> 1863</span>&#160;{</div><div class="line"><a name="l01864"></a><span class="lineno"> 1864</span>&#160;    <span class="keywordflow">switch</span>(conv_method)</div><div class="line"><a name="l01865"></a><span class="lineno"> 1865</span>&#160;    {</div><div class="line"><a name="l01866"></a><span class="lineno"> 1866</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517da5174aac3927faa9ee34befb7fc87a9e3">ConvolutionMethod::GEMM</a>:</div><div class="line"><a name="l01867"></a><span class="lineno"> 1867</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;GEMM&quot;</span>;</div><div class="line"><a name="l01868"></a><span class="lineno"> 1868</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01869"></a><span class="lineno"> 1869</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517da4c5d06b02c97731aaa976179c62dcf76">ConvolutionMethod::DIRECT</a>:</div><div class="line"><a name="l01870"></a><span class="lineno"> 1870</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;DIRECT&quot;</span>;</div><div class="line"><a name="l01871"></a><span class="lineno"> 1871</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01872"></a><span class="lineno"> 1872</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517da9d024a5762b3a992dec7eb3c49d17ae8">ConvolutionMethod::WINOGRAD</a>:</div><div class="line"><a name="l01873"></a><span class="lineno"> 1873</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;WINOGRAD&quot;</span>;</div><div class="line"><a name="l01874"></a><span class="lineno"> 1874</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01875"></a><span class="lineno"> 1875</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l01876"></a><span class="lineno"> 1876</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div><div class="line"><a name="l01877"></a><span class="lineno"> 1877</span>&#160;    }</div><div class="line"><a name="l01878"></a><span class="lineno"> 1878</span>&#160;</div><div class="line"><a name="l01879"></a><span class="lineno"> 1879</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l01880"></a><span class="lineno"> 1880</span>&#160;}</div><div class="line"><a name="l01881"></a><span class="lineno"> 1881</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01882"></a><span class="lineno"> 1882</span>&#160;<span class="comment">/** Formatted output of the ConvolutionMethod type.</span></div><div class="line"><a name="l01883"></a><span class="lineno"> 1883</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01884"></a><span class="lineno"> 1884</span>&#160;<span class="comment"> * @param[in] conv_method Type to output</span></div><div class="line"><a name="l01885"></a><span class="lineno"> 1885</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01886"></a><span class="lineno"> 1886</span>&#160;<span class="comment"> * @return Formatted string.</span></div><div class="line"><a name="l01887"></a><span class="lineno"> 1887</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01888"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a853d44a32a328fb4455f6200a11c4785"> 1888</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517d">ConvolutionMethod</a> &amp;conv_method)</div><div class="line"><a name="l01889"></a><span class="lineno"> 1889</span>&#160;{</div><div class="line"><a name="l01890"></a><span class="lineno"> 1890</span>&#160;    std::stringstream str;</div><div class="line"><a name="l01891"></a><span class="lineno"> 1891</span>&#160;    str &lt;&lt; conv_method;</div><div class="line"><a name="l01892"></a><span class="lineno"> 1892</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l01893"></a><span class="lineno"> 1893</span>&#160;}</div><div class="line"><a name="l01894"></a><span class="lineno"> 1894</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01895"></a><span class="lineno"> 1895</span>&#160;<span class="comment">/** Formatted output of the GPUTarget type.</span></div><div class="line"><a name="l01896"></a><span class="lineno"> 1896</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01897"></a><span class="lineno"> 1897</span>&#160;<span class="comment"> * @param[out] os         Output stream</span></div><div class="line"><a name="l01898"></a><span class="lineno"> 1898</span>&#160;<span class="comment"> * @param[in]  gpu_target Type to output</span></div><div class="line"><a name="l01899"></a><span class="lineno"> 1899</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01900"></a><span class="lineno"> 1900</span>&#160;<span class="comment"> * @return Modified output stream.</span></div><div class="line"><a name="l01901"></a><span class="lineno"> 1901</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01902"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a1f4d95d65a62a085e929ab0a1a77add2"> 1902</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute.xhtml#af3985189d478b45014e7dead9d002e2a">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GPUTarget</a> &amp;gpu_target)</div><div class="line"><a name="l01903"></a><span class="lineno"> 1903</span>&#160;{</div><div class="line"><a name="l01904"></a><span class="lineno"> 1904</span>&#160;    <span class="keywordflow">switch</span>(gpu_target)</div><div class="line"><a name="l01905"></a><span class="lineno"> 1905</span>&#160;    {</div><div class="line"><a name="l01906"></a><span class="lineno"> 1906</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a57a3b40730a5af7ea3e13eb4bba56d82">GPUTarget::GPU_ARCH_MASK</a>:</div><div class="line"><a name="l01907"></a><span class="lineno"> 1907</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;GPU_ARCH_MASK&quot;</span>;</div><div class="line"><a name="l01908"></a><span class="lineno"> 1908</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01909"></a><span class="lineno"> 1909</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3afa362f4daec88442a387ff7cda411a38">GPUTarget::MIDGARD</a>:</div><div class="line"><a name="l01910"></a><span class="lineno"> 1910</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;MIDGARD&quot;</span>;</div><div class="line"><a name="l01911"></a><span class="lineno"> 1911</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01912"></a><span class="lineno"> 1912</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3aa78cc0fd1cab24af0fad71dc4c256f8e">GPUTarget::BIFROST</a>:</div><div class="line"><a name="l01913"></a><span class="lineno"> 1913</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;BIFROST&quot;</span>;</div><div class="line"><a name="l01914"></a><span class="lineno"> 1914</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01915"></a><span class="lineno"> 1915</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a35213429e39ad02be7c3c44fc87cde57">GPUTarget::VALHALL</a>:</div><div class="line"><a name="l01916"></a><span class="lineno"> 1916</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;VALHALL&quot;</span>;</div><div class="line"><a name="l01917"></a><span class="lineno"> 1917</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01918"></a><span class="lineno"> 1918</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a6855a4342969d2b58c96d95385d6e673">GPUTarget::T600</a>:</div><div class="line"><a name="l01919"></a><span class="lineno"> 1919</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;T600&quot;</span>;</div><div class="line"><a name="l01920"></a><span class="lineno"> 1920</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01921"></a><span class="lineno"> 1921</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a664a94fa85b127eabc7bed25091843fd">GPUTarget::T700</a>:</div><div class="line"><a name="l01922"></a><span class="lineno"> 1922</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;T700&quot;</span>;</div><div class="line"><a name="l01923"></a><span class="lineno"> 1923</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01924"></a><span class="lineno"> 1924</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3aae926a8537ded0221329aa9a89b84048">GPUTarget::T800</a>:</div><div class="line"><a name="l01925"></a><span class="lineno"> 1925</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;T800&quot;</span>;</div><div class="line"><a name="l01926"></a><span class="lineno"> 1926</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01927"></a><span class="lineno"> 1927</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a79515d904f73cf1711207de1b2aa6ac6">GPUTarget::G71</a>:</div><div class="line"><a name="l01928"></a><span class="lineno"> 1928</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;G71&quot;</span>;</div><div class="line"><a name="l01929"></a><span class="lineno"> 1929</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01930"></a><span class="lineno"> 1930</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3ab2ac2aea42c95ccc70260ceeb02ec4fc">GPUTarget::G72</a>:</div><div class="line"><a name="l01931"></a><span class="lineno"> 1931</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;G72&quot;</span>;</div><div class="line"><a name="l01932"></a><span class="lineno"> 1932</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01933"></a><span class="lineno"> 1933</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a0a2d4856ae75ec5a7b78851f6e5875f0">GPUTarget::G51</a>:</div><div class="line"><a name="l01934"></a><span class="lineno"> 1934</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;G51&quot;</span>;</div><div class="line"><a name="l01935"></a><span class="lineno"> 1935</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01936"></a><span class="lineno"> 1936</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3afc99dd3bc5650c5116886eefd3d18988">GPUTarget::G51BIG</a>:</div><div class="line"><a name="l01937"></a><span class="lineno"> 1937</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;G51BIG&quot;</span>;</div><div class="line"><a name="l01938"></a><span class="lineno"> 1938</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01939"></a><span class="lineno"> 1939</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a9d0acedfece9dfaf5cc3e63bfbeecf2f">GPUTarget::G51LIT</a>:</div><div class="line"><a name="l01940"></a><span class="lineno"> 1940</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;G51LIT&quot;</span>;</div><div class="line"><a name="l01941"></a><span class="lineno"> 1941</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01942"></a><span class="lineno"> 1942</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3aa46ce37da51477a1af33a8810e0ed04d">GPUTarget::G76</a>:</div><div class="line"><a name="l01943"></a><span class="lineno"> 1943</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;G76&quot;</span>;</div><div class="line"><a name="l01944"></a><span class="lineno"> 1944</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01945"></a><span class="lineno"> 1945</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a8e081b1cdec7bc064a67f31560ef7fe0">GPUTarget::G77</a>:</div><div class="line"><a name="l01946"></a><span class="lineno"> 1946</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;G77&quot;</span>;</div><div class="line"><a name="l01947"></a><span class="lineno"> 1947</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01948"></a><span class="lineno"> 1948</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a53e518b6393904e797819c7a941f9ddc">GPUTarget::TBOX</a>:</div><div class="line"><a name="l01949"></a><span class="lineno"> 1949</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;TBOX&quot;</span>;</div><div class="line"><a name="l01950"></a><span class="lineno"> 1950</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01951"></a><span class="lineno"> 1951</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a6903f06b87f56a4cd0df268ee94dbd6f">GPUTarget::TODX</a>:</div><div class="line"><a name="l01952"></a><span class="lineno"> 1952</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;TODX&quot;</span>;</div><div class="line"><a name="l01953"></a><span class="lineno"> 1953</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01954"></a><span class="lineno"> 1954</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l01955"></a><span class="lineno"> 1955</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div><div class="line"><a name="l01956"></a><span class="lineno"> 1956</span>&#160;    }</div><div class="line"><a name="l01957"></a><span class="lineno"> 1957</span>&#160;</div><div class="line"><a name="l01958"></a><span class="lineno"> 1958</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l01959"></a><span class="lineno"> 1959</span>&#160;}</div><div class="line"><a name="l01960"></a><span class="lineno"> 1960</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01961"></a><span class="lineno"> 1961</span>&#160;<span class="comment">/** Formatted output of the GPUTarget type.</span></div><div class="line"><a name="l01962"></a><span class="lineno"> 1962</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01963"></a><span class="lineno"> 1963</span>&#160;<span class="comment"> * @param[in] gpu_target Type to output</span></div><div class="line"><a name="l01964"></a><span class="lineno"> 1964</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01965"></a><span class="lineno"> 1965</span>&#160;<span class="comment"> * @return Formatted string.</span></div><div class="line"><a name="l01966"></a><span class="lineno"> 1966</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01967"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#aee29ccfc095313663fc954f581ddf40a"> 1967</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GPUTarget</a> &amp;gpu_target)</div><div class="line"><a name="l01968"></a><span class="lineno"> 1968</span>&#160;{</div><div class="line"><a name="l01969"></a><span class="lineno"> 1969</span>&#160;    std::stringstream str;</div><div class="line"><a name="l01970"></a><span class="lineno"> 1970</span>&#160;    str &lt;&lt; gpu_target;</div><div class="line"><a name="l01971"></a><span class="lineno"> 1971</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l01972"></a><span class="lineno"> 1972</span>&#160;}</div><div class="line"><a name="l01973"></a><span class="lineno"> 1973</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01974"></a><span class="lineno"> 1974</span>&#160;<span class="comment">/** Formatted output of the DetectionWindow type.</span></div><div class="line"><a name="l01975"></a><span class="lineno"> 1975</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01976"></a><span class="lineno"> 1976</span>&#160;<span class="comment"> * @param[out] os               Output stream</span></div><div class="line"><a name="l01977"></a><span class="lineno"> 1977</span>&#160;<span class="comment"> * @param[in]  detection_window Type to output</span></div><div class="line"><a name="l01978"></a><span class="lineno"> 1978</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01979"></a><span class="lineno"> 1979</span>&#160;<span class="comment"> * @return Modified output stream.</span></div><div class="line"><a name="l01980"></a><span class="lineno"> 1980</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01981"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a907c93ba5daaabf6af7095f20340d024"> 1981</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute.xhtml#af3985189d478b45014e7dead9d002e2a">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_detection_window.xhtml">DetectionWindow</a> &amp;detection_window)</div><div class="line"><a name="l01982"></a><span class="lineno"> 1982</span>&#160;{</div><div class="line"><a name="l01983"></a><span class="lineno"> 1983</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;{x=&quot;</span> &lt;&lt; detection_window.<a class="code" href="structarm__compute_1_1_detection_window.xhtml#a4dde988b1b2adba65ae3efa69f65d960">x</a> &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div><div class="line"><a name="l01984"></a><span class="lineno"> 1984</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;y=&quot;</span> &lt;&lt; detection_window.<a class="code" href="structarm__compute_1_1_detection_window.xhtml#ab0580f504a7428539be299fa71565f30">y</a> &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div><div class="line"><a name="l01985"></a><span class="lineno"> 1985</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;width=&quot;</span> &lt;&lt; detection_window.<a class="code" href="structarm__compute_1_1_detection_window.xhtml#ad0eab1042455a2067c812ab8071d5376">width</a> &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div><div class="line"><a name="l01986"></a><span class="lineno"> 1986</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;height=&quot;</span> &lt;&lt; detection_window.<a class="code" href="structarm__compute_1_1_detection_window.xhtml#a81c9f8d0b8c3b49d770be14dbe9f0d37">height</a> &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div><div class="line"><a name="l01987"></a><span class="lineno"> 1987</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;idx_class=&quot;</span> &lt;&lt; detection_window.<a class="code" href="structarm__compute_1_1_detection_window.xhtml#ae5c4999829285e20d3b491807fa46fd1">idx_class</a> &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div><div class="line"><a name="l01988"></a><span class="lineno"> 1988</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;score=&quot;</span> &lt;&lt; detection_window.<a class="code" href="structarm__compute_1_1_detection_window.xhtml#a8c5cd9b525ee73a24b1d9d8e34982d1c">score</a> &lt;&lt; <span class="stringliteral">&quot;}&quot;</span>;</div><div class="line"><a name="l01989"></a><span class="lineno"> 1989</span>&#160;</div><div class="line"><a name="l01990"></a><span class="lineno"> 1990</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l01991"></a><span class="lineno"> 1991</span>&#160;}</div><div class="line"><a name="l01992"></a><span class="lineno"> 1992</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01993"></a><span class="lineno"> 1993</span>&#160;<span class="comment">/** Formatted output of the DetectionOutputLayerCodeType type.</span></div><div class="line"><a name="l01994"></a><span class="lineno"> 1994</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01995"></a><span class="lineno"> 1995</span>&#160;<span class="comment"> * @param[out] os             Output stream</span></div><div class="line"><a name="l01996"></a><span class="lineno"> 1996</span>&#160;<span class="comment"> * @param[in]  detection_code Type to output</span></div><div class="line"><a name="l01997"></a><span class="lineno"> 1997</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01998"></a><span class="lineno"> 1998</span>&#160;<span class="comment"> * @return Modified output stream.</span></div><div class="line"><a name="l01999"></a><span class="lineno"> 1999</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l02000"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a28634df052522fe60e15a0128ba924cc"> 2000</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute.xhtml#af3985189d478b45014e7dead9d002e2a">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad818ba0ecd4a87d8f1bb0d5b17f07830">DetectionOutputLayerCodeType</a> &amp;detection_code)</div><div class="line"><a name="l02001"></a><span class="lineno"> 2001</span>&#160;{</div><div class="line"><a name="l02002"></a><span class="lineno"> 2002</span>&#160;    <span class="keywordflow">switch</span>(detection_code)</div><div class="line"><a name="l02003"></a><span class="lineno"> 2003</span>&#160;    {</div><div class="line"><a name="l02004"></a><span class="lineno"> 2004</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad818ba0ecd4a87d8f1bb0d5b17f07830a1150a8d7752b01d30d91fe18fe9d8a54">DetectionOutputLayerCodeType::CENTER_SIZE</a>:</div><div class="line"><a name="l02005"></a><span class="lineno"> 2005</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;CENTER_SIZE&quot;</span>;</div><div class="line"><a name="l02006"></a><span class="lineno"> 2006</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02007"></a><span class="lineno"> 2007</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad818ba0ecd4a87d8f1bb0d5b17f07830ac411afd31d32cec664d372acc12f404a">DetectionOutputLayerCodeType::CORNER</a>:</div><div class="line"><a name="l02008"></a><span class="lineno"> 2008</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;CORNER&quot;</span>;</div><div class="line"><a name="l02009"></a><span class="lineno"> 2009</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02010"></a><span class="lineno"> 2010</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad818ba0ecd4a87d8f1bb0d5b17f07830afbc6c35854fe02eb9e792f897399c42a">DetectionOutputLayerCodeType::CORNER_SIZE</a>:</div><div class="line"><a name="l02011"></a><span class="lineno"> 2011</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;CORNER_SIZE&quot;</span>;</div><div class="line"><a name="l02012"></a><span class="lineno"> 2012</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02013"></a><span class="lineno"> 2013</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad818ba0ecd4a87d8f1bb0d5b17f07830ae65a115db9b4bcc4ae0aa0b989089d16">DetectionOutputLayerCodeType::TF_CENTER</a>:</div><div class="line"><a name="l02014"></a><span class="lineno"> 2014</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;TF_CENTER&quot;</span>;</div><div class="line"><a name="l02015"></a><span class="lineno"> 2015</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02016"></a><span class="lineno"> 2016</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l02017"></a><span class="lineno"> 2017</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div><div class="line"><a name="l02018"></a><span class="lineno"> 2018</span>&#160;    }</div><div class="line"><a name="l02019"></a><span class="lineno"> 2019</span>&#160;</div><div class="line"><a name="l02020"></a><span class="lineno"> 2020</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l02021"></a><span class="lineno"> 2021</span>&#160;}<span class="comment"></span></div><div class="line"><a name="l02022"></a><span class="lineno"> 2022</span>&#160;<span class="comment">/** Formatted output of the DetectionOutputLayerCodeType type.</span></div><div class="line"><a name="l02023"></a><span class="lineno"> 2023</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l02024"></a><span class="lineno"> 2024</span>&#160;<span class="comment"> * @param[in] detection_code Type to output</span></div><div class="line"><a name="l02025"></a><span class="lineno"> 2025</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l02026"></a><span class="lineno"> 2026</span>&#160;<span class="comment"> * @return Formatted string.</span></div><div class="line"><a name="l02027"></a><span class="lineno"> 2027</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l02028"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a41c7dc2aa88c4e30effb2e3f550de481"> 2028</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad818ba0ecd4a87d8f1bb0d5b17f07830">DetectionOutputLayerCodeType</a> &amp;detection_code)</div><div class="line"><a name="l02029"></a><span class="lineno"> 2029</span>&#160;{</div><div class="line"><a name="l02030"></a><span class="lineno"> 2030</span>&#160;    std::stringstream str;</div><div class="line"><a name="l02031"></a><span class="lineno"> 2031</span>&#160;    str &lt;&lt; detection_code;</div><div class="line"><a name="l02032"></a><span class="lineno"> 2032</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l02033"></a><span class="lineno"> 2033</span>&#160;}</div><div class="line"><a name="l02034"></a><span class="lineno"> 2034</span>&#160;<span class="comment"></span></div><div class="line"><a name="l02035"></a><span class="lineno"> 2035</span>&#160;<span class="comment">/** Formatted output of the DetectionOutputLayerInfo type.</span></div><div class="line"><a name="l02036"></a><span class="lineno"> 2036</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l02037"></a><span class="lineno"> 2037</span>&#160;<span class="comment"> * @param[out] os             Output stream</span></div><div class="line"><a name="l02038"></a><span class="lineno"> 2038</span>&#160;<span class="comment"> * @param[in]  detection_info Type to output</span></div><div class="line"><a name="l02039"></a><span class="lineno"> 2039</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l02040"></a><span class="lineno"> 2040</span>&#160;<span class="comment"> * @return Modified output stream.</span></div><div class="line"><a name="l02041"></a><span class="lineno"> 2041</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l02042"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a22b40e983993e76ab39ce878fb111b9b"> 2042</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute.xhtml#af3985189d478b45014e7dead9d002e2a">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_detection_output_layer_info.xhtml">DetectionOutputLayerInfo</a> &amp;detection_info)</div><div class="line"><a name="l02043"></a><span class="lineno"> 2043</span>&#160;{</div><div class="line"><a name="l02044"></a><span class="lineno"> 2044</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;{Classes=&quot;</span> &lt;&lt; detection_info.<a class="code" href="classarm__compute_1_1_detection_output_layer_info.xhtml#a2411dd5edb9ccb581d303f3396e9c14c">num_classes</a>() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div><div class="line"><a name="l02045"></a><span class="lineno"> 2045</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;ShareLocation=&quot;</span> &lt;&lt; detection_info.<a class="code" href="classarm__compute_1_1_detection_output_layer_info.xhtml#a7bc581f245390f063f02c3fcbb422320">share_location</a>() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div><div class="line"><a name="l02046"></a><span class="lineno"> 2046</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;CodeType=&quot;</span> &lt;&lt; detection_info.<a class="code" href="classarm__compute_1_1_detection_output_layer_info.xhtml#a025a49ad16e9d5d59d3919c25a17d1ae">code_type</a>() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div><div class="line"><a name="l02047"></a><span class="lineno"> 2047</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;VarianceEncodedInTarget=&quot;</span> &lt;&lt; detection_info.<a class="code" href="classarm__compute_1_1_detection_output_layer_info.xhtml#aa5081eb6d3f7bf20f32573af8a60f1f9">variance_encoded_in_target</a>() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div><div class="line"><a name="l02048"></a><span class="lineno"> 2048</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;KeepTopK=&quot;</span> &lt;&lt; detection_info.<a class="code" href="classarm__compute_1_1_detection_output_layer_info.xhtml#a381583deeb7c92f3b86d959c1e6c8185">keep_top_k</a>() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div><div class="line"><a name="l02049"></a><span class="lineno"> 2049</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;NMSThreshold=&quot;</span> &lt;&lt; detection_info.<a class="code" href="classarm__compute_1_1_detection_output_layer_info.xhtml#af14fc4cf24dfb69a0f225a582ef01d54">nms_threshold</a>() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div><div class="line"><a name="l02050"></a><span class="lineno"> 2050</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;Eta=&quot;</span> &lt;&lt; detection_info.<a class="code" href="classarm__compute_1_1_detection_output_layer_info.xhtml#a206472366fc0981d36701fe46679fd8f">eta</a>() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div><div class="line"><a name="l02051"></a><span class="lineno"> 2051</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;BackgroundLabelId=&quot;</span> &lt;&lt; detection_info.<a class="code" href="classarm__compute_1_1_detection_output_layer_info.xhtml#a158d49c7c1df3c6c6589b47d3de56cf0">background_label_id</a>() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div><div class="line"><a name="l02052"></a><span class="lineno"> 2052</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;ConfidenceThreshold=&quot;</span> &lt;&lt; detection_info.<a class="code" href="classarm__compute_1_1_detection_output_layer_info.xhtml#a47c941c24980e6f61a74986c4a16c16c">confidence_threshold</a>() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div><div class="line"><a name="l02053"></a><span class="lineno"> 2053</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;TopK=&quot;</span> &lt;&lt; detection_info.<a class="code" href="classarm__compute_1_1_detection_output_layer_info.xhtml#acf35ae15a9350f47bcba0d0cedeb3e7c">top_k</a>() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div><div class="line"><a name="l02054"></a><span class="lineno"> 2054</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;NumLocClasses=&quot;</span> &lt;&lt; detection_info.<a class="code" href="classarm__compute_1_1_detection_output_layer_info.xhtml#ae82a2ccc5739cb255a9a7679d6161399">num_loc_classes</a>()</div><div class="line"><a name="l02055"></a><span class="lineno"> 2055</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;}&quot;</span>;</div><div class="line"><a name="l02056"></a><span class="lineno"> 2056</span>&#160;</div><div class="line"><a name="l02057"></a><span class="lineno"> 2057</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l02058"></a><span class="lineno"> 2058</span>&#160;}</div><div class="line"><a name="l02059"></a><span class="lineno"> 2059</span>&#160;<span class="comment"></span></div><div class="line"><a name="l02060"></a><span class="lineno"> 2060</span>&#160;<span class="comment">/** Formatted output of the DetectionOutputLayerInfo type.</span></div><div class="line"><a name="l02061"></a><span class="lineno"> 2061</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l02062"></a><span class="lineno"> 2062</span>&#160;<span class="comment"> * @param[in] detection_info Type to output</span></div><div class="line"><a name="l02063"></a><span class="lineno"> 2063</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l02064"></a><span class="lineno"> 2064</span>&#160;<span class="comment"> * @return Formatted string.</span></div><div class="line"><a name="l02065"></a><span class="lineno"> 2065</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l02066"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a4084858fda1caec39457dd70322e6bd6"> 2066</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_detection_output_layer_info.xhtml">DetectionOutputLayerInfo</a> &amp;detection_info)</div><div class="line"><a name="l02067"></a><span class="lineno"> 2067</span>&#160;{</div><div class="line"><a name="l02068"></a><span class="lineno"> 2068</span>&#160;    std::stringstream str;</div><div class="line"><a name="l02069"></a><span class="lineno"> 2069</span>&#160;    str &lt;&lt; detection_info;</div><div class="line"><a name="l02070"></a><span class="lineno"> 2070</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l02071"></a><span class="lineno"> 2071</span>&#160;}<span class="comment"></span></div><div class="line"><a name="l02072"></a><span class="lineno"> 2072</span>&#160;<span class="comment">/** Formatted output of the DetectionPostProcessLayerInfo type.</span></div><div class="line"><a name="l02073"></a><span class="lineno"> 2073</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l02074"></a><span class="lineno"> 2074</span>&#160;<span class="comment"> * @param[out] os             Output stream</span></div><div class="line"><a name="l02075"></a><span class="lineno"> 2075</span>&#160;<span class="comment"> * @param[in]  detection_info Type to output</span></div><div class="line"><a name="l02076"></a><span class="lineno"> 2076</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l02077"></a><span class="lineno"> 2077</span>&#160;<span class="comment"> * @return Modified output stream.</span></div><div class="line"><a name="l02078"></a><span class="lineno"> 2078</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l02079"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a94809adf238fe4a002701316c27b9bec"> 2079</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute.xhtml#af3985189d478b45014e7dead9d002e2a">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml">DetectionPostProcessLayerInfo</a> &amp;detection_info)</div><div class="line"><a name="l02080"></a><span class="lineno"> 2080</span>&#160;{</div><div class="line"><a name="l02081"></a><span class="lineno"> 2081</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;{MaxDetections=&quot;</span> &lt;&lt; detection_info.<a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a23e83519067d74d4f1855d38741151eb">max_detections</a>() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div><div class="line"><a name="l02082"></a><span class="lineno"> 2082</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;MaxClassesPerDetection=&quot;</span> &lt;&lt; detection_info.<a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#ad54d768454ff1000504546898078d0de">max_classes_per_detection</a>() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div><div class="line"><a name="l02083"></a><span class="lineno"> 2083</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;NmsScoreThreshold=&quot;</span> &lt;&lt; detection_info.<a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a0732a1286ff6a838da5c19e6d48c99cf">nms_score_threshold</a>() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div><div class="line"><a name="l02084"></a><span class="lineno"> 2084</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;NmsIouThreshold=&quot;</span> &lt;&lt; detection_info.<a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a634bf1faedaec956983af4d41940239e">iou_threshold</a>() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div><div class="line"><a name="l02085"></a><span class="lineno"> 2085</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;NumClasses=&quot;</span> &lt;&lt; detection_info.<a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#adda82c28c368106734620f105bb0e1e3">num_classes</a>() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div><div class="line"><a name="l02086"></a><span class="lineno"> 2086</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;ScaleValue_y=&quot;</span> &lt;&lt; detection_info.<a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#aee7a73260f91fe8eedce52929fa829eb">scale_value_y</a>() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div><div class="line"><a name="l02087"></a><span class="lineno"> 2087</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;ScaleValue_x=&quot;</span> &lt;&lt; detection_info.<a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a3dadbc544718b54f1737d4f24c078ad4">scale_value_x</a>() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div><div class="line"><a name="l02088"></a><span class="lineno"> 2088</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;ScaleValue_h=&quot;</span> &lt;&lt; detection_info.<a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a9db6ab0530ca15abab491a354bea90dc">scale_value_h</a>() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div><div class="line"><a name="l02089"></a><span class="lineno"> 2089</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;ScaleValue_w=&quot;</span> &lt;&lt; detection_info.<a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a0c255b6748d3a249c9c4d8f691994dba">scale_value_w</a>() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div><div class="line"><a name="l02090"></a><span class="lineno"> 2090</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;UseRegularNms=&quot;</span> &lt;&lt; detection_info.<a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#ae1c2cc7a6c3db74d8be5f6e23aa84476">use_regular_nms</a>() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div><div class="line"><a name="l02091"></a><span class="lineno"> 2091</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;DetectionPerClass=&quot;</span> &lt;&lt; detection_info.<a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a36e65a7f80a07a2393e6a1cadd974740">detection_per_class</a>()</div><div class="line"><a name="l02092"></a><span class="lineno"> 2092</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;}&quot;</span>;</div><div class="line"><a name="l02093"></a><span class="lineno"> 2093</span>&#160;</div><div class="line"><a name="l02094"></a><span class="lineno"> 2094</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l02095"></a><span class="lineno"> 2095</span>&#160;}</div><div class="line"><a name="l02096"></a><span class="lineno"> 2096</span>&#160;<span class="comment"></span></div><div class="line"><a name="l02097"></a><span class="lineno"> 2097</span>&#160;<span class="comment">/** Formatted output of the DetectionPostProcessLayerInfo type.</span></div><div class="line"><a name="l02098"></a><span class="lineno"> 2098</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l02099"></a><span class="lineno"> 2099</span>&#160;<span class="comment"> * @param[in] detection_info Type to output</span></div><div class="line"><a name="l02100"></a><span class="lineno"> 2100</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l02101"></a><span class="lineno"> 2101</span>&#160;<span class="comment"> * @return Formatted string.</span></div><div class="line"><a name="l02102"></a><span class="lineno"> 2102</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l02103"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#aca72973a9a95755e65d17de30f4232e8"> 2103</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml">DetectionPostProcessLayerInfo</a> &amp;detection_info)</div><div class="line"><a name="l02104"></a><span class="lineno"> 2104</span>&#160;{</div><div class="line"><a name="l02105"></a><span class="lineno"> 2105</span>&#160;    std::stringstream str;</div><div class="line"><a name="l02106"></a><span class="lineno"> 2106</span>&#160;    str &lt;&lt; detection_info;</div><div class="line"><a name="l02107"></a><span class="lineno"> 2107</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l02108"></a><span class="lineno"> 2108</span>&#160;}<span class="comment"></span></div><div class="line"><a name="l02109"></a><span class="lineno"> 2109</span>&#160;<span class="comment">/** Formatted output of the DetectionWindow type.</span></div><div class="line"><a name="l02110"></a><span class="lineno"> 2110</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l02111"></a><span class="lineno"> 2111</span>&#160;<span class="comment"> * @param[in] detection_window Type to output</span></div><div class="line"><a name="l02112"></a><span class="lineno"> 2112</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l02113"></a><span class="lineno"> 2113</span>&#160;<span class="comment"> * @return Formatted string.</span></div><div class="line"><a name="l02114"></a><span class="lineno"> 2114</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l02115"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a905d7ec8787e8c4b7e88b0a2faaccd1f"> 2115</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_detection_window.xhtml">DetectionWindow</a> &amp;detection_window)</div><div class="line"><a name="l02116"></a><span class="lineno"> 2116</span>&#160;{</div><div class="line"><a name="l02117"></a><span class="lineno"> 2117</span>&#160;    std::stringstream str;</div><div class="line"><a name="l02118"></a><span class="lineno"> 2118</span>&#160;    str &lt;&lt; detection_window;</div><div class="line"><a name="l02119"></a><span class="lineno"> 2119</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l02120"></a><span class="lineno"> 2120</span>&#160;}</div><div class="line"><a name="l02121"></a><span class="lineno"> 2121</span>&#160;<span class="comment"></span></div><div class="line"><a name="l02122"></a><span class="lineno"> 2122</span>&#160;<span class="comment">/** Formatted output of the Termination type.</span></div><div class="line"><a name="l02123"></a><span class="lineno"> 2123</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l02124"></a><span class="lineno"> 2124</span>&#160;<span class="comment"> * @param[out] os          Output stream</span></div><div class="line"><a name="l02125"></a><span class="lineno"> 2125</span>&#160;<span class="comment"> * @param[in]  termination Type to output</span></div><div class="line"><a name="l02126"></a><span class="lineno"> 2126</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l02127"></a><span class="lineno"> 2127</span>&#160;<span class="comment"> * @return Modified output stream.</span></div><div class="line"><a name="l02128"></a><span class="lineno"> 2128</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l02129"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a8cfa7d498e60be008d557d025fe62ff3"> 2129</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute.xhtml#af3985189d478b45014e7dead9d002e2a">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a08c1503414e23f5dd10ff83492685453">Termination</a> &amp;termination)</div><div class="line"><a name="l02130"></a><span class="lineno"> 2130</span>&#160;{</div><div class="line"><a name="l02131"></a><span class="lineno"> 2131</span>&#160;    <span class="keywordflow">switch</span>(termination)</div><div class="line"><a name="l02132"></a><span class="lineno"> 2132</span>&#160;    {</div><div class="line"><a name="l02133"></a><span class="lineno"> 2133</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a08c1503414e23f5dd10ff83492685453a5a2e12b6baf7ad91a2ce32f19c36bd1b">Termination::TERM_CRITERIA_EPSILON</a>:</div><div class="line"><a name="l02134"></a><span class="lineno"> 2134</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;TERM_CRITERIA_EPSILON&quot;</span>;</div><div class="line"><a name="l02135"></a><span class="lineno"> 2135</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02136"></a><span class="lineno"> 2136</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a08c1503414e23f5dd10ff83492685453a43f2a8b688fb96e5ad8ba08308bbcdfd">Termination::TERM_CRITERIA_ITERATIONS</a>:</div><div class="line"><a name="l02137"></a><span class="lineno"> 2137</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;TERM_CRITERIA_ITERATIONS&quot;</span>;</div><div class="line"><a name="l02138"></a><span class="lineno"> 2138</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02139"></a><span class="lineno"> 2139</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a08c1503414e23f5dd10ff83492685453a788740b1ba2d6463dae318a332513b29">Termination::TERM_CRITERIA_BOTH</a>:</div><div class="line"><a name="l02140"></a><span class="lineno"> 2140</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;TERM_CRITERIA_BOTH&quot;</span>;</div><div class="line"><a name="l02141"></a><span class="lineno"> 2141</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02142"></a><span class="lineno"> 2142</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l02143"></a><span class="lineno"> 2143</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div><div class="line"><a name="l02144"></a><span class="lineno"> 2144</span>&#160;    }</div><div class="line"><a name="l02145"></a><span class="lineno"> 2145</span>&#160;</div><div class="line"><a name="l02146"></a><span class="lineno"> 2146</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l02147"></a><span class="lineno"> 2147</span>&#160;}</div><div class="line"><a name="l02148"></a><span class="lineno"> 2148</span>&#160;<span class="comment"></span></div><div class="line"><a name="l02149"></a><span class="lineno"> 2149</span>&#160;<span class="comment">/** Formatted output of the Termination type.</span></div><div class="line"><a name="l02150"></a><span class="lineno"> 2150</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l02151"></a><span class="lineno"> 2151</span>&#160;<span class="comment"> * @param[in] termination Type to output</span></div><div class="line"><a name="l02152"></a><span class="lineno"> 2152</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l02153"></a><span class="lineno"> 2153</span>&#160;<span class="comment"> * @return Formatted string.</span></div><div class="line"><a name="l02154"></a><span class="lineno"> 2154</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l02155"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a51fc944d872cf00c1e8e71ccdf8be264"> 2155</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a08c1503414e23f5dd10ff83492685453">Termination</a> &amp;termination)</div><div class="line"><a name="l02156"></a><span class="lineno"> 2156</span>&#160;{</div><div class="line"><a name="l02157"></a><span class="lineno"> 2157</span>&#160;    std::stringstream str;</div><div class="line"><a name="l02158"></a><span class="lineno"> 2158</span>&#160;    str &lt;&lt; termination;</div><div class="line"><a name="l02159"></a><span class="lineno"> 2159</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l02160"></a><span class="lineno"> 2160</span>&#160;}</div><div class="line"><a name="l02161"></a><span class="lineno"> 2161</span>&#160;<span class="comment"></span></div><div class="line"><a name="l02162"></a><span class="lineno"> 2162</span>&#160;<span class="comment">/** Formatted output of the CPUModel type.</span></div><div class="line"><a name="l02163"></a><span class="lineno"> 2163</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l02164"></a><span class="lineno"> 2164</span>&#160;<span class="comment"> * @param[out] os        Output stream</span></div><div class="line"><a name="l02165"></a><span class="lineno"> 2165</span>&#160;<span class="comment"> * @param[in]  cpu_model Model to output</span></div><div class="line"><a name="l02166"></a><span class="lineno"> 2166</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l02167"></a><span class="lineno"> 2167</span>&#160;<span class="comment"> * @return Modified output stream.</span></div><div class="line"><a name="l02168"></a><span class="lineno"> 2168</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l02169"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a2329ad899483ca80bbffd03a63da9f5d"> 2169</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute.xhtml#af3985189d478b45014e7dead9d002e2a">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4">CPUModel</a> &amp;cpu_model)</div><div class="line"><a name="l02170"></a><span class="lineno"> 2170</span>&#160;{</div><div class="line"><a name="l02171"></a><span class="lineno"> 2171</span>&#160;    <span class="keywordflow">switch</span>(cpu_model)</div><div class="line"><a name="l02172"></a><span class="lineno"> 2172</span>&#160;    {</div><div class="line"><a name="l02173"></a><span class="lineno"> 2173</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4ac942dc2a9f958acddc67e11472d3ca0b">CPUModel::GENERIC</a>:</div><div class="line"><a name="l02174"></a><span class="lineno"> 2174</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;GENERIC&quot;</span>;</div><div class="line"><a name="l02175"></a><span class="lineno"> 2175</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02176"></a><span class="lineno"> 2176</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4aca6fc09ca003ddc8f631109ce01bc6e8">CPUModel::GENERIC_FP16</a>:</div><div class="line"><a name="l02177"></a><span class="lineno"> 2177</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;GENERIC_FP16&quot;</span>;</div><div class="line"><a name="l02178"></a><span class="lineno"> 2178</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02179"></a><span class="lineno"> 2179</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4aad1a9b424f69f167da12150036196cd7">CPUModel::GENERIC_FP16_DOT</a>:</div><div class="line"><a name="l02180"></a><span class="lineno"> 2180</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;GENERIC_FP16_DOT&quot;</span>;</div><div class="line"><a name="l02181"></a><span class="lineno"> 2181</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02182"></a><span class="lineno"> 2182</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4aecf3e2493afebcfefb0b9b86bd50ef0d">CPUModel::A53</a>:</div><div class="line"><a name="l02183"></a><span class="lineno"> 2183</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;A53&quot;</span>;</div><div class="line"><a name="l02184"></a><span class="lineno"> 2184</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02185"></a><span class="lineno"> 2185</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4a33f91a7ec1c6be774d71fcd00ac81c92">CPUModel::A55r0</a>:</div><div class="line"><a name="l02186"></a><span class="lineno"> 2186</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;A55r0&quot;</span>;</div><div class="line"><a name="l02187"></a><span class="lineno"> 2187</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02188"></a><span class="lineno"> 2188</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4a2f2d74257db975404ff4ca97ce1e0bca">CPUModel::A55r1</a>:</div><div class="line"><a name="l02189"></a><span class="lineno"> 2189</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;A55r1&quot;</span>;</div><div class="line"><a name="l02190"></a><span class="lineno"> 2190</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02191"></a><span class="lineno"> 2191</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l02192"></a><span class="lineno"> 2192</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div><div class="line"><a name="l02193"></a><span class="lineno"> 2193</span>&#160;    }</div><div class="line"><a name="l02194"></a><span class="lineno"> 2194</span>&#160;</div><div class="line"><a name="l02195"></a><span class="lineno"> 2195</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l02196"></a><span class="lineno"> 2196</span>&#160;}</div><div class="line"><a name="l02197"></a><span class="lineno"> 2197</span>&#160;<span class="comment"></span></div><div class="line"><a name="l02198"></a><span class="lineno"> 2198</span>&#160;<span class="comment">/** Formatted output of the CPUModel type.</span></div><div class="line"><a name="l02199"></a><span class="lineno"> 2199</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l02200"></a><span class="lineno"> 2200</span>&#160;<span class="comment"> * @param[in] cpu_model Model to output</span></div><div class="line"><a name="l02201"></a><span class="lineno"> 2201</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l02202"></a><span class="lineno"> 2202</span>&#160;<span class="comment"> * @return Formatted string.</span></div><div class="line"><a name="l02203"></a><span class="lineno"> 2203</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l02204"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#add33a9d992aeaa69d6940fd896ee5e75"> 2204</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4">CPUModel</a> &amp;cpu_model)</div><div class="line"><a name="l02205"></a><span class="lineno"> 2205</span>&#160;{</div><div class="line"><a name="l02206"></a><span class="lineno"> 2206</span>&#160;    std::stringstream str;</div><div class="line"><a name="l02207"></a><span class="lineno"> 2207</span>&#160;    str &lt;&lt; cpu_model;</div><div class="line"><a name="l02208"></a><span class="lineno"> 2208</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l02209"></a><span class="lineno"> 2209</span>&#160;}<span class="comment"></span></div><div class="line"><a name="l02210"></a><span class="lineno"> 2210</span>&#160;<span class="comment">/** Formatted output of a vector of objects.</span></div><div class="line"><a name="l02211"></a><span class="lineno"> 2211</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l02212"></a><span class="lineno"> 2212</span>&#160;<span class="comment"> * @param[out] os   Output stream</span></div><div class="line"><a name="l02213"></a><span class="lineno"> 2213</span>&#160;<span class="comment"> * @param[in]  args Vector of objects to print</span></div><div class="line"><a name="l02214"></a><span class="lineno"> 2214</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l02215"></a><span class="lineno"> 2215</span>&#160;<span class="comment"> * @return Modified output stream.</span></div><div class="line"><a name="l02216"></a><span class="lineno"> 2216</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l02217"></a><span class="lineno"> 2217</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l02218"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a29cd1c3e1b33d61a479fa49465c5a7e7"> 2218</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute.xhtml#af3985189d478b45014e7dead9d002e2a">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> std::vector&lt;T&gt; &amp;<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>)</div><div class="line"><a name="l02219"></a><span class="lineno"> 2219</span>&#160;{</div><div class="line"><a name="l02220"></a><span class="lineno"> 2220</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;[&quot;</span>;</div><div class="line"><a name="l02221"></a><span class="lineno"> 2221</span>&#160;    <span class="keywordtype">bool</span> first = <span class="keyword">true</span>;</div><div class="line"><a name="l02222"></a><span class="lineno"> 2222</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;arg : <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>)</div><div class="line"><a name="l02223"></a><span class="lineno"> 2223</span>&#160;    {</div><div class="line"><a name="l02224"></a><span class="lineno"> 2224</span>&#160;        <span class="keywordflow">if</span>(first)</div><div class="line"><a name="l02225"></a><span class="lineno"> 2225</span>&#160;        {</div><div class="line"><a name="l02226"></a><span class="lineno"> 2226</span>&#160;            first = <span class="keyword">false</span>;</div><div class="line"><a name="l02227"></a><span class="lineno"> 2227</span>&#160;        }</div><div class="line"><a name="l02228"></a><span class="lineno"> 2228</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l02229"></a><span class="lineno"> 2229</span>&#160;        {</div><div class="line"><a name="l02230"></a><span class="lineno"> 2230</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;, &quot;</span>;</div><div class="line"><a name="l02231"></a><span class="lineno"> 2231</span>&#160;        }</div><div class="line"><a name="l02232"></a><span class="lineno"> 2232</span>&#160;        os &lt;&lt; arg;</div><div class="line"><a name="l02233"></a><span class="lineno"> 2233</span>&#160;    }</div><div class="line"><a name="l02234"></a><span class="lineno"> 2234</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;]&quot;</span>;</div><div class="line"><a name="l02235"></a><span class="lineno"> 2235</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l02236"></a><span class="lineno"> 2236</span>&#160;}</div><div class="line"><a name="l02237"></a><span class="lineno"> 2237</span>&#160;<span class="comment"></span></div><div class="line"><a name="l02238"></a><span class="lineno"> 2238</span>&#160;<span class="comment">/** Formatted output of @ref PriorBoxLayerInfo.</span></div><div class="line"><a name="l02239"></a><span class="lineno"> 2239</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l02240"></a><span class="lineno"> 2240</span>&#160;<span class="comment"> * @param[out] os   Output stream.</span></div><div class="line"><a name="l02241"></a><span class="lineno"> 2241</span>&#160;<span class="comment"> * @param[in]  info Type to output.</span></div><div class="line"><a name="l02242"></a><span class="lineno"> 2242</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l02243"></a><span class="lineno"> 2243</span>&#160;<span class="comment"> * @return Modified output stream.</span></div><div class="line"><a name="l02244"></a><span class="lineno"> 2244</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l02245"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#ae7393414bb7b814bf70e0399f2347847"> 2245</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute.xhtml#af3985189d478b45014e7dead9d002e2a">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_prior_box_layer_info.xhtml">PriorBoxLayerInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>)</div><div class="line"><a name="l02246"></a><span class="lineno"> 2246</span>&#160;{</div><div class="line"><a name="l02247"></a><span class="lineno"> 2247</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;Clip:&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.clip()</div><div class="line"><a name="l02248"></a><span class="lineno"> 2248</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;Flip:&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.flip()</div><div class="line"><a name="l02249"></a><span class="lineno"> 2249</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;StepX:&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.steps()[0]</div><div class="line"><a name="l02250"></a><span class="lineno"> 2250</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;StepY:&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.steps()[1]</div><div class="line"><a name="l02251"></a><span class="lineno"> 2251</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;MinSizes:&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.min_sizes()</div><div class="line"><a name="l02252"></a><span class="lineno"> 2252</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;MaxSizes:&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.max_sizes()</div><div class="line"><a name="l02253"></a><span class="lineno"> 2253</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;ImgSizeX:&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.img_size().x</div><div class="line"><a name="l02254"></a><span class="lineno"> 2254</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;ImgSizeY:&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.img_size().y</div><div class="line"><a name="l02255"></a><span class="lineno"> 2255</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;Offset:&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.offset()</div><div class="line"><a name="l02256"></a><span class="lineno"> 2256</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;Variances:&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.variances();</div><div class="line"><a name="l02257"></a><span class="lineno"> 2257</span>&#160;</div><div class="line"><a name="l02258"></a><span class="lineno"> 2258</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l02259"></a><span class="lineno"> 2259</span>&#160;}</div><div class="line"><a name="l02260"></a><span class="lineno"> 2260</span>&#160;<span class="comment"></span></div><div class="line"><a name="l02261"></a><span class="lineno"> 2261</span>&#160;<span class="comment">/** Formatted output of a vector of objects.</span></div><div class="line"><a name="l02262"></a><span class="lineno"> 2262</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l02263"></a><span class="lineno"> 2263</span>&#160;<span class="comment"> * @param[in] args Vector of objects to print</span></div><div class="line"><a name="l02264"></a><span class="lineno"> 2264</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l02265"></a><span class="lineno"> 2265</span>&#160;<span class="comment"> * @return String representing args.</span></div><div class="line"><a name="l02266"></a><span class="lineno"> 2266</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l02267"></a><span class="lineno"> 2267</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l02268"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a6411da4e87e64e8859f8b725645ee9aa"> 2268</a></span>&#160;std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> std::vector&lt;T&gt; &amp;<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>)</div><div class="line"><a name="l02269"></a><span class="lineno"> 2269</span>&#160;{</div><div class="line"><a name="l02270"></a><span class="lineno"> 2270</span>&#160;    std::stringstream str;</div><div class="line"><a name="l02271"></a><span class="lineno"> 2271</span>&#160;    str &lt;&lt; <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>;</div><div class="line"><a name="l02272"></a><span class="lineno"> 2272</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l02273"></a><span class="lineno"> 2273</span>&#160;}</div><div class="line"><a name="l02274"></a><span class="lineno"> 2274</span>&#160;<span class="comment"></span></div><div class="line"><a name="l02275"></a><span class="lineno"> 2275</span>&#160;<span class="comment">/** Formatted output of the WinogradInfo type. */</span></div><div class="line"><a name="l02276"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#af3cba8a4493cee4c431d128eed565ffe"> 2276</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute.xhtml#af3985189d478b45014e7dead9d002e2a">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_winograd_info.xhtml">WinogradInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>)</div><div class="line"><a name="l02277"></a><span class="lineno"> 2277</span>&#160;{</div><div class="line"><a name="l02278"></a><span class="lineno"> 2278</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;{OutputTileSize=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.output_tile_size &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div><div class="line"><a name="l02279"></a><span class="lineno"> 2279</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;KernelSize=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.kernel_size &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div><div class="line"><a name="l02280"></a><span class="lineno"> 2280</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;PadStride=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.convolution_info &lt;&lt; <span class="stringliteral">&quot;,&quot;</span></div><div class="line"><a name="l02281"></a><span class="lineno"> 2281</span>&#160;       &lt;&lt; <span class="stringliteral">&quot;OutputDataLayout=&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.output_data_layout &lt;&lt; <span class="stringliteral">&quot;}&quot;</span>;</div><div class="line"><a name="l02282"></a><span class="lineno"> 2282</span>&#160;</div><div class="line"><a name="l02283"></a><span class="lineno"> 2283</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l02284"></a><span class="lineno"> 2284</span>&#160;}</div><div class="line"><a name="l02285"></a><span class="lineno"> 2285</span>&#160;</div><div class="line"><a name="l02286"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a37cc282b0852aab04b13a6e6566adda7"> 2286</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_winograd_info.xhtml">WinogradInfo</a> &amp;<a class="code" href="namespace_gemm_tuner.xhtml#a7aead736a07eaf25623ad7bfa1f0ee2d">type</a>)</div><div class="line"><a name="l02287"></a><span class="lineno"> 2287</span>&#160;{</div><div class="line"><a name="l02288"></a><span class="lineno"> 2288</span>&#160;    std::stringstream str;</div><div class="line"><a name="l02289"></a><span class="lineno"> 2289</span>&#160;    str &lt;&lt; <a class="code" href="namespace_gemm_tuner.xhtml#a7aead736a07eaf25623ad7bfa1f0ee2d">type</a>;</div><div class="line"><a name="l02290"></a><span class="lineno"> 2290</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l02291"></a><span class="lineno"> 2291</span>&#160;}</div><div class="line"><a name="l02292"></a><span class="lineno"> 2292</span>&#160;<span class="comment"></span></div><div class="line"><a name="l02293"></a><span class="lineno"> 2293</span>&#160;<span class="comment">/** Fallback method: try to use std::to_string:</span></div><div class="line"><a name="l02294"></a><span class="lineno"> 2294</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l02295"></a><span class="lineno"> 2295</span>&#160;<span class="comment"> * @param[in] val Value to convert to string</span></div><div class="line"><a name="l02296"></a><span class="lineno"> 2296</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l02297"></a><span class="lineno"> 2297</span>&#160;<span class="comment"> * @return String representing val.</span></div><div class="line"><a name="l02298"></a><span class="lineno"> 2298</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l02299"></a><span class="lineno"> 2299</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l02300"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a1d8c24abe3cf6edd704d126d1d2a5420"> 2300</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> T &amp;val)</div><div class="line"><a name="l02301"></a><span class="lineno"> 2301</span>&#160;{</div><div class="line"><a name="l02302"></a><span class="lineno"> 2302</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">support::cpp11::to_string</a>(val);</div><div class="line"><a name="l02303"></a><span class="lineno"> 2303</span>&#160;}</div><div class="line"><a name="l02304"></a><span class="lineno"> 2304</span>&#160;<span class="comment"></span></div><div class="line"><a name="l02305"></a><span class="lineno"> 2305</span>&#160;<span class="comment">/** Convert a CLTunerMode value to a string</span></div><div class="line"><a name="l02306"></a><span class="lineno"> 2306</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l02307"></a><span class="lineno"> 2307</span>&#160;<span class="comment"> * @param val CLTunerMode value to be converted</span></div><div class="line"><a name="l02308"></a><span class="lineno"> 2308</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l02309"></a><span class="lineno"> 2309</span>&#160;<span class="comment"> * @return String representing the corresponding CLTunerMode.</span></div><div class="line"><a name="l02310"></a><span class="lineno"> 2310</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l02311"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#ad87338ac39245d071b66a4f55cb06a16"> 2311</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(<span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ae76ef5bd3ad69f7380ebb3ac6033ec5c">CLTunerMode</a> val)</div><div class="line"><a name="l02312"></a><span class="lineno"> 2312</span>&#160;{</div><div class="line"><a name="l02313"></a><span class="lineno"> 2313</span>&#160;    <span class="keywordflow">switch</span>(val)</div><div class="line"><a name="l02314"></a><span class="lineno"> 2314</span>&#160;    {</div><div class="line"><a name="l02315"></a><span class="lineno"> 2315</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ae76ef5bd3ad69f7380ebb3ac6033ec5ca39e07a5dab0694c7ebb6a0578511ee15">CLTunerMode::EXHAUSTIVE</a>:</div><div class="line"><a name="l02316"></a><span class="lineno"> 2316</span>&#160;        {</div><div class="line"><a name="l02317"></a><span class="lineno"> 2317</span>&#160;            <span class="keywordflow">return</span> std::string(<span class="stringliteral">&quot;Exhaustive&quot;</span>);</div><div class="line"><a name="l02318"></a><span class="lineno"> 2318</span>&#160;        }</div><div class="line"><a name="l02319"></a><span class="lineno"> 2319</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a4c9101ca1a1f72f48efff28b4b9a6495a1e23852820b9154316c7c06e2b7ba051">CLTunerMode::NORMAL</a>:</div><div class="line"><a name="l02320"></a><span class="lineno"> 2320</span>&#160;        {</div><div class="line"><a name="l02321"></a><span class="lineno"> 2321</span>&#160;            <span class="keywordflow">return</span> std::string(<span class="stringliteral">&quot;Normal&quot;</span>);</div><div class="line"><a name="l02322"></a><span class="lineno"> 2322</span>&#160;        }</div><div class="line"><a name="l02323"></a><span class="lineno"> 2323</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ae76ef5bd3ad69f7380ebb3ac6033ec5caba44d3559b36fc1c14e5752bccce1eef">CLTunerMode::RAPID</a>:</div><div class="line"><a name="l02324"></a><span class="lineno"> 2324</span>&#160;        {</div><div class="line"><a name="l02325"></a><span class="lineno"> 2325</span>&#160;            <span class="keywordflow">return</span> std::string(<span class="stringliteral">&quot;Rapid&quot;</span>);</div><div class="line"><a name="l02326"></a><span class="lineno"> 2326</span>&#160;        }</div><div class="line"><a name="l02327"></a><span class="lineno"> 2327</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l02328"></a><span class="lineno"> 2328</span>&#160;        {</div><div class="line"><a name="l02329"></a><span class="lineno"> 2329</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Invalid tuner mode.&quot;</span>);</div><div class="line"><a name="l02330"></a><span class="lineno"> 2330</span>&#160;            <span class="keywordflow">return</span> std::string(<span class="stringliteral">&quot;UNDEFINED&quot;</span>);</div><div class="line"><a name="l02331"></a><span class="lineno"> 2331</span>&#160;        }</div><div class="line"><a name="l02332"></a><span class="lineno"> 2332</span>&#160;    }</div><div class="line"><a name="l02333"></a><span class="lineno"> 2333</span>&#160;}<span class="comment"></span></div><div class="line"><a name="l02334"></a><span class="lineno"> 2334</span>&#160;<span class="comment">/** [Print CLTunerMode type] **/</span><span class="comment"></span></div><div class="line"><a name="l02335"></a><span class="lineno"> 2335</span>&#160;<span class="comment">/** Formatted output of the CLTunerMode type.</span></div><div class="line"><a name="l02336"></a><span class="lineno"> 2336</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l02337"></a><span class="lineno"> 2337</span>&#160;<span class="comment"> * @param[out] os  Output stream.</span></div><div class="line"><a name="l02338"></a><span class="lineno"> 2338</span>&#160;<span class="comment"> * @param[in]  val CLTunerMode to output.</span></div><div class="line"><a name="l02339"></a><span class="lineno"> 2339</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l02340"></a><span class="lineno"> 2340</span>&#160;<span class="comment"> * @return Modified output stream.</span></div><div class="line"><a name="l02341"></a><span class="lineno"> 2341</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l02342"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#ac470b79f272c53fc4da4910370a69f24"> 2342</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute.xhtml#af3985189d478b45014e7dead9d002e2a">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ae76ef5bd3ad69f7380ebb3ac6033ec5c">CLTunerMode</a> &amp;val)</div><div class="line"><a name="l02343"></a><span class="lineno"> 2343</span>&#160;{</div><div class="line"><a name="l02344"></a><span class="lineno"> 2344</span>&#160;    os &lt;&lt; <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(val);</div><div class="line"><a name="l02345"></a><span class="lineno"> 2345</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l02346"></a><span class="lineno"> 2346</span>&#160;}</div><div class="line"><a name="l02347"></a><span class="lineno"> 2347</span>&#160;</div><div class="line"><a name="l02348"></a><span class="lineno"> 2348</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="line"><a name="l02349"></a><span class="lineno"> 2349</span>&#160;</div><div class="line"><a name="l02350"></a><span class="lineno"> 2350</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* __ARM_COMPUTE_TYPE_PRINTER_H__ */</span><span class="preprocessor"></span></div><div class="ttc" id="namespacearm__compute_xhtml_a15a05537a472ee742404821851529327"><div class="ttname"><a href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">arm_compute::BorderMode</a></div><div class="ttdeci">BorderMode</div><div class="ttdoc">Methods available to handle borders.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00261">Types.h:261</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5dad01b7eab116403241313417e0936da8c670f8c37b95e1ed14a0ce414b049c7"><div class="ttname"><a href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da8c670f8c37b95e1ed14a0ce414b049c7">arm_compute::ElementWiseUnary::EXP</a></div><div class="ttdoc">Exponential.</div></div>
<div class="ttc" id="structarm__compute_1_1_rectangle_xhtml"><div class="ttname"><a href="structarm__compute_1_1_rectangle.xhtml">arm_compute::Rectangle</a></div><div class="ttdoc">Rectangle type.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00428">Types.h:428</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab75d8ff29ba9b398d5740b3efd156e71"><div class="ttname"><a href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">arm_compute::to_string</a></div><div class="ttdeci">std::string to_string(const arm_compute::GradientDimension &amp;type)</div><div class="ttdoc">Formatted output of the GradientDimension type.</div><div class="ttdef"><b>Definition:</b> <a href="tests_2_type_printer_8h_source.xhtml#l00064">TypePrinter.h:64</a></div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml_a3fdd42ea34070a54e696b3adc28c4be3"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">arm_compute::BorderSize::top</a></div><div class="ttdeci">unsigned int top</div><div class="ttdoc">top of the border</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00349">Types.h:349</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a673665b4587a2956fcbad5f0e9ba89d3ac9e68c0594494ec85805b225a7acb9c2"><div class="ttname"><a href="namespacearm__compute.xhtml#a673665b4587a2956fcbad5f0e9ba89d3ac9e68c0594494ec85805b225a7acb9c2">arm_compute::HOGNormType::L2HYS_NORM</a></div><div class="ttdoc">L2-norm followed by clipping.</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aa7fc56270e7a70fa81a5935b72eacbe29"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa7fc56270e7a70fa81a5935b72eacbe29">arm_compute::Channel::A</a></div><div class="ttdoc">Alpha channel.</div></div>
<div class="ttc" id="classarm__compute_1_1_h_o_g_info_xhtml_ad96530ddba514601d376f991b568b346"><div class="ttname"><a href="classarm__compute_1_1_h_o_g_info.xhtml#ad96530ddba514601d376f991b568b346">arm_compute::HOGInfo::num_bins</a></div><div class="ttdeci">size_t num_bins() const</div><div class="ttdoc">The number of histogram bins for each cell.</div><div class="ttdef"><b>Definition:</b> <a href="_h_o_g_info_8cpp_source.xhtml#l00111">HOGInfo.cpp:111</a></div></div>
<div class="ttc" id="classarm__compute_1_1_generate_proposals_info_xhtml_ac2a327bd7d58d9fa1c49c302fefbbcba"><div class="ttname"><a href="classarm__compute_1_1_generate_proposals_info.xhtml#ac2a327bd7d58d9fa1c49c302fefbbcba">arm_compute::GenerateProposalsInfo::im_height</a></div><div class="ttdeci">float im_height() const</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01440">Types.h:1440</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58af557448a61ad2927194f63442e131dfa"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58af557448a61ad2927194f63442e131dfa">arm_compute::Format::UYVY422</a></div><div class="ttdoc">A single plane of 32-bit macro pixel of U0, Y0, V0, Y1 byte.</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23d9f0c01c9e120dfb828ee922b7a8ae"><div class="ttname"><a href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8ae">arm_compute::ArithmeticOperation</a></div><div class="ttdeci">ArithmeticOperation</div><div class="ttdoc">Available element-wise operations.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00508">Types.h:508</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a966a9c417ce5e94dca08d9b5e745c0c9"><div class="ttname"><a href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">arm_compute::InterpolationPolicy</a></div><div class="ttdeci">InterpolationPolicy</div><div class="ttdoc">Interpolation method.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00366">Types.h:366</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_output_layer_info_xhtml_a2411dd5edb9ccb581d303f3396e9c14c"><div class="ttname"><a href="classarm__compute_1_1_detection_output_layer_info.xhtml#a2411dd5edb9ccb581d303f3396e9c14c">arm_compute::DetectionOutputLayerInfo::num_classes</a></div><div class="ttdeci">int num_classes() const</div><div class="ttdoc">Get num classes.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01022">Types.h:1022</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a45cde9abb508c62d67c3bb2b9bf566a5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">arm_compute::test::validation::shape</a></div><div class="ttdeci">shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_absolute_difference_8cpp_source.xhtml#l00097">AbsoluteDifference.cpp:97</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23d9f0c01c9e120dfb828ee922b7a8aeac9c9c146c630ca5ef9197c73c032f4a6"><div class="ttname"><a href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aeac9c9c146c630ca5ef9197c73c032f4a6">arm_compute::ArithmeticOperation::POWER</a></div><div class="ttdoc">x ^ y</div></div>
<div class="ttc" id="structarm__compute_1_1_key_point_xhtml_a1d28dec57cce925ad92342891bd71e7c"><div class="ttname"><a href="structarm__compute_1_1_key_point.xhtml#a1d28dec57cce925ad92342891bd71e7c">arm_compute::KeyPoint::scale</a></div><div class="ttdeci">float scale</div><div class="ttdoc">Scale initialized to 0 by the corner detector.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00418">Types.h:418</a></div></div>
<div class="ttc" id="classarm__compute_1_1_generate_proposals_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_generate_proposals_info.xhtml">arm_compute::GenerateProposalsInfo</a></div><div class="ttdoc">Generate Proposals Information class.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01417">Types.h:1417</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aa1a2ddc2db4693cfd16d534cde5572cc1"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa1a2ddc2db4693cfd16d534cde5572cc1">arm_compute::Channel::C1</a></div><div class="ttdoc">Second channel (used by formats with unknown channel types).</div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml">arm_compute::TensorShape</a></div><div class="ttdoc">Shape of a tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00039">TensorShape.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_acf5f12bbab64dd614bd8220c97fe484f"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">arm_compute::test::validation::data_layout</a></div><div class="ttdeci">const DataLayout data_layout</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00146">Im2Col.cpp:146</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ad986b73e9d5f47a623a9b6d773c25e34"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ad986b73e9d5f47a623a9b6d773c25e34">arm_compute::test::validation::policy</a></div><div class="ttdeci">policy</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_arithmetic_addition_8cpp_source.xhtml#l00139">ArithmeticAddition.cpp:139</a></div></div>
<div class="ttc" id="classarm__compute_1_1_h_o_g_info_xhtml_a7cbda2c789c461237f0c6eaee8f8cd2a"><div class="ttname"><a href="classarm__compute_1_1_h_o_g_info.xhtml#a7cbda2c789c461237f0c6eaee8f8cd2a">arm_compute::HOGInfo::detection_window_size</a></div><div class="ttdeci">const Size2D &amp; detection_window_size() const</div><div class="ttdoc">The detection window size in pixels.</div><div class="ttdef"><b>Definition:</b> <a href="_h_o_g_info_8cpp_source.xhtml#l00101">HOGInfo.cpp:101</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3aa46ce37da51477a1af33a8810e0ed04d"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3aa46ce37da51477a1af33a8810e0ed04d">arm_compute::GPUTarget::G76</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_output_layer_info_xhtml_a7bc581f245390f063f02c3fcbb422320"><div class="ttname"><a href="classarm__compute_1_1_detection_output_layer_info.xhtml#a7bc581f245390f063f02c3fcbb422320">arm_compute::DetectionOutputLayerInfo::share_location</a></div><div class="ttdeci">bool share_location() const</div><div class="ttdoc">Get share location.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01027">Types.h:1027</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_post_process_layer_info_xhtml_a3dadbc544718b54f1737d4f24c078ad4"><div class="ttname"><a href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a3dadbc544718b54f1737d4f24c078ad4">arm_compute::DetectionPostProcessLayerInfo::scale_value_x</a></div><div class="ttdeci">float scale_value_x() const</div><div class="ttdoc">Get x scale value.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01175">Types.h:1175</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">arm_compute::DataType::QSYMM16</a></div><div class="ttdoc">quantized, symmetric fixed-point 16-bit number</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_add6426cbf2e057a195846d4ba09a50bea8c0084566b290fa9e5e429f4ae241f95"><div class="ttname"><a href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea8c0084566b290fa9e5e429f4ae241f95">arm_compute::RoundingPolicy::TO_NEAREST_UP</a></div><div class="ttdoc">Rounds to nearest value; half rounds away from zero.</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23d9f0c01c9e120dfb828ee922b7a8aea29bbf66f7f8529ec47e394fb5a36c646"><div class="ttname"><a href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea29bbf66f7f8529ec47e394fb5a36c646">arm_compute::ArithmeticOperation::DIV</a></div><div class="ttdoc">(x / y)</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad818ba0ecd4a87d8f1bb0d5b17f07830a1150a8d7752b01d30d91fe18fe9d8a54"><div class="ttname"><a href="namespacearm__compute.xhtml#ad818ba0ecd4a87d8f1bb0d5b17f07830a1150a8d7752b01d30d91fe18fe9d8a54">arm_compute::DetectionOutputLayerCodeType::CENTER_SIZE</a></div><div class="ttdoc">Use box centers and size.</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a7b3ec6413f000b02fdb4e39a951d9f8aac2f1be73bf576190d1f42bdaf5162ae8"><div class="ttname"><a href="namespacearm__compute.xhtml#a7b3ec6413f000b02fdb4e39a951d9f8aac2f1be73bf576190d1f42bdaf5162ae8">arm_compute::MagnitudeType::L1NORM</a></div><div class="ttdoc">L1 normalization type.</div></div>
<div class="ttc" id="classarm__compute_1_1_bounding_box_transform_info_xhtml_ade87abafbd6b200b22de988f32b66dea"><div class="ttname"><a href="classarm__compute_1_1_bounding_box_transform_info.xhtml#ade87abafbd6b200b22de988f32b66dea">arm_compute::BoundingBoxTransformInfo::scale</a></div><div class="ttdeci">float scale() const</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01589">Types.h:1589</a></div></div>
<div class="ttc" id="structarm__compute_1_1_detection_window_xhtml_a4dde988b1b2adba65ae3efa69f65d960"><div class="ttname"><a href="structarm__compute_1_1_detection_window.xhtml#a4dde988b1b2adba65ae3efa69f65d960">arm_compute::DetectionWindow::x</a></div><div class="ttdeci">uint16_t x</div><div class="ttdoc">Top-left x coordinate.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00556">Types.h:556</a></div></div>
<div class="ttc" id="structarm__compute_1_1_detection_window_xhtml_a8c5cd9b525ee73a24b1d9d8e34982d1c"><div class="ttname"><a href="structarm__compute_1_1_detection_window.xhtml#a8c5cd9b525ee73a24b1d9d8e34982d1c">arm_compute::DetectionWindow::score</a></div><div class="ttdeci">float score</div><div class="ttdoc">Confidence value for the detection window.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00561">Types.h:561</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_af00a42ecad444bbda75cde1b64bd7e72aaf36b47f395cd01f48b8fc1013665054"><div class="ttname"><a href="namespacearm__compute.xhtml#af00a42ecad444bbda75cde1b64bd7e72aaf36b47f395cd01f48b8fc1013665054">arm_compute::PhaseType::UNSIGNED</a></div><div class="ttdoc">Angle range: [0, 180].</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ac1a1b012674e0f1de071a611391828ad"><div class="ttname"><a href="namespacearm__compute.xhtml#ac1a1b012674e0f1de071a611391828ad">arm_compute::PaddingList</a></div><div class="ttdeci">std::vector&lt; PaddingInfo &gt; PaddingList</div><div class="ttdoc">List of padding information.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00455">Types.h:455</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5827eb9cb394e74af87f74bd354fb45b"><div class="ttname"><a href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45b">arm_compute::ReductionOperation</a></div><div class="ttdeci">ReductionOperation</div><div class="ttdoc">Available reduction operations.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00495">Types.h:495</a></div></div>
<div class="ttc" id="classarm__compute_1_1_h_o_g_info_xhtml_aaefa291ad3cc3e3210c8b8ef2ffde476"><div class="ttname"><a href="classarm__compute_1_1_h_o_g_info.xhtml#aaefa291ad3cc3e3210c8b8ef2ffde476">arm_compute::HOGInfo::cell_size</a></div><div class="ttdeci">const Size2D &amp; cell_size() const</div><div class="ttdoc">The cell size in pixels.</div><div class="ttdef"><b>Definition:</b> <a href="_h_o_g_info_8cpp_source.xhtml#l00091">HOGInfo.cpp:91</a></div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml">arm_compute::BorderSize</a></div><div class="ttdoc">Container for 2D border size.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00269">Types.h:269</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a7cb842ebfe255726066039853a4322f0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a7cb842ebfe255726066039853a4322f0">arm_compute::test::validation::weights_info</a></div><div class="ttdeci">weights_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_batch_normalization_layer_8cpp_source.xhtml#l00196">BatchNormalizationLayer.cpp:196</a></div></div>
<div class="ttc" id="structarm__compute_1_1_key_point_xhtml_af6d3062751bd565decb1a2cd3b63bdb2"><div class="ttname"><a href="structarm__compute_1_1_key_point.xhtml#af6d3062751bd565decb1a2cd3b63bdb2">arm_compute::KeyPoint::x</a></div><div class="ttdeci">int32_t x</div><div class="ttdoc">X coordinates.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00415">Types.h:415</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_af00a42ecad444bbda75cde1b64bd7e72a6898b46a1cde8a1572e2722c44c5ab07"><div class="ttname"><a href="namespacearm__compute.xhtml#af00a42ecad444bbda75cde1b64bd7e72a6898b46a1cde8a1572e2722c44c5ab07">arm_compute::PhaseType::SIGNED</a></div><div class="ttdoc">Angle range: [0, 360].</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_af00a42ecad444bbda75cde1b64bd7e72"><div class="ttname"><a href="namespacearm__compute.xhtml#af00a42ecad444bbda75cde1b64bd7e72">arm_compute::PhaseType</a></div><div class="ttdeci">PhaseType</div><div class="ttdoc">Phase calculation type.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00406">Types.h:406</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_post_process_layer_info_xhtml_a23e83519067d74d4f1855d38741151eb"><div class="ttname"><a href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a23e83519067d74d4f1855d38741151eb">arm_compute::DetectionPostProcessLayerInfo::max_detections</a></div><div class="ttdeci">unsigned int max_detections() const</div><div class="ttdoc">Get max detections.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01134">Types.h:1134</a></div></div>
<div class="ttc" id="structarm__compute_1_1_key_point_xhtml_a0e3266fc15309697502533db62b682af"><div class="ttname"><a href="structarm__compute_1_1_key_point.xhtml#a0e3266fc15309697502533db62b682af">arm_compute::KeyPoint::orientation</a></div><div class="ttdeci">float orientation</div><div class="ttdoc">Orientation initialized to 0 by the corner detector.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00419">Types.h:419</a></div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml_a56297e0f7b215eea46c818cb7528d9eaad346bb4679d29be241279f15d7795c1c"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaad346bb4679d29be241279f15d7795c1c">arm_compute::ActivationLayerInfo::ActivationFunction::RELU</a></div><div class="ttdoc">Rectifier (  )</div></div>
<div class="ttc" id="namespace_gemm_tuner_xhtml_a8187411843a6284ffb964ef3fb9fcab3"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">GemmTuner.args</a></div><div class="ttdeci">args</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00555">GemmTuner.py:555</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aa5206560a306a2e085a437fd258eb57ce"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa5206560a306a2e085a437fd258eb57ce">arm_compute::Channel::V</a></div><div class="ttdoc">Cr/V/Value channel.</div></div>
<div class="ttc" id="_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00352">Error.h:352</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_1_1_dimension_xhtml_a918580dc9188825d67dbb203a43d02fe"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml#a918580dc9188825d67dbb203a43d02fe">arm_compute::Window::Dimension::step</a></div><div class="ttdeci">constexpr int step() const</div><div class="ttdoc">Return the step of the dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00102">Window.h:102</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_af3985189d478b45014e7dead9d002e2a"><div class="ttname"><a href="namespacearm__compute.xhtml#af3985189d478b45014e7dead9d002e2a">arm_compute::operator&lt;&lt;</a></div><div class="ttdeci">inline ::std::ostream &amp; operator&lt;&lt;(::std::ostream &amp;os, const GradientDimension &amp;dim)</div><div class="ttdoc">Formatted output of the GradientDimension type.</div><div class="ttdef"><b>Definition:</b> <a href="tests_2_type_printer_8h_source.xhtml#l00038">TypePrinter.h:38</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02">arm_compute::DataLayoutDimension</a></div><div class="ttdeci">DataLayoutDimension</div><div class="ttdoc">[DataLayout enum definition]</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00126">Types.h:126</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5827eb9cb394e74af87f74bd354fb45ba2ce6e134b828b72fad160fa17c8d1b64"><div class="ttname"><a href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45ba2ce6e134b828b72fad160fa17c8d1b64">arm_compute::ReductionOperation::SUM_SQUARE</a></div><div class="ttdoc">Sum of squares.</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aa9d5ed678fe57bcca610140957afab571"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa9d5ed678fe57bcca610140957afab571">arm_compute::Channel::B</a></div><div class="ttdoc">Blue channel.</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_afdda916edc7502967bbec17ea3c06c02a290d4b81f4e2b47d86fd1b0170e9aab7"><div class="ttname"><a href="namespacearm__compute.xhtml#afdda916edc7502967bbec17ea3c06c02a290d4b81f4e2b47d86fd1b0170e9aab7">arm_compute::MatrixPattern::DISK</a></div><div class="ttdoc">Disk pattern matrix.</div></div>
<div class="ttc" id="structarm__compute_1_1_winograd_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_winograd_info.xhtml">arm_compute::WinogradInfo</a></div><div class="ttdoc">Winograd information.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02154">Types.h:2154</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::Format::U8</a></div><div class="ttdoc">1 channel, 1 U8 per channel</div></div>
<div class="ttc" id="structarm__compute_1_1_key_point_xhtml_a8ca2aae59762685dd38143e5f8267147"><div class="ttname"><a href="structarm__compute_1_1_key_point.xhtml#a8ca2aae59762685dd38143e5f8267147">arm_compute::KeyPoint::tracking_status</a></div><div class="ttdeci">int32_t tracking_status</div><div class="ttdoc">Status initialized to 1 by the corner detector, set to 0 when the point is lost.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00420">Types.h:420</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a08c1503414e23f5dd10ff83492685453a5a2e12b6baf7ad91a2ce32f19c36bd1b"><div class="ttname"><a href="namespacearm__compute.xhtml#a08c1503414e23f5dd10ff83492685453a5a2e12b6baf7ad91a2ce32f19c36bd1b">arm_compute::Termination::TERM_CRITERIA_EPSILON</a></div><div class="ttdoc">Terminate when within epsilon of a threshold.</div></div>
<div class="ttc" id="classarm__compute_1_1_g_e_m_m_reshape_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml">arm_compute::GEMMReshapeInfo</a></div><div class="ttdoc">GEMM reshape information class.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01823">Types.h:1823</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_acc5dddee1cbe93a4eaf0a9f74ee96bb7"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">arm_compute::support::cpp11::to_string</a></div><div class="ttdeci">std::string to_string(T &amp;&amp;value)</div><div class="ttdoc">Convert integer and float values to string.</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00272">ToolchainSupport.h:272</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23d9f0c01c9e120dfb828ee922b7a8aea9eeb52badb613229884838847294b90d"><div class="ttname"><a href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea9eeb52badb613229884838847294b90d">arm_compute::ArithmeticOperation::ADD</a></div><div class="ttdoc">(x + y)</div></div>
<div class="ttc" id="classarm__compute_1_1_h_o_g_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_h_o_g_info.xhtml">arm_compute::HOGInfo</a></div><div class="ttdoc">Store the HOG's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_h_o_g_info_8h_source.xhtml#l00035">HOGInfo.h:35</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3a79515d904f73cf1711207de1b2aa6ac6"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a79515d904f73cf1711207de1b2aa6ac6">arm_compute::GPUTarget::G71</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::Format::F32</a></div><div class="ttdoc">1 channel, 1 F32 per channel</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">arm_compute::DataLayoutDimension::HEIGHT</a></div><div class="ttdoc">height</div></div>
<div class="ttc" id="classarm__compute_1_1_normalization_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_normalization_layer_info.xhtml">arm_compute::NormalizationLayerInfo</a></div><div class="ttdoc">Normalization Layer Information class.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01677">Types.h:1677</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aa9c5959e6f08f10d0edbadf5be1f33c53"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa9c5959e6f08f10d0edbadf5be1f33c53">arm_compute::Channel::C0</a></div><div class="ttdoc">Unknown channel format.</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a966a9c417ce5e94dca08d9b5e745c0c9aad6fddf718ad19b063e02fdd7e8e3e65"><div class="ttname"><a href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9aad6fddf718ad19b063e02fdd7e8e3e65">arm_compute::InterpolationPolicy::BILINEAR</a></div><div class="ttdoc">Output values are defined by bilinear interpolation between the pixels.</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a202f5d8c2c70d31048154d8b8b28e755"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a202f5d8c2c70d31048154d8b8b28e755">arm_compute::Format::NV12</a></div><div class="ttdoc">A 2 plane YUV format of Luma (Y) and interleaved UV data at 4:2:0 sampling.</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a08c1503414e23f5dd10ff83492685453a43f2a8b688fb96e5ad8ba08308bbcdfd"><div class="ttname"><a href="namespacearm__compute.xhtml#a08c1503414e23f5dd10ff83492685453a43f2a8b688fb96e5ad8ba08308bbcdfd">arm_compute::Termination::TERM_CRITERIA_ITERATIONS</a></div><div class="ttdoc">Terminate after a maximum number of iterations.</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5827eb9cb394e74af87f74bd354fb45ba39102811589b9a0d7a6aa8721663b4d1"><div class="ttname"><a href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45ba39102811589b9a0d7a6aa8721663b4d1">arm_compute::ReductionOperation::ARG_IDX_MIN</a></div><div class="ttdoc">Index of the min value.</div></div>
<div class="ttc" id="structarm__compute_1_1_uniform_quantization_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_uniform_quantization_info.xhtml">arm_compute::UniformQuantizationInfo</a></div><div class="ttdoc">Quantization info when assuming per layer quantization.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00042">QuantizationInfo.h:42</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_1_1_dimension_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml">arm_compute::Window::Dimension</a></div><div class="ttdoc">Describe one of the image's dimensions with a start, end and step.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00075">Window.h:75</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a3b989c6b5398b3b9538ad103a324205e"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3b989c6b5398b3b9538ad103a324205e">arm_compute::DataType::QASYMM16</a></div><div class="ttdoc">quantized, asymmetric fixed-point 16-bit number</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">arm_compute::Format::U16</a></div><div class="ttdoc">1 channel, 1 U16 per channel</div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml_a802ffcf1b49237efe5be8a314d3f3869"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a802ffcf1b49237efe5be8a314d3f3869">arm_compute::BorderSize::bottom</a></div><div class="ttdeci">unsigned int bottom</div><div class="ttdoc">bottom of the border</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00351">Types.h:351</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_aa41d7415a5386798147cccae2333d5d4"><div class="ttname"><a href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4">arm_compute::CPUModel</a></div><div class="ttdeci">CPUModel</div><div class="ttdoc">CPU models - we only need to detect CPUs we have microarchitecture-specific code for.</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_types_8h_source.xhtml#l00040">CPPTypes.h:40</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3a664a94fa85b127eabc7bed25091843fd"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a664a94fa85b127eabc7bed25091843fd">arm_compute::GPUTarget::T700</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a2d299363c9fc33334c571fa29ca4f58ca1cfdf0e8d0c87a228c1f40d9bee7888b"><div class="ttname"><a href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca1cfdf0e8d0c87a228c1f40d9bee7888b">arm_compute::ComparisonOperation::Less</a></div><div class="ttdoc">Less comparison (  )</div></div>
<div class="ttc" id="structarm__compute_1_1_uniform_quantization_info_xhtml_a1d28dec57cce925ad92342891bd71e7c"><div class="ttname"><a href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">arm_compute::UniformQuantizationInfo::scale</a></div><div class="ttdeci">float scale</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00064">QuantizationInfo.h:64</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_output_layer_info_xhtml_a206472366fc0981d36701fe46679fd8f"><div class="ttname"><a href="classarm__compute_1_1_detection_output_layer_info.xhtml#a206472366fc0981d36701fe46679fd8f">arm_compute::DetectionOutputLayerInfo::eta</a></div><div class="ttdeci">float eta() const</div><div class="ttdoc">Get eta.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01052">Types.h:1052</a></div></div>
<div class="ttc" id="classarm__compute_1_1_r_o_i_pooling_layer_info_xhtml_a5a00bf3cb11be124771cf7e3958e218e"><div class="ttname"><a href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml#a5a00bf3cb11be124771cf7e3958e218e">arm_compute::ROIPoolingLayerInfo::pooled_width</a></div><div class="ttdeci">unsigned int pooled_width() const</div><div class="ttdoc">Get the pooled width of the layer.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01389">Types.h:1389</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pad_stride_info_xhtml_a3fea0ce4e6eeee7bf3a511c31b51d44f"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml#a3fea0ce4e6eeee7bf3a511c31b51d44f">arm_compute::PadStrideInfo::pad_top</a></div><div class="ttdeci">unsigned int pad_top() const</div><div class="ttdoc">Get the top padding.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00770">Types.h:770</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a966a9c417ce5e94dca08d9b5e745c0c9a7f5ccbc3d30c2cd3fd04d567946cbde2"><div class="ttname"><a href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9a7f5ccbc3d30c2cd3fd04d567946cbde2">arm_compute::InterpolationPolicy::NEAREST_NEIGHBOR</a></div><div class="ttdoc">Output values are defined to match the source pixel whose center is nearest to the sample position.</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3a9d0acedfece9dfaf5cc3e63bfbeecf2f"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a9d0acedfece9dfaf5cc3e63bfbeecf2f">arm_compute::GPUTarget::G51LIT</a></div></div>
<div class="ttc" id="_tensor_info_8h_xhtml"><div class="ttname"><a href="_tensor_info_8h.xhtml">TensorInfo.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad818ba0ecd4a87d8f1bb0d5b17f07830"><div class="ttname"><a href="namespacearm__compute.xhtml#ad818ba0ecd4a87d8f1bb0d5b17f07830">arm_compute::DetectionOutputLayerCodeType</a></div><div class="ttdeci">DetectionOutputLayerCodeType</div><div class="ttdoc">Available Detection Output code types.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00964">Types.h:964</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a683661ae75dcb7aef16b9c9bde31517d"><div class="ttname"><a href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517d">arm_compute::ConvolutionMethod</a></div><div class="ttdeci">ConvolutionMethod</div><div class="ttdoc">Available ConvolutionMethod.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00135">Types.h:135</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aae1e1d3d40573127e9ee0480caf1283d6"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aae1e1d3d40573127e9ee0480caf1283d6">arm_compute::Channel::R</a></div><div class="ttdoc">Red channel.</div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml">arm_compute::ActivationLayerInfo</a></div><div class="ttdoc">Activation Layer Information class.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01615">Types.h:1615</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3aae926a8537ded0221329aa9a89b84048"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3aae926a8537ded0221329aa9a89b84048">arm_compute::GPUTarget::T800</a></div></div>
<div class="ttc" id="classarm__compute_1_1_h_o_g_info_xhtml_a039b8ebcdd462041d3988e6d2c145323"><div class="ttname"><a href="classarm__compute_1_1_h_o_g_info.xhtml#a039b8ebcdd462041d3988e6d2c145323">arm_compute::HOGInfo::phase_type</a></div><div class="ttdeci">PhaseType phase_type() const</div><div class="ttdoc">The type of PhaseType.</div><div class="ttdef"><b>Definition:</b> <a href="_h_o_g_info_8cpp_source.xhtml#l00126">HOGInfo.cpp:126</a></div></div>
<div class="ttc" id="classarm__compute_1_1_compute_anchors_info_xhtml_a70fd561a558e9f433088b64587a9cb62"><div class="ttname"><a href="classarm__compute_1_1_compute_anchors_info.xhtml#a70fd561a558e9f433088b64587a9cb62">arm_compute::ComputeAnchorsInfo::spatial_scale</a></div><div class="ttdeci">float spatial_scale() const</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01529">Types.h:1529</a></div></div>
<div class="ttc" id="classarm__compute_1_1_h_o_g_info_xhtml_a207391d3ac69d9a0839104f784f888fd"><div class="ttname"><a href="classarm__compute_1_1_h_o_g_info.xhtml#a207391d3ac69d9a0839104f784f888fd">arm_compute::HOGInfo::block_stride</a></div><div class="ttdeci">const Size2D &amp; block_stride() const</div><div class="ttdoc">The block stride in pixels.</div><div class="ttdef"><b>Definition:</b> <a href="_h_o_g_info_8cpp_source.xhtml#l00106">HOGInfo.cpp:106</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a08c1503414e23f5dd10ff83492685453a788740b1ba2d6463dae318a332513b29"><div class="ttname"><a href="namespacearm__compute.xhtml#a08c1503414e23f5dd10ff83492685453a788740b1ba2d6463dae318a332513b29">arm_compute::Termination::TERM_CRITERIA_BOTH</a></div><div class="ttdoc">Terminate on whichever of the other conditions occurs first.</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a14d24d90ab4ba2956e92e27890ba4c91a161b3d9016563aba9ac190fc02ada9bb"><div class="ttname"><a href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a161b3d9016563aba9ac190fc02ada9bb">arm_compute::PaddingMode::SYMMETRIC</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a8e9f6aa1af7e0abbc7e64521e6ffe1b4"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a8e9f6aa1af7e0abbc7e64521e6ffe1b4">arm_compute::Format::NV21</a></div><div class="ttdoc">A 2 plane YUV format of Luma (Y) and interleaved VU data at 4:2:0 sampling.</div></div>
<div class="ttc" id="classarm__compute_1_1_detection_post_process_layer_info_xhtml_ae1c2cc7a6c3db74d8be5f6e23aa84476"><div class="ttname"><a href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#ae1c2cc7a6c3db74d8be5f6e23aa84476">arm_compute::DetectionPostProcessLayerInfo::use_regular_nms</a></div><div class="ttdeci">bool use_regular_nms() const</div><div class="ttdoc">Get if use regular nms.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01164">Types.h:1164</a></div></div>
<div class="ttc" id="classarm__compute_1_1_h_o_g_info_xhtml_a5a4a2ab2f4396cc64b4a5676a90d7f07"><div class="ttname"><a href="classarm__compute_1_1_h_o_g_info.xhtml#a5a4a2ab2f4396cc64b4a5676a90d7f07">arm_compute::HOGInfo::normalization_type</a></div><div class="ttdeci">HOGNormType normalization_type() const</div><div class="ttdoc">The normalization type.</div><div class="ttdef"><b>Definition:</b> <a href="_h_o_g_info_8cpp_source.xhtml#l00116">HOGInfo.cpp:116</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_output_layer_info_xhtml_acf35ae15a9350f47bcba0d0cedeb3e7c"><div class="ttname"><a href="classarm__compute_1_1_detection_output_layer_info.xhtml#acf35ae15a9350f47bcba0d0cedeb3e7c">arm_compute::DetectionOutputLayerInfo::top_k</a></div><div class="ttdeci">int top_k() const</div><div class="ttdoc">Get top K.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01067">Types.h:1067</a></div></div>
<div class="ttc" id="classarm__compute_1_1_compute_anchors_info_xhtml_a1938a8fb37c002870984041e630f8b07"><div class="ttname"><a href="classarm__compute_1_1_compute_anchors_info.xhtml#a1938a8fb37c002870984041e630f8b07">arm_compute::ComputeAnchorsInfo::feat_height</a></div><div class="ttdeci">float feat_height() const</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01517">Types.h:1517</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2020 ARM Limited.</div><div class="ttdef"><b>Definition:</b> <a href="00__introduction_8dox_source.xhtml#l00024">00_introduction.dox:24</a></div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml_a56297e0f7b215eea46c818cb7528d9eaa7d8a220d2262f9d6c658d549ee12cf2c"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa7d8a220d2262f9d6c658d549ee12cf2c">arm_compute::ActivationLayerInfo::ActivationFunction::ABS</a></div><div class="ttdoc">Absolute (  )</div></div>
<div class="ttc" id="classarm__compute_1_1_size2_d_xhtml_a02afeaaf8574e7a78d6b466ff2695052"><div class="ttname"><a href="classarm__compute_1_1_size2_d.xhtml#a02afeaaf8574e7a78d6b466ff2695052">arm_compute::Size2D::height</a></div><div class="ttdeci">size_t height</div><div class="ttdoc">Height of the image region or rectangle.</div><div class="ttdef"><b>Definition:</b> <a href="_size2_d_8h_source.xhtml#l00093">Size2D.h:93</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3a57a3b40730a5af7ea3e13eb4bba56d82"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a57a3b40730a5af7ea3e13eb4bba56d82">arm_compute::GPUTarget::GPU_ARCH_MASK</a></div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml_a56297e0f7b215eea46c818cb7528d9ea"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9ea">arm_compute::ActivationLayerInfo::ActivationFunction</a></div><div class="ttdeci">ActivationFunction</div><div class="ttdoc">Available activation functions.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01619">Types.h:1619</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">arm_compute::Format::F16</a></div><div class="ttdoc">1 channel, 1 F16 per channel</div></div>
<div class="ttc" id="_size2_d_8h_xhtml"><div class="ttname"><a href="_size2_d_8h.xhtml">Size2D.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a16a59381d4d74d17d86d69eb4d286d7bac397289ee45877be0cd49811fe245b4e"><div class="ttname"><a href="namespacearm__compute.xhtml#a16a59381d4d74d17d86d69eb4d286d7bac397289ee45877be0cd49811fe245b4e">arm_compute::SamplingPolicy::CENTER</a></div><div class="ttdoc">Samples are taken at pixel center.</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a2d299363c9fc33334c571fa29ca4f58ca758b05d899def79c9eb864ad4f96be1f"><div class="ttname"><a href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca758b05d899def79c9eb864ad4f96be1f">arm_compute::ComparisonOperation::GreaterEqual</a></div><div class="ttdoc">Greater equal comparison (  )</div></div>
<div class="ttc" id="classarm__compute_1_1_detection_post_process_layer_info_xhtml_a634bf1faedaec956983af4d41940239e"><div class="ttname"><a href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a634bf1faedaec956983af4d41940239e">arm_compute::DetectionPostProcessLayerInfo::iou_threshold</a></div><div class="ttdeci">float iou_threshold() const</div><div class="ttdoc">Get intersection over union threshold.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01154">Types.h:1154</a></div></div>
<div class="ttc" id="structarm__compute_1_1_key_point_xhtml"><div class="ttname"><a href="structarm__compute_1_1_key_point.xhtml">arm_compute::KeyPoint</a></div><div class="ttdoc">Keypoint type.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00413">Types.h:413</a></div></div>
<div class="ttc" id="structarm__compute_1_1_key_point_xhtml_a2c1c8f9331368f38bfc3eaee260b59a6"><div class="ttname"><a href="structarm__compute_1_1_key_point.xhtml#a2c1c8f9331368f38bfc3eaee260b59a6">arm_compute::KeyPoint::strength</a></div><div class="ttdeci">float strength</div><div class="ttdoc">Strength of the point.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00417">Types.h:417</a></div></div>
<div class="ttc" id="classarm__compute_1_1_weights_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_weights_info.xhtml">arm_compute::WeightsInfo</a></div><div class="ttdoc">Convolution Layer Weights Information class.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01757">Types.h:1757</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_aa41d7415a5386798147cccae2333d5d4aad1a9b424f69f167da12150036196cd7"><div class="ttname"><a href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4aad1a9b424f69f167da12150036196cd7">arm_compute::CPUModel::GENERIC_FP16_DOT</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::Format::S32</a></div><div class="ttdoc">1 channel, 1 S32 per channel</div></div>
<div class="ttc" id="classarm__compute_1_1_detection_output_layer_info_xhtml_aa5081eb6d3f7bf20f32573af8a60f1f9"><div class="ttname"><a href="classarm__compute_1_1_detection_output_layer_info.xhtml#aa5081eb6d3f7bf20f32573af8a60f1f9">arm_compute::DetectionOutputLayerInfo::variance_encoded_in_target</a></div><div class="ttdeci">bool variance_encoded_in_target() const</div><div class="ttdoc">Get if variance encoded in target.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01037">Types.h:1037</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a115dca124dc6423c7a400b8a8a0270cc"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a115dca124dc6423c7a400b8a8a0270cc">arm_compute::DataType::S64</a></div><div class="ttdoc">signed 64-bit number</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ae76ef5bd3ad69f7380ebb3ac6033ec5caba44d3559b36fc1c14e5752bccce1eef"><div class="ttname"><a href="namespacearm__compute.xhtml#ae76ef5bd3ad69f7380ebb3ac6033ec5caba44d3559b36fc1c14e5752bccce1eef">arm_compute::CLTunerMode::RAPID</a></div><div class="ttdoc">Searches a minimal subset of LWS configurations while tuning.</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a30ff380a3be74628024063a99fba10f0"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a30ff380a3be74628024063a99fba10f0">arm_compute::Format::RGB888</a></div><div class="ttdoc">3 channels, 1 U8 per channel</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a683661ae75dcb7aef16b9c9bde31517da4c5d06b02c97731aaa976179c62dcf76"><div class="ttname"><a href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517da4c5d06b02c97731aaa976179c62dcf76">arm_compute::ConvolutionMethod::DIRECT</a></div><div class="ttdoc">Direct convolution.</div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml_a56297e0f7b215eea46c818cb7528d9eaa36875f2500a09ee35d0bb7eb8c0b91b0"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa36875f2500a09ee35d0bb7eb8c0b91b0">arm_compute::ActivationLayerInfo::ActivationFunction::SQRT</a></div><div class="ttdoc">Square root (  )</div></div>
<div class="ttc" id="classarm__compute_1_1_quantization_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_quantization_info.xhtml">arm_compute::QuantizationInfo</a></div><div class="ttdoc">Quantization information.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00069">QuantizationInfo.h:69</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5827eb9cb394e74af87f74bd354fb45ba6970bdc2201030b9c03fbdcf3973858a"><div class="ttname"><a href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45ba6970bdc2201030b9c03fbdcf3973858a">arm_compute::ReductionOperation::SUM</a></div><div class="ttdoc">Sum.</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a673665b4587a2956fcbad5f0e9ba89d3a68616ae21712c00705b962f4eff06eaa"><div class="ttname"><a href="namespacearm__compute.xhtml#a673665b4587a2956fcbad5f0e9ba89d3a68616ae21712c00705b962f4eff06eaa">arm_compute::HOGNormType::L1_NORM</a></div><div class="ttdoc">L1 norm.</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3a35213429e39ad02be7c3c44fc87cde57"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a35213429e39ad02be7c3c44fc87cde57">arm_compute::GPUTarget::VALHALL</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a4c9101ca1a1f72f48efff28b4b9a6495a1e23852820b9154316c7c06e2b7ba051"><div class="ttname"><a href="namespacearm__compute.xhtml#a4c9101ca1a1f72f48efff28b4b9a6495a1e23852820b9154316c7c06e2b7ba051">arm_compute::MemoryPolicy::NORMAL</a></div></div>
<div class="ttc" id="structarm__compute_1_1_key_point_xhtml_a7cfd13d282af770aaa971755fa092fca"><div class="ttname"><a href="structarm__compute_1_1_key_point.xhtml#a7cfd13d282af770aaa971755fa092fca">arm_compute::KeyPoint::error</a></div><div class="ttdeci">float error</div><div class="ttdoc">Tracking error initialized to 0 by the corner detector.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00421">Types.h:421</a></div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml_a56297e0f7b215eea46c818cb7528d9eaa5b44c930bf0ddeef48b50ef11e5ddd58"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa5b44c930bf0ddeef48b50ef11e5ddd58">arm_compute::ActivationLayerInfo::ActivationFunction::ELU</a></div><div class="ttdoc">Exponential Linear Unit (  )</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6abd7ef6d4f35bc7d05c559b65032f15d1"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6abd7ef6d4f35bc7d05c559b65032f15d1">arm_compute::DataType::SIZET</a></div><div class="ttdoc">size_t</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_aa41d7415a5386798147cccae2333d5d4aecf3e2493afebcfefb0b9b86bd50ef0d"><div class="ttname"><a href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4aecf3e2493afebcfefb0b9b86bd50ef0d">arm_compute::CPUModel::A53</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_output_layer_info_xhtml_af14fc4cf24dfb69a0f225a582ef01d54"><div class="ttname"><a href="classarm__compute_1_1_detection_output_layer_info.xhtml#af14fc4cf24dfb69a0f225a582ef01d54">arm_compute::DetectionOutputLayerInfo::nms_threshold</a></div><div class="ttdeci">float nms_threshold() const</div><div class="ttdoc">Get nms threshold.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01047">Types.h:1047</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5827eb9cb394e74af87f74bd354fb45ba654fed6e9b6c154d04bcaa439e32d0d5"><div class="ttname"><a href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45ba654fed6e9b6c154d04bcaa439e32d0d5">arm_compute::ReductionOperation::ARG_IDX_MAX</a></div><div class="ttdoc">Index of the max value.</div></div>
<div class="ttc" id="classarm__compute_1_1_bounding_box_transform_info_xhtml_a4a5b4a276ace0cc81f724921643ceb85"><div class="ttname"><a href="classarm__compute_1_1_bounding_box_transform_info.xhtml#a4a5b4a276ace0cc81f724921643ceb85">arm_compute::BoundingBoxTransformInfo::img_width</a></div><div class="ttdeci">float img_width() const</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01584">Types.h:1584</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5dad01b7eab116403241313417e0936da2ea77cf582892014b30e6fa7e558350d"><div class="ttname"><a href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da2ea77cf582892014b30e6fa7e558350d">arm_compute::ElementWiseUnary::ROUND</a></div><div class="ttdoc">Round.</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aaf1a543f5a2c5d49bc5dde298fcf716e4"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aaf1a543f5a2c5d49bc5dde298fcf716e4">arm_compute::Channel::C2</a></div><div class="ttdoc">Third channel (used by formats with unknown channel types).</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">arm_compute::Format::U32</a></div><div class="ttdoc">1 channel, 1 U32 per channel</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">arm_compute::Channel::U</a></div><div class="ttdoc">Cb/U channel.</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad4bb8dabdbf8ad75e34220cc666b59caaca2475ab7883ebb9f125241141896190"><div class="ttname"><a href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59caaca2475ab7883ebb9f125241141896190">arm_compute::NormType::IN_MAP_1D</a></div><div class="ttdoc">Normalization applied within the same map in 1D region.</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455a"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">arm_compute::Channel</a></div><div class="ttdeci">Channel</div><div class="ttdoc">Available channels.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00461">Types.h:461</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">arm_compute::Format</a></div><div class="ttdeci">Format</div><div class="ttdoc">Image colour formats.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00053">Types.h:53</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a14d24d90ab4ba2956e92e27890ba4c91"><div class="ttname"><a href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91">arm_compute::PaddingMode</a></div><div class="ttdeci">PaddingMode</div><div class="ttdoc">Padding mode to use for PadLayer.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00165">Types.h:165</a></div></div>
<div class="ttc" id="structarm__compute_1_1_detection_window_xhtml_ad0eab1042455a2067c812ab8071d5376"><div class="ttname"><a href="structarm__compute_1_1_detection_window.xhtml#ad0eab1042455a2067c812ab8071d5376">arm_compute::DetectionWindow::width</a></div><div class="ttdeci">uint16_t width</div><div class="ttdoc">Width of the detection window.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00558">Types.h:558</a></div></div>
<div class="ttc" id="_c_l_tuner_types_8h_xhtml"><div class="ttname"><a href="_c_l_tuner_types_8h.xhtml">CLTunerTypes.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_generate_proposals_info_xhtml_af5d260b8c4c285dbdc1b6f545f86b160"><div class="ttname"><a href="classarm__compute_1_1_generate_proposals_info.xhtml#af5d260b8c4c285dbdc1b6f545f86b160">arm_compute::GenerateProposalsInfo::im_scale</a></div><div class="ttdeci">float im_scale() const</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01450">Types.h:1450</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">arm_compute::DataType::QASYMM8</a></div><div class="ttdoc">quantized, asymmetric fixed-point 8-bit number unsigned</div></div>
<div class="ttc" id="classarm__compute_1_1_h_o_g_info_xhtml_ae561964ccc0e0a5750676b9c7dd7cd44"><div class="ttname"><a href="classarm__compute_1_1_h_o_g_info.xhtml#ae561964ccc0e0a5750676b9c7dd7cd44">arm_compute::HOGInfo::block_size</a></div><div class="ttdeci">const Size2D &amp; block_size() const</div><div class="ttdoc">The block size in pixels.</div><div class="ttdef"><b>Definition:</b> <a href="_h_o_g_info_8cpp_source.xhtml#l00096">HOGInfo.cpp:96</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5dad01b7eab116403241313417e0936da4b5ffcdaf38ce4d463171f5c977c5ab3"><div class="ttname"><a href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da4b5ffcdaf38ce4d463171f5c977c5ab3">arm_compute::ElementWiseUnary::LOG</a></div><div class="ttdoc">Natural Logarithm.</div></div>
<div class="ttc" id="classarm__compute_1_1_coordinates_xhtml"><div class="ttname"><a href="classarm__compute_1_1_coordinates.xhtml">arm_compute::Coordinates</a></div><div class="ttdoc">Coordinates of an item.</div><div class="ttdef"><b>Definition:</b> <a href="_coordinates_8h_source.xhtml#l00037">Coordinates.h:37</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3a6855a4342969d2b58c96d95385d6e673"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a6855a4342969d2b58c96d95385d6e673">arm_compute::GPUTarget::T600</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_post_process_layer_info_xhtml_a9db6ab0530ca15abab491a354bea90dc"><div class="ttname"><a href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a9db6ab0530ca15abab491a354bea90dc">arm_compute::DetectionPostProcessLayerInfo::scale_value_h</a></div><div class="ttdeci">float scale_value_h() const</div><div class="ttdoc">Get h scale value.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01181">Types.h:1181</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pad_stride_info_xhtml_a6e324c1bd1111876469ea247da156147"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml#a6e324c1bd1111876469ea247da156147">arm_compute::PadStrideInfo::stride</a></div><div class="ttdeci">std::pair&lt; unsigned int, unsigned int &gt; stride() const</div><div class="ttdoc">Get the stride.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00734">Types.h:734</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_post_process_layer_info_xhtml_a0c255b6748d3a249c9c4d8f691994dba"><div class="ttname"><a href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a0c255b6748d3a249c9c4d8f691994dba">arm_compute::DetectionPostProcessLayerInfo::scale_value_w</a></div><div class="ttdeci">float scale_value_w() const</div><div class="ttdoc">Get w scale value.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01187">Types.h:1187</a></div></div>
<div class="ttc" id="structarm__compute_1_1_pooling_layer_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_pooling_layer_info.xhtml">arm_compute::PoolingLayerInfo</a></div><div class="ttdoc">Pooling Layer Information struct.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01211">Types.h:1211</a></div></div>
<div class="ttc" id="classarm__compute_1_1_quantization_info_xhtml_a706fc156bcd4c45441bcaad05884b57d"><div class="ttname"><a href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">arm_compute::QuantizationInfo::uniform</a></div><div class="ttdeci">UniformQuantizationInfo uniform() const</div><div class="ttdoc">Return per layer quantization info.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00148">QuantizationInfo.h:148</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_post_process_layer_info_xhtml_a0732a1286ff6a838da5c19e6d48c99cf"><div class="ttname"><a href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a0732a1286ff6a838da5c19e6d48c99cf">arm_compute::DetectionPostProcessLayerInfo::nms_score_threshold</a></div><div class="ttdeci">float nms_score_threshold() const</div><div class="ttdoc">Get nms threshold.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01149">Types.h:1149</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_aa41d7415a5386798147cccae2333d5d4a33f91a7ec1c6be774d71fcd00ac81c92"><div class="ttname"><a href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4a33f91a7ec1c6be774d71fcd00ac81c92">arm_compute::CPUModel::A55r0</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml">arm_compute::Dimensions</a></div><div class="ttdoc">Dimensions with dimensionality.</div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00041">Dimensions.h:41</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_add6426cbf2e057a195846d4ba09a50be"><div class="ttname"><a href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">arm_compute::RoundingPolicy</a></div><div class="ttdeci">RoundingPolicy</div><div class="ttdoc">Rounding method.</div><div class="ttdef"><b>Definition:</b> <a href="_rounding_8h_source.xhtml#l00030">Rounding.h:30</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a11cfa56ee0ddbbc30a2fd189d7475f4c"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a11cfa56ee0ddbbc30a2fd189d7475f4c">arm_compute::Format::YUV444</a></div><div class="ttdoc">A 3 plane of 8 bit 4:4:4 sampled Y, U, V planes.</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a16a59381d4d74d17d86d69eb4d286d7ba747385047b85ae751f83adb36435a3c1"><div class="ttname"><a href="namespacearm__compute.xhtml#a16a59381d4d74d17d86d69eb4d286d7ba747385047b85ae751f83adb36435a3c1">arm_compute::SamplingPolicy::TOP_LEFT</a></div><div class="ttdoc">Samples are taken at pixel top left corner.</div></div>
<div class="ttc" id="classarm__compute_1_1_prior_box_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_prior_box_layer_info.xhtml">arm_compute::PriorBoxLayerInfo</a></div><div class="ttdoc">PriorBox layer info.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00836">Types.h:836</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aa3abe124ecc82bf2c2e22e6058f38c50c"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa3abe124ecc82bf2c2e22e6058f38c50c">arm_compute::Channel::C3</a></div><div class="ttdoc">Fourth channel (used by formats with unknown channel types).</div></div>
<div class="ttc" id="classarm__compute_1_1_detection_output_layer_info_xhtml_a025a49ad16e9d5d59d3919c25a17d1ae"><div class="ttname"><a href="classarm__compute_1_1_detection_output_layer_info.xhtml#a025a49ad16e9d5d59d3919c25a17d1ae">arm_compute::DetectionOutputLayerInfo::code_type</a></div><div class="ttdeci">DetectionOutputLayerCodeType code_type() const</div><div class="ttdoc">Get detection output code type.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01032">Types.h:1032</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pad_stride_info_xhtml_a3860caeeaa259d59ccf69c3aea23f549"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml#a3860caeeaa259d59ccf69c3aea23f549">arm_compute::PadStrideInfo::pad_right</a></div><div class="ttdeci">unsigned int pad_right() const</div><div class="ttdoc">Get the right padding.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00765">Types.h:765</a></div></div>
<div class="ttc" id="classarm__compute_1_1_h_o_g_info_xhtml_ac3f834a0c4744ccbc55d3b8bc810fdff"><div class="ttname"><a href="classarm__compute_1_1_h_o_g_info.xhtml#ac3f834a0c4744ccbc55d3b8bc810fdff">arm_compute::HOGInfo::l2_hyst_threshold</a></div><div class="ttdeci">float l2_hyst_threshold() const</div><div class="ttdoc">Threshold used for L2HYS_NORM normalization type.</div><div class="ttdef"><b>Definition:</b> <a href="_h_o_g_info_8cpp_source.xhtml#l00121">HOGInfo.cpp:121</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3ab2ac2aea42c95ccc70260ceeb02ec4fc"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3ab2ac2aea42c95ccc70260ceeb02ec4fc">arm_compute::GPUTarget::G72</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pad_stride_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml">arm_compute::PadStrideInfo</a></div><div class="ttdoc">Padding and stride information class.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00686">Types.h:686</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a2d299363c9fc33334c571fa29ca4f58c"><div class="ttname"><a href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58c">arm_compute::ComparisonOperation</a></div><div class="ttdeci">ComparisonOperation</div><div class="ttdoc">Supported comparison operations.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00173">Types.h:173</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a08c1503414e23f5dd10ff83492685453"><div class="ttname"><a href="namespacearm__compute.xhtml#a08c1503414e23f5dd10ff83492685453">arm_compute::Termination</a></div><div class="ttdeci">Termination</div><div class="ttdoc">Termination criteria.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00388">Types.h:388</a></div></div>
<div class="ttc" id="_error_8h_xhtml"><div class="ttname"><a href="_error_8h.xhtml">Error.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">arm_compute::DataLayoutDimension::CHANNEL</a></div><div class="ttdoc">channel</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aa57cec4137b614c87cb4e24a3d003a3e0"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa57cec4137b614c87cb4e24a3d003a3e0">arm_compute::Channel::Y</a></div><div class="ttdoc">Luma channel.</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a673665b4587a2956fcbad5f0e9ba89d3a80485e54c7a3c93a0f74637c6b918ce5"><div class="ttname"><a href="namespacearm__compute.xhtml#a673665b4587a2956fcbad5f0e9ba89d3a80485e54c7a3c93a0f74637c6b918ce5">arm_compute::HOGNormType::L2_NORM</a></div><div class="ttdoc">L2-norm.</div></div>
<div class="ttc" id="classarm__compute_1_1_bounding_box_transform_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_bounding_box_transform_info.xhtml">arm_compute::BoundingBoxTransformInfo</a></div><div class="ttdoc">Bounding Box Transform information class.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01548">Types.h:1548</a></div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml_a05374b750b0fc472c34ee61e6f028bba"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a05374b750b0fc472c34ee61e6f028bba">arm_compute::BorderSize::left</a></div><div class="ttdeci">unsigned int left</div><div class="ttdoc">left of the border</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00352">Types.h:352</a></div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml_a56297e0f7b215eea46c818cb7528d9eaa72ee60fba0509af07cbbd91398d8db9d"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa72ee60fba0509af07cbbd91398d8db9d">arm_compute::ActivationLayerInfo::ActivationFunction::LOGISTIC</a></div><div class="ttdoc">Logistic (  )</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5827eb9cb394e74af87f74bd354fb45bac8074bb318fb85693233e64acc64c1ed"><div class="ttname"><a href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45bac8074bb318fb85693233e64acc64c1ed">arm_compute::ReductionOperation::PROD</a></div><div class="ttdoc">Product.</div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml_a78b0fed184c642b78f32fd34b228a5f9"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a78b0fed184c642b78f32fd34b228a5f9">arm_compute::BorderSize::right</a></div><div class="ttdeci">unsigned int right</div><div class="ttdoc">right of the border</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00350">Types.h:350</a></div></div>
<div class="ttc" id="classarm__compute_1_1_bounding_box_transform_info_xhtml_a7f5fdd9585e3de60e819aa6cc7356b7e"><div class="ttname"><a href="classarm__compute_1_1_bounding_box_transform_info.xhtml#a7f5fdd9585e3de60e819aa6cc7356b7e">arm_compute::BoundingBoxTransformInfo::img_height</a></div><div class="ttdeci">float img_height() const</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01579">Types.h:1579</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">arm_compute::Format::S16</a></div><div class="ttdoc">1 channel, 1 S16 per channel</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a7b3ec6413f000b02fdb4e39a951d9f8aad927ac799e8b24f80fc80d89b2eb7131"><div class="ttname"><a href="namespacearm__compute.xhtml#a7b3ec6413f000b02fdb4e39a951d9f8aad927ac799e8b24f80fc80d89b2eb7131">arm_compute::MagnitudeType::L2NORM</a></div><div class="ttdoc">L2 normalization type.</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02a628bcf7e10fc1c2a984f379a1ec3393a"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a628bcf7e10fc1c2a984f379a1ec3393a">arm_compute::DataLayoutDimension::BATCHES</a></div><div class="ttdoc">batches</div></div>
<div class="ttc" id="structarm__compute_1_1_detection_window_xhtml_ae5c4999829285e20d3b491807fa46fd1"><div class="ttname"><a href="structarm__compute_1_1_detection_window.xhtml#ae5c4999829285e20d3b491807fa46fd1">arm_compute::DetectionWindow::idx_class</a></div><div class="ttdeci">uint16_t idx_class</div><div class="ttdoc">Index of the class.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00560">Types.h:560</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_output_layer_info_xhtml_a381583deeb7c92f3b86d959c1e6c8185"><div class="ttname"><a href="classarm__compute_1_1_detection_output_layer_info.xhtml#a381583deeb7c92f3b86d959c1e6c8185">arm_compute::DetectionOutputLayerInfo::keep_top_k</a></div><div class="ttdeci">int keep_top_k() const</div><div class="ttdoc">Get the number of total bounding boxes to be kept per image.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01042">Types.h:1042</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a966a9c417ce5e94dca08d9b5e745c0c9a639aaa22a784d5e5cb03a522267e79c4"><div class="ttname"><a href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9a639aaa22a784d5e5cb03a522267e79c4">arm_compute::InterpolationPolicy::AREA</a></div><div class="ttdoc">Output values are determined by averaging the source pixels whose areas fall under the area of the de...</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a5f007421a4becd11c0666c2058b0b36c"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a5f007421a4becd11c0666c2058b0b36c">arm_compute::DataType::QSYMM8</a></div><div class="ttdoc">quantized, symmetric fixed-point 8-bit number</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a9172da722f0a434e5cc07c0a3c115d93a7e6aa2d53f6ee2b1a34b017fa403cb76"><div class="ttname"><a href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93a7e6aa2d53f6ee2b1a34b017fa403cb76">arm_compute::PoolingType::L2</a></div><div class="ttdoc">L2 Pooling.</div></div>
<div class="ttc" id="_c_p_p_types_8h_xhtml"><div class="ttname"><a href="_c_p_p_types_8h.xhtml">CPPTypes.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">arm_compute::DataLayout::NCHW</a></div><div class="ttdoc">Num samples, channels, height, width.</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_aa41d7415a5386798147cccae2333d5d4aca6fc09ca003ddc8f631109ce01bc6e8"><div class="ttname"><a href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4aca6fc09ca003ddc8f631109ce01bc6e8">arm_compute::CPUModel::GENERIC_FP16</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_post_process_layer_info_xhtml_ad54d768454ff1000504546898078d0de"><div class="ttname"><a href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#ad54d768454ff1000504546898078d0de">arm_compute::DetectionPostProcessLayerInfo::max_classes_per_detection</a></div><div class="ttdeci">unsigned int max_classes_per_detection() const</div><div class="ttdoc">Get max_classes per detection.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01139">Types.h:1139</a></div></div>
<div class="ttc" id="structarm__compute_1_1_key_point_xhtml_af64066d134a77e01b3d6eb8da813627a"><div class="ttname"><a href="structarm__compute_1_1_key_point.xhtml#af64066d134a77e01b3d6eb8da813627a">arm_compute::KeyPoint::y</a></div><div class="ttdeci">int32_t y</div><div class="ttdoc">Y coordinates.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00416">Types.h:416</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a2d299363c9fc33334c571fa29ca4f58caf5f286e73bda105e538310b3190f75c5"><div class="ttname"><a href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58caf5f286e73bda105e538310b3190f75c5">arm_compute::ComparisonOperation::Equal</a></div><div class="ttdoc">Equal comparison (  )</div></div>
<div class="ttc" id="classarm__compute_1_1_detection_post_process_layer_info_xhtml_aee7a73260f91fe8eedce52929fa829eb"><div class="ttname"><a href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#aee7a73260f91fe8eedce52929fa829eb">arm_compute::DetectionPostProcessLayerInfo::scale_value_y</a></div><div class="ttdeci">float scale_value_y() const</div><div class="ttdoc">Get y scale value.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01169">Types.h:1169</a></div></div>
<div class="ttc" id="structarm__compute_1_1_detection_window_xhtml_a81c9f8d0b8c3b49d770be14dbe9f0d37"><div class="ttname"><a href="structarm__compute_1_1_detection_window.xhtml#a81c9f8d0b8c3b49d770be14dbe9f0d37">arm_compute::DetectionWindow::height</a></div><div class="ttdeci">uint16_t height</div><div class="ttdoc">Height of the detection window.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00559">Types.h:559</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a"><div class="ttname"><a href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">arm_compute::ComparisonOperation::Greater</a></div><div class="ttdoc">Greater comparison (  )</div></div>
<div class="ttc" id="classarm__compute_1_1_strides_xhtml"><div class="ttname"><a href="classarm__compute_1_1_strides.xhtml">arm_compute::Strides</a></div><div class="ttdoc">Strides of an item in bytes.</div><div class="ttdef"><b>Definition:</b> <a href="_strides_8h_source.xhtml#l00037">Strides.h:37</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a34f500e941c4df30b870126ec868ebd5"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a34f500e941c4df30b870126ec868ebd5">arm_compute::DataType::QSYMM8_PER_CHANNEL</a></div><div class="ttdoc">quantized, symmetric per channel fixed-point 8-bit number</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a683661ae75dcb7aef16b9c9bde31517da9d024a5762b3a992dec7eb3c49d17ae8"><div class="ttname"><a href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517da9d024a5762b3a992dec7eb3c49d17ae8">arm_compute::ConvolutionMethod::WINOGRAD</a></div><div class="ttdoc">Convolution using Winograd.</div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml_a56297e0f7b215eea46c818cb7528d9eaa12dec4e1f7ec620651b2b95c440ffac0"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa12dec4e1f7ec620651b2b95c440ffac0">arm_compute::ActivationLayerInfo::ActivationFunction::SQUARE</a></div><div class="ttdoc">Square (  )</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58ab08f0cb36474118c5bbc03b3a172a778"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ab08f0cb36474118c5bbc03b3a172a778">arm_compute::Format::IYUV</a></div><div class="ttdoc">A 3 plane of 8-bit 4:2:0 sampled Y, U, V planes.</div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml_a56297e0f7b215eea46c818cb7528d9eaaab1d4411a9e7f5e82002512cddfdc33a"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaaab1d4411a9e7f5e82002512cddfdc33a">arm_compute::ActivationLayerInfo::ActivationFunction::LU_BOUNDED_RELU</a></div><div class="ttdoc">Lower and Upper Bounded Rectifier (  )</div></div>
<div class="ttc" id="_g_p_u_target_8h_xhtml"><div class="ttname"><a href="_g_p_u_target_8h.xhtml">GPUTarget.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_output_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_detection_output_layer_info.xhtml">arm_compute::DetectionOutputLayerInfo</a></div><div class="ttdoc">Detection Output layer info.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00973">Types.h:973</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a165f06116e7b8d9b2481dfc805db4619"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a165f06116e7b8d9b2481dfc805db4619">arm_compute::Format::RGBA8888</a></div><div class="ttdoc">4 channels, 1 U8 per channel</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a9172da722f0a434e5cc07c0a3c115d93"><div class="ttname"><a href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93">arm_compute::PoolingType</a></div><div class="ttdeci">PoolingType</div><div class="ttdoc">Available pooling types.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00574">Types.h:574</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad818ba0ecd4a87d8f1bb0d5b17f07830ac411afd31d32cec664d372acc12f404a"><div class="ttname"><a href="namespacearm__compute.xhtml#ad818ba0ecd4a87d8f1bb0d5b17f07830ac411afd31d32cec664d372acc12f404a">arm_compute::DetectionOutputLayerCodeType::CORNER</a></div><div class="ttdoc">Use box corners.</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150"><div class="ttname"><a href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">arm_compute::RoundingPolicy::TO_NEAREST_EVEN</a></div><div class="ttdoc">Rounds to nearest value; half rounds to nearest even.</div></div>
<div class="ttc" id="_strides_8h_xhtml"><div class="ttname"><a href="_strides_8h.xhtml">Strides.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml_a56297e0f7b215eea46c818cb7528d9eaad8156d3c6735d75d8a1b8dedd0e79c8b"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaad8156d3c6735d75d8a1b8dedd0e79c8b">arm_compute::ActivationLayerInfo::ActivationFunction::IDENTITY</a></div><div class="ttdoc">Identity (  )</div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml_a56297e0f7b215eea46c818cb7528d9eaacc516ab03b98f1c908ddf6ed4a7c45e9"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaacc516ab03b98f1c908ddf6ed4a7c45e9">arm_compute::ActivationLayerInfo::ActivationFunction::BOUNDED_RELU</a></div><div class="ttdoc">Upper Bounded Rectifier (  )</div></div>
<div class="ttc" id="classarm__compute_1_1_size2_d_xhtml_a02bed8590a9ddf520e58a060059518ec"><div class="ttname"><a href="classarm__compute_1_1_size2_d.xhtml#a02bed8590a9ddf520e58a060059518ec">arm_compute::Size2D::width</a></div><div class="ttdeci">size_t width</div><div class="ttdoc">Width of the image region or rectangle.</div><div class="ttdef"><b>Definition:</b> <a href="_size2_d_8h_source.xhtml#l00092">Size2D.h:92</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a673665b4587a2956fcbad5f0e9ba89d3"><div class="ttname"><a href="namespacearm__compute.xhtml#a673665b4587a2956fcbad5f0e9ba89d3">arm_compute::HOGNormType</a></div><div class="ttdeci">HOGNormType</div><div class="ttdoc">Normalization type for Histogram of Oriented Gradients (HOG)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00541">Types.h:541</a></div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml_a56297e0f7b215eea46c818cb7528d9eaac7e80a3de04936f4e423e1b564fdca10"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaac7e80a3de04936f4e423e1b564fdca10">arm_compute::ActivationLayerInfo::ActivationFunction::LEAKY_RELU</a></div><div class="ttdoc">Leaky Rectifier (  )</div></div>
<div class="ttc" id="_dimensions_8h_xhtml"><div class="ttname"><a href="_dimensions_8h.xhtml">Dimensions.h</a></div></div>
<div class="ttc" id="namespace_gemm_tuner_xhtml_a7aead736a07eaf25623ad7bfa1f0ee2d"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a7aead736a07eaf25623ad7bfa1f0ee2d">GemmTuner.type</a></div><div class="ttdeci">type</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00527">GemmTuner.py:527</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a9172da722f0a434e5cc07c0a3c115d93afcefd647d6a866603c627b11347c707a"><div class="ttname"><a href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93afcefd647d6a866603c627b11347c707a">arm_compute::PoolingType::AVG</a></div><div class="ttdoc">Average Pooling.</div></div>
<div class="ttc" id="classarm__compute_1_1_compute_anchors_info_xhtml_a5b8b00c38aee11870396f12e764fa3ce"><div class="ttname"><a href="classarm__compute_1_1_compute_anchors_info.xhtml#a5b8b00c38aee11870396f12e764fa3ce">arm_compute::ComputeAnchorsInfo::feat_width</a></div><div class="ttdeci">float feat_width() const</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01523">Types.h:1523</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92"><div class="ttname"><a href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92">arm_compute::PaddingMode::CONSTANT</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">arm_compute::GPUTarget</a></div><div class="ttdeci">GPUTarget</div><div class="ttdoc">Available GPU Targets.</div><div class="ttdef"><b>Definition:</b> <a href="_g_p_u_target_8h_source.xhtml#l00034">GPUTarget.h:34</a></div></div>
<div class="ttc" id="classarm__compute_1_1_r_o_i_pooling_layer_info_xhtml_aee6a0c75a44f00d3306101e14ffc3ebb"><div class="ttname"><a href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml#aee6a0c75a44f00d3306101e14ffc3ebb">arm_compute::ROIPoolingLayerInfo::pooled_height</a></div><div class="ttdeci">unsigned int pooled_height() const</div><div class="ttdoc">Get the pooled height of the layer.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01394">Types.h:1394</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a15a05537a472ee742404821851529327a0db45d2a4141101bdfe48e3314cfbca3"><div class="ttname"><a href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a0db45d2a4141101bdfe48e3314cfbca3">arm_compute::BorderMode::UNDEFINED</a></div><div class="ttdoc">Borders are left undefined.</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a3a440b3893fa10608d4428958be1c52ea696b031073e74bf2cb98e5ef201d4aa3"><div class="ttname"><a href="namespacearm__compute.xhtml#a3a440b3893fa10608d4428958be1c52ea696b031073e74bf2cb98e5ef201d4aa3">arm_compute::CLVersion::UNKNOWN</a></div></div>
<div class="ttc" id="classarm__compute_1_1_r_o_i_pooling_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml">arm_compute::ROIPoolingLayerInfo</a></div><div class="ttdoc">ROI Pooling Layer Information class.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01374">Types.h:1374</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3a53e518b6393904e797819c7a941f9ddc"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a53e518b6393904e797819c7a941f9ddc">arm_compute::GPUTarget::TBOX</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a15a05537a472ee742404821851529327a4ef59320fbe90fe47d40f1f71e4c5daa"><div class="ttname"><a href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a4ef59320fbe90fe47d40f1f71e4c5daa">arm_compute::BorderMode::REPLICATE</a></div><div class="ttdoc">Pixels outside the image are assumed to have the same value as the closest image pixel.</div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml_a56297e0f7b215eea46c818cb7528d9eaa143c8c6f51b9bb893ce71e38702e3cc1"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa143c8c6f51b9bb893ce71e38702e3cc1">arm_compute::ActivationLayerInfo::ActivationFunction::TANH</a></div><div class="ttdoc">Hyperbolic tangent (  )</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3afa362f4daec88442a387ff7cda411a38"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3afa362f4daec88442a387ff7cda411a38">arm_compute::GPUTarget::MIDGARD</a></div></div>
<div class="ttc" id="classarm__compute_1_1_size2_d_xhtml"><div class="ttname"><a href="classarm__compute_1_1_size2_d.xhtml">arm_compute::Size2D</a></div><div class="ttdoc">Class for specifying the size of an image or rectangle.</div><div class="ttdef"><b>Definition:</b> <a href="_size2_d_8h_source.xhtml#l00034">Size2D.h:34</a></div></div>
<div class="ttc" id="structarm__compute_1_1_detection_window_xhtml"><div class="ttname"><a href="structarm__compute_1_1_detection_window.xhtml">arm_compute::DetectionWindow</a></div><div class="ttdoc">Detection window used for the object detection.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00554">Types.h:554</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ad85d7becf0c6e3cffbc255489808e219"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ad85d7becf0c6e3cffbc255489808e219">arm_compute::test::validation::qinfo</a></div><div class="ttdeci">const QuantizationInfo qinfo</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00150">Im2Col.cpp:150</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_a80a5f2d6e3a697c9aad893a3b4242615"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">arm_compute::Dimensions::num_dimensions</a></div><div class="ttdeci">unsigned int num_dimensions() const</div><div class="ttdoc">Returns the effective dimensionality of the tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00122">Dimensions.h:122</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5827eb9cb394e74af87f74bd354fb45bafc54513dae613e117ffc4169e48bfce5"><div class="ttname"><a href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45bafc54513dae613e117ffc4169e48bfce5">arm_compute::ReductionOperation::MEAN_SUM</a></div><div class="ttdoc">Mean of sum.</div></div>
<div class="ttc" id="classarm__compute_1_1_generate_proposals_info_xhtml_a5d68f71fde6fb8401332cbe3973368a2"><div class="ttname"><a href="classarm__compute_1_1_generate_proposals_info.xhtml#a5d68f71fde6fb8401332cbe3973368a2">arm_compute::GenerateProposalsInfo::im_width</a></div><div class="ttdeci">float im_width() const</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01445">Types.h:1445</a></div></div>
<div class="ttc" id="classarm__compute_1_1_compute_anchors_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_compute_anchors_info.xhtml">arm_compute::ComputeAnchorsInfo</a></div><div class="ttdoc">ComputeAnchors information class.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01498">Types.h:1498</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ae76ef5bd3ad69f7380ebb3ac6033ec5c"><div class="ttname"><a href="namespacearm__compute.xhtml#ae76ef5bd3ad69f7380ebb3ac6033ec5c">arm_compute::CLTunerMode</a></div><div class="ttdeci">CLTunerMode</div><div class="ttdoc">&lt; OpenCL tuner modes</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuner_types_8h_source.xhtml#l00035">CLTunerTypes.h:35</a></div></div>
<div class="ttc" id="structarm__compute_1_1_rectangle_xhtml_ad0eab1042455a2067c812ab8071d5376"><div class="ttname"><a href="structarm__compute_1_1_rectangle.xhtml#ad0eab1042455a2067c812ab8071d5376">arm_compute::Rectangle::width</a></div><div class="ttdeci">uint16_t width</div><div class="ttdoc">Width of the rectangle.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00432">Types.h:432</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">arm_compute::DataLayout::NHWC</a></div><div class="ttdoc">Num samples, height, width, channels.</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a82b8ac759c804bc1fb4e2d21e178fb6fae1c8555fcf0ea2bb648a6fd527d658c0"><div class="ttname"><a href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fae1c8555fcf0ea2bb648a6fd527d658c0">arm_compute::ConvertPolicy::WRAP</a></div><div class="ttdoc">Wrap around.</div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml_a56297e0f7b215eea46c818cb7528d9eaaaac544aacc3615aada24897a215f5046"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaaaac544aacc3615aada24897a215f5046">arm_compute::ActivationLayerInfo::ActivationFunction::LINEAR</a></div><div class="ttdoc">Linear (  )</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_aa41d7415a5386798147cccae2333d5d4a2f2d74257db975404ff4ca97ce1e0bca"><div class="ttname"><a href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4a2f2d74257db975404ff4ca97ce1e0bca">arm_compute::CPUModel::A55r1</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_post_process_layer_info_xhtml_a36e65a7f80a07a2393e6a1cadd974740"><div class="ttname"><a href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a36e65a7f80a07a2393e6a1cadd974740">arm_compute::DetectionPostProcessLayerInfo::detection_per_class</a></div><div class="ttdeci">unsigned int detection_per_class() const</div><div class="ttdoc">Get detection per class.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01144">Types.h:1144</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a079eb95759d2ad31254f659d63651825"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a079eb95759d2ad31254f659d63651825">arm_compute::Format::UV88</a></div><div class="ttdoc">2 channel, 1 U8 per channel</div></div>
<div class="ttc" id="structarm__compute_1_1_detection_window_xhtml_ab0580f504a7428539be299fa71565f30"><div class="ttname"><a href="structarm__compute_1_1_detection_window.xhtml#ab0580f504a7428539be299fa71565f30">arm_compute::DetectionWindow::y</a></div><div class="ttdeci">uint16_t y</div><div class="ttdoc">Top-left y coordinate.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00557">Types.h:557</a></div></div>
<div class="ttc" id="structarm__compute_1_1_uniform_quantization_info_xhtml_a97bd6c077f3c7769f575b82988b9b668"><div class="ttname"><a href="structarm__compute_1_1_uniform_quantization_info.xhtml#a97bd6c077f3c7769f575b82988b9b668">arm_compute::UniformQuantizationInfo::offset</a></div><div class="ttdeci">int32_t offset</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00065">QuantizationInfo.h:65</a></div></div>
<div class="ttc" id="_h_o_g_info_8h_xhtml"><div class="ttname"><a href="_h_o_g_info_8h.xhtml">HOGInfo.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_r_o_i_pooling_layer_info_xhtml_a70fd561a558e9f433088b64587a9cb62"><div class="ttname"><a href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml#a70fd561a558e9f433088b64587a9cb62">arm_compute::ROIPoolingLayerInfo::spatial_scale</a></div><div class="ttdeci">float spatial_scale() const</div><div class="ttdoc">Get the spatial scale.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01399">Types.h:1399</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a2d299363c9fc33334c571fa29ca4f58cad3e6fdac55bb7b0edd7834c968ba1f38"><div class="ttname"><a href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58cad3e6fdac55bb7b0edd7834c968ba1f38">arm_compute::ComparisonOperation::LessEqual</a></div><div class="ttdoc">Less equal comparison (  )</div></div>
<div class="ttc" id="structarm__compute_1_1_rectangle_xhtml_ab0580f504a7428539be299fa71565f30"><div class="ttname"><a href="structarm__compute_1_1_rectangle.xhtml#ab0580f504a7428539be299fa71565f30">arm_compute::Rectangle::y</a></div><div class="ttdeci">uint16_t y</div><div class="ttdoc">Top-left y coordinate.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00431">Types.h:431</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_post_process_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_detection_post_process_layer_info.xhtml">arm_compute::DetectionPostProcessLayerInfo</a></div><div class="ttdoc">Detection Output layer info.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01092">Types.h:1092</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a14d24d90ab4ba2956e92e27890ba4c91ae4f6a05f82ed398f984f4bc1a55838df"><div class="ttname"><a href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91ae4f6a05f82ed398f984f4bc1a55838df">arm_compute::PaddingMode::REFLECT</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_post_process_layer_info_xhtml_adda82c28c368106734620f105bb0e1e3"><div class="ttname"><a href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#adda82c28c368106734620f105bb0e1e3">arm_compute::DetectionPostProcessLayerInfo::num_classes</a></div><div class="ttdeci">unsigned int num_classes() const</div><div class="ttdoc">Get num classes.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01159">Types.h:1159</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad818ba0ecd4a87d8f1bb0d5b17f07830ae65a115db9b4bcc4ae0aa0b989089d16"><div class="ttname"><a href="namespacearm__compute.xhtml#ad818ba0ecd4a87d8f1bb0d5b17f07830ae65a115db9b4bcc4ae0aa0b989089d16">arm_compute::DetectionOutputLayerCodeType::TF_CENTER</a></div><div class="ttdoc">Use box centers and size but flip x and y co-ordinates.</div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a64a08a9fec5aeee8650e7182b6d171d0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">arm_compute::test::validation::weights</a></div><div class="ttdeci">CLTensor weights</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00188">ConvolutionLayer.cpp:188</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad818ba0ecd4a87d8f1bb0d5b17f07830afbc6c35854fe02eb9e792f897399c42a"><div class="ttname"><a href="namespacearm__compute.xhtml#ad818ba0ecd4a87d8f1bb0d5b17f07830afbc6c35854fe02eb9e792f897399c42a">arm_compute::DetectionOutputLayerCodeType::CORNER_SIZE</a></div><div class="ttdoc">Use box centers and size.</div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a60ad1078faeaf3f59266d69ad937339f"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a60ad1078faeaf3f59266d69ad937339f">arm_compute::test::validation::rounding_policy</a></div><div class="ttdeci">rounding_policy</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_pixel_wise_multiplication_8cpp_source.xhtml#l00375">PixelWiseMultiplication.cpp:375</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aadfcf28d0734569a6a693bc8194de62bf"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aadfcf28d0734569a6a693bc8194de62bf">arm_compute::Channel::G</a></div><div class="ttdoc">Green channel.</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5dad01b7eab116403241313417e0936da5dd68b1a7db42a1cce4dce09dbaa179e"><div class="ttname"><a href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da5dd68b1a7db42a1cce4dce09dbaa179e">arm_compute::ElementWiseUnary::NEG</a></div><div class="ttdoc">Negate.</div></div>
<div class="ttc" id="classarm__compute_1_1_bounding_box_transform_info_xhtml_a8f456133a1d886f466a79264a10f42ea"><div class="ttname"><a href="classarm__compute_1_1_bounding_box_transform_info.xhtml#a8f456133a1d886f466a79264a10f42ea">arm_compute::BoundingBoxTransformInfo::weights</a></div><div class="ttdeci">std::array&lt; float, 4 &gt; weights() const</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01569">Types.h:1569</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">arm_compute::DataLayoutDimension::WIDTH</a></div><div class="ttdoc">width</div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml">arm_compute::TensorInfo</a></div><div class="ttdoc">Store the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00045">TensorInfo.h:45</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3a6903f06b87f56a4cd0df268ee94dbd6f"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a6903f06b87f56a4cd0df268ee94dbd6f">arm_compute::GPUTarget::TODX</a></div></div>
<div class="ttc" id="structarm__compute_1_1_rectangle_xhtml_a4dde988b1b2adba65ae3efa69f65d960"><div class="ttname"><a href="structarm__compute_1_1_rectangle.xhtml#a4dde988b1b2adba65ae3efa69f65d960">arm_compute::Rectangle::x</a></div><div class="ttdeci">uint16_t x</div><div class="ttdoc">Top-left x coordinate.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00430">Types.h:430</a></div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml_a56297e0f7b215eea46c818cb7528d9eaadcc44a50c791a591c74e00ecdda7c58d"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaadcc44a50c791a591c74e00ecdda7c58d">arm_compute::ActivationLayerInfo::ActivationFunction::SOFT_RELU</a></div><div class="ttdoc">Soft Rectifier (  )</div></div>
<div class="ttc" id="classarm__compute_1_1_g_e_m_m_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_g_e_m_m_info.xhtml">arm_compute::GEMMInfo</a></div><div class="ttdoc">GEMM information class.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01983">Types.h:1983</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3afc99dd3bc5650c5116886eefd3d18988"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3afc99dd3bc5650c5116886eefd3d18988">arm_compute::GPUTarget::G51BIG</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23d9f0c01c9e120dfb828ee922b7a8aea46ea186b87dc545033d86ba8d6e63916"><div class="ttname"><a href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea46ea186b87dc545033d86ba8d6e63916">arm_compute::ArithmeticOperation::SQUARED_DIFF</a></div><div class="ttdoc">(x - y)^2</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">arm_compute::DataType::QASYMM8_SIGNED</a></div><div class="ttdoc">quantized, asymmetric fixed-point 8-bit number signed</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3aa78cc0fd1cab24af0fad71dc4c256f8e"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3aa78cc0fd1cab24af0fad71dc4c256f8e">arm_compute::GPUTarget::BIFROST</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a1ad5f6f3069070ec4cbbdc94d5e61e0e"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a1ad5f6f3069070ec4cbbdc94d5e61e0e">arm_compute::DataType::F64</a></div><div class="ttdoc">64-bit floating-point number</div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a5f5b6c4337eac9e2e0046ca2304d80dc"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">arm_compute::test::validation::data_type</a></div><div class="ttdeci">data_type</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_arithmetic_addition_8cpp_source.xhtml#l00138">ArithmeticAddition.cpp:138</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_adf2ced65e536375a1c96425d9fced858a26a4b44a837bf97b972628509912b4a5"><div class="ttname"><a href="namespacearm__compute.xhtml#adf2ced65e536375a1c96425d9fced858a26a4b44a837bf97b972628509912b4a5">arm_compute::NonLinearFilterFunction::MAX</a></div><div class="ttdoc">Non linear dilate.</div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a4f4125dba5283887b34f889b1c615c0c"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">arm_compute::test::validation::info</a></div><div class="ttdeci">info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00182">ConvolutionLayer.cpp:182</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_1_1_dimension_xhtml_a0f590bfcf19110f44efc502e7b5c1d9e"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">arm_compute::Window::Dimension::end</a></div><div class="ttdeci">constexpr int end() const</div><div class="ttdoc">Return the end of the dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00097">Window.h:97</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a7b3ec6413f000b02fdb4e39a951d9f8a"><div class="ttname"><a href="namespacearm__compute.xhtml#a7b3ec6413f000b02fdb4e39a951d9f8a">arm_compute::MagnitudeType</a></div><div class="ttdeci">MagnitudeType</div><div class="ttdoc">Magnitude calculation type.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00396">Types.h:396</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a2d299363c9fc33334c571fa29ca4f58ca19bb0af2c3c530538cb41aff7f235b96"><div class="ttname"><a href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca19bb0af2c3c530538cb41aff7f235b96">arm_compute::ComparisonOperation::NotEqual</a></div><div class="ttdoc">NotEqual comparison (  )</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86"><div class="ttname"><a href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">arm_compute::ConvertPolicy::SATURATE</a></div><div class="ttdoc">Saturate.</div></div>
<div class="ttc" id="structarm__compute_1_1_rectangle_xhtml_a81c9f8d0b8c3b49d770be14dbe9f0d37"><div class="ttname"><a href="structarm__compute_1_1_rectangle.xhtml#a81c9f8d0b8c3b49d770be14dbe9f0d37">arm_compute::Rectangle::height</a></div><div class="ttdeci">uint16_t height</div><div class="ttdoc">Height of the rectangle.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00433">Types.h:433</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_aa41d7415a5386798147cccae2333d5d4ac942dc2a9f958acddc67e11472d3ca0b"><div class="ttname"><a href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4ac942dc2a9f958acddc67e11472d3ca0b">arm_compute::CPUModel::GENERIC</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pad_stride_info_xhtml_ac49df0924d183da42cffc04cf9aba1f8"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml#ac49df0924d183da42cffc04cf9aba1f8">arm_compute::PadStrideInfo::pad_bottom</a></div><div class="ttdeci">unsigned int pad_bottom() const</div><div class="ttdoc">Get the bottom padding.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00775">Types.h:775</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a481e7a6945eb9f23e87f2de780b2e164"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a481e7a6945eb9f23e87f2de780b2e164">arm_compute::Format::YUYV422</a></div><div class="ttdoc">A single plane of 32-bit macro pixel of Y0, U0, Y1, V0 bytes.</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_afdda916edc7502967bbec17ea3c06c02ae657cce1913c857166b0475f18668ef5"><div class="ttname"><a href="namespacearm__compute.xhtml#afdda916edc7502967bbec17ea3c06c02ae657cce1913c857166b0475f18668ef5">arm_compute::MatrixPattern::BOX</a></div><div class="ttdoc">Box pattern matrix.</div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_a1b67d5b720119d50faa286c774579ecc"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">arm_compute::Dimensions&lt; int &gt;::num_max_dimensions</a></div><div class="ttdeci">static constexpr size_t num_max_dimensions</div><div class="ttdoc">Number of dimensions the tensor has.</div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00045">Dimensions.h:45</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_adf2ced65e536375a1c96425d9fced858ace31e2a082d17e038fcc6e3006166653"><div class="ttname"><a href="namespacearm__compute.xhtml#adf2ced65e536375a1c96425d9fced858ace31e2a082d17e038fcc6e3006166653">arm_compute::NonLinearFilterFunction::MIN</a></div><div class="ttdoc">Non linear erode.</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a31d65cccd6593e4101db93fb878abcaa"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a31d65cccd6593e4101db93fb878abcaa">arm_compute::DataType::U64</a></div><div class="ttdoc">unsigned 64-bit number</div></div>
<div class="ttc" id="arm__compute_2core_2_types_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_types_8h.xhtml">Types.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_afdda916edc7502967bbec17ea3c06c02a04dd53a8e6c2306e9bbf944c1d6047f2"><div class="ttname"><a href="namespacearm__compute.xhtml#afdda916edc7502967bbec17ea3c06c02a04dd53a8e6c2306e9bbf944c1d6047f2">arm_compute::MatrixPattern::CROSS</a></div><div class="ttdoc">Cross pattern matrix.</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">arm_compute::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdoc">Available data types.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00075">Types.h:75</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a735a025fce26c1ef147b54426df18181"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a735a025fce26c1ef147b54426df18181">arm_compute::test::validation::padding</a></div><div class="ttdeci">const PaddingSize padding</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_absolute_difference_8cpp_source.xhtml#l00113">AbsoluteDifference.cpp:113</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_add6426cbf2e057a195846d4ba09a50bea5631ad8e27788edfca7e13535d862c06"><div class="ttname"><a href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea5631ad8e27788edfca7e13535d862c06">arm_compute::RoundingPolicy::TO_ZERO</a></div><div class="ttdoc">Truncates the least significant values that are lost in operations.</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23d9f0c01c9e120dfb828ee922b7a8aea241dd841abade20fcb27b8a9f494e1eb"><div class="ttname"><a href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea241dd841abade20fcb27b8a9f494e1eb">arm_compute::ArithmeticOperation::SUB</a></div><div class="ttdoc">(x - y)</div></div>
<div class="ttc" id="classarm__compute_1_1_pad_stride_info_xhtml_a7144874ab401f5c4e249a1115dfb5166"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml#a7144874ab401f5c4e249a1115dfb5166">arm_compute::PadStrideInfo::pad_left</a></div><div class="ttdeci">unsigned int pad_left() const</div><div class="ttdoc">Get the left padding.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00760">Types.h:760</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ae76ef5bd3ad69f7380ebb3ac6033ec5ca39e07a5dab0694c7ebb6a0578511ee15"><div class="ttname"><a href="namespacearm__compute.xhtml#ae76ef5bd3ad69f7380ebb3ac6033ec5ca39e07a5dab0694c7ebb6a0578511ee15">arm_compute::CLTunerMode::EXHAUSTIVE</a></div><div class="ttdoc">Searches all possible LWS configurations while tuning.</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5dad01b7eab116403241313417e0936d"><div class="ttname"><a href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">arm_compute::ElementWiseUnary</a></div><div class="ttdeci">ElementWiseUnary</div><div class="ttdoc">Available element wise unary operations.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00521">Types.h:521</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">arm_compute::DataLayout</a></div><div class="ttdeci">DataLayout</div><div class="ttdoc">[DataLayout enum definition]</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00117">Types.h:117</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_afe9e10e5fdfd1e2665ac17c75c0cacd8"><div class="ttname"><a href="namespacearm__compute.xhtml#afe9e10e5fdfd1e2665ac17c75c0cacd8">arm_compute::Multiples</a></div><div class="ttdeci">std::vector&lt; uint32_t &gt; Multiples</div><div class="ttdoc">Information to produce a tiled version of a Tensor.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00458">Types.h:458</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_1_1_dimension_xhtml_ab24e31d1a4830bf79564ee902ec6c060"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">arm_compute::Window::Dimension::start</a></div><div class="ttdeci">constexpr int start() const</div><div class="ttdoc">Return the start of the dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00092">Window.h:92</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad4bb8dabdbf8ad75e34220cc666b59ca"><div class="ttname"><a href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59ca">arm_compute::NormType</a></div><div class="ttdeci">NormType</div><div class="ttdoc">The normalization type used for the normalization layer.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00533">Types.h:533</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">arm_compute::DataType::S8</a></div><div class="ttdoc">signed 8-bit number</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_afdda916edc7502967bbec17ea3c06c02"><div class="ttname"><a href="namespacearm__compute.xhtml#afdda916edc7502967bbec17ea3c06c02">arm_compute::MatrixPattern</a></div><div class="ttdeci">MatrixPattern</div><div class="ttdoc">Available matrix patterns.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00478">Types.h:478</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad4bb8dabdbf8ad75e34220cc666b59caa980fef040549733973683b1a868f96e5"><div class="ttname"><a href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59caa980fef040549733973683b1a868f96e5">arm_compute::NormType::CROSS_MAP</a></div><div class="ttdoc">Normalization applied cross maps.</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5dad01b7eab116403241313417e0936da66bac724670f51e77f3688d33ca0d781"><div class="ttname"><a href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da66bac724670f51e77f3688d33ca0d781">arm_compute::ElementWiseUnary::RSQRT</a></div><div class="ttdoc">Reverse square root.</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_afdda916edc7502967bbec17ea3c06c02a03570470bad94692ce93e32700d2e1cb"><div class="ttname"><a href="namespacearm__compute.xhtml#afdda916edc7502967bbec17ea3c06c02a03570470bad94692ce93e32700d2e1cb">arm_compute::MatrixPattern::OTHER</a></div><div class="ttdoc">Any other matrix pattern.</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a683661ae75dcb7aef16b9c9bde31517da5174aac3927faa9ee34befb7fc87a9e3"><div class="ttname"><a href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517da5174aac3927faa9ee34befb7fc87a9e3">arm_compute::ConvolutionMethod::GEMM</a></div><div class="ttdoc">Convolution using GEMM.</div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml">arm_compute::Window</a></div><div class="ttdoc">Describe a multidimensional execution window.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00039">Window.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a82b8ac759c804bc1fb4e2d21e178fb6f"><div class="ttname"><a href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">arm_compute::ConvertPolicy</a></div><div class="ttdeci">ConvertPolicy</div><div class="ttdoc">Policy to handle overflow.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00359">Types.h:359</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_output_layer_info_xhtml_a158d49c7c1df3c6c6589b47d3de56cf0"><div class="ttname"><a href="classarm__compute_1_1_detection_output_layer_info.xhtml#a158d49c7c1df3c6c6589b47d3de56cf0">arm_compute::DetectionOutputLayerInfo::background_label_id</a></div><div class="ttdeci">int background_label_id() const</div><div class="ttdoc">Get background label ID.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01057">Types.h:1057</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_adf2ced65e536375a1c96425d9fced858"><div class="ttname"><a href="namespacearm__compute.xhtml#adf2ced65e536375a1c96425d9fced858">arm_compute::NonLinearFilterFunction</a></div><div class="ttdeci">NonLinearFilterFunction</div><div class="ttdoc">Available non linear functions.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00487">Types.h:487</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_output_layer_info_xhtml_a47c941c24980e6f61a74986c4a16c16c"><div class="ttname"><a href="classarm__compute_1_1_detection_output_layer_info.xhtml#a47c941c24980e6f61a74986c4a16c16c">arm_compute::DetectionOutputLayerInfo::confidence_threshold</a></div><div class="ttdeci">float confidence_threshold() const</div><div class="ttdoc">Get confidence threshold.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01062">Types.h:1062</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad4bb8dabdbf8ad75e34220cc666b59caa6ff8bd96743aae9fd283cd822b84278e"><div class="ttname"><a href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59caa6ff8bd96743aae9fd283cd822b84278e">arm_compute::NormType::IN_MAP_2D</a></div><div class="ttdoc">Normalization applied within the same map in 2D region.</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a16a59381d4d74d17d86d69eb4d286d7b"><div class="ttname"><a href="namespacearm__compute.xhtml#a16a59381d4d74d17d86d69eb4d286d7b">arm_compute::SamplingPolicy</a></div><div class="ttdeci">SamplingPolicy</div><div class="ttdoc">Available Sampling Policies.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00099">Types.h:99</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_output_layer_info_xhtml_ae82a2ccc5739cb255a9a7679d6161399"><div class="ttname"><a href="classarm__compute_1_1_detection_output_layer_info.xhtml#ae82a2ccc5739cb255a9a7679d6161399">arm_compute::DetectionOutputLayerInfo::num_loc_classes</a></div><div class="ttdeci">int num_loc_classes() const</div><div class="ttdoc">Get number of location classes.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01072">Types.h:1072</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad023d4ca1d3facf3975c941fd728a6f4"><div class="ttname"><a href="namespacearm__compute.xhtml#ad023d4ca1d3facf3975c941fd728a6f4">arm_compute::to_string_if_not_null</a></div><div class="ttdeci">std::string to_string_if_not_null(T *arg)</div><div class="ttdoc">Formatted output if arg is not null.</div><div class="ttdef"><b>Definition:</b> <a href="utils_2_type_printer_8h_source.xhtml#l00051">TypePrinter.h:51</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_adf2ced65e536375a1c96425d9fced858a8ab0c3a037e882577dec378985477074"><div class="ttname"><a href="namespacearm__compute.xhtml#adf2ced65e536375a1c96425d9fced858a8ab0c3a037e882577dec378985477074">arm_compute::NonLinearFilterFunction::MEDIAN</a></div><div class="ttdoc">Non linear median filter.</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3a8e081b1cdec7bc064a67f31560ef7fe0"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a8e081b1cdec7bc064a67f31560ef7fe0">arm_compute::GPUTarget::G77</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3a0a2d4856ae75ec5a7b78851f6e5875f0"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a0a2d4856ae75ec5a7b78851f6e5875f0">arm_compute::GPUTarget::G51</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_cbdb8362360e11eafe2fa3bc74cf0ffd.xhtml">utils</a></li><li class="navelem"><a class="el" href="utils_2_type_printer_8h.xhtml">TypePrinter.h</a></li>
    <li class="footer">Generated on Thu Mar 5 2020 16:06:56 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
