<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute::graph::detail Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('namespacearm__compute_1_1graph_1_1detail.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">arm_compute::graph::detail Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:aa94e771d284b85d820f94b797eecee98"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1detail.xhtml#aa94e771d284b85d820f94b797eecee98">configure_transition_manager</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <a class="el" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;ctx, <a class="el" href="structarm__compute_1_1graph_1_1_execution_workload.xhtml">ExecutionWorkload</a> &amp;workload)</td></tr>
<tr class="memdesc:aa94e771d284b85d820f94b797eecee98"><td class="mdescLeft">&#160;</td><td class="mdescRight">Configures transition manager and execution workload.  <a href="#aa94e771d284b85d820f94b797eecee98">More...</a><br /></td></tr>
<tr class="separator:aa94e771d284b85d820f94b797eecee98"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa1d326a80e16fe0d4034637672d3b122"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1detail.xhtml#aa1d326a80e16fe0d4034637672d3b122">validate_all_nodes</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g)</td></tr>
<tr class="memdesc:aa1d326a80e16fe0d4034637672d3b122"><td class="mdescLeft">&#160;</td><td class="mdescRight">Validates all nodes.  <a href="#aa1d326a80e16fe0d4034637672d3b122">More...</a><br /></td></tr>
<tr class="separator:aa1d326a80e16fe0d4034637672d3b122"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a68c7ebb89adc0c2b21449cd15f6e8eba"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a68c7ebb89adc0c2b21449cd15f6e8eba">configure_all_tensors</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g)</td></tr>
<tr class="memdesc:a68c7ebb89adc0c2b21449cd15f6e8eba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Configures all nodes of a graph.  <a href="#a68c7ebb89adc0c2b21449cd15f6e8eba">More...</a><br /></td></tr>
<tr class="separator:a68c7ebb89adc0c2b21449cd15f6e8eba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4312e5b00714a9de04fc54d2a5dcc119"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a4312e5b00714a9de04fc54d2a5dcc119">allocate_all_input_tensors</a> (<a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> &amp;node)</td></tr>
<tr class="memdesc:a4312e5b00714a9de04fc54d2a5dcc119"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocates all input tensors of a node.  <a href="#a4312e5b00714a9de04fc54d2a5dcc119">More...</a><br /></td></tr>
<tr class="separator:a4312e5b00714a9de04fc54d2a5dcc119"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa39e0698b2de495c235129b12fa39b08"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1detail.xhtml#aa39e0698b2de495c235129b12fa39b08">allocate_all_output_tensors</a> (<a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> &amp;node)</td></tr>
<tr class="memdesc:aa39e0698b2de495c235129b12fa39b08"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocates all output tensors of a node.  <a href="#aa39e0698b2de495c235129b12fa39b08">More...</a><br /></td></tr>
<tr class="separator:aa39e0698b2de495c235129b12fa39b08"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3ef7cb28de6aea7026a1e8572639f300"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a3ef7cb28de6aea7026a1e8572639f300">allocate_const_tensors</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g)</td></tr>
<tr class="memdesc:a3ef7cb28de6aea7026a1e8572639f300"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocates const tensor of a given graph.  <a href="#a3ef7cb28de6aea7026a1e8572639f300">More...</a><br /></td></tr>
<tr class="separator:a3ef7cb28de6aea7026a1e8572639f300"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a766bb5055ef388455c941869b32981ed"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a766bb5055ef388455c941869b32981ed">allocate_all_tensors</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g)</td></tr>
<tr class="memdesc:a766bb5055ef388455c941869b32981ed"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocates all tensors of a graph.  <a href="#a766bb5055ef388455c941869b32981ed">More...</a><br /></td></tr>
<tr class="separator:a766bb5055ef388455c941869b32981ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a82d07d3d612bee8ff703226ff9d5d452"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structarm__compute_1_1graph_1_1_execution_workload.xhtml">ExecutionWorkload</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a82d07d3d612bee8ff703226ff9d5d452">configure_all_nodes</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <a class="el" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;ctx, const std::vector&lt; <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> &gt; &amp;node_order)</td></tr>
<tr class="memdesc:a82d07d3d612bee8ff703226ff9d5d452"><td class="mdescLeft">&#160;</td><td class="mdescRight">Configures all nodes of graph.  <a href="#a82d07d3d612bee8ff703226ff9d5d452">More...</a><br /></td></tr>
<tr class="separator:a82d07d3d612bee8ff703226ff9d5d452"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a28280ac6b0db4c2385ac8c18a4ad8f3c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a28280ac6b0db4c2385ac8c18a4ad8f3c">release_unused_tensors</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g)</td></tr>
<tr class="memdesc:a28280ac6b0db4c2385ac8c18a4ad8f3c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Release the memory of all unused const nodes.  <a href="#a28280ac6b0db4c2385ac8c18a4ad8f3c">More...</a><br /></td></tr>
<tr class="separator:a28280ac6b0db4c2385ac8c18a4ad8f3c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa2dc91a4b4f5ad19935984344f1b67a1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1detail.xhtml#aa2dc91a4b4f5ad19935984344f1b67a1">call_tensor_accessor</a> (<a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml">Tensor</a> *tensor)</td></tr>
<tr class="memdesc:aa2dc91a4b4f5ad19935984344f1b67a1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calls accessor of a given tensor.  <a href="#aa2dc91a4b4f5ad19935984344f1b67a1">More...</a><br /></td></tr>
<tr class="separator:aa2dc91a4b4f5ad19935984344f1b67a1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6f2e226c8b1e478b0162c3d9327b032e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a6f2e226c8b1e478b0162c3d9327b032e">call_all_const_node_accessors</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g)</td></tr>
<tr class="memdesc:a6f2e226c8b1e478b0162c3d9327b032e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Call all const node accessors.  <a href="#a6f2e226c8b1e478b0162c3d9327b032e">More...</a><br /></td></tr>
<tr class="separator:a6f2e226c8b1e478b0162c3d9327b032e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adff00463fb88bf00a886e0ecef6c0b6a"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1detail.xhtml#adff00463fb88bf00a886e0ecef6c0b6a">call_all_input_node_accessors</a> (<a class="el" href="structarm__compute_1_1graph_1_1_execution_workload.xhtml">ExecutionWorkload</a> &amp;workload)</td></tr>
<tr class="memdesc:adff00463fb88bf00a886e0ecef6c0b6a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Call all input node accessors.  <a href="#adff00463fb88bf00a886e0ecef6c0b6a">More...</a><br /></td></tr>
<tr class="separator:adff00463fb88bf00a886e0ecef6c0b6a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf7f4e1e2142802dd1c5a983ee156e77"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1detail.xhtml#aaf7f4e1e2142802dd1c5a983ee156e77">call_all_output_node_accessors</a> (<a class="el" href="structarm__compute_1_1graph_1_1_execution_workload.xhtml">ExecutionWorkload</a> &amp;workload)</td></tr>
<tr class="memdesc:aaf7f4e1e2142802dd1c5a983ee156e77"><td class="mdescLeft">&#160;</td><td class="mdescRight">Call all output node accessors.  <a href="#aaf7f4e1e2142802dd1c5a983ee156e77">More...</a><br /></td></tr>
<tr class="separator:aaf7f4e1e2142802dd1c5a983ee156e77"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a17b5e700b317feb19fc3cefd23a1d8bb"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a17b5e700b317feb19fc3cefd23a1d8bb">prepare_all_tasks</a> (<a class="el" href="structarm__compute_1_1graph_1_1_execution_workload.xhtml">ExecutionWorkload</a> &amp;workload)</td></tr>
<tr class="memdesc:a17b5e700b317feb19fc3cefd23a1d8bb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prepares all tasks for execution.  <a href="#a17b5e700b317feb19fc3cefd23a1d8bb">More...</a><br /></td></tr>
<tr class="separator:a17b5e700b317feb19fc3cefd23a1d8bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7641ee3c6374e97c597ce6ee05545b59"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a7641ee3c6374e97c597ce6ee05545b59">call_all_tasks</a> (<a class="el" href="structarm__compute_1_1graph_1_1_execution_workload.xhtml">ExecutionWorkload</a> &amp;workload)</td></tr>
<tr class="memdesc:a7641ee3c6374e97c597ce6ee05545b59"><td class="mdescLeft">&#160;</td><td class="mdescRight">Executes all tasks of a workload.  <a href="#a7641ee3c6374e97c597ce6ee05545b59">More...</a><br /></td></tr>
<tr class="separator:a7641ee3c6374e97c597ce6ee05545b59"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae668406fdc43b21e5dcb3904fa683ea0"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1detail.xhtml#ae668406fdc43b21e5dcb3904fa683ea0">all_inputs_are_visited</a> (const <a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> *node, const std::vector&lt; bool &gt; &amp;visited)</td></tr>
<tr class="memdesc:ae668406fdc43b21e5dcb3904fa683ea0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks if all the input dependencies of a node have been visited.  <a href="#ae668406fdc43b21e5dcb3904fa683ea0">More...</a><br /></td></tr>
<tr class="separator:ae668406fdc43b21e5dcb3904fa683ea0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a501484d2b5f0213bbede4f44471c148b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a501484d2b5f0213bbede4f44471c148b">fuse_convolution_with_batch_normalization</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, const <a class="el" href="classarm__compute_1_1graph_1_1_edge.xhtml">Edge</a> *output_edge)</td></tr>
<tr class="separator:a501484d2b5f0213bbede4f44471c148b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a07811ee0f5c19da2658a647e6d7dc2fa"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a07811ee0f5c19da2658a647e6d7dc2fa">fuse_depthwise_convolution_with_batch_normalization</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, const <a class="el" href="classarm__compute_1_1graph_1_1_edge.xhtml">Edge</a> *output_edge)</td></tr>
<tr class="separator:a07811ee0f5c19da2658a647e6d7dc2fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a36b5b67e26dfdfbedf39e6703ef059bd"><td class="memTemplParams" colspan="2">template&lt;typename N &gt; </td></tr>
<tr class="memitem:a36b5b67e26dfdfbedf39e6703ef059bd"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a36b5b67e26dfdfbedf39e6703ef059bd">fuse_node_with_activation</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, const <a class="el" href="classarm__compute_1_1graph_1_1_edge.xhtml">Edge</a> *output_edge, const std::set&lt; <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9ea">Activation</a> &gt; &amp;supported_fused_activations)</td></tr>
<tr class="separator:a36b5b67e26dfdfbedf39e6703ef059bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1f9900d626af4230ff61f851e8d5eab5"><td class="memTemplParams" colspan="2">template&lt;typename N1 , typename N2 , typename F , typename... Args&gt; </td></tr>
<tr class="memitem:a1f9900d626af4230ff61f851e8d5eab5"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a1f9900d626af4230ff61f851e8d5eab5">fuse_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, std::function&lt; bool(<a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> &amp;)&gt; const &amp;prec, const F fuse_fcn, Args &amp;&amp;... optional_arguments)</td></tr>
<tr class="separator:a1f9900d626af4230ff61f851e8d5eab5"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="ae668406fdc43b21e5dcb3904fa683ea0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae668406fdc43b21e5dcb3904fa683ea0">&#9670;&nbsp;</a></span>all_inputs_are_visited()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::graph::detail::all_inputs_are_visited </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> *&#160;</td>
          <td class="paramname"><em>node</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; bool &gt; &amp;&#160;</td>
          <td class="paramname"><em>visited</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Checks if all the input dependencies of a node have been visited. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to check </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">visited</td><td><a class="el" href="struct_vector.xhtml" title="Structure to hold Vector information.">Vector</a> that contains the visited information</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if all inputs dependencies have been visited else false </dd></dl>

<p class="definition">Definition at line <a class="el" href="_topological_sort_8cpp_source.xhtml#l00046">46</a> of file <a class="el" href="_topological_sort_8cpp_source.xhtml">TopologicalSort.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;{</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(node == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keyword">const</span> Graph *graph = node-&gt;graph();</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(graph == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keywordtype">bool</span> are_all_visited = <span class="keyword">true</span>;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;input_edge_id : node-&gt;input_edges())</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    {</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        <span class="keywordflow">if</span>(input_edge_id != <a class="code" href="namespacearm__compute_1_1graph.xhtml#aad3f5296ec88b9d552c109b04b89ad9f">EmptyNodeID</a>)</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        {</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;            <span class="keyword">const</span> Edge *input_edge = graph-&gt;edge(input_edge_id);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(input_edge == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;            <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(input_edge-&gt;producer() == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;            <span class="keywordflow">if</span>(!visited[input_edge-&gt;producer_id()])</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;            {</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                are_all_visited = <span class="keyword">false</span>;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            }</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        }</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    }</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keywordflow">return</span> are_all_visited;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_aad3f5296ec88b9d552c109b04b89ad9f"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#aad3f5296ec88b9d552c109b04b89ad9f">arm_compute::graph::EmptyNodeID</a></div><div class="ttdeci">constexpr NodeID EmptyNodeID</div><div class="ttdoc">Constant EdgeID specifying an equivalent of null edge.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00071">Types.h:71</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00214">Graph::edge()</a>, <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml#l00071">arm_compute::graph::EmptyNodeID</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00112">INode::graph()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00127">INode::input_edges()</a>, <a class="el" href="_edge_8h_source.xhtml#l00084">Edge::producer()</a>, and <a class="el" href="_edge_8h_source.xhtml#l00068">Edge::producer_id()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_topological_sort_8cpp_source.xhtml#l00072">arm_compute::graph::bfs()</a>, and <a class="el" href="_topological_sort_8cpp_source.xhtml#l00127">arm_compute::graph::dfs()</a>.</p>

</div>
</div>
<a id="a4312e5b00714a9de04fc54d2a5dcc119"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4312e5b00714a9de04fc54d2a5dcc119">&#9670;&nbsp;</a></span>allocate_all_input_tensors()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void allocate_all_input_tensors </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Allocates all input tensors of a node. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to allocate the input tensor of </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_execution_helpers_8cpp_source.xhtml#l00073">73</a> of file <a class="el" href="_execution_helpers_8cpp_source.xhtml">ExecutionHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;{</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; node.num_inputs(); ++i)</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    {</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        Tensor *tensor = node.input(i);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        <span class="keywordflow">if</span>(tensor != <span class="keyword">nullptr</span> &amp;&amp; !tensor-&gt;bound_edges().empty())</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        {</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(!tensor-&gt;handle(), <span class="stringliteral">&quot;Tensor handle is not configured!&quot;</span>);</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            tensor-&gt;handle()-&gt;allocate();</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        }</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    }</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a0b0eb3235749a2909dc5a101afe59a1b"><div class="ttname"><a href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond, msg)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00456">Error.h:456</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="classarm__compute_1_1graph_1_1_i_tensor_handle.xhtml#aa8a4946cd749d482dd996874d295af85">ITensorHandle::allocate()</a>, <a class="el" href="_error_8h_source.xhtml#l00456">ARM_COMPUTE_ERROR_ON_MSG</a>, <a class="el" href="graph_2_tensor_8cpp_source.xhtml#l00111">Tensor::bound_edges()</a>, <a class="el" href="graph_2_tensor_8cpp_source.xhtml#l00055">Tensor::handle()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, and <a class="el" href="_i_node_8cpp_source.xhtml#l00178">INode::num_inputs()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_execution_helpers_8cpp_source.xhtml#l00099">allocate_const_tensors()</a>.</p>

</div>
</div>
<a id="aa39e0698b2de495c235129b12fa39b08"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa39e0698b2de495c235129b12fa39b08">&#9670;&nbsp;</a></span>allocate_all_output_tensors()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void allocate_all_output_tensors </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Allocates all output tensors of a node. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to allocate the output tensor of </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_execution_helpers_8cpp_source.xhtml#l00086">86</a> of file <a class="el" href="_execution_helpers_8cpp_source.xhtml">ExecutionHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;{</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; node.num_outputs(); ++i)</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    {</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        Tensor *tensor = node.output(i);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        <span class="keywordflow">if</span>(tensor != <span class="keyword">nullptr</span> &amp;&amp; !tensor-&gt;bound_edges().empty())</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        {</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(!tensor-&gt;handle(), <span class="stringliteral">&quot;Tensor handle is not configured!&quot;</span>);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            tensor-&gt;handle()-&gt;allocate();</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        }</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    }</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a0b0eb3235749a2909dc5a101afe59a1b"><div class="ttname"><a href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond, msg)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00456">Error.h:456</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="classarm__compute_1_1graph_1_1_i_tensor_handle.xhtml#aa8a4946cd749d482dd996874d295af85">ITensorHandle::allocate()</a>, <a class="el" href="_error_8h_source.xhtml#l00456">ARM_COMPUTE_ERROR_ON_MSG</a>, <a class="el" href="graph_2_tensor_8cpp_source.xhtml#l00111">Tensor::bound_edges()</a>, <a class="el" href="graph_2_tensor_8cpp_source.xhtml#l00055">Tensor::handle()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00183">INode::num_outputs()</a>, and <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_execution_helpers_8cpp_source.xhtml#l00099">allocate_const_tensors()</a>.</p>

</div>
</div>
<a id="a766bb5055ef388455c941869b32981ed"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a766bb5055ef388455c941869b32981ed">&#9670;&nbsp;</a></span>allocate_all_tensors()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void allocate_all_tensors </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Allocates all tensors of a graph. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> to allocate the tensors </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_execution_helpers_8cpp_source.xhtml#l00120">120</a> of file <a class="el" href="_execution_helpers_8cpp_source.xhtml">ExecutionHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;{</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keyword">auto</span> &amp;tensors = g.tensors();</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;tensor : tensors)</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    {</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        <span class="keywordflow">if</span>(tensor &amp;&amp; !tensor-&gt;bound_edges().empty() &amp;&amp; tensor-&gt;handle() != <span class="keyword">nullptr</span> &amp;&amp; tensor-&gt;handle()-&gt;tensor().info()-&gt;is_resizable() &amp;&amp; tensor-&gt;handle()-&gt;tensor().is_used())</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        {</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            tensor-&gt;handle()-&gt;allocate();</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        }</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    }</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;}</div></div><!-- fragment -->
<p class="reference">References <a class="el" href="_graph_8cpp_source.xhtml#l00194">Graph::tensors()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_manager_8cpp_source.xhtml#l00046">GraphManager::finalize_graph()</a>.</p>

</div>
</div>
<a id="a3ef7cb28de6aea7026a1e8572639f300"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3ef7cb28de6aea7026a1e8572639f300">&#9670;&nbsp;</a></span>allocate_const_tensors()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void allocate_const_tensors </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Allocates const tensor of a given graph. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> to allocate the tensors </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_execution_helpers_8cpp_source.xhtml#l00099">99</a> of file <a class="el" href="_execution_helpers_8cpp_source.xhtml">ExecutionHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;{</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;node : g.nodes())</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    {</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <span class="keywordflow">if</span>(node != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        {</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            <span class="keywordflow">switch</span>(node-&gt;type())</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            {</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                <span class="keywordflow">case</span> NodeType::Const:</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                <span class="keywordflow">case</span> NodeType::Input:</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                    <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#aa39e0698b2de495c235129b12fa39b08">allocate_all_output_tensors</a>(*node);</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                <span class="keywordflow">case</span> NodeType::Output:</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                    <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a4312e5b00714a9de04fc54d2a5dcc119">allocate_all_input_tensors</a>(*node);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                <span class="keywordflow">default</span>:</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            }</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        }</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    }</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1graph_1_1detail_xhtml_a4312e5b00714a9de04fc54d2a5dcc119"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1detail.xhtml#a4312e5b00714a9de04fc54d2a5dcc119">arm_compute::graph::detail::allocate_all_input_tensors</a></div><div class="ttdeci">void allocate_all_input_tensors(INode &amp;node)</div><div class="ttdoc">Allocates all input tensors of a node.</div><div class="ttdef"><b>Definition:</b> <a href="_execution_helpers_8cpp_source.xhtml#l00073">ExecutionHelpers.cpp:73</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1detail_xhtml_aa39e0698b2de495c235129b12fa39b08"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1detail.xhtml#aa39e0698b2de495c235129b12fa39b08">arm_compute::graph::detail::allocate_all_output_tensors</a></div><div class="ttdeci">void allocate_all_output_tensors(INode &amp;node)</div><div class="ttdoc">Allocates all output tensors of a node.</div><div class="ttdef"><b>Definition:</b> <a href="_execution_helpers_8cpp_source.xhtml#l00086">ExecutionHelpers.cpp:86</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_execution_helpers_8cpp_source.xhtml#l00073">allocate_all_input_tensors()</a>, <a class="el" href="_execution_helpers_8cpp_source.xhtml#l00086">allocate_all_output_tensors()</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a79ceee9f8e3c1f0cc74223e05d2448bf">arm_compute::graph::Const</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a324118a6721dd6b8a9b9f4e327df2bf5">arm_compute::graph::Input</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00174">Graph::nodes()</a>, and <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a29c2c02a361c9d7028472e5d92cd4a54">arm_compute::graph::Output</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_manager_8cpp_source.xhtml#l00046">GraphManager::finalize_graph()</a>.</p>

</div>
</div>
<a id="a6f2e226c8b1e478b0162c3d9327b032e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6f2e226c8b1e478b0162c3d9327b032e">&#9670;&nbsp;</a></span>call_all_const_node_accessors()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void call_all_const_node_accessors </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Call all const node accessors. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> containing the const nodes </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_execution_helpers_8cpp_source.xhtml#l00193">193</a> of file <a class="el" href="_execution_helpers_8cpp_source.xhtml">ExecutionHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;{</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="keyword">auto</span> &amp;nodes = g.nodes();</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;node : nodes)</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    {</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        <span class="keywordflow">if</span>(node != <span class="keyword">nullptr</span> &amp;&amp; node-&gt;type() == NodeType::Const)</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        {</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;            <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#aa2dc91a4b4f5ad19935984344f1b67a1">call_tensor_accessor</a>(node-&gt;output(0));</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        }</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    }</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1graph_1_1detail_xhtml_aa2dc91a4b4f5ad19935984344f1b67a1"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1detail.xhtml#aa2dc91a4b4f5ad19935984344f1b67a1">arm_compute::graph::detail::call_tensor_accessor</a></div><div class="ttdeci">void call_tensor_accessor(Tensor *tensor)</div><div class="ttdoc">Calls accessor of a given tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_execution_helpers_8cpp_source.xhtml#l00187">ExecutionHelpers.cpp:187</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_execution_helpers_8cpp_source.xhtml#l00187">call_tensor_accessor()</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a79ceee9f8e3c1f0cc74223e05d2448bf">arm_compute::graph::Const</a>, and <a class="el" href="_graph_8cpp_source.xhtml#l00174">Graph::nodes()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_manager_8cpp_source.xhtml#l00046">GraphManager::finalize_graph()</a>.</p>

</div>
</div>
<a id="adff00463fb88bf00a886e0ecef6c0b6a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adff00463fb88bf00a886e0ecef6c0b6a">&#9670;&nbsp;</a></span>call_all_input_node_accessors()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool call_all_input_node_accessors </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_execution_workload.xhtml">ExecutionWorkload</a> &amp;&#160;</td>
          <td class="paramname"><em>workload</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Call all input node accessors. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">workload</td><td>Workload to execute</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if all the accesses were valid </dd></dl>

<p class="definition">Definition at line <a class="el" href="_execution_helpers_8cpp_source.xhtml#l00206">206</a> of file <a class="el" href="_execution_helpers_8cpp_source.xhtml">ExecutionHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;{</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="keywordtype">bool</span> is_valid = <span class="keyword">true</span>;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <a class="code" href="namespacearm__compute_1_1utility.xhtml#a067ebd28103d827b6ec17032e2344064">std::for_each</a>(std::begin(workload.inputs), std::end(workload.inputs), [&amp;](Tensor * input_tensor)</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    {</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        bool valid_input = (input_tensor != nullptr) &amp;&amp; input_tensor-&gt;call_accessor();</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        is_valid         = is_valid &amp;&amp; valid_input;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    });</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="keywordflow">return</span> is_valid;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1utility_xhtml_a067ebd28103d827b6ec17032e2344064"><div class="ttname"><a href="namespacearm__compute_1_1utility.xhtml#a067ebd28103d827b6ec17032e2344064">arm_compute::utility::for_each</a></div><div class="ttdeci">void for_each(F &amp;&amp;)</div><div class="ttdoc">Base case of for_each.</div><div class="ttdef"><b>Definition:</b> <a href="_utility_8h_source.xhtml#l00108">Utility.h:108</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_utility_8h_source.xhtml#l00108">arm_compute::utility::for_each()</a>, and <a class="el" href="_workload_8h_source.xhtml#l00100">ExecutionWorkload::inputs</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_manager_8cpp_source.xhtml#l00112">GraphManager::execute_graph()</a>.</p>

</div>
</div>
<a id="aaf7f4e1e2142802dd1c5a983ee156e77"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaf7f4e1e2142802dd1c5a983ee156e77">&#9670;&nbsp;</a></span>call_all_output_node_accessors()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool call_all_output_node_accessors </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_execution_workload.xhtml">ExecutionWorkload</a> &amp;&#160;</td>
          <td class="paramname"><em>workload</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Call all output node accessors. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">workload</td><td>Workload to execute</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if all the accessors expect more data </dd></dl>

<p class="definition">Definition at line <a class="el" href="_execution_helpers_8cpp_source.xhtml#l00256">256</a> of file <a class="el" href="_execution_helpers_8cpp_source.xhtml">ExecutionHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;{</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="keywordtype">bool</span> is_valid = <span class="keyword">true</span>;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <a class="code" href="namespacearm__compute_1_1utility.xhtml#a067ebd28103d827b6ec17032e2344064">std::for_each</a>(std::begin(workload.outputs), std::end(workload.outputs), [&amp;](Tensor * output_tensor)</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    {</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        bool valid_output = (output_tensor != nullptr) &amp;&amp; output_tensor-&gt;call_accessor();</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        is_valid          = is_valid &amp;&amp; valid_output;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    });</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <span class="keywordflow">return</span> is_valid;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1utility_xhtml_a067ebd28103d827b6ec17032e2344064"><div class="ttname"><a href="namespacearm__compute_1_1utility.xhtml#a067ebd28103d827b6ec17032e2344064">arm_compute::utility::for_each</a></div><div class="ttdeci">void for_each(F &amp;&amp;)</div><div class="ttdoc">Base case of for_each.</div><div class="ttdef"><b>Definition:</b> <a href="_utility_8h_source.xhtml#l00108">Utility.h:108</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_utility_8h_source.xhtml#l00108">arm_compute::utility::for_each()</a>, and <a class="el" href="_workload_8h_source.xhtml#l00101">ExecutionWorkload::outputs</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_manager_8cpp_source.xhtml#l00112">GraphManager::execute_graph()</a>.</p>

</div>
</div>
<a id="a7641ee3c6374e97c597ce6ee05545b59"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7641ee3c6374e97c597ce6ee05545b59">&#9670;&nbsp;</a></span>call_all_tasks()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void call_all_tasks </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_execution_workload.xhtml">ExecutionWorkload</a> &amp;&#160;</td>
          <td class="paramname"><em>workload</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Executes all tasks of a workload. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">workload</td><td>Workload to execute </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_execution_helpers_8cpp_source.xhtml#l00227">227</a> of file <a class="el" href="_execution_helpers_8cpp_source.xhtml">ExecutionHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;{</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(workload.ctx == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="comment">// Acquire memory for the transition buffers</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;mm_ctx : workload.ctx-&gt;memory_managers())</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    {</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        <span class="keywordflow">if</span>(mm_ctx.second.cross_group != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        {</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;            mm_ctx.second.cross_group-&gt;acquire();</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        }</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    }</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="comment">// Execute tasks</span></div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;task : workload.tasks)</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    {</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        task();</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    }</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <span class="comment">// Release memory for the transition buffers</span></div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;mm_ctx : workload.ctx-&gt;memory_managers())</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    {</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        <span class="keywordflow">if</span>(mm_ctx.second.cross_group != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        {</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;            mm_ctx.second.cross_group-&gt;release();</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        }</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    }</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_workload_8h_source.xhtml#l00104">ExecutionWorkload::ctx</a>, <a class="el" href="_graph_context_8cpp_source.xhtml#l00073">GraphContext::memory_managers()</a>, and <a class="el" href="_workload_8h_source.xhtml#l00102">ExecutionWorkload::tasks</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_manager_8cpp_source.xhtml#l00112">GraphManager::execute_graph()</a>.</p>

</div>
</div>
<a id="aa2dc91a4b4f5ad19935984344f1b67a1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa2dc91a4b4f5ad19935984344f1b67a1">&#9670;&nbsp;</a></span>call_tensor_accessor()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void call_tensor_accessor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml">Tensor</a> *&#160;</td>
          <td class="paramname"><em>tensor</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calls accessor of a given tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td>The tensor of which the accessor should be called </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_execution_helpers_8cpp_source.xhtml#l00187">187</a> of file <a class="el" href="_execution_helpers_8cpp_source.xhtml">ExecutionHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;{</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!tensor);</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    tensor-&gt;call_accessor();</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, and <a class="el" href="graph_2_tensor_8cpp_source.xhtml#l00075">Tensor::call_accessor()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_execution_helpers_8cpp_source.xhtml#l00193">call_all_const_node_accessors()</a>.</p>

</div>
</div>
<a id="a82d07d3d612bee8ff703226ff9d5d452"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a82d07d3d612bee8ff703226ff9d5d452">&#9670;&nbsp;</a></span>configure_all_nodes()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structarm__compute_1_1graph_1_1_execution_workload.xhtml">ExecutionWorkload</a> configure_all_nodes </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;&#160;</td>
          <td class="paramname"><em>ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>node_order</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Configures all nodes of graph. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> to configure the nodes </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ctx</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> context to use </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">node_order</td><td>The order to configure the nodes</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The execution workload </dd></dl>

<p class="definition">Definition at line <a class="el" href="_execution_helpers_8cpp_source.xhtml#l00133">133</a> of file <a class="el" href="_execution_helpers_8cpp_source.xhtml">ExecutionHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;{</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    ExecutionWorkload workload;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    workload.graph = &amp;g;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    workload.ctx   = &amp;ctx;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="comment">// Reserve memory for tasks</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    workload.tasks.reserve(node_order.size());</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="comment">// Create tasks</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;node_id : node_order)</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    {</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        <span class="keyword">auto</span> node = g.node(node_id);</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        <span class="keywordflow">if</span>(node != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        {</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            <a class="code" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">Target</a>                     assigned_target = node-&gt;assigned_target();</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;            backends::IDeviceBackend &amp;backend         = backends::BackendRegistry::get().get_backend(assigned_target);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;            std::unique_ptr&lt;IFunction&gt; func            = backend.configure_node(*node, ctx);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            <span class="keywordflow">if</span>(func != <span class="keyword">nullptr</span> || <a class="code" href="namespacearm__compute_1_1graph.xhtml#adaf571380533c75338da47ba3a68c199">is_utility_node</a>(node))</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            {</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                workload.tasks.emplace_back(ExecutionTask(std::move(func), node));</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            }</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        }</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    }</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="comment">// Add inputs and outputs</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;node : g.nodes())</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    {</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        <span class="keywordflow">if</span>(node != <span class="keyword">nullptr</span> &amp;&amp; node-&gt;type() == NodeType::Input)</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        {</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            workload.inputs.push_back(node-&gt;output(0));</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        }</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        <span class="keywordflow">if</span>(node != <span class="keyword">nullptr</span> &amp;&amp; node-&gt;type() == NodeType::Output)</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        {</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            workload.outputs.push_back(node-&gt;input(0));</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;            <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        }</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    }</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="keywordflow">return</span> workload;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1graph_xhtml_adaf571380533c75338da47ba3a68c199"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#adaf571380533c75338da47ba3a68c199">arm_compute::graph::is_utility_node</a></div><div class="ttdeci">bool is_utility_node(INode *node)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_utils_8h_source.xhtml#l00037">Utils.h:37</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a31488d29805a596498c0234ae392d35d"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">arm_compute::graph::Target</a></div><div class="ttdeci">Target</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00091">Types.h:91</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_node_8cpp_source.xhtml#l00198">INode::assigned_target()</a>, <a class="el" href="classarm__compute_1_1graph_1_1backends_1_1_i_device_backend.xhtml#af989fb4cdd6783b776e6b3feceb9fdcb">IDeviceBackend::configure_node()</a>, <a class="el" href="_workload_8h_source.xhtml#l00104">ExecutionWorkload::ctx</a>, <a class="el" href="_backend_registry_8cpp_source.xhtml#l00039">BackendRegistry::get()</a>, <a class="el" href="_backend_registry_8cpp_source.xhtml#l00051">BackendRegistry::get_backend()</a>, <a class="el" href="_workload_8h_source.xhtml#l00103">ExecutionWorkload::graph</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a324118a6721dd6b8a9b9f4e327df2bf5">arm_compute::graph::Input</a>, <a class="el" href="_workload_8h_source.xhtml#l00100">ExecutionWorkload::inputs</a>, <a class="el" href="arm__compute_2graph_2_utils_8h_source.xhtml#l00037">arm_compute::graph::is_utility_node()</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00204">Graph::node()</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00174">Graph::nodes()</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a29c2c02a361c9d7028472e5d92cd4a54">arm_compute::graph::Output</a>, <a class="el" href="_workload_8h_source.xhtml#l00101">ExecutionWorkload::outputs</a>, and <a class="el" href="_workload_8h_source.xhtml#l00102">ExecutionWorkload::tasks</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_manager_8cpp_source.xhtml#l00046">GraphManager::finalize_graph()</a>.</p>

</div>
</div>
<a id="a68c7ebb89adc0c2b21449cd15f6e8eba"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a68c7ebb89adc0c2b21449cd15f6e8eba">&#9670;&nbsp;</a></span>configure_all_tensors()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void configure_all_tensors </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Configures all nodes of a graph. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> to configure </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_execution_helpers_8cpp_source.xhtml#l00056">56</a> of file <a class="el" href="_execution_helpers_8cpp_source.xhtml">ExecutionHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;{</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keyword">auto</span> &amp;tensors = g.tensors();</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;tensor : tensors)</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    {</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <span class="keywordflow">if</span>(tensor &amp;&amp; tensor-&gt;handle() == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        {</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            <a class="code" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">Target</a>                         target  = tensor-&gt;desc().target;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            backends::IDeviceBackend      &amp;backend = backends::BackendRegistry::get().get_backend(target);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            std::unique_ptr&lt;ITensorHandle&gt; handle  = backend.create_tensor(*tensor);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(!handle, <span class="stringliteral">&quot;Couldn&#39;t create backend handle!&quot;</span>);</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            tensor-&gt;set_handle(std::move(handle));</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        }</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    }</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a0b0eb3235749a2909dc5a101afe59a1b"><div class="ttname"><a href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond, msg)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00456">Error.h:456</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a31488d29805a596498c0234ae392d35d"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">arm_compute::graph::Target</a></div><div class="ttdeci">Target</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00091">Types.h:91</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00456">ARM_COMPUTE_ERROR_ON_MSG</a>, <a class="el" href="classarm__compute_1_1graph_1_1backends_1_1_i_device_backend.xhtml#a0f46e4fef818b4114b3d09c799944046">IDeviceBackend::create_tensor()</a>, <a class="el" href="_backend_registry_8cpp_source.xhtml#l00039">BackendRegistry::get()</a>, <a class="el" href="_backend_registry_8cpp_source.xhtml#l00051">BackendRegistry::get_backend()</a>, and <a class="el" href="_graph_8cpp_source.xhtml#l00194">Graph::tensors()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_manager_8cpp_source.xhtml#l00046">GraphManager::finalize_graph()</a>.</p>

</div>
</div>
<a id="aa94e771d284b85d820f94b797eecee98"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa94e771d284b85d820f94b797eecee98">&#9670;&nbsp;</a></span>configure_transition_manager()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void configure_transition_manager </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;&#160;</td>
          <td class="paramname"><em>ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_execution_workload.xhtml">ExecutionWorkload</a> &amp;&#160;</td>
          <td class="paramname"><em>workload</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Configures transition manager and execution workload. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> to configure </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ctx</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> context </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">workload</td><td>Workload to configure </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_cross_layer_memory_manager_helpers_8cpp_source.xhtml#l00236">236</a> of file <a class="el" href="_cross_layer_memory_manager_helpers_8cpp_source.xhtml">CrossLayerMemoryManagerHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;{</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="comment">// Get const tensors (un-managed)</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    std::set&lt;ITensorHandle *&gt; const_tensors = get_const_handles(g);</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    std::vector&lt;TaskHandles&gt; tasks_handles;</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    TargetHandleCounter      target_handle_count;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="comment">// Count handles</span></div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;task : workload.tasks)</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    {</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        <span class="comment">// Populates IO handles</span></div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        tasks_handles.push_back(get_transition_handles(ctx, task, const_tensors));</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        <span class="comment">// Count handles</span></div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        count_input_handles_per_target(tasks_handles.back(), target_handle_count);</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    }</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="comment">// Setup memory managers</span></div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;hc : target_handle_count)</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    {</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        MemoryManagerContext *mm_ctx = ctx.memory_management_ctx(hc.first);</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        <span class="keywordflow">if</span>(mm_ctx != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        {</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;            <span class="keywordflow">if</span>(mm_ctx-&gt;cross_mm != <span class="keyword">nullptr</span> &amp;&amp; mm_ctx-&gt;cross_group != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;            {</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                <span class="comment">// Manage and allocate tensors</span></div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                configure_handle_lifetime(tasks_handles, hc.second);</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;            }</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        }</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    }</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;}</div></div><!-- fragment -->
<p class="reference">References <a class="el" href="_graph_context_8h_source.xhtml#l00045">MemoryManagerContext::cross_group</a>, <a class="el" href="_graph_context_8h_source.xhtml#l00044">MemoryManagerContext::cross_mm</a>, <a class="el" href="_graph_context_8cpp_source.xhtml#l00068">GraphContext::memory_management_ctx()</a>, and <a class="el" href="_workload_8h_source.xhtml#l00102">ExecutionWorkload::tasks</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_manager_8cpp_source.xhtml#l00046">GraphManager::finalize_graph()</a>.</p>

</div>
</div>
<a id="a501484d2b5f0213bbede4f44471c148b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a501484d2b5f0213bbede4f44471c148b">&#9670;&nbsp;</a></span>fuse_convolution_with_batch_normalization()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::graph::detail::fuse_convolution_with_batch_normalization </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1graph_1_1_edge.xhtml">Edge</a> *&#160;</td>
          <td class="paramname"><em>output_edge</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00043">43</a> of file <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml">NodeFusionMutator.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;{</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output_edge == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keyword">auto</span> *conv_node = arm_compute::utils::cast::polymorphic_downcast&lt;ConvolutionLayerNode *&gt;(output_edge-&gt;producer());</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keyword">auto</span> *bn_node   = arm_compute::utils::cast::polymorphic_downcast&lt;BatchNormalizationLayerNode *&gt;(output_edge-&gt;consumer());</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="comment">// Not fusing if number of groups is greater than 1</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keywordflow">if</span>(conv_node-&gt;num_groups() &gt; 1)</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    {</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        <span class="keywordflow">return</span>;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    }</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Fusing convolution node with ID : &quot;</span> &lt;&lt; output_edge-&gt;producer_id()</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;                                  &lt;&lt; <span class="stringliteral">&quot; with BatchNormalization Layer node with ID : &quot;</span> &lt;&lt; output_edge-&gt;consumer_id() &lt;&lt; std::endl);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="comment">// Prevent fusion if fused node has an output accessor</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordflow">if</span>(conv_node-&gt;output(0)-&gt;accessor() == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    {</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">Target</a> assigned_target = conv_node-&gt;assigned_target();</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="comment">// Extract conv inputs</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span>   conv_input_id   = conv_node-&gt;input_edge(0)-&gt;producer_id();</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span>   conv_weights_id = conv_node-&gt;input_edge(1)-&gt;producer_id();</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span>   <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>       = conv_node-&gt;convolution_info();</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span>   conv_method     = conv_node-&gt;convolution_method();</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span>   <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a>      = conv_node-&gt;num_groups();</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span>   <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>        = bn_node-&gt;fused_activation();</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <a class="code" href="namespacearm__compute_1_1graph.xhtml#ac85a46f3ebd3ab09f576a994ac2dce11">FastMathHint</a> fast_math_hint  = conv_node-&gt;fast_math_hint();</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <span class="comment">// Extract bn inputs</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> bn_mean_id = bn_node-&gt;input_edge(1)-&gt;producer_id();</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> bn_var_id  = bn_node-&gt;input_edge(2)-&gt;producer_id();</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a> = bn_node-&gt;epsilon();</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        <span class="comment">// Create the fused node</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> fused_id = g.add_node&lt;FusedConvolutionBatchNormalizationNode&gt;(<a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a>, conv_method, fast_math_hint, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>);</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        <span class="keywordflow">if</span>(conv_node-&gt;input_edge(2) != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        {</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            <span class="keyword">auto</span> conv_bias_id = conv_node-&gt;input_edge(2)-&gt;producer_id();</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            g.add_connection(conv_bias_id, 0, fused_id, 2);</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        }</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        <span class="comment">// Add connections from the conv/batch_norm inputs to the fused node</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        g.add_connection(conv_input_id, 0, fused_id, 0);</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        g.add_connection(conv_weights_id, 0, fused_id, 1);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        g.add_connection(bn_mean_id, 0, fused_id, 3);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        g.add_connection(bn_var_id, 0, fused_id, 4);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        <span class="keywordflow">if</span>(bn_node-&gt;input_edge(3) != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        {</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> bn_beta_id = bn_node-&gt;input_edge(3)-&gt;producer_id();</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            g.add_connection(bn_beta_id, 0, fused_id, 5);</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        }</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        <span class="keywordflow">if</span>(bn_node-&gt;input_edge(4) != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        {</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> bn_gamma_id = bn_node-&gt;input_edge(4)-&gt;producer_id();</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            g.add_connection(bn_gamma_id, 0, fused_id, 6);</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        }</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        <span class="keyword">auto</span>                     fused_node       = g.node(fused_id);</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        std::vector&lt;NodeIdxPair&gt; bn_driving_nodes = <a class="code" href="namespacearm__compute_1_1graph.xhtml#a634230f98a5918f214e47d913c452d3b">get_driving_nodes</a>(*bn_node);</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <span class="comment">// Extract batch normalization node accessor if any</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        <span class="keyword">auto</span> bn_node_accessor = bn_node-&gt;output(0)-&gt;extract_accessor();</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        <span class="keyword">auto</span> bn_node_name     = bn_node-&gt;name();</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <span class="comment">// Remove batch normalization node</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        g.remove_node(bn_node-&gt;id());</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        <span class="comment">// Get driving nodes of batch normalization node</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;driving_node : bn_driving_nodes)</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        {</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            g.add_connection(fused_id, 0, driving_node.node_id, driving_node.index);</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            <a class="code" href="namespacearm__compute_1_1graph.xhtml#a36fd3cfa2e1d33e59e1d3e95664d8b9c">configure_tensor</a>(fused_node-&gt;output(0));</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        }</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        <span class="comment">// Update fused node outputs</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        fused_node-&gt;output(0)-&gt;set_accessor(std::move(bn_node_accessor));</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        fused_node-&gt;set_assigned_target(assigned_target);</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        fused_node-&gt;set_common_node_parameters(NodeParams{ conv_node-&gt;name() + <span class="stringliteral">&quot;+&quot;</span> + bn_node_name, assigned_target });</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        <span class="comment">// Remove convolution node</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        g.remove_node(conv_node-&gt;id());</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    }</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    {</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Prevented fusion of convolution with batch normalization due to the presence of an output accessor\n&quot;</span>);</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    }</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a36fd3cfa2e1d33e59e1d3e95664d8b9c"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a36fd3cfa2e1d33e59e1d3e95664d8b9c">arm_compute::graph::configure_tensor</a></div><div class="ttdeci">void configure_tensor(Tensor *tensor)</div><div class="ttdoc">Configures tensor.</div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_utils_8cpp_source.xhtml#l00178">Utils.cpp:178</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a634230f98a5918f214e47d913c452d3b"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a634230f98a5918f214e47d913c452d3b">arm_compute::graph::get_driving_nodes</a></div><div class="ttdeci">std::vector&lt; NodeIdxPair &gt; get_driving_nodes(const INode &amp;node)</div><div class="ttdoc">Get the list of driving nodes of a given node.</div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_utils_8cpp_source.xhtml#l00158">Utils.cpp:158</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a1f8aca235c095df227e7444f6b237eb1"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">arm_compute::test::validation::act_info</a></div><div class="ttdeci">act_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00183">ConvolutionLayer.cpp:183</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a00525ff582f16038a1d3819aa44a23a3"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">arm_compute::test::validation::conv_info</a></div><div class="ttdeci">conv_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_winograd_8cpp_source.xhtml#l00597">Winograd.cpp:597</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a2270b3e1d20651d2d8341c858c890830"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">arm_compute::test::validation::num_groups</a></div><div class="ttdeci">const unsigned int num_groups</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00148">Im2Col.cpp:148</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a31488d29805a596498c0234ae392d35d"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">arm_compute::graph::Target</a></div><div class="ttdeci">Target</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00091">Types.h:91</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_ac85a46f3ebd3ab09f576a994ac2dce11"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#ac85a46f3ebd3ab09f576a994ac2dce11">arm_compute::graph::FastMathHint</a></div><div class="ttdeci">FastMathHint</div><div class="ttdoc">Enable or disable fast math for Convolution layer.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00125">Types.h:125</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a56952a8591a9d8481450ae707ae355e7"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">arm_compute::graph::NodeID</a></div><div class="ttdeci">unsigned int NodeID</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00064">Types.h:64</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_a300d153929a99c7b571d4cda3f7987a5"><div class="ttname"><a href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_VERBOSE(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00050">Logger.h:50</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1quantization_xhtml_a552dc3787d7ea1675f3e4e8993501d58"><div class="ttname"><a href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">arm_compute::quantization::epsilon</a></div><div class="ttdeci">constexpr float epsilon</div><div class="ttdef"><b>Definition:</b> <a href="_asymm_helpers_8cpp_source.xhtml#l00036">AsymmHelpers.cpp:36</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00183">arm_compute::test::validation::act_info</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00069">Graph::add_connection()</a>, <a class="el" href="graph_2_graph_8h_source.xhtml#l00235">Graph::add_node()</a>, <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="graph_2_logger_8h_source.xhtml#l00050">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>, <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml#l00178">arm_compute::graph::configure_tensor()</a>, <a class="el" href="_edge_8h_source.xhtml#l00092">Edge::consumer()</a>, <a class="el" href="_edge_8h_source.xhtml#l00076">Edge::consumer_id()</a>, <a class="el" href="_c_l_2_winograd_8cpp_source.xhtml#l00597">arm_compute::test::validation::conv_info</a>, <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00036">arm_compute::quantization::epsilon</a>, <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml#l00158">arm_compute::graph::get_driving_nodes()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00171">INode::input_edge()</a>, <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml#l00198">NodeParams::name</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00204">Graph::node()</a>, <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00148">arm_compute::test::validation::num_groups</a>, <a class="el" href="_edge_8h_source.xhtml#l00084">Edge::producer()</a>, <a class="el" href="_edge_8h_source.xhtml#l00068">Edge::producer_id()</a>, and <a class="el" href="_graph_8cpp_source.xhtml#l00035">Graph::remove_node()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00294">NodeFusionMutator::mutate()</a>.</p>

</div>
</div>
<a id="a07811ee0f5c19da2658a647e6d7dc2fa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a07811ee0f5c19da2658a647e6d7dc2fa">&#9670;&nbsp;</a></span>fuse_depthwise_convolution_with_batch_normalization()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::graph::detail::fuse_depthwise_convolution_with_batch_normalization </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1graph_1_1_edge.xhtml">Edge</a> *&#160;</td>
          <td class="paramname"><em>output_edge</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00136">136</a> of file <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml">NodeFusionMutator.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;{</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output_edge == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keyword">auto</span> *depth_conv_node = arm_compute::utils::cast::polymorphic_downcast&lt;DepthwiseConvolutionLayerNode *&gt;(output_edge-&gt;producer());</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="keyword">auto</span> *bn_node         = arm_compute::utils::cast::polymorphic_downcast&lt;BatchNormalizationLayerNode *&gt;(output_edge-&gt;consumer());</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Fusing depthwise convolution node with ID : &quot;</span> &lt;&lt; output_edge-&gt;producer_id()</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                                  &lt;&lt; <span class="stringliteral">&quot; with BatchNormalization Layer node with ID : &quot;</span> &lt;&lt; output_edge-&gt;consumer_id() &lt;&lt; std::endl);</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="comment">// Prevent fusion if fused node has an output accessor</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keywordflow">if</span>(depth_conv_node-&gt;output(0)-&gt;accessor() == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    {</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">Target</a> assigned_target = depth_conv_node-&gt;assigned_target();</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        <span class="comment">// Extract conv inputs</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> depth_conv_input_id = depth_conv_node-&gt;input_edge(0)-&gt;producer_id();</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> conv_weights_id     = depth_conv_node-&gt;input_edge(1)-&gt;producer_id();</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>           = depth_conv_node-&gt;convolution_info();</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> depth_conv_method   = depth_conv_node-&gt;depthwise_convolution_method();</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> depth_multiplier    = depth_conv_node-&gt;depth_multiplier();</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>            = bn_node-&gt;fused_activation();</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        <span class="comment">// Extract bn inputs</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> bn_mean_id  = bn_node-&gt;input_edge(1)-&gt;producer_id();</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> bn_var_id   = bn_node-&gt;input_edge(2)-&gt;producer_id();</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> bn_beta_id  = bn_node-&gt;input_edge(3)-&gt;producer_id();</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> bn_gamma_id = bn_node-&gt;input_edge(4)-&gt;producer_id();</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>     = bn_node-&gt;epsilon();</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        <span class="comment">// Create the fused node</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> fused_id = g.add_node&lt;FusedDepthwiseConvolutionBatchNormalizationNode&gt;(<a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, depth_multiplier, depth_conv_method, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>);</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        <span class="keywordflow">if</span>(depth_conv_node-&gt;input_edge(2) != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        {</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> conv_bias_id = depth_conv_node-&gt;input_edge(2)-&gt;producer_id();</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;            g.add_connection(conv_bias_id, 0, fused_id, 2);</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        }</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        <span class="comment">// Add connections from the conv/batch_norm inputs to the fused node</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        g.add_connection(depth_conv_input_id, 0, fused_id, 0);</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        g.add_connection(conv_weights_id, 0, fused_id, 1);</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        g.add_connection(bn_mean_id, 0, fused_id, 3);</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        g.add_connection(bn_var_id, 0, fused_id, 4);</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        g.add_connection(bn_beta_id, 0, fused_id, 5);</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        g.add_connection(bn_gamma_id, 0, fused_id, 6);</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        <span class="keyword">auto</span>                     fused_node       = g.node(fused_id);</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        std::vector&lt;NodeIdxPair&gt; bn_driving_nodes = <a class="code" href="namespacearm__compute_1_1graph.xhtml#a634230f98a5918f214e47d913c452d3b">get_driving_nodes</a>(*bn_node);</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        <span class="comment">// Extract batch normalization node accessor if any</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        <span class="keyword">auto</span> bn_node_accessor = bn_node-&gt;output(0)-&gt;extract_accessor();</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        <span class="keyword">auto</span> bn_node_name     = bn_node-&gt;name();</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        <span class="comment">// Remove batch normalization node</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        g.remove_node(bn_node-&gt;id());</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        <span class="comment">// Get driving nodes of batch normalization node</span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;driving_node : bn_driving_nodes)</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        {</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            g.add_connection(fused_id, 0, driving_node.node_id, driving_node.index);</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            <a class="code" href="namespacearm__compute_1_1graph.xhtml#a36fd3cfa2e1d33e59e1d3e95664d8b9c">configure_tensor</a>(fused_node-&gt;output(0));</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        }</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        <span class="comment">// Update fused node outputs</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        fused_node-&gt;output(0)-&gt;set_accessor(std::move(bn_node_accessor));</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        fused_node-&gt;set_assigned_target(assigned_target);</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        fused_node-&gt;set_common_node_parameters(NodeParams{ depth_conv_node-&gt;name() + <span class="stringliteral">&quot;+&quot;</span> + bn_node_name, assigned_target });</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        <span class="comment">// Remove convolution node</span></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        g.remove_node(depth_conv_node-&gt;id());</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    }</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    {</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Prevented fusion of depthwise convolution with batch normalization due to the presence of an output accessor\n&quot;</span>);</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    }</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a36fd3cfa2e1d33e59e1d3e95664d8b9c"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a36fd3cfa2e1d33e59e1d3e95664d8b9c">arm_compute::graph::configure_tensor</a></div><div class="ttdeci">void configure_tensor(Tensor *tensor)</div><div class="ttdoc">Configures tensor.</div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_utils_8cpp_source.xhtml#l00178">Utils.cpp:178</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a634230f98a5918f214e47d913c452d3b"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a634230f98a5918f214e47d913c452d3b">arm_compute::graph::get_driving_nodes</a></div><div class="ttdeci">std::vector&lt; NodeIdxPair &gt; get_driving_nodes(const INode &amp;node)</div><div class="ttdoc">Get the list of driving nodes of a given node.</div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_utils_8cpp_source.xhtml#l00158">Utils.cpp:158</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a1f8aca235c095df227e7444f6b237eb1"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">arm_compute::test::validation::act_info</a></div><div class="ttdeci">act_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00183">ConvolutionLayer.cpp:183</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a00525ff582f16038a1d3819aa44a23a3"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">arm_compute::test::validation::conv_info</a></div><div class="ttdeci">conv_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_winograd_8cpp_source.xhtml#l00597">Winograd.cpp:597</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a31488d29805a596498c0234ae392d35d"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">arm_compute::graph::Target</a></div><div class="ttdeci">Target</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00091">Types.h:91</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a56952a8591a9d8481450ae707ae355e7"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">arm_compute::graph::NodeID</a></div><div class="ttdeci">unsigned int NodeID</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00064">Types.h:64</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_a300d153929a99c7b571d4cda3f7987a5"><div class="ttname"><a href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_VERBOSE(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00050">Logger.h:50</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1quantization_xhtml_a552dc3787d7ea1675f3e4e8993501d58"><div class="ttname"><a href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">arm_compute::quantization::epsilon</a></div><div class="ttdeci">constexpr float epsilon</div><div class="ttdef"><b>Definition:</b> <a href="_asymm_helpers_8cpp_source.xhtml#l00036">AsymmHelpers.cpp:36</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00183">arm_compute::test::validation::act_info</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00069">Graph::add_connection()</a>, <a class="el" href="graph_2_graph_8h_source.xhtml#l00235">Graph::add_node()</a>, <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="graph_2_logger_8h_source.xhtml#l00050">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>, <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml#l00178">arm_compute::graph::configure_tensor()</a>, <a class="el" href="_edge_8h_source.xhtml#l00092">Edge::consumer()</a>, <a class="el" href="_edge_8h_source.xhtml#l00076">Edge::consumer_id()</a>, <a class="el" href="_c_l_2_winograd_8cpp_source.xhtml#l00597">arm_compute::test::validation::conv_info</a>, <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00036">arm_compute::quantization::epsilon</a>, <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml#l00158">arm_compute::graph::get_driving_nodes()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00171">INode::input_edge()</a>, <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml#l00198">NodeParams::name</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00204">Graph::node()</a>, <a class="el" href="_edge_8h_source.xhtml#l00084">Edge::producer()</a>, <a class="el" href="_edge_8h_source.xhtml#l00068">Edge::producer_id()</a>, and <a class="el" href="_graph_8cpp_source.xhtml#l00035">Graph::remove_node()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00294">NodeFusionMutator::mutate()</a>.</p>

</div>
</div>
<a id="a1f9900d626af4230ff61f851e8d5eab5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1f9900d626af4230ff61f851e8d5eab5">&#9670;&nbsp;</a></span>fuse_layer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::graph::detail::fuse_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::function&lt; bool(<a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> &amp;)&gt; const &amp;&#160;</td>
          <td class="paramname"><em>prec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const F&#160;</td>
          <td class="paramname"><em>fuse_fcn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Args &amp;&amp;...&#160;</td>
          <td class="paramname"><em>optional_arguments</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00263">263</a> of file <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml">NodeFusionMutator.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;{</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <span class="comment">// Not interested in the order of nodes</span></div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;node : g.nodes())</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    {</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        <span class="comment">// Check if the node is of type N and not a branching node</span></div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        <span class="keywordflow">if</span>(node &amp;&amp; node-&gt;type() == N1::node_type &amp;&amp; node-&gt;output_edges().size() == 1)</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        {</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> output_edge_id = *node-&gt;output_edges().begin();</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> output_edge    = g.edge(output_edge_id);</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;            <span class="comment">// Check if following node is an activation layer node</span></div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;            <span class="keywordflow">if</span>((output_edge != <span class="keyword">nullptr</span>) &amp;&amp; (output_edge-&gt;consumer() != <span class="keyword">nullptr</span>) &amp;&amp; (output_edge-&gt;consumer()-&gt;type() == N2::node_type) &amp;&amp; prec(*output_edge-&gt;producer()))</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;            {</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                fuse_fcn(g, output_edge, optional_arguments...);</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;            }</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        }</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    }</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;}</div></div><!-- fragment -->
<p class="reference">References <a class="el" href="_graph_8cpp_source.xhtml#l00214">Graph::edge()</a>, and <a class="el" href="_graph_8cpp_source.xhtml#l00174">Graph::nodes()</a>.</p>

</div>
</div>
<a id="a36b5b67e26dfdfbedf39e6703ef059bd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a36b5b67e26dfdfbedf39e6703ef059bd">&#9670;&nbsp;</a></span>fuse_node_with_activation()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::graph::detail::fuse_node_with_activation </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1graph_1_1_edge.xhtml">Edge</a> *&#160;</td>
          <td class="paramname"><em>output_edge</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::set&lt; <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9ea">Activation</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>supported_fused_activations</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00214">214</a> of file <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml">NodeFusionMutator.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;{</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output_edge == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <span class="keyword">auto</span> *n_node   = arm_compute::utils::cast::polymorphic_downcast&lt;N *&gt;(output_edge-&gt;producer());</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="keyword">auto</span> *act_node = arm_compute::utils::cast::polymorphic_downcast&lt;ActivationLayerNode *&gt;(output_edge-&gt;consumer());</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(act_node-&gt;output(0) == <span class="keyword">nullptr</span> || n_node-&gt;output(0) == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <span class="comment">// Check if activation is supported for fusion</span></div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <span class="keywordflow">if</span>(supported_fused_activations.count(act_node-&gt;activation_info().activation()) == 0)</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    {</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        <span class="keywordflow">return</span>;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    }</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Fusing node with ID : &quot;</span> &lt;&lt; output_edge-&gt;producer_id()</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                                  &lt;&lt; <span class="stringliteral">&quot; with Activation Layer node with ID : &quot;</span> &lt;&lt; output_edge-&gt;consumer_id() &lt;&lt; std::endl);</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="comment">// Prevent fusion if fused node has an output accessor</span></div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <span class="keywordflow">if</span>(n_node-&gt;output(0)-&gt;accessor() == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    {</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        <span class="comment">// Get driving nodes of activation node</span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        std::vector&lt;NodeIdxPair&gt; act_driving_nodes = <a class="code" href="namespacearm__compute_1_1graph.xhtml#a634230f98a5918f214e47d913c452d3b">get_driving_nodes</a>(*act_node);</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        <span class="comment">// Set activation info to fused node</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        n_node-&gt;set_fused_activation(act_node-&gt;activation_info());</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        <span class="comment">// Extract activation node accessor if any</span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        <span class="keyword">auto</span> act_node_accessor = act_node-&gt;output(0)-&gt;extract_accessor();</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        <span class="comment">// Remove activation node</span></div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        g.remove_node(act_node-&gt;id());</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        <span class="comment">// Update fused node outputs</span></div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;driving_node : act_driving_nodes)</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        {</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;            g.add_connection(n_node-&gt;id(), 0, driving_node.node_id, driving_node.index);</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        }</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        <span class="comment">// Update accessor to fused node</span></div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        n_node-&gt;output(0)-&gt;set_accessor(std::move(act_node_accessor));</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    }</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    {</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Prevented fusion of node with activation due to the presence of an output accessor\n&quot;</span>);</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    }</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a634230f98a5918f214e47d913c452d3b"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a634230f98a5918f214e47d913c452d3b">arm_compute::graph::get_driving_nodes</a></div><div class="ttdeci">std::vector&lt; NodeIdxPair &gt; get_driving_nodes(const INode &amp;node)</div><div class="ttdoc">Get the list of driving nodes of a given node.</div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_utils_8cpp_source.xhtml#l00158">Utils.cpp:158</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_a300d153929a99c7b571d4cda3f7987a5"><div class="ttname"><a href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_VERBOSE(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00050">Logger.h:50</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_graph_8cpp_source.xhtml#l00069">Graph::add_connection()</a>, <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="graph_2_logger_8h_source.xhtml#l00050">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>, <a class="el" href="_edge_8h_source.xhtml#l00092">Edge::consumer()</a>, <a class="el" href="_edge_8h_source.xhtml#l00076">Edge::consumer_id()</a>, <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml#l00158">arm_compute::graph::get_driving_nodes()</a>, <a class="el" href="_edge_8h_source.xhtml#l00084">Edge::producer()</a>, <a class="el" href="_edge_8h_source.xhtml#l00068">Edge::producer_id()</a>, and <a class="el" href="_graph_8cpp_source.xhtml#l00035">Graph::remove_node()</a>.</p>

</div>
</div>
<a id="a17b5e700b317feb19fc3cefd23a1d8bb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a17b5e700b317feb19fc3cefd23a1d8bb">&#9670;&nbsp;</a></span>prepare_all_tasks()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void prepare_all_tasks </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_execution_workload.xhtml">ExecutionWorkload</a> &amp;&#160;</td>
          <td class="paramname"><em>workload</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Prepares all tasks for execution. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">workload</td><td>Workload to prepare </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_execution_helpers_8cpp_source.xhtml#l00217">217</a> of file <a class="el" href="_execution_helpers_8cpp_source.xhtml">ExecutionHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;{</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(workload.graph == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;task : workload.tasks)</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    {</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        task.prepare();</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a28280ac6b0db4c2385ac8c18a4ad8f3c">release_unused_tensors</a>(*workload.graph);</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    }</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1detail_xhtml_a28280ac6b0db4c2385ac8c18a4ad8f3c"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1detail.xhtml#a28280ac6b0db4c2385ac8c18a4ad8f3c">arm_compute::graph::detail::release_unused_tensors</a></div><div class="ttdeci">void release_unused_tensors(Graph &amp;g)</div><div class="ttdoc">Release the memory of all unused const nodes.</div><div class="ttdef"><b>Definition:</b> <a href="_execution_helpers_8cpp_source.xhtml#l00176">ExecutionHelpers.cpp:176</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_workload_8h_source.xhtml#l00103">ExecutionWorkload::graph</a>, <a class="el" href="_execution_helpers_8cpp_source.xhtml#l00176">release_unused_tensors()</a>, and <a class="el" href="_workload_8h_source.xhtml#l00102">ExecutionWorkload::tasks</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_manager_8cpp_source.xhtml#l00046">GraphManager::finalize_graph()</a>.</p>

</div>
</div>
<a id="a28280ac6b0db4c2385ac8c18a4ad8f3c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a28280ac6b0db4c2385ac8c18a4ad8f3c">&#9670;&nbsp;</a></span>release_unused_tensors()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void release_unused_tensors </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Release the memory of all unused const nodes. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> to release the memory from </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_execution_helpers_8cpp_source.xhtml#l00176">176</a> of file <a class="el" href="_execution_helpers_8cpp_source.xhtml">ExecutionHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;{</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;tensor : g.tensors())</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    {</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        <span class="keywordflow">if</span>(tensor != <span class="keyword">nullptr</span> &amp;&amp; tensor-&gt;handle() != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        {</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;            tensor-&gt;handle()-&gt;release_if_unused();</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        }</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    }</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;}</div></div><!-- fragment -->
<p class="reference">References <a class="el" href="_graph_8cpp_source.xhtml#l00194">Graph::tensors()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_execution_helpers_8cpp_source.xhtml#l00217">prepare_all_tasks()</a>.</p>

</div>
</div>
<a id="aa1d326a80e16fe0d4034637672d3b122"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa1d326a80e16fe0d4034637672d3b122">&#9670;&nbsp;</a></span>validate_all_nodes()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void validate_all_nodes </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Validates all nodes. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> to validate </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_execution_helpers_8cpp_source.xhtml#l00039">39</a> of file <a class="el" href="_execution_helpers_8cpp_source.xhtml">ExecutionHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;{</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keyword">auto</span> &amp;nodes = g.nodes();</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="comment">// Create tasks</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;node : nodes)</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    {</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        <span class="keywordflow">if</span>(node != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        {</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;            <a class="code" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">Target</a>                    assigned_target = node-&gt;assigned_target();</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;            backends::IDeviceBackend &amp;backend         = backends::BackendRegistry::get().get_backend(assigned_target);</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;            Status                    status          = backend.validate_node(*node);</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;            <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(!<span class="keywordtype">bool</span>(status), status.error_description().c_str());</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        }</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    }</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a0b0eb3235749a2909dc5a101afe59a1b"><div class="ttname"><a href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond, msg)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00456">Error.h:456</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a31488d29805a596498c0234ae392d35d"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">arm_compute::graph::Target</a></div><div class="ttdeci">Target</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00091">Types.h:91</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00456">ARM_COMPUTE_ERROR_ON_MSG</a>, <a class="el" href="_error_8h_source.xhtml#l00097">Status::error_description()</a>, <a class="el" href="_backend_registry_8cpp_source.xhtml#l00039">BackendRegistry::get()</a>, <a class="el" href="_backend_registry_8cpp_source.xhtml#l00051">BackendRegistry::get_backend()</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00174">Graph::nodes()</a>, and <a class="el" href="classarm__compute_1_1graph_1_1backends_1_1_i_device_backend.xhtml#a2ad722cd593bc5300108c8837ce5c980">IDeviceBackend::validate_node()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_manager_8cpp_source.xhtml#l00046">GraphManager::finalize_graph()</a>.</p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1graph.xhtml">graph</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1graph_1_1detail.xhtml">detail</a></li>
    <li class="footer">Generated on Fri Feb 21 2020 11:10:32 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
