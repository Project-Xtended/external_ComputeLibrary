<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/runtime/CL/CLPyramid.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.02.1</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('_c_l_pyramid_8cpp_source.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">CLPyramid.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_c_l_pyramid_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2016-2019 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_c_l_pyramid_8h.xhtml">arm_compute/runtime/CL/CLPyramid.h</a>&quot;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_error_8h.xhtml">arm_compute/core/Error.h</a>&quot;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_pyramid_info_8h.xhtml">arm_compute/core/PyramidInfo.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_tensor_info_8h.xhtml">arm_compute/core/TensorInfo.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_tensor_shape_8h.xhtml">arm_compute/core/TensorShape.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_toolchain_support_8h.xhtml">support/ToolchainSupport.h</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &lt;array&gt;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &lt;cmath&gt;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a>;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_pyramid.xhtml#a24edddb8cac90e092ecbd4a2d2a1ce59">   37</a></span>&#160;<a class="code" href="classarm__compute_1_1_c_l_pyramid.xhtml#a24edddb8cac90e092ecbd4a2d2a1ce59">CLPyramid::CLPyramid</a>()</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    : _info(), _pyramid()</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;}</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_pyramid.xhtml#ae4e11cca76492d63009564d1ea466dff">   42</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_pyramid.xhtml#ae4e11cca76492d63009564d1ea466dff">CLPyramid::init</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pyramid_info.xhtml">PyramidInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>)</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;{</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    internal_init(<a class="code" href="classarm__compute_1_1_c_l_pyramid.xhtml#a7e9f724340af5b795b21a00d35eeb28e">info</a>, <span class="keyword">false</span>);</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;}</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_pyramid.xhtml#a0dd473fd109df68b4747ebf0f586a115">   47</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_pyramid.xhtml#a0dd473fd109df68b4747ebf0f586a115">CLPyramid::init_auto_padding</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pyramid_info.xhtml">PyramidInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>)</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;{</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    internal_init(<a class="code" href="classarm__compute_1_1_c_l_pyramid.xhtml#a7e9f724340af5b795b21a00d35eeb28e">info</a>, <span class="keyword">true</span>);</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;}</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="keywordtype">void</span> CLPyramid::internal_init(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pyramid_info.xhtml">PyramidInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>, <span class="keywordtype">bool</span> auto_padding)</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;{</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    _info = <a class="code" href="classarm__compute_1_1_c_l_pyramid.xhtml#a7e9f724340af5b795b21a00d35eeb28e">info</a>;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    _pyramid.resize(_info.<a class="code" href="classarm__compute_1_1_pyramid_info.xhtml#aa2fea6640d2bd5de24d0e0c2433faab6">num_levels</a>());</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keywordtype">size_t</span>      <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>            = _info.<a class="code" href="classarm__compute_1_1_pyramid_info.xhtml#a9ce99f5dfa1514cb108665e3810b2c4c">width</a>();</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keywordtype">size_t</span>      h            = _info.<a class="code" href="classarm__compute_1_1_pyramid_info.xhtml#adc662cea5b05cd9852d5a4538586d662">height</a>();</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keywordtype">size_t</span>      ref_w        = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordtype">size_t</span>      ref_h        = h;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span>  is_orb_scale = (<a class="code" href="namespacearm__compute.xhtml#a2ebcd5423d5fba468e7debd2e1aabe91">SCALE_PYRAMID_ORB</a> == _info.<a class="code" href="classarm__compute_1_1_pyramid_info.xhtml#ade87abafbd6b200b22de988f32b66dea">scale</a>());</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> tensor_shape = _info.<a class="code" href="classarm__compute_1_1_pyramid_info.xhtml#a82c695f3a9ca51633ea8743d5c09f122">tensor_shape</a>();</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="comment">// Note: Look-up table used by the OpenVX sample implementation</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keyword">const</span> std::array&lt;float, 4&gt; c_orbscale =</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    {</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        {</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            0.5f,</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            <a class="code" href="namespacearm__compute.xhtml#a2ebcd5423d5fba468e7debd2e1aabe91">SCALE_PYRAMID_ORB</a>,</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            <a class="code" href="namespacearm__compute.xhtml#a2ebcd5423d5fba468e7debd2e1aabe91">SCALE_PYRAMID_ORB</a> * <a class="code" href="namespacearm__compute.xhtml#a2ebcd5423d5fba468e7debd2e1aabe91">SCALE_PYRAMID_ORB</a>,</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;            <a class="code" href="namespacearm__compute.xhtml#a2ebcd5423d5fba468e7debd2e1aabe91">SCALE_PYRAMID_ORB</a> *<a class="code" href="namespacearm__compute.xhtml#a2ebcd5423d5fba468e7debd2e1aabe91">SCALE_PYRAMID_ORB</a> * <a class="code" href="namespacearm__compute.xhtml#a2ebcd5423d5fba468e7debd2e1aabe91">SCALE_PYRAMID_ORB</a></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        }</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    };</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i = 0; i &lt; _info.<a class="code" href="classarm__compute_1_1_pyramid_info.xhtml#aa2fea6640d2bd5de24d0e0c2433faab6">num_levels</a>(); ++i)</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    {</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> tensor_info(tensor_shape, _info.<a class="code" href="classarm__compute_1_1_pyramid_info.xhtml#a7047a267776924cf166c301310f03a2c">format</a>());</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        <span class="keywordflow">if</span>(auto_padding)</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        {</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            tensor_info.<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a907f837b924945ad1981c8fe8eca61e4">auto_padding</a>();</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        }</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        _pyramid[i].allocator()-&gt;init(tensor_info);</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <span class="keywordflow">if</span>(is_orb_scale)</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        {</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">float</span> orb_scale = c_orbscale[(i + 1) % 4];</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>                     = std::ceil(ref_w * orb_scale);</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            h                     = std::ceil(ref_h * orb_scale);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            <span class="keywordflow">if</span>(0 == ((i + 1) % 4))</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            {</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                ref_w = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                ref_h = h;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            }</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        }</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        {</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a> = (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a> + 1) * _info.<a class="code" href="classarm__compute_1_1_pyramid_info.xhtml#ade87abafbd6b200b22de988f32b66dea">scale</a>();</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            h = (h + 1) * _info.<a class="code" href="classarm__compute_1_1_pyramid_info.xhtml#ade87abafbd6b200b22de988f32b66dea">scale</a>();</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        }</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <span class="comment">// Update tensor_shape</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        tensor_shape.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#a9c54fb6cea3557692fe7c00c40bb40ad">set</a>(0, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>);</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        tensor_shape.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#a9c54fb6cea3557692fe7c00c40bb40ad">set</a>(1, h);</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    }</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;}</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_pyramid.xhtml#acaefe811b78a2fdc4a0dba0c4029c3ef">  110</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_pyramid.xhtml#acaefe811b78a2fdc4a0dba0c4029c3ef">CLPyramid::allocate</a>()</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;{</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i = 0; i &lt; _info.<a class="code" href="classarm__compute_1_1_pyramid_info.xhtml#aa2fea6640d2bd5de24d0e0c2433faab6">num_levels</a>(); ++i)</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    {</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        _pyramid[i].allocator()-&gt;allocate();</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    }</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;}</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_pyramid.xhtml#a7e9f724340af5b795b21a00d35eeb28e">  118</a></span>&#160;<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pyramid_info.xhtml">PyramidInfo</a> *<a class="code" href="classarm__compute_1_1_c_l_pyramid.xhtml#a7e9f724340af5b795b21a00d35eeb28e">CLPyramid::info</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keywordflow">return</span> &amp;_info;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;}</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_pyramid.xhtml#a6f6fce8ca90f3e9a62e2cb48a07047f4">  123</a></span>&#160;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a> *<a class="code" href="classarm__compute_1_1_c_l_pyramid.xhtml#a6f6fce8ca90f3e9a62e2cb48a07047f4">CLPyramid::get_pyramid_level</a>(<span class="keywordtype">size_t</span> index)<span class="keyword"> const</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(index &gt;= _info.<a class="code" href="classarm__compute_1_1_pyramid_info.xhtml#aa2fea6640d2bd5de24d0e0c2433faab6">num_levels</a>());</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keywordflow">return</span> &amp;_pyramid[index];</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;}</div><div class="ttc" id="namespacearm__compute_xhtml_a2ebcd5423d5fba468e7debd2e1aabe91"><div class="ttname"><a href="namespacearm__compute.xhtml#a2ebcd5423d5fba468e7debd2e1aabe91">arm_compute::SCALE_PYRAMID_ORB</a></div><div class="ttdeci">constexpr float SCALE_PYRAMID_ORB</div><div class="ttdoc">Constant value used to indicate a ORB scaled pyramid.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00112">Types.h:112</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pyramid_info_xhtml_a82c695f3a9ca51633ea8743d5c09f122"><div class="ttname"><a href="classarm__compute_1_1_pyramid_info.xhtml#a82c695f3a9ca51633ea8743d5c09f122">arm_compute::PyramidInfo::tensor_shape</a></div><div class="ttdeci">const TensorShape &amp; tensor_shape() const</div><div class="ttdoc">Return the TensorShape of the o-th level tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_pyramid_info_8cpp_source.xhtml#l00092">PyramidInfo.cpp:92</a></div></div>
<div class="ttc" id="_pyramid_info_8h_xhtml"><div class="ttname"><a href="_pyramid_info_8h.xhtml">PyramidInfo.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_pyramid_xhtml_a0dd473fd109df68b4747ebf0f586a115"><div class="ttname"><a href="classarm__compute_1_1_c_l_pyramid.xhtml#a0dd473fd109df68b4747ebf0f586a115">arm_compute::CLPyramid::init_auto_padding</a></div><div class="ttdeci">void init_auto_padding(const PyramidInfo &amp;info)</div><div class="ttdoc">Initialize pyramid data-object using the given Pyramid's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_pyramid_8cpp_source.xhtml#l00047">CLPyramid.cpp:47</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a1a367830ae09bf6138df822888ec1d71"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">arm_compute::test::validation::w</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; w</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00156">DFT.cpp:156</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml">arm_compute::TensorShape</a></div><div class="ttdoc">Shape of a tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00039">TensorShape.h:39</a></div></div>
<div class="ttc" id="_toolchain_support_8h_xhtml"><div class="ttname"><a href="_toolchain_support_8h.xhtml">ToolchainSupport.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_pyramid_xhtml_a7e9f724340af5b795b21a00d35eeb28e"><div class="ttname"><a href="classarm__compute_1_1_c_l_pyramid.xhtml#a7e9f724340af5b795b21a00d35eeb28e">arm_compute::CLPyramid::info</a></div><div class="ttdeci">const PyramidInfo * info() const override</div><div class="ttdoc">Interface to be implemented by the child class to return the Pyramid's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_pyramid_8cpp_source.xhtml#l00118">CLPyramid.cpp:118</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pyramid_info_xhtml_a7047a267776924cf166c301310f03a2c"><div class="ttname"><a href="classarm__compute_1_1_pyramid_info.xhtml#a7047a267776924cf166c301310f03a2c">arm_compute::PyramidInfo::format</a></div><div class="ttdeci">Format format() const</div><div class="ttdoc">Return the image format of all tensor in the pyramid.</div><div class="ttdef"><b>Definition:</b> <a href="_pyramid_info_8cpp_source.xhtml#l00097">PyramidInfo.cpp:97</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="_tensor_info_8h_xhtml"><div class="ttname"><a href="_tensor_info_8h.xhtml">TensorInfo.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml_a907f837b924945ad1981c8fe8eca61e4"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#a907f837b924945ad1981c8fe8eca61e4">arm_compute::TensorInfo::auto_padding</a></div><div class="ttdeci">bool auto_padding() override</div><div class="ttdoc">Update the offset to the first element and the strides to automatically computed values.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_tensor_info_8cpp_source.xhtml#l00222">TensorInfo.cpp:222</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2020 ARM Limited.</div><div class="ttdef"><b>Definition:</b> <a href="00__introduction_8dox_source.xhtml#l00024">00_introduction.dox:24</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_pyramid_xhtml_ae4e11cca76492d63009564d1ea466dff"><div class="ttname"><a href="classarm__compute_1_1_c_l_pyramid.xhtml#ae4e11cca76492d63009564d1ea466dff">arm_compute::CLPyramid::init</a></div><div class="ttdeci">void init(const PyramidInfo &amp;info)</div><div class="ttdoc">Initialize pyramid data-object using the given Pyramid's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_pyramid_8cpp_source.xhtml#l00042">CLPyramid.cpp:42</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_pyramid_xhtml_acaefe811b78a2fdc4a0dba0c4029c3ef"><div class="ttname"><a href="classarm__compute_1_1_c_l_pyramid.xhtml#acaefe811b78a2fdc4a0dba0c4029c3ef">arm_compute::CLPyramid::allocate</a></div><div class="ttdeci">void allocate()</div><div class="ttdoc">Allocate the planes in the pyramid.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_pyramid_8cpp_source.xhtml#l00110">CLPyramid.cpp:110</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_pyramid_xhtml_a24edddb8cac90e092ecbd4a2d2a1ce59"><div class="ttname"><a href="classarm__compute_1_1_c_l_pyramid.xhtml#a24edddb8cac90e092ecbd4a2d2a1ce59">arm_compute::CLPyramid::CLPyramid</a></div><div class="ttdeci">CLPyramid()</div><div class="ttdoc">Default constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_pyramid_8cpp_source.xhtml#l00037">CLPyramid.cpp:37</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pyramid_info_xhtml_ade87abafbd6b200b22de988f32b66dea"><div class="ttname"><a href="classarm__compute_1_1_pyramid_info.xhtml#ade87abafbd6b200b22de988f32b66dea">arm_compute::PyramidInfo::scale</a></div><div class="ttdeci">float scale() const</div><div class="ttdoc">Return the scale factor of the pyramid.</div><div class="ttdef"><b>Definition:</b> <a href="_pyramid_info_8cpp_source.xhtml#l00102">PyramidInfo.cpp:102</a></div></div>
<div class="ttc" id="_error_8h_xhtml"><div class="ttname"><a href="_error_8h.xhtml">Error.h</a></div></div>
<div class="ttc" id="_c_l_pyramid_8h_xhtml"><div class="ttname"><a href="_c_l_pyramid_8h.xhtml">CLPyramid.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pyramid_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_pyramid_info.xhtml">arm_compute::PyramidInfo</a></div><div class="ttdoc">Store the Pyramid's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_pyramid_info_8h_source.xhtml#l00035">PyramidInfo.h:35</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_pyramid_xhtml_a6f6fce8ca90f3e9a62e2cb48a07047f4"><div class="ttname"><a href="classarm__compute_1_1_c_l_pyramid.xhtml#a6f6fce8ca90f3e9a62e2cb48a07047f4">arm_compute::CLPyramid::get_pyramid_level</a></div><div class="ttdeci">CLTensor * get_pyramid_level(size_t index) const override</div><div class="ttdoc">Retrieves a level of the pyramid as a ITensor pointer.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_pyramid_8cpp_source.xhtml#l00123">CLPyramid.cpp:123</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_shape_xhtml_a9c54fb6cea3557692fe7c00c40bb40ad"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml#a9c54fb6cea3557692fe7c00c40bb40ad">arm_compute::TensorShape::set</a></div><div class="ttdeci">TensorShape &amp; set(size_t dimension, size_t value, bool apply_dim_correction=true)</div><div class="ttdoc">Accessor to set the value of one of the dimensions.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00078">TensorShape.h:78</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml">arm_compute::TensorInfo</a></div><div class="ttdoc">Store the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00045">TensorInfo.h:45</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pyramid_info_xhtml_a9ce99f5dfa1514cb108665e3810b2c4c"><div class="ttname"><a href="classarm__compute_1_1_pyramid_info.xhtml#a9ce99f5dfa1514cb108665e3810b2c4c">arm_compute::PyramidInfo::width</a></div><div class="ttdeci">size_t width() const</div><div class="ttdoc">Return the width of the 0th level tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_pyramid_info_8cpp_source.xhtml#l00082">PyramidInfo.cpp:82</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pyramid_info_xhtml_aa2fea6640d2bd5de24d0e0c2433faab6"><div class="ttname"><a href="classarm__compute_1_1_pyramid_info.xhtml#aa2fea6640d2bd5de24d0e0c2433faab6">arm_compute::PyramidInfo::num_levels</a></div><div class="ttdeci">size_t num_levels() const</div><div class="ttdoc">Return the number of the pyramid levels.</div><div class="ttdef"><b>Definition:</b> <a href="_pyramid_info_8cpp_source.xhtml#l00077">PyramidInfo.cpp:77</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a4f4125dba5283887b34f889b1c615c0c"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">arm_compute::test::validation::info</a></div><div class="ttdeci">info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00182">ConvolutionLayer.cpp:182</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pyramid_info_xhtml_adc662cea5b05cd9852d5a4538586d662"><div class="ttname"><a href="classarm__compute_1_1_pyramid_info.xhtml#adc662cea5b05cd9852d5a4538586d662">arm_compute::PyramidInfo::height</a></div><div class="ttdeci">size_t height() const</div><div class="ttdoc">Return the height of the 0th level tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_pyramid_info_8cpp_source.xhtml#l00087">PyramidInfo.cpp:87</a></div></div>
<div class="ttc" id="_tensor_shape_8h_xhtml"><div class="ttname"><a href="_tensor_shape_8h.xhtml">TensorShape.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_tensor.xhtml">arm_compute::CLTensor</a></div><div class="ttdoc">Basic implementation of the OpenCL tensor interface.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tensor_8h_source.xhtml#l00041">CLTensor.h:41</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_bf9f26469d00835ba20ff8d80ee5a804.xhtml">runtime</a></li><li class="navelem"><a class="el" href="dir_43c3fdbf778d1fd99e2e38f09fddd920.xhtml">CL</a></li><li class="navelem"><a class="el" href="_c_l_pyramid_8cpp.xhtml">CLPyramid.cpp</a></li>
    <li class="footer">Generated on Thu Mar 5 2020 16:07:02 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
