<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute::graph::backends::detail Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.02.1</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">arm_compute::graph::backends::detail Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1backends_1_1detail_1_1_backend_registrar.xhtml">BackendRegistrar</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper class to statically register a backend.  <a href="classarm__compute_1_1graph_1_1backends_1_1detail_1_1_backend_registrar.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a69dd1fc17c7a15f4125873be182c8c76"><td class="memTemplParams" colspan="2">template&lt;typename TargetInfo &gt; </td></tr>
<tr class="memitem:a69dd1fc17c7a15f4125873be182c8c76"><td class="memTemplItemLeft" align="right" valign="top">TargetInfo::TensorType *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a69dd1fc17c7a15f4125873be182c8c76">get_backing_tensor</a> (<a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml">arm_compute::graph::Tensor</a> *tensor)</td></tr>
<tr class="memdesc:a69dd1fc17c7a15f4125873be182c8c76"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns backing tensor of a given tensor.  <a href="#a69dd1fc17c7a15f4125873be182c8c76">More...</a><br /></td></tr>
<tr class="separator:a69dd1fc17c7a15f4125873be182c8c76"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa6fabefcb8c4bd308219565ddcf00928"><td class="memTemplParams" colspan="2">template&lt;typename TargetInfo &gt; </td></tr>
<tr class="memitem:aa6fabefcb8c4bd308219565ddcf00928"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#aa6fabefcb8c4bd308219565ddcf00928">validate_node</a> (const <a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> &amp;node, size_t num_expected_inputs, size_t num_expected_outputs)</td></tr>
<tr class="separator:aa6fabefcb8c4bd308219565ddcf00928"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0f5afb0ddd5aec3a8e4df3c56d7d91f4"><td class="memTemplParams" colspan="2">template&lt;typename ActivationLayerFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:a0f5afb0ddd5aec3a8e4df3c56d7d91f4"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a> &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a0f5afb0ddd5aec3a8e4df3c56d7d91f4">create_activation_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_activation_layer_node.xhtml">ActivationLayerNode</a> &amp;node)</td></tr>
<tr class="memdesc:a0f5afb0ddd5aec3a8e4df3c56d7d91f4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a backend activation layer function.  <a href="#a0f5afb0ddd5aec3a8e4df3c56d7d91f4">More...</a><br /></td></tr>
<tr class="separator:a0f5afb0ddd5aec3a8e4df3c56d7d91f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d1a73ab4a0b267033a569c46813b9d5"><td class="memTemplParams" colspan="2">template&lt;typename BatchNormalizationLayerFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:a5d1a73ab4a0b267033a569c46813b9d5"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a> &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a5d1a73ab4a0b267033a569c46813b9d5">create_batch_normalization_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_batch_normalization_layer_node.xhtml">BatchNormalizationLayerNode</a> &amp;node)</td></tr>
<tr class="memdesc:a5d1a73ab4a0b267033a569c46813b9d5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend batch normalization layer function.  <a href="#a5d1a73ab4a0b267033a569c46813b9d5">More...</a><br /></td></tr>
<tr class="separator:a5d1a73ab4a0b267033a569c46813b9d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7f44d10197128d3f478626b5c68b3c35"><td class="memTemplParams" colspan="2">template&lt;typename FusedLayerTypes , typename TargetInfo &gt; </td></tr>
<tr class="memitem:a7f44d10197128d3f478626b5c68b3c35"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a> &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a7f44d10197128d3f478626b5c68b3c35">create_fused_convolution_batch_normalization_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_fused_convolution_batch_normalization_node.xhtml">FusedConvolutionBatchNormalizationNode</a> &amp;node, <a class="el" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;ctx)</td></tr>
<tr class="memdesc:a7f44d10197128d3f478626b5c68b3c35"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend batch normalization layer function.  <a href="#a7f44d10197128d3f478626b5c68b3c35">More...</a><br /></td></tr>
<tr class="separator:a7f44d10197128d3f478626b5c68b3c35"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7ec865e1ee296647ec995b501e5ceb8b"><td class="memTemplParams" colspan="2">template&lt;typename FusedLayerTypes , typename TargetInfo &gt; </td></tr>
<tr class="memitem:a7ec865e1ee296647ec995b501e5ceb8b"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a> &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a7ec865e1ee296647ec995b501e5ceb8b">create_fused_depthwise_convolution_batch_normalization_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_fused_depthwise_convolution_batch_normalization_node.xhtml">FusedDepthwiseConvolutionBatchNormalizationNode</a> &amp;node, <a class="el" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;ctx)</td></tr>
<tr class="memdesc:a7ec865e1ee296647ec995b501e5ceb8b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend fused depthwise convolution batch normalization layer function.  <a href="#a7ec865e1ee296647ec995b501e5ceb8b">More...</a><br /></td></tr>
<tr class="separator:a7ec865e1ee296647ec995b501e5ceb8b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab3787ac008a709edda8d347370bbad61"><td class="memTemplParams" colspan="2">template&lt;typename BoundingBoxTransformLayerFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:ab3787ac008a709edda8d347370bbad61"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a> &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ab3787ac008a709edda8d347370bbad61">create_bounding_box_transform_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_bounding_box_transform_layer_node.xhtml">BoundingBoxTransformLayerNode</a> &amp;node)</td></tr>
<tr class="memdesc:ab3787ac008a709edda8d347370bbad61"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend bounding box transform layer function.  <a href="#ab3787ac008a709edda8d347370bbad61">More...</a><br /></td></tr>
<tr class="separator:ab3787ac008a709edda8d347370bbad61"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f5c14020836599056281fe52d7e9dd3"><td class="memTemplParams" colspan="2">template&lt;typename ChannelShuffleLayerFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:a3f5c14020836599056281fe52d7e9dd3"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a> &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a3f5c14020836599056281fe52d7e9dd3">create_channel_shuffle_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_channel_shuffle_layer_node.xhtml">ChannelShuffleLayerNode</a> &amp;node)</td></tr>
<tr class="memdesc:a3f5c14020836599056281fe52d7e9dd3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend channel shuffle layer function.  <a href="#a3f5c14020836599056281fe52d7e9dd3">More...</a><br /></td></tr>
<tr class="separator:a3f5c14020836599056281fe52d7e9dd3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a627f6bdc4a7de6dbb03acb3d8b3a4d6d"><td class="memTemplParams" colspan="2">template&lt;typename ConcatenateLayerFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:a627f6bdc4a7de6dbb03acb3d8b3a4d6d"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1_i_function.xhtml">arm_compute::IFunction</a> &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a627f6bdc4a7de6dbb03acb3d8b3a4d6d">create_concatenate_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_concatenate_layer_node.xhtml">ConcatenateLayerNode</a> &amp;node)</td></tr>
<tr class="memdesc:a627f6bdc4a7de6dbb03acb3d8b3a4d6d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend layer concatenate function.  <a href="#a627f6bdc4a7de6dbb03acb3d8b3a4d6d">More...</a><br /></td></tr>
<tr class="separator:a627f6bdc4a7de6dbb03acb3d8b3a4d6d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e38014fa1e7e08dcbf3b5f8c3bdb81e"><td class="memTemplParams" colspan="2">template&lt;typename ConvolutionLayerFunctions , typename TargetInfo &gt; </td></tr>
<tr class="memitem:a9e38014fa1e7e08dcbf3b5f8c3bdb81e"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a> &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9e38014fa1e7e08dcbf3b5f8c3bdb81e">create_convolution_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_convolution_layer_node.xhtml">ConvolutionLayerNode</a> &amp;node, <a class="el" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;ctx)</td></tr>
<tr class="memdesc:a9e38014fa1e7e08dcbf3b5f8c3bdb81e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend convolution layer function.  <a href="#a9e38014fa1e7e08dcbf3b5f8c3bdb81e">More...</a><br /></td></tr>
<tr class="separator:a9e38014fa1e7e08dcbf3b5f8c3bdb81e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac77fa3bf0d7d7c3fde6243192f93f380"><td class="memTemplParams" colspan="2">template&lt;typename DeconvolutionLayerFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:ac77fa3bf0d7d7c3fde6243192f93f380"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a> &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ac77fa3bf0d7d7c3fde6243192f93f380">create_deconvolution_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_deconvolution_layer_node.xhtml">DeconvolutionLayerNode</a> &amp;node, <a class="el" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;ctx)</td></tr>
<tr class="memdesc:ac77fa3bf0d7d7c3fde6243192f93f380"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend deconvolution layer function.  <a href="#ac77fa3bf0d7d7c3fde6243192f93f380">More...</a><br /></td></tr>
<tr class="separator:ac77fa3bf0d7d7c3fde6243192f93f380"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab8ff2a40f95b76ec10ac2a98d1a8d594"><td class="memTemplParams" colspan="2">template&lt;typename DepthwiseConvolutionLayer , typename TargetInfo &gt; </td></tr>
<tr class="memitem:ab8ff2a40f95b76ec10ac2a98d1a8d594"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a> &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ab8ff2a40f95b76ec10ac2a98d1a8d594">create_depthwise_convolution_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_depthwise_convolution_layer_node.xhtml">DepthwiseConvolutionLayerNode</a> &amp;node)</td></tr>
<tr class="memdesc:ab8ff2a40f95b76ec10ac2a98d1a8d594"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend layer depth-wise convolution function.  <a href="#ab8ff2a40f95b76ec10ac2a98d1a8d594">More...</a><br /></td></tr>
<tr class="separator:ab8ff2a40f95b76ec10ac2a98d1a8d594"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a751e39ebd690d1cd1027d165cdbe143d"><td class="memTemplParams" colspan="2">template&lt;typename DequantizationLayerFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:a751e39ebd690d1cd1027d165cdbe143d"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a> &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a751e39ebd690d1cd1027d165cdbe143d">create_dequantization_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_dequantization_layer_node.xhtml">DequantizationLayerNode</a> &amp;node)</td></tr>
<tr class="memdesc:a751e39ebd690d1cd1027d165cdbe143d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend dequantize layer function.  <a href="#a751e39ebd690d1cd1027d165cdbe143d">More...</a><br /></td></tr>
<tr class="separator:a751e39ebd690d1cd1027d165cdbe143d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afce1d2d783bb97a3a8c3c406c8cf6b9c"><td class="memTemplParams" colspan="2">template&lt;typename DetectionOutputLayerFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:afce1d2d783bb97a3a8c3c406c8cf6b9c"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a> &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#afce1d2d783bb97a3a8c3c406c8cf6b9c">create_detection_output_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_detection_output_layer_node.xhtml">DetectionOutputLayerNode</a> &amp;node)</td></tr>
<tr class="memdesc:afce1d2d783bb97a3a8c3c406c8cf6b9c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend detection output layer function.  <a href="#afce1d2d783bb97a3a8c3c406c8cf6b9c">More...</a><br /></td></tr>
<tr class="separator:afce1d2d783bb97a3a8c3c406c8cf6b9c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2dbe319a9ac9b6820b2ef5eff8c46ddc"><td class="memTemplParams" colspan="2">template&lt;typename DetectionPostProcessLayerFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:a2dbe319a9ac9b6820b2ef5eff8c46ddc"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a> &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a2dbe319a9ac9b6820b2ef5eff8c46ddc">create_detection_post_process_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_detection_post_process_layer_node.xhtml">DetectionPostProcessLayerNode</a> &amp;node)</td></tr>
<tr class="memdesc:a2dbe319a9ac9b6820b2ef5eff8c46ddc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend detection post process layer function.  <a href="#a2dbe319a9ac9b6820b2ef5eff8c46ddc">More...</a><br /></td></tr>
<tr class="separator:a2dbe319a9ac9b6820b2ef5eff8c46ddc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa37faf92f78c0f5cefe2d43c8bf07f18"><td class="memTemplParams" colspan="2">template&lt;typename EltwiseFunctions , typename TargetInfo &gt; </td></tr>
<tr class="memitem:aa37faf92f78c0f5cefe2d43c8bf07f18"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a> &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#aa37faf92f78c0f5cefe2d43c8bf07f18">create_eltwise_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_eltwise_layer_node.xhtml">EltwiseLayerNode</a> &amp;node)</td></tr>
<tr class="memdesc:aa37faf92f78c0f5cefe2d43c8bf07f18"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend element-wise operation layer function.  <a href="#aa37faf92f78c0f5cefe2d43c8bf07f18">More...</a><br /></td></tr>
<tr class="separator:aa37faf92f78c0f5cefe2d43c8bf07f18"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7880c3b249a6dad40da0ebcf6600b0e1"><td class="memTemplParams" colspan="2">template&lt;typename FlattenLayerFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:a7880c3b249a6dad40da0ebcf6600b0e1"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a> &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a7880c3b249a6dad40da0ebcf6600b0e1">create_flatten_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_flatten_layer_node.xhtml">FlattenLayerNode</a> &amp;node)</td></tr>
<tr class="memdesc:a7880c3b249a6dad40da0ebcf6600b0e1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend flatten layer function.  <a href="#a7880c3b249a6dad40da0ebcf6600b0e1">More...</a><br /></td></tr>
<tr class="separator:a7880c3b249a6dad40da0ebcf6600b0e1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac64bbd0df74207f9ab59953e21311178"><td class="memTemplParams" colspan="2">template&lt;typename FullyConnectedLayerFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:ac64bbd0df74207f9ab59953e21311178"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a> &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ac64bbd0df74207f9ab59953e21311178">create_fully_connected_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_fully_connected_layer_node.xhtml">FullyConnectedLayerNode</a> &amp;node, <a class="el" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;ctx)</td></tr>
<tr class="memdesc:ac64bbd0df74207f9ab59953e21311178"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend fully connected layer function.  <a href="#ac64bbd0df74207f9ab59953e21311178">More...</a><br /></td></tr>
<tr class="separator:ac64bbd0df74207f9ab59953e21311178"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1a18725e5da4a7ae62c9a3b731ab8fe1"><td class="memTemplParams" colspan="2">template&lt;typename GenerateProposalsLayerFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:a1a18725e5da4a7ae62c9a3b731ab8fe1"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a> &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a1a18725e5da4a7ae62c9a3b731ab8fe1">create_generate_proposals_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_generate_proposals_layer_node.xhtml">GenerateProposalsLayerNode</a> &amp;node, <a class="el" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;ctx)</td></tr>
<tr class="memdesc:a1a18725e5da4a7ae62c9a3b731ab8fe1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend generate proposals layer function.  <a href="#a1a18725e5da4a7ae62c9a3b731ab8fe1">More...</a><br /></td></tr>
<tr class="separator:a1a18725e5da4a7ae62c9a3b731ab8fe1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2dfc97df083b68f8409ba21d8a0110d8"><td class="memTemplParams" colspan="2">template&lt;typename NormalizationLayerFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:a2dfc97df083b68f8409ba21d8a0110d8"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a> &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a2dfc97df083b68f8409ba21d8a0110d8">create_normalization_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_normalization_layer_node.xhtml">NormalizationLayerNode</a> &amp;node, <a class="el" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;ctx)</td></tr>
<tr class="memdesc:a2dfc97df083b68f8409ba21d8a0110d8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend normalization layer function.  <a href="#a2dfc97df083b68f8409ba21d8a0110d8">More...</a><br /></td></tr>
<tr class="separator:a2dfc97df083b68f8409ba21d8a0110d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a92b35a365f58606a13baaf4501d78d9e"><td class="memTemplParams" colspan="2">template&lt;typename NormalizePlanarYUVLayerFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:a92b35a365f58606a13baaf4501d78d9e"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a> &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a92b35a365f58606a13baaf4501d78d9e">create_normalize_planar_yuv_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_normalize_planar_y_u_v_layer_node.xhtml">NormalizePlanarYUVLayerNode</a> &amp;node)</td></tr>
<tr class="memdesc:a92b35a365f58606a13baaf4501d78d9e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend normalize planar YUV layer function.  <a href="#a92b35a365f58606a13baaf4501d78d9e">More...</a><br /></td></tr>
<tr class="separator:a92b35a365f58606a13baaf4501d78d9e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a127d0cce11ed3d411eaa5bd25c7a3ac1"><td class="memTemplParams" colspan="2">template&lt;typename PadLayerFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:a127d0cce11ed3d411eaa5bd25c7a3ac1"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a> &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a127d0cce11ed3d411eaa5bd25c7a3ac1">create_pad_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_pad_layer_node.xhtml">PadLayerNode</a> &amp;node)</td></tr>
<tr class="memdesc:a127d0cce11ed3d411eaa5bd25c7a3ac1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend pad layer function.  <a href="#a127d0cce11ed3d411eaa5bd25c7a3ac1">More...</a><br /></td></tr>
<tr class="separator:a127d0cce11ed3d411eaa5bd25c7a3ac1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa65a1becdfa5fc3533d79bba0cd4095c"><td class="memTemplParams" colspan="2">template&lt;typename PermuteLayerFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:aa65a1becdfa5fc3533d79bba0cd4095c"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a> &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#aa65a1becdfa5fc3533d79bba0cd4095c">create_permute_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_permute_layer_node.xhtml">PermuteLayerNode</a> &amp;node)</td></tr>
<tr class="memdesc:aa65a1becdfa5fc3533d79bba0cd4095c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend permute layer function.  <a href="#aa65a1becdfa5fc3533d79bba0cd4095c">More...</a><br /></td></tr>
<tr class="separator:aa65a1becdfa5fc3533d79bba0cd4095c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e51b62035e79b0f12964cae17ce0480"><td class="memTemplParams" colspan="2">template&lt;typename PoolingLayerFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:a0e51b62035e79b0f12964cae17ce0480"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a> &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a0e51b62035e79b0f12964cae17ce0480">create_pooling_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_pooling_layer_node.xhtml">PoolingLayerNode</a> &amp;node)</td></tr>
<tr class="memdesc:a0e51b62035e79b0f12964cae17ce0480"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend pooling layer function.  <a href="#a0e51b62035e79b0f12964cae17ce0480">More...</a><br /></td></tr>
<tr class="separator:a0e51b62035e79b0f12964cae17ce0480"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6806f347d8b4c0986cdfe4c45918972b"><td class="memTemplParams" colspan="2">template&lt;typename PReluFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:a6806f347d8b4c0986cdfe4c45918972b"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a> &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a6806f347d8b4c0986cdfe4c45918972b">create_prelu_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_p_relu_layer_node.xhtml">PReluLayerNode</a> &amp;node)</td></tr>
<tr class="memdesc:a6806f347d8b4c0986cdfe4c45918972b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend PRelu layer function.  <a href="#a6806f347d8b4c0986cdfe4c45918972b">More...</a><br /></td></tr>
<tr class="separator:a6806f347d8b4c0986cdfe4c45918972b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5567ed5ad9c8fb45d2748bab27163530"><td class="memTemplParams" colspan="2">template&lt;typename TargetInfo &gt; </td></tr>
<tr class="memitem:a5567ed5ad9c8fb45d2748bab27163530"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a> &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a5567ed5ad9c8fb45d2748bab27163530">create_print_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_print_layer_node.xhtml">PrintLayerNode</a> &amp;node)</td></tr>
<tr class="memdesc:a5567ed5ad9c8fb45d2748bab27163530"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend print layer function.  <a href="#a5567ed5ad9c8fb45d2748bab27163530">More...</a><br /></td></tr>
<tr class="separator:a5567ed5ad9c8fb45d2748bab27163530"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf28fee838c38cc4da407a4dbc62f7b0"><td class="memTemplParams" colspan="2">template&lt;typename PriorBoxLayerFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:aaf28fee838c38cc4da407a4dbc62f7b0"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a> &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#aaf28fee838c38cc4da407a4dbc62f7b0">create_priorbox_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_prior_box_layer_node.xhtml">PriorBoxLayerNode</a> &amp;node)</td></tr>
<tr class="memdesc:aaf28fee838c38cc4da407a4dbc62f7b0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend priorbox layer function.  <a href="#aaf28fee838c38cc4da407a4dbc62f7b0">More...</a><br /></td></tr>
<tr class="separator:aaf28fee838c38cc4da407a4dbc62f7b0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a31be99a5d0f75045fc411e211824baad"><td class="memTemplParams" colspan="2">template&lt;typename QuantizationLayerFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:a31be99a5d0f75045fc411e211824baad"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a> &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a31be99a5d0f75045fc411e211824baad">create_quantization_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_quantization_layer_node.xhtml">QuantizationLayerNode</a> &amp;node)</td></tr>
<tr class="memdesc:a31be99a5d0f75045fc411e211824baad"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend quantization layer function.  <a href="#a31be99a5d0f75045fc411e211824baad">More...</a><br /></td></tr>
<tr class="separator:a31be99a5d0f75045fc411e211824baad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0331e6b2b68ea76e9415f7f148d92601"><td class="memTemplParams" colspan="2">template&lt;typename ReorgLayerFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:a0331e6b2b68ea76e9415f7f148d92601"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a> &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a0331e6b2b68ea76e9415f7f148d92601">create_reorg_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_reorg_layer_node.xhtml">ReorgLayerNode</a> &amp;node)</td></tr>
<tr class="memdesc:a0331e6b2b68ea76e9415f7f148d92601"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend reorg layer function.  <a href="#a0331e6b2b68ea76e9415f7f148d92601">More...</a><br /></td></tr>
<tr class="separator:a0331e6b2b68ea76e9415f7f148d92601"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad1922deea021647290d0c206723e6c73"><td class="memTemplParams" colspan="2">template&lt;typename ReshapeLayerFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:ad1922deea021647290d0c206723e6c73"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a> &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ad1922deea021647290d0c206723e6c73">create_reshape_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_reshape_layer_node.xhtml">ReshapeLayerNode</a> &amp;node)</td></tr>
<tr class="memdesc:ad1922deea021647290d0c206723e6c73"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend reshape layer function.  <a href="#ad1922deea021647290d0c206723e6c73">More...</a><br /></td></tr>
<tr class="separator:ad1922deea021647290d0c206723e6c73"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb3a9be16de941b0f601e16c8ac76533"><td class="memTemplParams" colspan="2">template&lt;typename ResizeLayerFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:adb3a9be16de941b0f601e16c8ac76533"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a> &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#adb3a9be16de941b0f601e16c8ac76533">create_resize_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_resize_layer_node.xhtml">ResizeLayerNode</a> &amp;node)</td></tr>
<tr class="memdesc:adb3a9be16de941b0f601e16c8ac76533"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend resize layer function.  <a href="#adb3a9be16de941b0f601e16c8ac76533">More...</a><br /></td></tr>
<tr class="separator:adb3a9be16de941b0f601e16c8ac76533"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adef77d1f64203fe2828b3f992c87f5df"><td class="memTemplParams" colspan="2">template&lt;typename ROIAlignLayerFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:adef77d1f64203fe2828b3f992c87f5df"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a> &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#adef77d1f64203fe2828b3f992c87f5df">create_roi_align_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_r_o_i_align_layer_node.xhtml">ROIAlignLayerNode</a> &amp;node)</td></tr>
<tr class="memdesc:adef77d1f64203fe2828b3f992c87f5df"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend ROI align layer function.  <a href="#adef77d1f64203fe2828b3f992c87f5df">More...</a><br /></td></tr>
<tr class="separator:adef77d1f64203fe2828b3f992c87f5df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a69a819dc92f559ed0b788392391da602"><td class="memTemplParams" colspan="2">template&lt;typename SliceLayerFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:a69a819dc92f559ed0b788392391da602"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a> &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a69a819dc92f559ed0b788392391da602">create_slice_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_slice_layer_node.xhtml">SliceLayerNode</a> &amp;node)</td></tr>
<tr class="memdesc:a69a819dc92f559ed0b788392391da602"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend slice layer function.  <a href="#a69a819dc92f559ed0b788392391da602">More...</a><br /></td></tr>
<tr class="separator:a69a819dc92f559ed0b788392391da602"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5271c97b6bef5972c5e259307d52a4da"><td class="memTemplParams" colspan="2">template&lt;typename SoftmaxLayerFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:a5271c97b6bef5972c5e259307d52a4da"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a> &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a5271c97b6bef5972c5e259307d52a4da">create_softmax_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_softmax_layer_node.xhtml">SoftmaxLayerNode</a> &amp;node, <a class="el" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;ctx)</td></tr>
<tr class="memdesc:a5271c97b6bef5972c5e259307d52a4da"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend softmax layer function.  <a href="#a5271c97b6bef5972c5e259307d52a4da">More...</a><br /></td></tr>
<tr class="separator:a5271c97b6bef5972c5e259307d52a4da"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae157076aa533f9db0960dea1d5fc5014"><td class="memTemplParams" colspan="2">template&lt;typename StackLayerFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:ae157076aa533f9db0960dea1d5fc5014"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1_i_function.xhtml">arm_compute::IFunction</a> &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ae157076aa533f9db0960dea1d5fc5014">create_stack_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_stack_layer_node.xhtml">StackLayerNode</a> &amp;node)</td></tr>
<tr class="memdesc:ae157076aa533f9db0960dea1d5fc5014"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend layer stack function.  <a href="#ae157076aa533f9db0960dea1d5fc5014">More...</a><br /></td></tr>
<tr class="separator:ae157076aa533f9db0960dea1d5fc5014"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd9d23be81ad915ff875876c6606f576"><td class="memTemplParams" colspan="2">template&lt;typename UpsampleLayerFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:acd9d23be81ad915ff875876c6606f576"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a> &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#acd9d23be81ad915ff875876c6606f576">create_upsample_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_upsample_layer_node.xhtml">UpsampleLayerNode</a> &amp;node, <a class="el" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;ctx)</td></tr>
<tr class="memdesc:acd9d23be81ad915ff875876c6606f576"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend Upsample layer function.  <a href="#acd9d23be81ad915ff875876c6606f576">More...</a><br /></td></tr>
<tr class="separator:acd9d23be81ad915ff875876c6606f576"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7db148217bc0f1f5a4adf6194c858d24"><td class="memTemplParams" colspan="2">template&lt;typename YOLOlayerFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:a7db148217bc0f1f5a4adf6194c858d24"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a> &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a7db148217bc0f1f5a4adf6194c858d24">create_yolo_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_y_o_l_o_layer_node.xhtml">YOLOLayerNode</a> &amp;node, <a class="el" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;ctx)</td></tr>
<tr class="memdesc:a7db148217bc0f1f5a4adf6194c858d24"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend YOLO layer function.  <a href="#a7db148217bc0f1f5a4adf6194c858d24">More...</a><br /></td></tr>
<tr class="separator:a7db148217bc0f1f5a4adf6194c858d24"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9785ffbaaa220b6725a93a6f7f3145ca"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a> (<a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml">arm_compute::graph::Tensor</a> *tensor)</td></tr>
<tr class="memdesc:a9785ffbaaa220b6725a93a6f7f3145ca"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns backing tensor info of a given tensor.  <a href="#a9785ffbaaa220b6725a93a6f7f3145ca">More...</a><br /></td></tr>
<tr class="separator:a9785ffbaaa220b6725a93a6f7f3145ca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a94ce5eb74599047cd5f8b735e2464d12"><td class="memTemplParams" colspan="2">template&lt;typename BoundingBoxTransformLayer &gt; </td></tr>
<tr class="memitem:a94ce5eb74599047cd5f8b735e2464d12"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a94ce5eb74599047cd5f8b735e2464d12">validate_bounding_box_transform_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_bounding_box_transform_layer_node.xhtml">BoundingBoxTransformLayerNode</a> &amp;node)</td></tr>
<tr class="memdesc:a94ce5eb74599047cd5f8b735e2464d12"><td class="mdescLeft">&#160;</td><td class="mdescRight">Validates a Bounding Box Transform layer node.  <a href="#a94ce5eb74599047cd5f8b735e2464d12">More...</a><br /></td></tr>
<tr class="separator:a94ce5eb74599047cd5f8b735e2464d12"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab4632d71bdb4542008ad33b7b74b7b2c"><td class="memTemplParams" colspan="2">template&lt;typename ChannelShuffleLayer &gt; </td></tr>
<tr class="memitem:ab4632d71bdb4542008ad33b7b74b7b2c"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ab4632d71bdb4542008ad33b7b74b7b2c">validate_channel_shuffle_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_channel_shuffle_layer_node.xhtml">ChannelShuffleLayerNode</a> &amp;node)</td></tr>
<tr class="memdesc:ab4632d71bdb4542008ad33b7b74b7b2c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Validates a Channel Shuffle layer node.  <a href="#ab4632d71bdb4542008ad33b7b74b7b2c">More...</a><br /></td></tr>
<tr class="separator:ab4632d71bdb4542008ad33b7b74b7b2c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a84a36a0cae1ceb4313891ca841b11cb3"><td class="memTemplParams" colspan="2">template&lt;typename ConvolutionLayer , typename DirectConvolutionLayer , typename GEMMConvolutionLayer , typename WinogradConvolutionLayer &gt; </td></tr>
<tr class="memitem:a84a36a0cae1ceb4313891ca841b11cb3"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a84a36a0cae1ceb4313891ca841b11cb3">validate_convolution_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_convolution_layer_node.xhtml">ConvolutionLayerNode</a> &amp;node)</td></tr>
<tr class="memdesc:a84a36a0cae1ceb4313891ca841b11cb3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Validates a Convolution layer node.  <a href="#a84a36a0cae1ceb4313891ca841b11cb3">More...</a><br /></td></tr>
<tr class="separator:a84a36a0cae1ceb4313891ca841b11cb3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acdd027e9c5015bdd7102c142b553f222"><td class="memTemplParams" colspan="2">template&lt;typename DepthwiseConvolutionLayer &gt; </td></tr>
<tr class="memitem:acdd027e9c5015bdd7102c142b553f222"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#acdd027e9c5015bdd7102c142b553f222">validate_depthwise_convolution_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_depthwise_convolution_layer_node.xhtml">DepthwiseConvolutionLayerNode</a> &amp;node)</td></tr>
<tr class="memdesc:acdd027e9c5015bdd7102c142b553f222"><td class="mdescLeft">&#160;</td><td class="mdescRight">Validates a Depthwise Convolution layer node.  <a href="#acdd027e9c5015bdd7102c142b553f222">More...</a><br /></td></tr>
<tr class="separator:acdd027e9c5015bdd7102c142b553f222"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a891884386a167090b520930b164870f9"><td class="memTemplParams" colspan="2">template&lt;typename DequantizationLayer &gt; </td></tr>
<tr class="memitem:a891884386a167090b520930b164870f9"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a891884386a167090b520930b164870f9">validate_dequantization_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_dequantization_layer_node.xhtml">DequantizationLayerNode</a> &amp;node)</td></tr>
<tr class="memdesc:a891884386a167090b520930b164870f9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Validates a dequantize layer node.  <a href="#a891884386a167090b520930b164870f9">More...</a><br /></td></tr>
<tr class="separator:a891884386a167090b520930b164870f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a432fd13bfda1435e0d3a8aa5b3dddf4f"><td class="memTemplParams" colspan="2">template&lt;typename DetectionOutputLayer &gt; </td></tr>
<tr class="memitem:a432fd13bfda1435e0d3a8aa5b3dddf4f"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a432fd13bfda1435e0d3a8aa5b3dddf4f">validate_detection_output_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_detection_output_layer_node.xhtml">DetectionOutputLayerNode</a> &amp;node)</td></tr>
<tr class="memdesc:a432fd13bfda1435e0d3a8aa5b3dddf4f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Validates a detection output layer node.  <a href="#a432fd13bfda1435e0d3a8aa5b3dddf4f">More...</a><br /></td></tr>
<tr class="separator:a432fd13bfda1435e0d3a8aa5b3dddf4f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9c20f659744b7e6854294198184c60f1"><td class="memTemplParams" colspan="2">template&lt;typename DetectionPostProcessLayer &gt; </td></tr>
<tr class="memitem:a9c20f659744b7e6854294198184c60f1"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9c20f659744b7e6854294198184c60f1">validate_detection_post_process_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_detection_post_process_layer_node.xhtml">DetectionPostProcessLayerNode</a> &amp;node)</td></tr>
<tr class="memdesc:a9c20f659744b7e6854294198184c60f1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Validates a detection post process layer node.  <a href="#a9c20f659744b7e6854294198184c60f1">More...</a><br /></td></tr>
<tr class="separator:a9c20f659744b7e6854294198184c60f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a40f232193e819dfc9dc9edbabefd5b7a"><td class="memTemplParams" colspan="2">template&lt;typename GenerateProposalsLayer &gt; </td></tr>
<tr class="memitem:a40f232193e819dfc9dc9edbabefd5b7a"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a40f232193e819dfc9dc9edbabefd5b7a">validate_generate_proposals_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_generate_proposals_layer_node.xhtml">GenerateProposalsLayerNode</a> &amp;node)</td></tr>
<tr class="memdesc:a40f232193e819dfc9dc9edbabefd5b7a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Validates a Generate Proposals layer node.  <a href="#a40f232193e819dfc9dc9edbabefd5b7a">More...</a><br /></td></tr>
<tr class="separator:a40f232193e819dfc9dc9edbabefd5b7a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad6c95a270f3275bd5711ce6ec193c4ff"><td class="memTemplParams" colspan="2">template&lt;typename NormalizePlanarYUVLayer &gt; </td></tr>
<tr class="memitem:ad6c95a270f3275bd5711ce6ec193c4ff"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ad6c95a270f3275bd5711ce6ec193c4ff">validate_normalize_planar_yuv_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_normalize_planar_y_u_v_layer_node.xhtml">NormalizePlanarYUVLayerNode</a> &amp;node)</td></tr>
<tr class="memdesc:ad6c95a270f3275bd5711ce6ec193c4ff"><td class="mdescLeft">&#160;</td><td class="mdescRight">Validates a NormalizePlanarYUV layer node.  <a href="#ad6c95a270f3275bd5711ce6ec193c4ff">More...</a><br /></td></tr>
<tr class="separator:ad6c95a270f3275bd5711ce6ec193c4ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ada206e294c8d07093a8a50e08172c272"><td class="memTemplParams" colspan="2">template&lt;typename PadLayer &gt; </td></tr>
<tr class="memitem:ada206e294c8d07093a8a50e08172c272"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ada206e294c8d07093a8a50e08172c272">validate_pad_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_pad_layer_node.xhtml">PadLayerNode</a> &amp;node)</td></tr>
<tr class="memdesc:ada206e294c8d07093a8a50e08172c272"><td class="mdescLeft">&#160;</td><td class="mdescRight">Validates a pad layer node.  <a href="#ada206e294c8d07093a8a50e08172c272">More...</a><br /></td></tr>
<tr class="separator:ada206e294c8d07093a8a50e08172c272"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeb6f53f28ef137932823d17554043056"><td class="memTemplParams" colspan="2">template&lt;typename PermuteLayer &gt; </td></tr>
<tr class="memitem:aeb6f53f28ef137932823d17554043056"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#aeb6f53f28ef137932823d17554043056">validate_permute_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_permute_layer_node.xhtml">PermuteLayerNode</a> &amp;node)</td></tr>
<tr class="memdesc:aeb6f53f28ef137932823d17554043056"><td class="mdescLeft">&#160;</td><td class="mdescRight">Validates a permute layer node.  <a href="#aeb6f53f28ef137932823d17554043056">More...</a><br /></td></tr>
<tr class="separator:aeb6f53f28ef137932823d17554043056"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5f83a0fbf23529c0f205c6732b3c8312"><td class="memTemplParams" colspan="2">template&lt;typename PReluLayer &gt; </td></tr>
<tr class="memitem:a5f83a0fbf23529c0f205c6732b3c8312"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a5f83a0fbf23529c0f205c6732b3c8312">validate_prelu_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_p_relu_layer_node.xhtml">PReluLayerNode</a> &amp;node)</td></tr>
<tr class="memdesc:a5f83a0fbf23529c0f205c6732b3c8312"><td class="mdescLeft">&#160;</td><td class="mdescRight">Validates a PRelu layer node.  <a href="#a5f83a0fbf23529c0f205c6732b3c8312">More...</a><br /></td></tr>
<tr class="separator:a5f83a0fbf23529c0f205c6732b3c8312"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a76682a55960d790a11357ab922a5d659"><td class="memTemplParams" colspan="2">template&lt;typename PriorBoxLayer &gt; </td></tr>
<tr class="memitem:a76682a55960d790a11357ab922a5d659"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a76682a55960d790a11357ab922a5d659">validate_priorbox_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_prior_box_layer_node.xhtml">PriorBoxLayerNode</a> &amp;node)</td></tr>
<tr class="memdesc:a76682a55960d790a11357ab922a5d659"><td class="mdescLeft">&#160;</td><td class="mdescRight">Validates a priorbox layer node.  <a href="#a76682a55960d790a11357ab922a5d659">More...</a><br /></td></tr>
<tr class="separator:a76682a55960d790a11357ab922a5d659"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a959fdd41c94dde46a21dd2bf6d50c48b"><td class="memTemplParams" colspan="2">template&lt;typename QuantizationLayer &gt; </td></tr>
<tr class="memitem:a959fdd41c94dde46a21dd2bf6d50c48b"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a959fdd41c94dde46a21dd2bf6d50c48b">validate_quantization_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_quantization_layer_node.xhtml">QuantizationLayerNode</a> &amp;node)</td></tr>
<tr class="memdesc:a959fdd41c94dde46a21dd2bf6d50c48b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Validates a Quantization layer node.  <a href="#a959fdd41c94dde46a21dd2bf6d50c48b">More...</a><br /></td></tr>
<tr class="separator:a959fdd41c94dde46a21dd2bf6d50c48b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4451f539afe63a19da3d17ee95582277"><td class="memTemplParams" colspan="2">template&lt;typename ReorgLayer &gt; </td></tr>
<tr class="memitem:a4451f539afe63a19da3d17ee95582277"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a4451f539afe63a19da3d17ee95582277">validate_reorg_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_reorg_layer_node.xhtml">ReorgLayerNode</a> &amp;node)</td></tr>
<tr class="memdesc:a4451f539afe63a19da3d17ee95582277"><td class="mdescLeft">&#160;</td><td class="mdescRight">Validates a Reorg layer node.  <a href="#a4451f539afe63a19da3d17ee95582277">More...</a><br /></td></tr>
<tr class="separator:a4451f539afe63a19da3d17ee95582277"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad4cb768bba67e8ccb02d0903da459ecb"><td class="memTemplParams" colspan="2">template&lt;typename ReshapeLayer &gt; </td></tr>
<tr class="memitem:ad4cb768bba67e8ccb02d0903da459ecb"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ad4cb768bba67e8ccb02d0903da459ecb">validate_reshape_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_reshape_layer_node.xhtml">ReshapeLayerNode</a> &amp;node)</td></tr>
<tr class="memdesc:ad4cb768bba67e8ccb02d0903da459ecb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Validates a Reshape layer node.  <a href="#ad4cb768bba67e8ccb02d0903da459ecb">More...</a><br /></td></tr>
<tr class="separator:ad4cb768bba67e8ccb02d0903da459ecb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a366fca5f1c0a2ed6ee50e9d619d4f2e5"><td class="memTemplParams" colspan="2">template&lt;typename ROIAlignLayer &gt; </td></tr>
<tr class="memitem:a366fca5f1c0a2ed6ee50e9d619d4f2e5"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a366fca5f1c0a2ed6ee50e9d619d4f2e5">validate_roi_align_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_r_o_i_align_layer_node.xhtml">ROIAlignLayerNode</a> &amp;node)</td></tr>
<tr class="memdesc:a366fca5f1c0a2ed6ee50e9d619d4f2e5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Validates a ROI Align layer node.  <a href="#a366fca5f1c0a2ed6ee50e9d619d4f2e5">More...</a><br /></td></tr>
<tr class="separator:a366fca5f1c0a2ed6ee50e9d619d4f2e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c749cc534b2801f46ec56d78abc7fef"><td class="memTemplParams" colspan="2">template&lt;typename SliceLayer &gt; </td></tr>
<tr class="memitem:a3c749cc534b2801f46ec56d78abc7fef"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a3c749cc534b2801f46ec56d78abc7fef">validate_slice_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_slice_layer_node.xhtml">SliceLayerNode</a> &amp;node)</td></tr>
<tr class="memdesc:a3c749cc534b2801f46ec56d78abc7fef"><td class="mdescLeft">&#160;</td><td class="mdescRight">Validates a Slice layer node.  <a href="#a3c749cc534b2801f46ec56d78abc7fef">More...</a><br /></td></tr>
<tr class="separator:a3c749cc534b2801f46ec56d78abc7fef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8396c4dda471ae2dc627e25adfbe1bcf"><td class="memTemplParams" colspan="2">template&lt;typename UpsampleLayer &gt; </td></tr>
<tr class="memitem:a8396c4dda471ae2dc627e25adfbe1bcf"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a8396c4dda471ae2dc627e25adfbe1bcf">validate_upsample_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_upsample_layer_node.xhtml">UpsampleLayerNode</a> &amp;node)</td></tr>
<tr class="memdesc:a8396c4dda471ae2dc627e25adfbe1bcf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Validates a Upsample layer node.  <a href="#a8396c4dda471ae2dc627e25adfbe1bcf">More...</a><br /></td></tr>
<tr class="separator:a8396c4dda471ae2dc627e25adfbe1bcf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7ef4fa6499c747d322a74136249afa6b"><td class="memTemplParams" colspan="2">template&lt;typename YOLOLayer &gt; </td></tr>
<tr class="memitem:a7ef4fa6499c747d322a74136249afa6b"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a7ef4fa6499c747d322a74136249afa6b">validate_yolo_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_y_o_l_o_layer_node.xhtml">YOLOLayerNode</a> &amp;node)</td></tr>
<tr class="memdesc:a7ef4fa6499c747d322a74136249afa6b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Validates a YOLO layer node.  <a href="#a7ef4fa6499c747d322a74136249afa6b">More...</a><br /></td></tr>
<tr class="separator:a7ef4fa6499c747d322a74136249afa6b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:accb27de9ecfd8f932aee9d5702f0fde9"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:accb27de9ecfd8f932aee9d5702f0fde9"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a> &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#accb27de9ecfd8f932aee9d5702f0fde9">create_detection_output_layer&lt; CPPDetectionOutputLayer, CLTargetInfo &gt;</a> (<a class="el" href="classarm__compute_1_1graph_1_1_detection_output_layer_node.xhtml">DetectionOutputLayerNode</a> &amp;node)</td></tr>
<tr class="separator:accb27de9ecfd8f932aee9d5702f0fde9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af715e29e4f43f012be92dff3ca61004c"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:af715e29e4f43f012be92dff3ca61004c"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a> &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#af715e29e4f43f012be92dff3ca61004c">create_detection_post_process_layer&lt; CPPDetectionPostProcessLayer, CLTargetInfo &gt;</a> (<a class="el" href="classarm__compute_1_1graph_1_1_detection_post_process_layer_node.xhtml">DetectionPostProcessLayerNode</a> &amp;node)</td></tr>
<tr class="separator:af715e29e4f43f012be92dff3ca61004c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c80e4e51582453953cc94742f25438c"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:a5c80e4e51582453953cc94742f25438c"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a> &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a5c80e4e51582453953cc94742f25438c">create_convolution_layer&lt; GCConvolutionLayerFunctions, GCTargetInfo &gt;</a> (<a class="el" href="classarm__compute_1_1graph_1_1_convolution_layer_node.xhtml">ConvolutionLayerNode</a> &amp;node, <a class="el" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;ctx)</td></tr>
<tr class="separator:a5c80e4e51582453953cc94742f25438c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a08ab53b1d15e738a39f29d778a91a512"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:a08ab53b1d15e738a39f29d778a91a512"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a> &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a08ab53b1d15e738a39f29d778a91a512">create_depthwise_convolution_layer&lt; GCDepthwiseConvolutionLayerFunctions, GCTargetInfo &gt;</a> (<a class="el" href="classarm__compute_1_1graph_1_1_depthwise_convolution_layer_node.xhtml">DepthwiseConvolutionLayerNode</a> &amp;node)</td></tr>
<tr class="separator:a08ab53b1d15e738a39f29d778a91a512"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a863bcac2c361e883edf7f9abb4abd9a7"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:a863bcac2c361e883edf7f9abb4abd9a7"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a> &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a863bcac2c361e883edf7f9abb4abd9a7">create_eltwise_layer&lt; GCEltwiseFunctions, GCTargetInfo &gt;</a> (<a class="el" href="classarm__compute_1_1graph_1_1_eltwise_layer_node.xhtml">EltwiseLayerNode</a> &amp;node)</td></tr>
<tr class="separator:a863bcac2c361e883edf7f9abb4abd9a7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca9f3683506635cbdffb2c57108910ed"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:aca9f3683506635cbdffb2c57108910ed"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a> &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#aca9f3683506635cbdffb2c57108910ed">create_convolution_layer&lt; NEConvolutionLayerFunctions, NETargetInfo &gt;</a> (<a class="el" href="classarm__compute_1_1graph_1_1_convolution_layer_node.xhtml">ConvolutionLayerNode</a> &amp;node, <a class="el" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;ctx)</td></tr>
<tr class="separator:aca9f3683506635cbdffb2c57108910ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab68902cd2bb95bf47f5967718015343c"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:ab68902cd2bb95bf47f5967718015343c"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a> &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ab68902cd2bb95bf47f5967718015343c">create_normalization_layer&lt; NENormalizationLayer, NETargetInfo &gt;</a> (<a class="el" href="classarm__compute_1_1graph_1_1_normalization_layer_node.xhtml">NormalizationLayerNode</a> &amp;node, <a class="el" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;ctx)</td></tr>
<tr class="separator:ab68902cd2bb95bf47f5967718015343c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="a0f5afb0ddd5aec3a8e4df3c56d7d91f4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0f5afb0ddd5aec3a8e4df3c56d7d91f4">&#9670;&nbsp;</a></span>create_activation_layer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;<a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a>&gt; arm_compute::graph::backends::detail::create_activation_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_activation_layer_node.xhtml">ActivationLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Creates a backend activation layer function. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">ActivationLayerFunction</td><td>Backend activation function </td></tr>
    <tr><td class="paramname">TargetInfo</td><td>Target-specific information</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to create the backend function for</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Backend activation layer function </dd></dl>

<p class="definition">Definition at line <a class="el" href="_function_helpers_8h_source.xhtml#l00099">99</a> of file <a class="el" href="_function_helpers_8h_source.xhtml">FunctionHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;{</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 1 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>    = get_backing_tensor&lt;TargetInfo&gt;(node.input(0));</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *output   = get_backing_tensor&lt;TargetInfo&gt;(node.output(0));</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keyword">const</span> ActivationLayerInfo        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a> = node.activation_info();</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="comment">// Create function</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keyword">auto</span> func = support::cpp14::make_unique&lt;ActivationLayerFunction&gt;();</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    func-&gt;configure(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>);</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                               &lt;&lt; node.name()</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.type()</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Activation function: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.activation()</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; a: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.a()</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; b: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.b()</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; InPlace : &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends.xhtml#a4403f766b0d02eb3882a9521d0390986">is_in_place_operation</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output)</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a1f8aca235c095df227e7444f6b237eb1"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">arm_compute::test::validation::act_info</a></div><div class="ttdeci">act_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00183">ConvolutionLayer.cpp:183</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_ab2d8baa35618bdad1d2814942355311e"><div class="ttname"><a href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_INFO(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00054">Logger.h:54</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_xhtml_a4403f766b0d02eb3882a9521d0390986"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends.xhtml#a4403f766b0d02eb3882a9521d0390986">arm_compute::graph::backends::is_in_place_operation</a></div><div class="ttdeci">bool is_in_place_operation(void *input, void *output)</div><div class="ttdoc">Checks if an operation is in place.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2backends_2_utils_8h_source.xhtml#l00077">Utils.h:77</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00183">arm_compute::test::validation::act_info</a>, <a class="el" href="_activation_layer_node_8cpp_source.xhtml#l00040">ActivationLayerNode::activation_info()</a>, <a class="el" href="graph_2_logger_8h_source.xhtml#l00054">ARM_COMPUTE_LOG_GRAPH_INFO</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">arm_compute::test::validation::input</a>, <a class="el" href="arm__compute_2graph_2backends_2_utils_8h_source.xhtml#l00077">arm_compute::graph::backends::is_in_place_operation()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, and <a class="el" href="_activation_layer_node_8cpp_source.xhtml#l00074">ActivationLayerNode::type()</a>.</p>

</div>
</div>
<a id="a5d1a73ab4a0b267033a569c46813b9d5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5d1a73ab4a0b267033a569c46813b9d5">&#9670;&nbsp;</a></span>create_batch_normalization_layer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;<a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a>&gt; arm_compute::graph::backends::detail::create_batch_normalization_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_batch_normalization_layer_node.xhtml">BatchNormalizationLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a backend batch normalization layer function. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">BatchNormalizationLayerFunction</td><td>Backend batch normalization function </td></tr>
    <tr><td class="paramname">TargetInfo</td><td>Target-specific information</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to create the backend function for</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Backend batch normalization layer function </dd></dl>

<p class="definition">Definition at line <a class="el" href="_function_helpers_8h_source.xhtml#l00137">137</a> of file <a class="el" href="_function_helpers_8h_source.xhtml">FunctionHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;{</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 5 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> = get_backing_tensor&lt;TargetInfo&gt;(node.input(0));</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *mean  = get_backing_tensor&lt;TargetInfo&gt;(node.input(1));</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *var   = get_backing_tensor&lt;TargetInfo&gt;(node.input(2));</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *beta  = get_backing_tensor&lt;TargetInfo&gt;(node.input(3));</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *gamma = get_backing_tensor&lt;TargetInfo&gt;(node.input(4));</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *output    = get_backing_tensor&lt;TargetInfo&gt;(node.output(0));</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>                      <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>   = node.epsilon();</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keyword">const</span> ActivationLayerInfo        fused_act = node.fused_activation();</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="comment">// Create and configure function</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keyword">auto</span> func = support::cpp14::make_unique&lt;BatchNormalizationLayerFunction&gt;();</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    func-&gt;configure(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, mean, var, beta, gamma, <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>, fused_act);</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="comment">// Log info</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                               &lt;&lt; node.name()</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.type()</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Epsilon: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a> &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                               &lt;&lt; (fused_act.enabled() ? <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#ace86dc6f3dfa4f3c256b3999ab250c0a">to_string</a>(fused_act.activation()) : <span class="stringliteral">&quot;&quot;</span>)</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; InPlace: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends.xhtml#a4403f766b0d02eb3882a9521d0390986">is_in_place_operation</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output)</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1framework_xhtml_ace86dc6f3dfa4f3c256b3999ab250c0a"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#ace86dc6f3dfa4f3c256b3999ab250c0a">arm_compute::test::framework::to_string</a></div><div class="ttdeci">std::string to_string(DatasetMode mode)</div><div class="ttdef"><b>Definition:</b> <a href="_dataset_modes_8h_source.xhtml#l00100">DatasetModes.h:100</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_ab2d8baa35618bdad1d2814942355311e"><div class="ttname"><a href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_INFO(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00054">Logger.h:54</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_xhtml_a4403f766b0d02eb3882a9521d0390986"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends.xhtml#a4403f766b0d02eb3882a9521d0390986">arm_compute::graph::backends::is_in_place_operation</a></div><div class="ttdeci">bool is_in_place_operation(void *input, void *output)</div><div class="ttdoc">Checks if an operation is in place.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2backends_2_utils_8h_source.xhtml#l00077">Utils.h:77</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1quantization_xhtml_a552dc3787d7ea1675f3e4e8993501d58"><div class="ttname"><a href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">arm_compute::quantization::epsilon</a></div><div class="ttdeci">constexpr float epsilon</div><div class="ttdef"><b>Definition:</b> <a href="_asymm_helpers_8cpp_source.xhtml#l00036">AsymmHelpers.cpp:36</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01649">ActivationLayerInfo::activation()</a>, <a class="el" href="graph_2_logger_8h_source.xhtml#l00054">ARM_COMPUTE_LOG_GRAPH_INFO</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01664">ActivationLayerInfo::enabled()</a>, <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00036">arm_compute::quantization::epsilon</a>, <a class="el" href="_batch_normalization_layer_node_8cpp_source.xhtml#l00041">BatchNormalizationLayerNode::epsilon()</a>, <a class="el" href="_batch_normalization_layer_node_8cpp_source.xhtml#l00046">BatchNormalizationLayerNode::fused_activation()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">arm_compute::test::validation::input</a>, <a class="el" href="arm__compute_2graph_2backends_2_utils_8h_source.xhtml#l00077">arm_compute::graph::backends::is_in_place_operation()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, <a class="el" href="tests_2_type_printer_8h_source.xhtml#l00064">arm_compute::to_string()</a>, and <a class="el" href="_batch_normalization_layer_node_8cpp_source.xhtml#l00079">BatchNormalizationLayerNode::type()</a>.</p>

</div>
</div>
<a id="ab3787ac008a709edda8d347370bbad61"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab3787ac008a709edda8d347370bbad61">&#9670;&nbsp;</a></span>create_bounding_box_transform_layer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;<a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a>&gt; arm_compute::graph::backends::detail::create_bounding_box_transform_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_bounding_box_transform_layer_node.xhtml">BoundingBoxTransformLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a backend bounding box transform layer function. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">BoundingBoxTransformLayerFunction</td><td>Backend bounding box transform function </td></tr>
    <tr><td class="paramname">TargetInfo</td><td>Target-specific information</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to create the backend function for</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Backend bounding box transform layer function </dd></dl>

<p class="definition">Definition at line <a class="el" href="_function_helpers_8h_source.xhtml#l00294">294</a> of file <a class="el" href="_function_helpers_8h_source.xhtml">FunctionHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;{</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 2 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>     = get_backing_tensor&lt;TargetInfo&gt;(node.input(0));</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *deltas    = get_backing_tensor&lt;TargetInfo&gt;(node.input(1));</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *output    = get_backing_tensor&lt;TargetInfo&gt;(node.output(0));</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    <span class="keyword">const</span> BoundingBoxTransformInfo   bbox_info = node.info();</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <span class="comment">// Create and configure function</span></div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    <span class="keyword">auto</span> func = support::cpp14::make_unique&lt;BoundingBoxTransformLayerFunction&gt;();</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    func-&gt;configure(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, deltas, bbox_info);</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    <span class="comment">// Log info</span></div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                               &lt;&lt; node.name()</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.type()</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; BoundingBox Info img W: &quot;</span> &lt;&lt; bbox_info.img_width() &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; BoundingBox Info img H: &quot;</span> &lt;&lt; bbox_info.img_height() &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;}</div><div class="ttc" id="graph_2_logger_8h_xhtml_ab2d8baa35618bdad1d2814942355311e"><div class="ttname"><a href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_INFO(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00054">Logger.h:54</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="graph_2_logger_8h_source.xhtml#l00054">ARM_COMPUTE_LOG_GRAPH_INFO</a>, <a class="el" href="_bounding_box_transform_layer_node_8cpp_source.xhtml#l00042">BoundingBoxTransformLayerNode::info()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">arm_compute::test::validation::input</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, and <a class="el" href="_bounding_box_transform_layer_node_8cpp_source.xhtml#l00071">BoundingBoxTransformLayerNode::type()</a>.</p>

</div>
</div>
<a id="a3f5c14020836599056281fe52d7e9dd3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3f5c14020836599056281fe52d7e9dd3">&#9670;&nbsp;</a></span>create_channel_shuffle_layer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;<a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a>&gt; arm_compute::graph::backends::detail::create_channel_shuffle_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_channel_shuffle_layer_node.xhtml">ChannelShuffleLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a backend channel shuffle layer function. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">ChannelShuffleLayerFunction</td><td>Backend channel shuffle function </td></tr>
    <tr><td class="paramname">TargetInfo</td><td>Target-specific information</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to create the backend function for</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Backend channel shuffle layer function </dd></dl>

<p class="definition">Definition at line <a class="el" href="_function_helpers_8h_source.xhtml#l00332">332</a> of file <a class="el" href="_function_helpers_8h_source.xhtml">FunctionHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;{</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 1 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>      = get_backing_tensor&lt;TargetInfo&gt;(node.input(0));</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *output     = get_backing_tensor&lt;TargetInfo&gt;(node.output(0));</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>               <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a> = node.num_groups();</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <span class="comment">// Create function</span></div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    <span class="keyword">auto</span> func = support::cpp14::make_unique&lt;ChannelShuffleLayerFunction&gt;();</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    func-&gt;configure(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a>);</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;                               &lt;&lt; node.name()</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.type()</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Num groups: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a></div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;}</div><div class="ttc" id="graph_2_logger_8h_xhtml_ab2d8baa35618bdad1d2814942355311e"><div class="ttname"><a href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_INFO(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00054">Logger.h:54</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a2270b3e1d20651d2d8341c858c890830"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">arm_compute::test::validation::num_groups</a></div><div class="ttdeci">const unsigned int num_groups</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00148">Im2Col.cpp:148</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="graph_2_logger_8h_source.xhtml#l00054">ARM_COMPUTE_LOG_GRAPH_INFO</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">arm_compute::test::validation::input</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_channel_shuffle_layer_node_8cpp_source.xhtml#l00040">ChannelShuffleLayerNode::num_groups()</a>, <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00148">arm_compute::test::validation::num_groups</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, and <a class="el" href="_channel_shuffle_layer_node_8cpp_source.xhtml#l00068">ChannelShuffleLayerNode::type()</a>.</p>

</div>
</div>
<a id="a627f6bdc4a7de6dbb03acb3d8b3a4d6d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a627f6bdc4a7de6dbb03acb3d8b3a4d6d">&#9670;&nbsp;</a></span>create_concatenate_layer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;<a class="el" href="classarm__compute_1_1_i_function.xhtml">arm_compute::IFunction</a>&gt; arm_compute::graph::backends::detail::create_concatenate_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_concatenate_layer_node.xhtml">ConcatenateLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a backend layer concatenate function. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">ConcatenateLayerFunction</td><td>Backend concatenate function </td></tr>
    <tr><td class="paramname">TargetInfo</td><td>Target-specific information</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to create the backend function for</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Backend concatenate layer function </dd></dl>

<p class="definition">Definition at line <a class="el" href="_function_helpers_8h_source.xhtml#l00367">367</a> of file <a class="el" href="_function_helpers_8h_source.xhtml">FunctionHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;{</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Creating Concatenate node with ID : &quot;</span> &lt;&lt; node.id() &lt;&lt; <span class="stringliteral">&quot; and Name: &quot;</span> &lt;&lt; node.name() &lt;&lt; std::endl);</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(node.num_outputs() != 1);</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    <span class="comment">// Return nullptr if depth concatenate is switched off</span></div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    <span class="keywordflow">if</span>(!node.is_enabled())</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    {</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    }</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    std::vector&lt;typename TargetInfo::TensorType *&gt; inputs;</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; node.num_inputs(); ++i)</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    {</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;        inputs.push_back(get_backing_tensor&lt;TargetInfo&gt;(node.input(i)));</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    }</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *output      = get_backing_tensor&lt;TargetInfo&gt;(node.output(0));</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>                 <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a> = node.output(0) != <span class="keyword">nullptr</span> ? node.output(0)-&gt;desc().layout : DataLayout::UNKNOWN;</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span>                     concat_axis = <a class="code" href="namespacearm__compute_1_1graph.xhtml#a1df15aed3ed531f442ecea2a131d65a4">get_dimension_idx</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a>, node.concatenation_axis());</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    <span class="comment">// Create and configure function</span></div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    <span class="keyword">auto</span> func = support::cpp14::make_unique&lt;ConcatenateLayerFunction&gt;();</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    func-&gt;configure(inputs, output, concat_axis);</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    <span class="comment">// Log info</span></div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span>         is_quantized = <a class="code" href="namespacearm__compute.xhtml#a14f46283f316e7f0fad301d5c1507e9f">is_data_type_quantized_asymmetric</a>(output-&gt;info()-&gt;data_type());</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    std::ostringstream qss;</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    <span class="keywordflow">if</span>(is_quantized)</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    {</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;        qss &lt;&lt; <span class="stringliteral">&quot; Output QuantInfo: &quot;</span> &lt;&lt; output-&gt;info()-&gt;quantization_info();</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    }</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;                               &lt;&lt; node.name()</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.type()</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; output-&gt;info()-&gt;data_type()</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Num Inputs: &quot;</span> &lt;&lt; inputs.size()</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Axis: &quot;</span> &lt;&lt; concat_axis</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;                               &lt;&lt; qss.str()</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_acf5f12bbab64dd614bd8220c97fe484f"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">arm_compute::test::validation::data_layout</a></div><div class="ttdeci">const DataLayout data_layout</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00146">Im2Col.cpp:146</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_ab2d8baa35618bdad1d2814942355311e"><div class="ttname"><a href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_INFO(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00054">Logger.h:54</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a14f46283f316e7f0fad301d5c1507e9f"><div class="ttname"><a href="namespacearm__compute.xhtml#a14f46283f316e7f0fad301d5c1507e9f">arm_compute::is_data_type_quantized_asymmetric</a></div><div class="ttdeci">bool is_data_type_quantized_asymmetric(DataType dt)</div><div class="ttdoc">Check if a given data type is of asymmetric quantized type.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_utils_8h_source.xhtml#l01139">Utils.h:1139</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_a300d153929a99c7b571d4cda3f7987a5"><div class="ttname"><a href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_VERBOSE(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00050">Logger.h:50</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">arm_compute::DataLayout</a></div><div class="ttdeci">DataLayout</div><div class="ttdoc">[DataLayout enum definition]</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00117">Types.h:117</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a1df15aed3ed531f442ecea2a131d65a4"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a1df15aed3ed531f442ecea2a131d65a4">arm_compute::graph::get_dimension_idx</a></div><div class="ttdeci">size_t get_dimension_idx(DataLayout data_layout, const DataLayoutDimension data_layout_dimension)</div><div class="ttdoc">Get index of a tensor's given dimension depending on its layout.</div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_utils_8cpp_source.xhtml#l00129">Utils.cpp:129</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="graph_2_logger_8h_source.xhtml#l00054">ARM_COMPUTE_LOG_GRAPH_INFO</a>, <a class="el" href="graph_2_logger_8h_source.xhtml#l00050">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>, <a class="el" href="_concatenate_layer_node_8cpp_source.xhtml#l00054">ConcatenateLayerNode::concatenation_axis()</a>, <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00146">arm_compute::test::validation::data_layout</a>, <a class="el" href="graph_2_tensor_8cpp_source.xhtml#l00040">Tensor::desc()</a>, <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml#l00129">arm_compute::graph::get_dimension_idx()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00102">INode::id()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="arm__compute_2core_2_utils_8h_source.xhtml#l01139">arm_compute::is_data_type_quantized_asymmetric()</a>, <a class="el" href="_concatenate_layer_node_8cpp_source.xhtml#l00049">ConcatenateLayerNode::is_enabled()</a>, <a class="el" href="_tensor_descriptor_8h_source.xhtml#l00111">TensorDescriptor::layout</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00178">INode::num_inputs()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00183">INode::num_outputs()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, <a class="el" href="_concatenate_layer_node_8cpp_source.xhtml#l00130">ConcatenateLayerNode::type()</a>, and <a class="el" href="namespacearm__compute.xhtml#a3a440b3893fa10608d4428958be1c52ea696b031073e74bf2cb98e5ef201d4aa3">arm_compute::UNKNOWN</a>.</p>

</div>
</div>
<a id="a9e38014fa1e7e08dcbf3b5f8c3bdb81e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9e38014fa1e7e08dcbf3b5f8c3bdb81e">&#9670;&nbsp;</a></span>create_convolution_layer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;<a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a>&gt; arm_compute::graph::backends::detail::create_convolution_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_convolution_layer_node.xhtml">ConvolutionLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;&#160;</td>
          <td class="paramname"><em>ctx</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a backend convolution layer function. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">ConvolutionLayerFunctions</td><td>Backend convolution functions </td></tr>
    <tr><td class="paramname">TargetInfo</td><td>Target-specific information</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to create the backend function for </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ctx</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> context</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Backend convolution layer function </dd></dl>

<p class="definition">Definition at line <a class="el" href="_function_helpers_8h_source.xhtml#l00424">424</a> of file <a class="el" href="_function_helpers_8h_source.xhtml">FunctionHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;{</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 3 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>   = get_backing_tensor&lt;TargetInfo&gt;(node.input(0));</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a> = get_backing_tensor&lt;TargetInfo&gt;(node.input(1));</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *biases  = get_backing_tensor&lt;TargetInfo&gt;(node.input(2));</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *output  = get_backing_tensor&lt;TargetInfo&gt;(node.output(0));</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_quantized = <a class="code" href="namespacearm__compute.xhtml#a14f46283f316e7f0fad301d5c1507e9f">is_data_type_quantized_asymmetric</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type());</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    <span class="keywordflow">if</span>(is_quantized)</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    {</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;        biases-&gt;info()-&gt;set_data_type(DataType::S32);</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    }</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    <span class="keyword">const</span> PadStrideInfo       <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>      = node.convolution_info();</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a>     = node.num_groups();</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517d">ConvolutionMethod</a>   conv_algorithm = node.convolution_method();</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span>                fast_math      = node.fast_math_hint() == FastMathHint::Enabled;</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    <span class="keyword">const</span> ActivationLayerInfo fused_act      = node.fused_activation();</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    <span class="comment">// Create and configure function (we assume that functions have been validated before creation)</span></div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    std::shared_ptr&lt;IMemoryManager&gt; mm = <a class="code" href="namespacearm__compute_1_1graph_1_1backends.xhtml#a8919c520c1cb9086dd1116de509bd481">get_memory_manager</a>(ctx, TargetInfo::TargetType);</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    std::unique_ptr&lt;IFunction&gt;      func;</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    std::string                     func_name;</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    <span class="keywordflow">if</span>(conv_algorithm == ConvolutionMethod::Winograd)</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    {</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;        <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a> != 1, <span class="stringliteral">&quot;WinogradConvolutionLayer does not support grouping!&quot;</span>);</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;        std::tie(func, func_name) = create_named_memory_managed_function&lt;typename ConvolutionLayerFunctions::WinogradConvolutionLayer&gt;(</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;                                        std::string(<span class="stringliteral">&quot;WinogradConvolutionLayer&quot;</span>), mm,</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;                                        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, biases, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, fused_act, fast_math);</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    }</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(conv_algorithm == ConvolutionMethod::Direct)</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;    {</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;        <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a> != 1, <span class="stringliteral">&quot;DirectConvolutionLayer does not support grouping!&quot;</span>);</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;        std::tie(func, func_name) = create_named_function&lt;typename ConvolutionLayerFunctions::DirectConvolutionLayer&gt;(</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;                                        std::string(<span class="stringliteral">&quot;DirectConvolutionLayer&quot;</span>),</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;                                        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, biases, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, fused_act);</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;    }</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(conv_algorithm == ConvolutionMethod::GEMM)</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    {</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;        std::tie(func, func_name) = create_named_memory_managed_function&lt;typename ConvolutionLayerFunctions::GEMMConvolutionLayer&gt;(</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;                                        std::string(<span class="stringliteral">&quot;GEMMConvolutionLayer&quot;</span>), mm,</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;                                        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, biases, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>,</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;                                        WeightsInfo(), Size2D(1<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a2ea3d1fc01a3a442900249ca182ffa5e">U</a>, 1<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a2ea3d1fc01a3a442900249ca182ffa5e">U</a>), fused_act, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a>);</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    }</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    {</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;        std::tie(func, func_name) = create_named_memory_managed_function&lt;typename ConvolutionLayerFunctions::GenericConvolutionLayer&gt;(</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;                                        std::string(<span class="stringliteral">&quot;GenericConvolutionLayer&quot;</span>), mm,</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;                                        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, biases, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>,</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;                                        WeightsInfo(), Size2D(1<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a2ea3d1fc01a3a442900249ca182ffa5e">U</a>, 1<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a2ea3d1fc01a3a442900249ca182ffa5e">U</a>), fused_act, fast_math, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a>);</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;    }</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;    <span class="comment">// Log info</span></div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    std::ostringstream qss;</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;    <span class="keywordflow">if</span>(is_quantized)</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;    {</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;        qss &lt;&lt; <span class="stringliteral">&quot; Input QuantInfo: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;quantization_info()</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;            &lt;&lt; <span class="stringliteral">&quot; Weights QuantInfo: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#ac74736e3863207232a23b7181c1d0f44">quantization_info</a>()</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;            &lt;&lt; <span class="stringliteral">&quot; Output QuantInfo: &quot;</span> &lt;&lt; output-&gt;info()-&gt;quantization_info();</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;    }</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;                               &lt;&lt; node.name()</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; func_name</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Groups: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a></div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Weights shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">tensor_shape</a>()</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;                               &lt;&lt; qss.str()</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;                               &lt;&lt; (fused_act.enabled() ? <span class="stringliteral">&quot; &quot;</span> + <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#ace86dc6f3dfa4f3c256b3999ab250c0a">to_string</a>(fused_act.activation()) : <span class="stringliteral">&quot;&quot;</span>)</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    <span class="keywordflow">return</span> func;</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_l_tensor_xhtml_ad45f0c01a0713dfb6bd7232c7f396fc4"><div class="ttname"><a href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">arm_compute::CLTensor::info</a></div><div class="ttdeci">TensorInfo * info() const override</div><div class="ttdoc">Interface to be implemented by the child class to return the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tensor_8cpp_source.xhtml#l00041">CLTensor.cpp:41</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1framework_xhtml_ace86dc6f3dfa4f3c256b3999ab250c0a"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#ace86dc6f3dfa4f3c256b3999ab250c0a">arm_compute::test::framework::to_string</a></div><div class="ttdeci">std::string to_string(DatasetMode mode)</div><div class="ttdef"><b>Definition:</b> <a href="_dataset_modes_8h_source.xhtml#l00100">DatasetModes.h:100</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a00525ff582f16038a1d3819aa44a23a3"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">arm_compute::test::validation::conv_info</a></div><div class="ttdeci">conv_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_winograd_8cpp_source.xhtml#l00597">Winograd.cpp:597</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml_ac74736e3863207232a23b7181c1d0f44"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#ac74736e3863207232a23b7181c1d0f44">arm_compute::TensorInfo::quantization_info</a></div><div class="ttdeci">QuantizationInfo quantization_info() const override</div><div class="ttdoc">Get the quantization settings (scale and offset) of the tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00311">TensorInfo.h:311</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a683661ae75dcb7aef16b9c9bde31517d"><div class="ttname"><a href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517d">arm_compute::ConvolutionMethod</a></div><div class="ttdeci">ConvolutionMethod</div><div class="ttdoc">Available ConvolutionMethod.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00135">Types.h:135</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_ab2d8baa35618bdad1d2814942355311e"><div class="ttname"><a href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_INFO(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00054">Logger.h:54</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a0b0eb3235749a2909dc5a101afe59a1b"><div class="ttname"><a href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond, msg)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00456">Error.h:456</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a2270b3e1d20651d2d8341c858c890830"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">arm_compute::test::validation::num_groups</a></div><div class="ttdeci">const unsigned int num_groups</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00148">Im2Col.cpp:148</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1utils_1_1cast_xhtml_a2ea3d1fc01a3a442900249ca182ffa5e"><div class="ttname"><a href="namespacearm__compute_1_1utils_1_1cast.xhtml#a2ea3d1fc01a3a442900249ca182ffa5e">arm_compute::utils::cast::U</a></div><div class="ttdeci">U</div><div class="ttdef"><b>Definition:</b> <a href="_saturate_cast_8h_source.xhtml#l00057">SaturateCast.h:57</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a14f46283f316e7f0fad301d5c1507e9f"><div class="ttname"><a href="namespacearm__compute.xhtml#a14f46283f316e7f0fad301d5c1507e9f">arm_compute::is_data_type_quantized_asymmetric</a></div><div class="ttdeci">bool is_data_type_quantized_asymmetric(DataType dt)</div><div class="ttdoc">Check if a given data type is of asymmetric quantized type.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_utils_8h_source.xhtml#l01139">Utils.h:1139</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_xhtml_a8919c520c1cb9086dd1116de509bd481"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends.xhtml#a8919c520c1cb9086dd1116de509bd481">arm_compute::graph::backends::get_memory_manager</a></div><div class="ttdeci">std::shared_ptr&lt; IMemoryManager &gt; get_memory_manager(GraphContext &amp;ctx, Target target)</div><div class="ttdoc">Returns the memory manager for a given target.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2backends_2_utils_8h_source.xhtml#l00089">Utils.h:89</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a64a08a9fec5aeee8650e7182b6d171d0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">arm_compute::test::validation::weights</a></div><div class="ttdeci">CLTensor weights</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00188">ConvolutionLayer.cpp:188</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml_a269b19ce3f357ac65f41f9951906e38e"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">arm_compute::TensorInfo::tensor_shape</a></div><div class="ttdeci">const TensorShape &amp; tensor_shape() const override</div><div class="ttdoc">Size for each dimension of the tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00261">TensorInfo.h:261</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01649">ActivationLayerInfo::activation()</a>, <a class="el" href="_error_8h_source.xhtml#l00456">ARM_COMPUTE_ERROR_ON_MSG</a>, <a class="el" href="graph_2_logger_8h_source.xhtml#l00054">ARM_COMPUTE_LOG_GRAPH_INFO</a>, <a class="el" href="_c_l_2_winograd_8cpp_source.xhtml#l00597">arm_compute::test::validation::conv_info</a>, <a class="el" href="_convolution_layer_node_8cpp_source.xhtml#l00066">ConvolutionLayerNode::convolution_info()</a>, <a class="el" href="_convolution_layer_node_8cpp_source.xhtml#l00051">ConvolutionLayerNode::convolution_method()</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517dafd1dd0c603be8170f9eae0be9f2f6afb">arm_compute::graph::Direct</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#ac85a46f3ebd3ab09f576a994ac2dce11a00d23a76e43b46dae9ec7aa9dcbebb32">arm_compute::graph::Enabled</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01664">ActivationLayerInfo::enabled()</a>, <a class="el" href="_convolution_layer_node_8cpp_source.xhtml#l00061">ConvolutionLayerNode::fast_math_hint()</a>, <a class="el" href="_convolution_layer_node_8cpp_source.xhtml#l00076">ConvolutionLayerNode::fused_activation()</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517da5174aac3927faa9ee34befb7fc87a9e3">arm_compute::graph::GEMM</a>, <a class="el" href="arm__compute_2graph_2backends_2_utils_8h_source.xhtml#l00089">arm_compute::graph::backends::get_memory_manager()</a>, <a class="el" href="_c_l_tensor_8cpp_source.xhtml#l00041">CLTensor::info()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">arm_compute::test::validation::input</a>, <a class="el" href="arm__compute_2core_2_utils_8h_source.xhtml#l01139">arm_compute::is_data_type_quantized_asymmetric()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_convolution_layer_node_8cpp_source.xhtml#l00071">ConvolutionLayerNode::num_groups()</a>, <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00148">arm_compute::test::validation::num_groups</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00311">TensorInfo::quantization_info()</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::S32</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00261">TensorInfo::tensor_shape()</a>, <a class="el" href="tests_2_type_printer_8h_source.xhtml#l00064">arm_compute::to_string()</a>, <a class="el" href="_saturate_cast_8h_source.xhtml#l00057">arm_compute::utils::cast::U</a>, <a class="el" href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00188">arm_compute::test::validation::weights</a>, and <a class="el" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517da09db1dd1078ec6bdbe2722b4558e578f">arm_compute::graph::Winograd</a>.</p>

</div>
</div>
<a id="a5c80e4e51582453953cc94742f25438c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5c80e4e51582453953cc94742f25438c">&#9670;&nbsp;</a></span>create_convolution_layer&lt; GCConvolutionLayerFunctions, GCTargetInfo &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;<a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a>&gt; <a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9e38014fa1e7e08dcbf3b5f8c3bdb81e">arm_compute::graph::backends::detail::create_convolution_layer</a>&lt; GCConvolutionLayerFunctions, GCTargetInfo &gt; </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_convolution_layer_node.xhtml">ConvolutionLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;&#160;</td>
          <td class="paramname"><em>ctx</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_g_c_functions_factory_8cpp_source.xhtml#l00073">73</a> of file <a class="el" href="_g_c_functions_factory_8cpp_source.xhtml">GCFunctionsFactory.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;{</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    validate_node&lt;GCTargetInfo&gt;(node, 3 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    GCTargetInfo::TensorType *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>   = get_backing_tensor&lt;GCTargetInfo&gt;(node.input(0));</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    GCTargetInfo::TensorType *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a> = get_backing_tensor&lt;GCTargetInfo&gt;(node.input(1));</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    GCTargetInfo::TensorType *biases  = get_backing_tensor&lt;GCTargetInfo&gt;(node.input(2));</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    GCTargetInfo::TensorType *output  = get_backing_tensor&lt;GCTargetInfo&gt;(node.output(0));</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute.xhtml#a14f46283f316e7f0fad301d5c1507e9f">is_data_type_quantized_asymmetric</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()))</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    {</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        biases-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a0a9053e6c4729ac5201b58068050c319">set_data_type</a>(DataType::S32);</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    }</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keyword">const</span> PadStrideInfo       <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>      = node.convolution_info();</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517d">ConvolutionMethod</a>   conv_algorithm = node.convolution_method();</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keyword">const</span> ActivationLayerInfo fused_act      = node.fused_activation();</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="comment">// Create and configure function (we assume that functions have been validated before creation)</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    std::shared_ptr&lt;IMemoryManager&gt; mm = <a class="code" href="namespacearm__compute_1_1graph_1_1backends.xhtml#a8919c520c1cb9086dd1116de509bd481">get_memory_manager</a>(ctx, GCTargetInfo::TargetType);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    std::unique_ptr&lt;IFunction&gt;      func;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    std::string                     func_name;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keywordflow">if</span>(conv_algorithm == ConvolutionMethod::Direct)</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    {</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        std::tie(func, func_name) = create_named_function&lt;GCConvolutionLayerFunctions::DirectConvolutionLayer&gt;(</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                                        std::string(<span class="stringliteral">&quot;DirectConvolutionLayer&quot;</span>),</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                                        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, biases, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, fused_act);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    }</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    {</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        std::tie(func, func_name) = create_named_memory_managed_function&lt;GCConvolutionLayerFunctions::GenericConvolutionLayer&gt;(</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                                        std::string(<span class="stringliteral">&quot;ConvolutionLayer&quot;</span>), mm,</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                                        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, biases, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, WeightsInfo(), Size2D(1<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a2ea3d1fc01a3a442900249ca182ffa5e">U</a>, 1<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a2ea3d1fc01a3a442900249ca182ffa5e">U</a>), fused_act);</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    }</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="comment">// Log info</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                               &lt;&lt; node.name()</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; func_name</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input QuantInfo: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;quantization_info()</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Weights QuantInfo: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#ac74736e3863207232a23b7181c1d0f44">quantization_info</a>()</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Weights shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">tensor_shape</a>()</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                               &lt;&lt; (fused_act.enabled() ? <span class="stringliteral">&quot; &quot;</span> + <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#ace86dc6f3dfa4f3c256b3999ab250c0a">to_string</a>(fused_act.activation()) : <span class="stringliteral">&quot;&quot;</span>)</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keywordflow">return</span> func;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_l_tensor_xhtml_ad45f0c01a0713dfb6bd7232c7f396fc4"><div class="ttname"><a href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">arm_compute::CLTensor::info</a></div><div class="ttdeci">TensorInfo * info() const override</div><div class="ttdoc">Interface to be implemented by the child class to return the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tensor_8cpp_source.xhtml#l00041">CLTensor.cpp:41</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1framework_xhtml_ace86dc6f3dfa4f3c256b3999ab250c0a"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#ace86dc6f3dfa4f3c256b3999ab250c0a">arm_compute::test::framework::to_string</a></div><div class="ttdeci">std::string to_string(DatasetMode mode)</div><div class="ttdef"><b>Definition:</b> <a href="_dataset_modes_8h_source.xhtml#l00100">DatasetModes.h:100</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a00525ff582f16038a1d3819aa44a23a3"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">arm_compute::test::validation::conv_info</a></div><div class="ttdeci">conv_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_winograd_8cpp_source.xhtml#l00597">Winograd.cpp:597</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml_ac74736e3863207232a23b7181c1d0f44"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#ac74736e3863207232a23b7181c1d0f44">arm_compute::TensorInfo::quantization_info</a></div><div class="ttdeci">QuantizationInfo quantization_info() const override</div><div class="ttdoc">Get the quantization settings (scale and offset) of the tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00311">TensorInfo.h:311</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml_a0a9053e6c4729ac5201b58068050c319"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#a0a9053e6c4729ac5201b58068050c319">arm_compute::TensorInfo::set_data_type</a></div><div class="ttdeci">ITensorInfo &amp; set_data_type(DataType data_type) override</div><div class="ttdoc">Set the data type to the specified value.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_tensor_info_8cpp_source.xhtml#l00319">TensorInfo.cpp:319</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a683661ae75dcb7aef16b9c9bde31517d"><div class="ttname"><a href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517d">arm_compute::ConvolutionMethod</a></div><div class="ttdeci">ConvolutionMethod</div><div class="ttdoc">Available ConvolutionMethod.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00135">Types.h:135</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_ab2d8baa35618bdad1d2814942355311e"><div class="ttname"><a href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_INFO(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00054">Logger.h:54</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1utils_1_1cast_xhtml_a2ea3d1fc01a3a442900249ca182ffa5e"><div class="ttname"><a href="namespacearm__compute_1_1utils_1_1cast.xhtml#a2ea3d1fc01a3a442900249ca182ffa5e">arm_compute::utils::cast::U</a></div><div class="ttdeci">U</div><div class="ttdef"><b>Definition:</b> <a href="_saturate_cast_8h_source.xhtml#l00057">SaturateCast.h:57</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a14f46283f316e7f0fad301d5c1507e9f"><div class="ttname"><a href="namespacearm__compute.xhtml#a14f46283f316e7f0fad301d5c1507e9f">arm_compute::is_data_type_quantized_asymmetric</a></div><div class="ttdeci">bool is_data_type_quantized_asymmetric(DataType dt)</div><div class="ttdoc">Check if a given data type is of asymmetric quantized type.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_utils_8h_source.xhtml#l01139">Utils.h:1139</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_xhtml_a8919c520c1cb9086dd1116de509bd481"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends.xhtml#a8919c520c1cb9086dd1116de509bd481">arm_compute::graph::backends::get_memory_manager</a></div><div class="ttdeci">std::shared_ptr&lt; IMemoryManager &gt; get_memory_manager(GraphContext &amp;ctx, Target target)</div><div class="ttdoc">Returns the memory manager for a given target.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2backends_2_utils_8h_source.xhtml#l00089">Utils.h:89</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a64a08a9fec5aeee8650e7182b6d171d0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">arm_compute::test::validation::weights</a></div><div class="ttdeci">CLTensor weights</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00188">ConvolutionLayer.cpp:188</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml_a269b19ce3f357ac65f41f9951906e38e"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">arm_compute::TensorInfo::tensor_shape</a></div><div class="ttdeci">const TensorShape &amp; tensor_shape() const override</div><div class="ttdoc">Size for each dimension of the tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00261">TensorInfo.h:261</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01649">ActivationLayerInfo::activation()</a>, <a class="el" href="graph_2_logger_8h_source.xhtml#l00054">ARM_COMPUTE_LOG_GRAPH_INFO</a>, <a class="el" href="_c_l_2_winograd_8cpp_source.xhtml#l00597">arm_compute::test::validation::conv_info</a>, <a class="el" href="_convolution_layer_node_8cpp_source.xhtml#l00066">ConvolutionLayerNode::convolution_info()</a>, <a class="el" href="_convolution_layer_node_8cpp_source.xhtml#l00051">ConvolutionLayerNode::convolution_method()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01664">ActivationLayerInfo::enabled()</a>, <a class="el" href="_convolution_layer_node_8cpp_source.xhtml#l00076">ConvolutionLayerNode::fused_activation()</a>, <a class="el" href="arm__compute_2graph_2backends_2_utils_8h_source.xhtml#l00089">arm_compute::graph::backends::get_memory_manager()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_c_l_tensor_8cpp_source.xhtml#l00041">CLTensor::info()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">arm_compute::test::validation::input</a>, <a class="el" href="arm__compute_2core_2_utils_8h_source.xhtml#l01139">arm_compute::is_data_type_quantized_asymmetric()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00311">TensorInfo::quantization_info()</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::S32</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a9ebcdce876b4cd07736afa47d50154de">ITensorInfo::set_data_type()</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00261">TensorInfo::tensor_shape()</a>, <a class="el" href="tests_2_type_printer_8h_source.xhtml#l00064">arm_compute::to_string()</a>, <a class="el" href="_saturate_cast_8h_source.xhtml#l00057">arm_compute::utils::cast::U</a>, and <a class="el" href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00188">arm_compute::test::validation::weights</a>.</p>

<p class="reference">Referenced by <a class="el" href="_g_c_functions_factory_8cpp_source.xhtml#l00232">GCFunctionFactory::create()</a>.</p>

</div>
</div>
<a id="aca9f3683506635cbdffb2c57108910ed"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aca9f3683506635cbdffb2c57108910ed">&#9670;&nbsp;</a></span>create_convolution_layer&lt; NEConvolutionLayerFunctions, NETargetInfo &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;<a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a>&gt; <a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9e38014fa1e7e08dcbf3b5f8c3bdb81e">arm_compute::graph::backends::detail::create_convolution_layer</a>&lt; NEConvolutionLayerFunctions, NETargetInfo &gt; </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_convolution_layer_node.xhtml">ConvolutionLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;&#160;</td>
          <td class="paramname"><em>ctx</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_function_factory_8cpp_source.xhtml#l00085">85</a> of file <a class="el" href="_n_e_function_factory_8cpp_source.xhtml">NEFunctionFactory.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;{</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    validate_node&lt;NETargetInfo&gt;(node, 3 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    NETargetInfo::TensorType *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>   = get_backing_tensor&lt;NETargetInfo&gt;(node.input(0));</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    NETargetInfo::TensorType *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a> = get_backing_tensor&lt;NETargetInfo&gt;(node.input(1));</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    NETargetInfo::TensorType *biases  = get_backing_tensor&lt;NETargetInfo&gt;(node.input(2));</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    NETargetInfo::TensorType *output  = get_backing_tensor&lt;NETargetInfo&gt;(node.output(0));</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_quantized = <a class="code" href="namespacearm__compute.xhtml#a14f46283f316e7f0fad301d5c1507e9f">is_data_type_quantized_asymmetric</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type());</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keywordflow">if</span>(is_quantized)</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    {</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        biases-&gt;info()-&gt;set_data_type(DataType::S32);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    }</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keyword">const</span> PadStrideInfo       <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>      = node.convolution_info();</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517d">ConvolutionMethod</a>   conv_algorithm = node.convolution_method();</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keyword">const</span> ActivationLayerInfo fused_act      = node.fused_activation();</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="comment">// Create and configure function (we assume that functions have been validated before creation)</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    std::shared_ptr&lt;IMemoryManager&gt; mm = <a class="code" href="namespacearm__compute_1_1graph_1_1backends.xhtml#a8919c520c1cb9086dd1116de509bd481">get_memory_manager</a>(ctx, Target::NEON);</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    std::unique_ptr&lt;IFunction&gt;      func;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    std::string                     func_name;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keywordflow">if</span>(conv_algorithm == ConvolutionMethod::Direct)</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    {</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        std::tie(func, func_name) = create_named_memory_managed_function&lt;NEDirectConvolutionLayer&gt;(</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                                        std::string(<span class="stringliteral">&quot;DirectConvolutionLayer&quot;</span>), mm, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, biases, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, fused_act);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    }</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(conv_algorithm == ConvolutionMethod::GEMM)</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    {</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        std::tie(func, func_name) = create_named_memory_managed_function&lt;NEGEMMConvolutionLayer&gt;(</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                                        std::string(<span class="stringliteral">&quot;GEMMConvolutionLayer&quot;</span>), mm, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, biases, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, WeightsInfo(), Size2D(1, 1), fused_act);</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    }</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(conv_algorithm == ConvolutionMethod::Winograd)</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    {</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        std::tie(func, func_name) = create_named_memory_managed_function&lt;NEWinogradConvolutionLayer&gt;(</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                                        std::string(<span class="stringliteral">&quot;WinogradConvolutionLayer&quot;</span>), mm, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, biases, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, fused_act);</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    }</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    {</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        std::tie(func, func_name) = create_named_memory_managed_function&lt;NEConvolutionLayer&gt;(</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                                        std::string(<span class="stringliteral">&quot;ConvolutionLayer&quot;</span>), mm, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, biases, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, WeightsInfo(), Size2D(1, 1), fused_act);</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    }</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="comment">// Log info</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    std::ostringstream qss;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keywordflow">if</span>(is_quantized)</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    {</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        qss &lt;&lt; <span class="stringliteral">&quot; Input QuantInfo: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;quantization_info()</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            &lt;&lt; <span class="stringliteral">&quot; Weights QuantInfo: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#ac74736e3863207232a23b7181c1d0f44">quantization_info</a>()</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            &lt;&lt; <span class="stringliteral">&quot; Output QuantInfo: &quot;</span> &lt;&lt; output-&gt;info()-&gt;quantization_info();</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    }</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                               &lt;&lt; node.name()</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; func_name</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; NETargetInfo::TargetType</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                               &lt;&lt; qss.str()</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Weights shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">tensor_shape</a>()</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                               &lt;&lt; (fused_act.enabled() ? <span class="stringliteral">&quot; &quot;</span> + <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#ace86dc6f3dfa4f3c256b3999ab250c0a">to_string</a>(fused_act.activation()) : <span class="stringliteral">&quot;&quot;</span>)</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keywordflow">return</span> func;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_l_tensor_xhtml_ad45f0c01a0713dfb6bd7232c7f396fc4"><div class="ttname"><a href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">arm_compute::CLTensor::info</a></div><div class="ttdeci">TensorInfo * info() const override</div><div class="ttdoc">Interface to be implemented by the child class to return the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tensor_8cpp_source.xhtml#l00041">CLTensor.cpp:41</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1framework_xhtml_ace86dc6f3dfa4f3c256b3999ab250c0a"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#ace86dc6f3dfa4f3c256b3999ab250c0a">arm_compute::test::framework::to_string</a></div><div class="ttdeci">std::string to_string(DatasetMode mode)</div><div class="ttdef"><b>Definition:</b> <a href="_dataset_modes_8h_source.xhtml#l00100">DatasetModes.h:100</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a00525ff582f16038a1d3819aa44a23a3"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">arm_compute::test::validation::conv_info</a></div><div class="ttdeci">conv_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_winograd_8cpp_source.xhtml#l00597">Winograd.cpp:597</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml_ac74736e3863207232a23b7181c1d0f44"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#ac74736e3863207232a23b7181c1d0f44">arm_compute::TensorInfo::quantization_info</a></div><div class="ttdeci">QuantizationInfo quantization_info() const override</div><div class="ttdoc">Get the quantization settings (scale and offset) of the tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00311">TensorInfo.h:311</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a683661ae75dcb7aef16b9c9bde31517d"><div class="ttname"><a href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517d">arm_compute::ConvolutionMethod</a></div><div class="ttdeci">ConvolutionMethod</div><div class="ttdoc">Available ConvolutionMethod.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00135">Types.h:135</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_ab2d8baa35618bdad1d2814942355311e"><div class="ttname"><a href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_INFO(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00054">Logger.h:54</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a14f46283f316e7f0fad301d5c1507e9f"><div class="ttname"><a href="namespacearm__compute.xhtml#a14f46283f316e7f0fad301d5c1507e9f">arm_compute::is_data_type_quantized_asymmetric</a></div><div class="ttdeci">bool is_data_type_quantized_asymmetric(DataType dt)</div><div class="ttdoc">Check if a given data type is of asymmetric quantized type.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_utils_8h_source.xhtml#l01139">Utils.h:1139</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_xhtml_a8919c520c1cb9086dd1116de509bd481"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends.xhtml#a8919c520c1cb9086dd1116de509bd481">arm_compute::graph::backends::get_memory_manager</a></div><div class="ttdeci">std::shared_ptr&lt; IMemoryManager &gt; get_memory_manager(GraphContext &amp;ctx, Target target)</div><div class="ttdoc">Returns the memory manager for a given target.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2backends_2_utils_8h_source.xhtml#l00089">Utils.h:89</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a64a08a9fec5aeee8650e7182b6d171d0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">arm_compute::test::validation::weights</a></div><div class="ttdeci">CLTensor weights</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00188">ConvolutionLayer.cpp:188</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml_a269b19ce3f357ac65f41f9951906e38e"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">arm_compute::TensorInfo::tensor_shape</a></div><div class="ttdeci">const TensorShape &amp; tensor_shape() const override</div><div class="ttdoc">Size for each dimension of the tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00261">TensorInfo.h:261</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01649">ActivationLayerInfo::activation()</a>, <a class="el" href="graph_2_logger_8h_source.xhtml#l00054">ARM_COMPUTE_LOG_GRAPH_INFO</a>, <a class="el" href="_c_l_2_winograd_8cpp_source.xhtml#l00597">arm_compute::test::validation::conv_info</a>, <a class="el" href="_convolution_layer_node_8cpp_source.xhtml#l00066">ConvolutionLayerNode::convolution_info()</a>, <a class="el" href="_convolution_layer_node_8cpp_source.xhtml#l00051">ConvolutionLayerNode::convolution_method()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01664">ActivationLayerInfo::enabled()</a>, <a class="el" href="_convolution_layer_node_8cpp_source.xhtml#l00076">ConvolutionLayerNode::fused_activation()</a>, <a class="el" href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517da5174aac3927faa9ee34befb7fc87a9e3">arm_compute::GEMM</a>, <a class="el" href="arm__compute_2graph_2backends_2_utils_8h_source.xhtml#l00089">arm_compute::graph::backends::get_memory_manager()</a>, <a class="el" href="_c_l_tensor_8cpp_source.xhtml#l00041">CLTensor::info()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">arm_compute::test::validation::input</a>, <a class="el" href="arm__compute_2core_2_utils_8h_source.xhtml#l01139">arm_compute::is_data_type_quantized_asymmetric()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00311">TensorInfo::quantization_info()</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::S32</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00261">TensorInfo::tensor_shape()</a>, <a class="el" href="tests_2_type_printer_8h_source.xhtml#l00064">arm_compute::to_string()</a>, and <a class="el" href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00188">arm_compute::test::validation::weights</a>.</p>

<p class="reference">Referenced by <a class="el" href="_n_e_function_factory_8cpp_source.xhtml#l00186">NEFunctionFactory::create()</a>.</p>

</div>
</div>
<a id="ac77fa3bf0d7d7c3fde6243192f93f380"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac77fa3bf0d7d7c3fde6243192f93f380">&#9670;&nbsp;</a></span>create_deconvolution_layer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;<a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a>&gt; arm_compute::graph::backends::detail::create_deconvolution_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_deconvolution_layer_node.xhtml">DeconvolutionLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;&#160;</td>
          <td class="paramname"><em>ctx</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a backend deconvolution layer function. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">DeconvolutionLayerFunction</td><td>Backend deconvolution function </td></tr>
    <tr><td class="paramname">TargetInfo</td><td>Target-specific information</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to create the backend function for </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ctx</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> context</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Backend deconvolution layer function </dd></dl>

<p class="definition">Definition at line <a class="el" href="_function_helpers_8h_source.xhtml#l00515">515</a> of file <a class="el" href="_function_helpers_8h_source.xhtml">FunctionHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;{</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 3 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>   = get_backing_tensor&lt;TargetInfo&gt;(node.input(0));</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a> = get_backing_tensor&lt;TargetInfo&gt;(node.input(1));</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *biases  = get_backing_tensor&lt;TargetInfo&gt;(node.input(2));</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *output  = get_backing_tensor&lt;TargetInfo&gt;(node.output(0));</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;    <span class="keyword">const</span> PadStrideInfo deconv_info = node.deconvolution_info();</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    <span class="comment">// Create and configure function (we assume that functions have been validated before creation)</span></div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    std::shared_ptr&lt;IMemoryManager&gt; mm = <a class="code" href="namespacearm__compute_1_1graph_1_1backends.xhtml#a8919c520c1cb9086dd1116de509bd481">get_memory_manager</a>(ctx, TargetInfo::TargetType);</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    std::unique_ptr&lt;IFunction&gt;      func;</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;    std::tie(func, std::ignore) = create_named_memory_managed_function&lt;DeconvolutionLayerFunction&gt;(</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;                                      std::string(), mm,</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;                                      <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, biases, output, deconv_info);</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;    <span class="comment">// Log info</span></div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;                               &lt;&lt; node.name()</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.type()</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Weights shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">tensor_shape</a>()</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;    <span class="keywordflow">return</span> func;</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_l_tensor_xhtml_ad45f0c01a0713dfb6bd7232c7f396fc4"><div class="ttname"><a href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">arm_compute::CLTensor::info</a></div><div class="ttdeci">TensorInfo * info() const override</div><div class="ttdoc">Interface to be implemented by the child class to return the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tensor_8cpp_source.xhtml#l00041">CLTensor.cpp:41</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_ab2d8baa35618bdad1d2814942355311e"><div class="ttname"><a href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_INFO(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00054">Logger.h:54</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_xhtml_a8919c520c1cb9086dd1116de509bd481"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends.xhtml#a8919c520c1cb9086dd1116de509bd481">arm_compute::graph::backends::get_memory_manager</a></div><div class="ttdeci">std::shared_ptr&lt; IMemoryManager &gt; get_memory_manager(GraphContext &amp;ctx, Target target)</div><div class="ttdoc">Returns the memory manager for a given target.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2backends_2_utils_8h_source.xhtml#l00089">Utils.h:89</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a64a08a9fec5aeee8650e7182b6d171d0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">arm_compute::test::validation::weights</a></div><div class="ttdeci">CLTensor weights</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00188">ConvolutionLayer.cpp:188</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml_a269b19ce3f357ac65f41f9951906e38e"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">arm_compute::TensorInfo::tensor_shape</a></div><div class="ttdeci">const TensorShape &amp; tensor_shape() const override</div><div class="ttdoc">Size for each dimension of the tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00261">TensorInfo.h:261</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="graph_2_logger_8h_source.xhtml#l00054">ARM_COMPUTE_LOG_GRAPH_INFO</a>, <a class="el" href="_deconvolution_layer_node_8cpp_source.xhtml#l00042">DeconvolutionLayerNode::deconvolution_info()</a>, <a class="el" href="arm__compute_2graph_2backends_2_utils_8h_source.xhtml#l00089">arm_compute::graph::backends::get_memory_manager()</a>, <a class="el" href="_c_l_tensor_8cpp_source.xhtml#l00041">CLTensor::info()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">arm_compute::test::validation::input</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00261">TensorInfo::tensor_shape()</a>, <a class="el" href="_deconvolution_layer_node_8cpp_source.xhtml#l00094">DeconvolutionLayerNode::type()</a>, and <a class="el" href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00188">arm_compute::test::validation::weights</a>.</p>

</div>
</div>
<a id="ab8ff2a40f95b76ec10ac2a98d1a8d594"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab8ff2a40f95b76ec10ac2a98d1a8d594">&#9670;&nbsp;</a></span>create_depthwise_convolution_layer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;<a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a>&gt; arm_compute::graph::backends::detail::create_depthwise_convolution_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_depthwise_convolution_layer_node.xhtml">DepthwiseConvolutionLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a backend layer depth-wise convolution function. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">DepthwiseConvolutionLayerFunctions</td><td>Backend depthwise convolution function </td></tr>
    <tr><td class="paramname">TargetInfo</td><td>Target-specific information</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to create the backend function for</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Backend depth-wise convolution layer function </dd></dl>

<p class="definition">Definition at line <a class="el" href="_function_helpers_8h_source.xhtml#l00558">558</a> of file <a class="el" href="_function_helpers_8h_source.xhtml">FunctionHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;{</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 3 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>   = get_backing_tensor&lt;TargetInfo&gt;(node.input(0));</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a> = get_backing_tensor&lt;TargetInfo&gt;(node.input(1));</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *biases  = get_backing_tensor&lt;TargetInfo&gt;(node.input(2));</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *output  = get_backing_tensor&lt;TargetInfo&gt;(node.output(0));</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_quantized = <a class="code" href="namespacearm__compute.xhtml#a14f46283f316e7f0fad301d5c1507e9f">is_data_type_quantized_asymmetric</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type());</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;    <span class="keywordflow">if</span>(is_quantized)</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;    {</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;        biases-&gt;info()-&gt;set_data_type(DataType::S32);</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;    }</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;    <span class="keyword">const</span> PadStrideInfo       <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>        = node.convolution_info();</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>        depth_multiplier = node.depth_multiplier();</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;    <span class="keyword">const</span> ActivationLayerInfo fused_act        = node.fused_activation();</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;    <span class="comment">// Create and configure function (we assume that functions have been validated before creation)</span></div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;    std::unique_ptr&lt;IFunction&gt; func;</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;    std::string                func_name;</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;    std::tie(func, func_name) = create_named_function&lt;DepthwiseConvolutionLayer&gt;(</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;                                    std::string(<span class="stringliteral">&quot;DepthwiseConvolutionLayer&quot;</span>),</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;                                    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, biases, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, depth_multiplier, fused_act);</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;    <span class="comment">// Log info</span></div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;    std::ostringstream qss;</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;    <span class="keywordflow">if</span>(is_quantized)</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;    {</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;        qss &lt;&lt; <span class="stringliteral">&quot; Input QuantInfo: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;quantization_info()</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;            &lt;&lt; <span class="stringliteral">&quot; Weights QuantInfo: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#ac74736e3863207232a23b7181c1d0f44">quantization_info</a>()</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;            &lt;&lt; <span class="stringliteral">&quot; Output QuantInfo: &quot;</span> &lt;&lt; output-&gt;info()-&gt;quantization_info();</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;    }</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;                               &lt;&lt; node.name()</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; func_name</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Weights shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">tensor_shape</a>()</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Depth multiplier: &quot;</span> &lt;&lt; depth_multiplier</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;                               &lt;&lt; qss.str()</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;                               &lt;&lt; (fused_act.enabled() ? <span class="stringliteral">&quot; &quot;</span> + <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#ace86dc6f3dfa4f3c256b3999ab250c0a">to_string</a>(fused_act.activation()) : <span class="stringliteral">&quot;&quot;</span>)</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;    <span class="keywordflow">return</span> func;</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_l_tensor_xhtml_ad45f0c01a0713dfb6bd7232c7f396fc4"><div class="ttname"><a href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">arm_compute::CLTensor::info</a></div><div class="ttdeci">TensorInfo * info() const override</div><div class="ttdoc">Interface to be implemented by the child class to return the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tensor_8cpp_source.xhtml#l00041">CLTensor.cpp:41</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1framework_xhtml_ace86dc6f3dfa4f3c256b3999ab250c0a"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#ace86dc6f3dfa4f3c256b3999ab250c0a">arm_compute::test::framework::to_string</a></div><div class="ttdeci">std::string to_string(DatasetMode mode)</div><div class="ttdef"><b>Definition:</b> <a href="_dataset_modes_8h_source.xhtml#l00100">DatasetModes.h:100</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a00525ff582f16038a1d3819aa44a23a3"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">arm_compute::test::validation::conv_info</a></div><div class="ttdeci">conv_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_winograd_8cpp_source.xhtml#l00597">Winograd.cpp:597</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml_ac74736e3863207232a23b7181c1d0f44"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#ac74736e3863207232a23b7181c1d0f44">arm_compute::TensorInfo::quantization_info</a></div><div class="ttdeci">QuantizationInfo quantization_info() const override</div><div class="ttdoc">Get the quantization settings (scale and offset) of the tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00311">TensorInfo.h:311</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_ab2d8baa35618bdad1d2814942355311e"><div class="ttname"><a href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_INFO(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00054">Logger.h:54</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a14f46283f316e7f0fad301d5c1507e9f"><div class="ttname"><a href="namespacearm__compute.xhtml#a14f46283f316e7f0fad301d5c1507e9f">arm_compute::is_data_type_quantized_asymmetric</a></div><div class="ttdeci">bool is_data_type_quantized_asymmetric(DataType dt)</div><div class="ttdoc">Check if a given data type is of asymmetric quantized type.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_utils_8h_source.xhtml#l01139">Utils.h:1139</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a64a08a9fec5aeee8650e7182b6d171d0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">arm_compute::test::validation::weights</a></div><div class="ttdeci">CLTensor weights</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00188">ConvolutionLayer.cpp:188</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml_a269b19ce3f357ac65f41f9951906e38e"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">arm_compute::TensorInfo::tensor_shape</a></div><div class="ttdeci">const TensorShape &amp; tensor_shape() const override</div><div class="ttdoc">Size for each dimension of the tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00261">TensorInfo.h:261</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01649">ActivationLayerInfo::activation()</a>, <a class="el" href="graph_2_logger_8h_source.xhtml#l00054">ARM_COMPUTE_LOG_GRAPH_INFO</a>, <a class="el" href="_c_l_2_winograd_8cpp_source.xhtml#l00597">arm_compute::test::validation::conv_info</a>, <a class="el" href="_depthwise_convolution_layer_node_8cpp_source.xhtml#l00058">DepthwiseConvolutionLayerNode::convolution_info()</a>, <a class="el" href="_depthwise_convolution_layer_node_8cpp_source.xhtml#l00043">DepthwiseConvolutionLayerNode::depth_multiplier()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01664">ActivationLayerInfo::enabled()</a>, <a class="el" href="_depthwise_convolution_layer_node_8cpp_source.xhtml#l00063">DepthwiseConvolutionLayerNode::fused_activation()</a>, <a class="el" href="_c_l_tensor_8cpp_source.xhtml#l00041">CLTensor::info()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">arm_compute::test::validation::input</a>, <a class="el" href="arm__compute_2core_2_utils_8h_source.xhtml#l01139">arm_compute::is_data_type_quantized_asymmetric()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00311">TensorInfo::quantization_info()</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::S32</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00261">TensorInfo::tensor_shape()</a>, <a class="el" href="tests_2_type_printer_8h_source.xhtml#l00064">arm_compute::to_string()</a>, and <a class="el" href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00188">arm_compute::test::validation::weights</a>.</p>

</div>
</div>
<a id="a08ab53b1d15e738a39f29d778a91a512"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a08ab53b1d15e738a39f29d778a91a512">&#9670;&nbsp;</a></span>create_depthwise_convolution_layer&lt; GCDepthwiseConvolutionLayerFunctions, GCTargetInfo &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;<a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a>&gt; <a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ab8ff2a40f95b76ec10ac2a98d1a8d594">arm_compute::graph::backends::detail::create_depthwise_convolution_layer</a>&lt; GCDepthwiseConvolutionLayerFunctions, GCTargetInfo &gt; </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_depthwise_convolution_layer_node.xhtml">DepthwiseConvolutionLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_g_c_functions_factory_8cpp_source.xhtml#l00126">126</a> of file <a class="el" href="_g_c_functions_factory_8cpp_source.xhtml">GCFunctionsFactory.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;{</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    validate_node&lt;GCTargetInfo&gt;(node, 3 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    GCTargetInfo::TensorType *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>   = get_backing_tensor&lt;GCTargetInfo&gt;(node.input(0));</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    GCTargetInfo::TensorType *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a> = get_backing_tensor&lt;GCTargetInfo&gt;(node.input(1));</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    GCTargetInfo::TensorType *biases  = get_backing_tensor&lt;GCTargetInfo&gt;(node.input(2));</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    GCTargetInfo::TensorType *output  = get_backing_tensor&lt;GCTargetInfo&gt;(node.output(0));</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute.xhtml#a14f46283f316e7f0fad301d5c1507e9f">is_data_type_quantized_asymmetric</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()))</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    {</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        biases-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a0a9053e6c4729ac5201b58068050c319">set_data_type</a>(DataType::S32);</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    }</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="keyword">const</span> PadStrideInfo              <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>        = node.convolution_info();</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a75ce9b1baad4303a53124d6f0795821f">DepthwiseConvolutionMethod</a> dwc_algorithm    = node.depthwise_convolution_method();</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keyword">const</span> ActivationLayerInfo        fused_act        = node.fused_activation();</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>                        depth_multiplier = node.depth_multiplier();</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="comment">// Create and configure function (we assume that functions have been validated before creation)</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    std::unique_ptr&lt;IFunction&gt; func;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    std::string                func_name;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keywordflow">if</span>(dwc_algorithm == DepthwiseConvolutionMethod::Optimized3x3)</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    {</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        std::tie(func, func_name) = create_named_function&lt;GCDepthwiseConvolutionLayerFunctions::DepthwiseConvolutionLayer3x3&gt;(</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                                        std::string(<span class="stringliteral">&quot;DepthwiseConvolutionLayer3x3&quot;</span>),</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                                        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, biases, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, depth_multiplier, fused_act);</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    }</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    {</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Generic DepthwiseConvolutionLayer is not supported in GLES backend&quot;</span>);</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    }</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="comment">// Log info</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                               &lt;&lt; node.name()</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; func_name</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target &quot;</span> &lt;&lt; GCTargetInfo::TargetType</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input QuantInfo: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;quantization_info()</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Weights QuantInfo: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#ac74736e3863207232a23b7181c1d0f44">quantization_info</a>()</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Weights shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">tensor_shape</a>()</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Depth multiplier: &quot;</span> &lt;&lt; depth_multiplier</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                               &lt;&lt; (fused_act.enabled() ? <span class="stringliteral">&quot; &quot;</span> + <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#ace86dc6f3dfa4f3c256b3999ab250c0a">to_string</a>(fused_act.activation()) : <span class="stringliteral">&quot;&quot;</span>)</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="keywordflow">return</span> func;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_l_tensor_xhtml_ad45f0c01a0713dfb6bd7232c7f396fc4"><div class="ttname"><a href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">arm_compute::CLTensor::info</a></div><div class="ttdeci">TensorInfo * info() const override</div><div class="ttdoc">Interface to be implemented by the child class to return the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tensor_8cpp_source.xhtml#l00041">CLTensor.cpp:41</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1framework_xhtml_ace86dc6f3dfa4f3c256b3999ab250c0a"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#ace86dc6f3dfa4f3c256b3999ab250c0a">arm_compute::test::framework::to_string</a></div><div class="ttdeci">std::string to_string(DatasetMode mode)</div><div class="ttdef"><b>Definition:</b> <a href="_dataset_modes_8h_source.xhtml#l00100">DatasetModes.h:100</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00352">Error.h:352</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a00525ff582f16038a1d3819aa44a23a3"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">arm_compute::test::validation::conv_info</a></div><div class="ttdeci">conv_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_winograd_8cpp_source.xhtml#l00597">Winograd.cpp:597</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml_ac74736e3863207232a23b7181c1d0f44"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#ac74736e3863207232a23b7181c1d0f44">arm_compute::TensorInfo::quantization_info</a></div><div class="ttdeci">QuantizationInfo quantization_info() const override</div><div class="ttdoc">Get the quantization settings (scale and offset) of the tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00311">TensorInfo.h:311</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml_a0a9053e6c4729ac5201b58068050c319"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#a0a9053e6c4729ac5201b58068050c319">arm_compute::TensorInfo::set_data_type</a></div><div class="ttdeci">ITensorInfo &amp; set_data_type(DataType data_type) override</div><div class="ttdoc">Set the data type to the specified value.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_tensor_info_8cpp_source.xhtml#l00319">TensorInfo.cpp:319</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_ab2d8baa35618bdad1d2814942355311e"><div class="ttname"><a href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_INFO(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00054">Logger.h:54</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a75ce9b1baad4303a53124d6f0795821f"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a75ce9b1baad4303a53124d6f0795821f">arm_compute::graph::DepthwiseConvolutionMethod</a></div><div class="ttdeci">DepthwiseConvolutionMethod</div><div class="ttdoc">Supported Depthwise Convolution layer methods.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00117">Types.h:117</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a14f46283f316e7f0fad301d5c1507e9f"><div class="ttname"><a href="namespacearm__compute.xhtml#a14f46283f316e7f0fad301d5c1507e9f">arm_compute::is_data_type_quantized_asymmetric</a></div><div class="ttdeci">bool is_data_type_quantized_asymmetric(DataType dt)</div><div class="ttdoc">Check if a given data type is of asymmetric quantized type.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_utils_8h_source.xhtml#l01139">Utils.h:1139</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a64a08a9fec5aeee8650e7182b6d171d0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">arm_compute::test::validation::weights</a></div><div class="ttdeci">CLTensor weights</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00188">ConvolutionLayer.cpp:188</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml_a269b19ce3f357ac65f41f9951906e38e"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">arm_compute::TensorInfo::tensor_shape</a></div><div class="ttdeci">const TensorShape &amp; tensor_shape() const override</div><div class="ttdoc">Size for each dimension of the tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00261">TensorInfo.h:261</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01649">ActivationLayerInfo::activation()</a>, <a class="el" href="_error_8h_source.xhtml#l00352">ARM_COMPUTE_ERROR</a>, <a class="el" href="graph_2_logger_8h_source.xhtml#l00054">ARM_COMPUTE_LOG_GRAPH_INFO</a>, <a class="el" href="_c_l_2_winograd_8cpp_source.xhtml#l00597">arm_compute::test::validation::conv_info</a>, <a class="el" href="_depthwise_convolution_layer_node_8cpp_source.xhtml#l00058">DepthwiseConvolutionLayerNode::convolution_info()</a>, <a class="el" href="_depthwise_convolution_layer_node_8cpp_source.xhtml#l00043">DepthwiseConvolutionLayerNode::depth_multiplier()</a>, <a class="el" href="_depthwise_convolution_layer_node_8cpp_source.xhtml#l00053">DepthwiseConvolutionLayerNode::depthwise_convolution_method()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01664">ActivationLayerInfo::enabled()</a>, <a class="el" href="_depthwise_convolution_layer_node_8cpp_source.xhtml#l00063">DepthwiseConvolutionLayerNode::fused_activation()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_c_l_tensor_8cpp_source.xhtml#l00041">CLTensor::info()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">arm_compute::test::validation::input</a>, <a class="el" href="arm__compute_2core_2_utils_8h_source.xhtml#l01139">arm_compute::is_data_type_quantized_asymmetric()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00311">TensorInfo::quantization_info()</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::S32</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a9ebcdce876b4cd07736afa47d50154de">ITensorInfo::set_data_type()</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00261">TensorInfo::tensor_shape()</a>, <a class="el" href="tests_2_type_printer_8h_source.xhtml#l00064">arm_compute::to_string()</a>, and <a class="el" href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00188">arm_compute::test::validation::weights</a>.</p>

<p class="reference">Referenced by <a class="el" href="_g_c_functions_factory_8cpp_source.xhtml#l00232">GCFunctionFactory::create()</a>.</p>

</div>
</div>
<a id="a751e39ebd690d1cd1027d165cdbe143d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a751e39ebd690d1cd1027d165cdbe143d">&#9670;&nbsp;</a></span>create_dequantization_layer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;<a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a>&gt; arm_compute::graph::backends::detail::create_dequantization_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_dequantization_layer_node.xhtml">DequantizationLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a backend dequantize layer function. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">DequantizationLayer</td><td>Function Backend dequantize function </td></tr>
    <tr><td class="paramname">TargetInfo</td><td>Target-specific information</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to create the backend function for</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Backend dequantize layer function </dd></dl>

<p class="definition">Definition at line <a class="el" href="_function_helpers_8h_source.xhtml#l00620">620</a> of file <a class="el" href="_function_helpers_8h_source.xhtml">FunctionHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;{</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 1 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>  = get_backing_tensor&lt;TargetInfo&gt;(node.input(0));</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *output = get_backing_tensor&lt;TargetInfo&gt;(node.output(0));</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;    <span class="comment">// Create and configure function</span></div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;    <span class="keyword">auto</span> func = support::cpp14::make_unique&lt;DequantizationLayerFunction&gt;();</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;    func-&gt;configure(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output);</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;    <span class="comment">// Log info</span></div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;                               &lt;&lt; node.name()</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.type()</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input quantization info: &quot;</span> &lt;&lt; output-&gt;info()-&gt;quantization_info()</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_ab2d8baa35618bdad1d2814942355311e"><div class="ttname"><a href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_INFO(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00054">Logger.h:54</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="graph_2_logger_8h_source.xhtml#l00054">ARM_COMPUTE_LOG_GRAPH_INFO</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">arm_compute::test::validation::input</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, and <a class="el" href="_dequantization_layer_node_8cpp_source.xhtml#l00067">DequantizationLayerNode::type()</a>.</p>

</div>
</div>
<a id="afce1d2d783bb97a3a8c3c406c8cf6b9c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afce1d2d783bb97a3a8c3c406c8cf6b9c">&#9670;&nbsp;</a></span>create_detection_output_layer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;<a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a>&gt; arm_compute::graph::backends::detail::create_detection_output_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_detection_output_layer_node.xhtml">DetectionOutputLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a backend detection output layer function. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">DetectionOutputLayer</td><td>Function Backend detection output function </td></tr>
    <tr><td class="paramname">TargetInfo</td><td>Target-specific information</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to create the backend function for</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Backend detection output layer function </dd></dl>

<p class="definition">Definition at line <a class="el" href="_function_helpers_8h_source.xhtml#l00658">658</a> of file <a class="el" href="_function_helpers_8h_source.xhtml">FunctionHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;{</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 3 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *input0      = get_backing_tensor&lt;TargetInfo&gt;(node.input(0));</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *input1      = get_backing_tensor&lt;TargetInfo&gt;(node.input(1));</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *input2      = get_backing_tensor&lt;TargetInfo&gt;(node.input(2));</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *output      = get_backing_tensor&lt;TargetInfo&gt;(node.output(0));</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;    <span class="keyword">const</span> DetectionOutputLayerInfo   detect_info = node.detection_output_info();</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(input0 == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(input1 == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(input2 == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;    <span class="comment">// Create and configure function</span></div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;    <span class="keyword">auto</span> func = support::cpp14::make_unique&lt;DetectionOutputLayerFunction&gt;();</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;    func-&gt;configure(input0, input1, input2, output, detect_info);</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;    <span class="comment">// Log info</span></div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;                               &lt;&lt; node.name()</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.type()</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; input0-&gt;info()-&gt;data_type()</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input0 shape: &quot;</span> &lt;&lt; input0-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input1 shape: &quot;</span> &lt;&lt; input1-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input2 shape: &quot;</span> &lt;&lt; input2-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; DetectionOutputLayer info: &quot;</span> &lt;&lt; detect_info</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_ab2d8baa35618bdad1d2814942355311e"><div class="ttname"><a href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_INFO(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00054">Logger.h:54</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="graph_2_logger_8h_source.xhtml#l00054">ARM_COMPUTE_LOG_GRAPH_INFO</a>, <a class="el" href="_detection_output_layer_node_8cpp_source.xhtml#l00042">DetectionOutputLayerNode::detection_output_info()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, and <a class="el" href="_detection_output_layer_node_8cpp_source.xhtml#l00082">DetectionOutputLayerNode::type()</a>.</p>

</div>
</div>
<a id="accb27de9ecfd8f932aee9d5702f0fde9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#accb27de9ecfd8f932aee9d5702f0fde9">&#9670;&nbsp;</a></span>create_detection_output_layer&lt; CPPDetectionOutputLayer, CLTargetInfo &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;<a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a>&gt; <a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#afce1d2d783bb97a3a8c3c406c8cf6b9c">arm_compute::graph::backends::detail::create_detection_output_layer</a>&lt; <a class="el" href="classarm__compute_1_1_c_p_p_detection_output_layer.xhtml">CPPDetectionOutputLayer</a>, CLTargetInfo &gt; </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_detection_output_layer_node.xhtml">DetectionOutputLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_c_l_functions_factory_8cpp_source.xhtml#l00120">120</a> of file <a class="el" href="_c_l_functions_factory_8cpp_source.xhtml">CLFunctionsFactory.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;{</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    validate_node&lt;CLTargetInfo&gt;(node, 3 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    CLTargetInfo::TensorType      *input0      = get_backing_tensor&lt;CLTargetInfo&gt;(node.input(0));</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    CLTargetInfo::TensorType      *input1      = get_backing_tensor&lt;CLTargetInfo&gt;(node.input(1));</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    CLTargetInfo::TensorType      *input2      = get_backing_tensor&lt;CLTargetInfo&gt;(node.input(2));</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    CLTargetInfo::TensorType      *output      = get_backing_tensor&lt;CLTargetInfo&gt;(node.output(0));</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keyword">const</span> DetectionOutputLayerInfo detect_info = node.detection_output_info();</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(input0 == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(input1 == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(input2 == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="comment">// Create and configure function</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="keyword">auto</span> func = support::cpp14::make_unique&lt;CPPDetectionOutputLayer&gt;();</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    func-&gt;configure(input0, input1, input2, output, detect_info);</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="comment">// Log info</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                               &lt;&lt; node.name()</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.type()</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; CLTargetInfo::TargetType</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; input0-&gt;info()-&gt;data_type()</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input0 shape: &quot;</span> &lt;&lt; input0-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input1 shape: &quot;</span> &lt;&lt; input1-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input2 shape: &quot;</span> &lt;&lt; input2-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; DetectionOutputLayer info: &quot;</span> &lt;&lt; detect_info</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keyword">auto</span> wrap_function = support::cpp14::make_unique&lt;CPPWrapperFunction&gt;();</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    wrap_function-&gt;register_function(std::move(func));</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    wrap_function-&gt;register_tensor(input0);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    wrap_function-&gt;register_tensor(input1);</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    wrap_function-&gt;register_tensor(input2);</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    wrap_function-&gt;register_tensor(output);</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="keywordflow">return</span> std::move(wrap_function);</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_ab2d8baa35618bdad1d2814942355311e"><div class="ttname"><a href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_INFO(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00054">Logger.h:54</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="graph_2_logger_8h_source.xhtml#l00054">ARM_COMPUTE_LOG_GRAPH_INFO</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">ITensorInfo::data_type()</a>, <a class="el" href="_detection_output_layer_node_8cpp_source.xhtml#l00042">DetectionOutputLayerNode::detection_output_info()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, and <a class="el" href="_detection_output_layer_node_8cpp_source.xhtml#l00082">DetectionOutputLayerNode::type()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_functions_factory_8cpp_source.xhtml#l00221">CLFunctionFactory::create()</a>.</p>

</div>
</div>
<a id="a2dbe319a9ac9b6820b2ef5eff8c46ddc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2dbe319a9ac9b6820b2ef5eff8c46ddc">&#9670;&nbsp;</a></span>create_detection_post_process_layer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;<a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a>&gt; arm_compute::graph::backends::detail::create_detection_post_process_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_detection_post_process_layer_node.xhtml">DetectionPostProcessLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a backend detection post process layer function. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">DetectionPostProcessLayerFunction</td><td>Backend detection output function </td></tr>
    <tr><td class="paramname">TargetInfo</td><td>Target-specific information</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to create the backend function for</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Backend detection post process layer function </dd></dl>

<p class="definition">Definition at line <a class="el" href="_function_helpers_8h_source.xhtml#l00704">704</a> of file <a class="el" href="_function_helpers_8h_source.xhtml">FunctionHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;{</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 3 <span class="comment">/* expected inputs */</span>, 4 <span class="comment">/* expected outputs */</span>);</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType    *input0      = get_backing_tensor&lt;TargetInfo&gt;(node.input(0));</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType    *input1      = get_backing_tensor&lt;TargetInfo&gt;(node.input(1));</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType    *input2      = get_backing_tensor&lt;TargetInfo&gt;(node.input(2));</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType    *output0     = get_backing_tensor&lt;TargetInfo&gt;(node.output(0));</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType    *output1     = get_backing_tensor&lt;TargetInfo&gt;(node.output(1));</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType    *output2     = get_backing_tensor&lt;TargetInfo&gt;(node.output(2));</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType    *output3     = get_backing_tensor&lt;TargetInfo&gt;(node.output(3));</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;    <span class="keyword">const</span> DetectionPostProcessLayerInfo detect_info = node.detection_post_process_info();</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(input0 == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(input1 == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(input2 == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output0 == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output1 == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output2 == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output3 == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;    <span class="comment">// Create and configure function</span></div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;    <span class="keyword">auto</span> func = support::cpp14::make_unique&lt;DetectionPostProcessLayerFunction&gt;();</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;    func-&gt;configure(input0, input1, input2, output0, output1, output2, output3, detect_info);</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;    <span class="comment">// Log info</span></div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;                               &lt;&lt; node.name()</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.type()</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; input0-&gt;info()-&gt;data_type()</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input0 shape: &quot;</span> &lt;&lt; input0-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input1 shape: &quot;</span> &lt;&lt; input1-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input2 shape: &quot;</span> &lt;&lt; input2-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output0 shape: &quot;</span> &lt;&lt; output0-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output1 shape: &quot;</span> &lt;&lt; output1-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output2 shape: &quot;</span> &lt;&lt; output2-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output3 shape: &quot;</span> &lt;&lt; output3-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; DetectionPostProcessLayer info: &quot;</span> &lt;&lt; detect_info</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_ab2d8baa35618bdad1d2814942355311e"><div class="ttname"><a href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_INFO(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00054">Logger.h:54</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="graph_2_logger_8h_source.xhtml#l00054">ARM_COMPUTE_LOG_GRAPH_INFO</a>, <a class="el" href="_detection_post_process_layer_node_8cpp_source.xhtml#l00042">DetectionPostProcessLayerNode::detection_post_process_info()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, and <a class="el" href="_detection_post_process_layer_node_8cpp_source.xhtml#l00094">DetectionPostProcessLayerNode::type()</a>.</p>

</div>
</div>
<a id="af715e29e4f43f012be92dff3ca61004c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af715e29e4f43f012be92dff3ca61004c">&#9670;&nbsp;</a></span>create_detection_post_process_layer&lt; CPPDetectionPostProcessLayer, CLTargetInfo &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;<a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a>&gt; <a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a2dbe319a9ac9b6820b2ef5eff8c46ddc">arm_compute::graph::backends::detail::create_detection_post_process_layer</a>&lt; <a class="el" href="classarm__compute_1_1_c_p_p_detection_post_process_layer.xhtml">CPPDetectionPostProcessLayer</a>, CLTargetInfo &gt; </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_detection_post_process_layer_node.xhtml">DetectionPostProcessLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_c_l_functions_factory_8cpp_source.xhtml#l00164">164</a> of file <a class="el" href="_c_l_functions_factory_8cpp_source.xhtml">CLFunctionsFactory.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;{</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    validate_node&lt;CLTargetInfo&gt;(node, 3 <span class="comment">/* expected inputs */</span>, 4 <span class="comment">/* expected outputs */</span>);</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    CLTargetInfo::TensorType           *input0      = get_backing_tensor&lt;CLTargetInfo&gt;(node.input(0));</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    CLTargetInfo::TensorType           *input1      = get_backing_tensor&lt;CLTargetInfo&gt;(node.input(1));</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    CLTargetInfo::TensorType           *input2      = get_backing_tensor&lt;CLTargetInfo&gt;(node.input(2));</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    CLTargetInfo::TensorType           *output0     = get_backing_tensor&lt;CLTargetInfo&gt;(node.output(0));</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    CLTargetInfo::TensorType           *output1     = get_backing_tensor&lt;CLTargetInfo&gt;(node.output(1));</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    CLTargetInfo::TensorType           *output2     = get_backing_tensor&lt;CLTargetInfo&gt;(node.output(2));</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    CLTargetInfo::TensorType           *output3     = get_backing_tensor&lt;CLTargetInfo&gt;(node.output(3));</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="keyword">const</span> DetectionPostProcessLayerInfo detect_info = node.detection_post_process_info();</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(input0 == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(input1 == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(input2 == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output0 == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output1 == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output2 == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output3 == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="comment">// Create and configure function</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="keyword">auto</span> func = support::cpp14::make_unique&lt;CPPDetectionPostProcessLayer&gt;();</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    func-&gt;configure(input0, input1, input2, output0, output1, output2, output3, detect_info);</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="comment">// Log info</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                               &lt;&lt; node.name()</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.type()</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; CLTargetInfo::TargetType</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; input0-&gt;info()-&gt;data_type()</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input0 shape: &quot;</span> &lt;&lt; input0-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input1 shape: &quot;</span> &lt;&lt; input1-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input2 shape: &quot;</span> &lt;&lt; input2-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output0 shape: &quot;</span> &lt;&lt; output0-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output1 shape: &quot;</span> &lt;&lt; output1-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output2 shape: &quot;</span> &lt;&lt; output2-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output3 shape: &quot;</span> &lt;&lt; output3-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; DetectionPostProcessLayer info: &quot;</span> &lt;&lt; detect_info</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <span class="keyword">auto</span> wrap_function = support::cpp14::make_unique&lt;CPPWrapperFunction&gt;();</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    wrap_function-&gt;register_function(std::move(func));</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    wrap_function-&gt;register_tensor(input0);</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    wrap_function-&gt;register_tensor(input1);</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    wrap_function-&gt;register_tensor(input2);</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    wrap_function-&gt;register_tensor(output0);</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    wrap_function-&gt;register_tensor(output1);</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    wrap_function-&gt;register_tensor(output2);</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    wrap_function-&gt;register_tensor(output3);</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <span class="keywordflow">return</span> std::move(wrap_function);</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_ab2d8baa35618bdad1d2814942355311e"><div class="ttname"><a href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_INFO(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00054">Logger.h:54</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="graph_2_logger_8h_source.xhtml#l00054">ARM_COMPUTE_LOG_GRAPH_INFO</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">ITensorInfo::data_type()</a>, <a class="el" href="_detection_post_process_layer_node_8cpp_source.xhtml#l00042">DetectionPostProcessLayerNode::detection_post_process_info()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, and <a class="el" href="_detection_post_process_layer_node_8cpp_source.xhtml#l00094">DetectionPostProcessLayerNode::type()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_functions_factory_8cpp_source.xhtml#l00221">CLFunctionFactory::create()</a>.</p>

</div>
</div>
<a id="aa37faf92f78c0f5cefe2d43c8bf07f18"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa37faf92f78c0f5cefe2d43c8bf07f18">&#9670;&nbsp;</a></span>create_eltwise_layer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;<a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a>&gt; arm_compute::graph::backends::detail::create_eltwise_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_eltwise_layer_node.xhtml">EltwiseLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a backend element-wise operation layer function. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">EltwiseFunctions</td><td>Backend element-wise function </td></tr>
    <tr><td class="paramname">TargetInfo</td><td>Target-specific information</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to create the backend function for</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Backend element-wise operation layer function </dd></dl>

<p class="definition">Definition at line <a class="el" href="_function_helpers_8h_source.xhtml#l00759">759</a> of file <a class="el" href="_function_helpers_8h_source.xhtml">FunctionHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;{</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 2 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *input1         = get_backing_tensor&lt;TargetInfo&gt;(node.input(0));</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *input2         = get_backing_tensor&lt;TargetInfo&gt;(node.input(1));</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *output         = get_backing_tensor&lt;TargetInfo&gt;(node.output(0));</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4">EltwiseOperation</a>           eltwise_op     = node.eltwise_operation();</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a>              <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5d58c32bff63e4c34b3234f884a4da58">convert_policy</a> = node.convert_policy();</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(input1 == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(input2 == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;    std::unique_ptr&lt;IFunction&gt; func = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;    std::string                func_name;</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;    <span class="keywordflow">if</span>(eltwise_op == EltwiseOperation::Add)</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;    {</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;        std::tie(func, func_name) = create_named_function&lt;typename EltwiseFunctions::Addition&gt;(</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;                                        std::string(<span class="stringliteral">&quot;ArithmeticAddition&quot;</span>),</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;                                        input1, input2, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5d58c32bff63e4c34b3234f884a4da58">convert_policy</a>);</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;    }</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(eltwise_op == EltwiseOperation::Sub)</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;    {</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;        std::tie(func, func_name) = create_named_function&lt;typename EltwiseFunctions::Subtraction&gt;(</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;                                        std::string(<span class="stringliteral">&quot;ArithmeticSubtraction&quot;</span>),</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;                                        input1, input2, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5d58c32bff63e4c34b3234f884a4da58">convert_policy</a>);</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;    }</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(eltwise_op == EltwiseOperation::Mul)</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;    {</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;        std::tie(func, func_name) = create_named_function&lt;typename EltwiseFunctions::Multiplication&gt;(</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;                                        std::string(<span class="stringliteral">&quot;PixelWiseMultiplication&quot;</span>),</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;                                        input1, input2, output, 1.f, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5d58c32bff63e4c34b3234f884a4da58">convert_policy</a>, node.rounding_policy());</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;    }</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;    {</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;        <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported element-wise operation!&quot;</span>);</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;    }</div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;    <span class="comment">// Log info</span></div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;                               &lt;&lt; node.name()</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.type()</div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Operation: &quot;</span> &lt;&lt; func_name</div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; input1-&gt;info()-&gt;data_type()</div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Shape: &quot;</span> &lt;&lt; input1-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;</div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;    <span class="keywordflow">return</span> func;</div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1graph_xhtml_aa12973876c037bddff8e9ece94aca0e4"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4">arm_compute::graph::EltwiseOperation</a></div><div class="ttdeci">EltwiseOperation</div><div class="ttdoc">Supported Element-wise operations.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00100">Types.h:100</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00352">Error.h:352</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a5d58c32bff63e4c34b3234f884a4da58"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a5d58c32bff63e4c34b3234f884a4da58">arm_compute::test::validation::convert_policy</a></div><div class="ttdeci">convert_policy</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_pixel_wise_multiplication_8cpp_source.xhtml#l00375">PixelWiseMultiplication.cpp:375</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_ab2d8baa35618bdad1d2814942355311e"><div class="ttname"><a href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_INFO(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00054">Logger.h:54</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a82b8ac759c804bc1fb4e2d21e178fb6f"><div class="ttname"><a href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">arm_compute::ConvertPolicy</a></div><div class="ttdeci">ConvertPolicy</div><div class="ttdoc">Policy to handle overflow.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00359">Types.h:359</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4aec211f7c20af43e742bf2570c3cb84f9">arm_compute::graph::Add</a>, <a class="el" href="_error_8h_source.xhtml#l00352">ARM_COMPUTE_ERROR</a>, <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="graph_2_logger_8h_source.xhtml#l00054">ARM_COMPUTE_LOG_GRAPH_INFO</a>, <a class="el" href="_eltwise_layer_node_8cpp_source.xhtml#l00045">EltwiseLayerNode::convert_policy()</a>, <a class="el" href="_n_e_o_n_2_pixel_wise_multiplication_8cpp_source.xhtml#l00375">arm_compute::test::validation::convert_policy</a>, <a class="el" href="_eltwise_layer_node_8cpp_source.xhtml#l00040">EltwiseLayerNode::eltwise_operation()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4a62b6d55816cf737bfc6f42e60df1a3f2">arm_compute::graph::Mul</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, <a class="el" href="_eltwise_layer_node_8cpp_source.xhtml#l00050">EltwiseLayerNode::rounding_policy()</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4ae80155eceb940c89e2de63ad05868db2">arm_compute::graph::Sub</a>, and <a class="el" href="_eltwise_layer_node_8cpp_source.xhtml#l00077">EltwiseLayerNode::type()</a>.</p>

</div>
</div>
<a id="a863bcac2c361e883edf7f9abb4abd9a7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a863bcac2c361e883edf7f9abb4abd9a7">&#9670;&nbsp;</a></span>create_eltwise_layer&lt; GCEltwiseFunctions, GCTargetInfo &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;<a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a>&gt; <a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#aa37faf92f78c0f5cefe2d43c8bf07f18">arm_compute::graph::backends::detail::create_eltwise_layer</a>&lt; GCEltwiseFunctions, GCTargetInfo &gt; </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_eltwise_layer_node.xhtml">EltwiseLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_g_c_functions_factory_8cpp_source.xhtml#l00178">178</a> of file <a class="el" href="_g_c_functions_factory_8cpp_source.xhtml">GCFunctionsFactory.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;{</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        <span class="stringliteral">&quot;Creating GC EltwiseLayer node with ID : &quot;</span> &lt;&lt; node.id() &lt;&lt; <span class="stringliteral">&quot; and Name: &quot;</span> &lt;&lt; node.name() &lt;&lt; std::endl);</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(node.num_inputs() != 2);</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(node.num_outputs() != 1);</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    GCTargetInfo::TensorType *input1         = get_backing_tensor&lt;GCTargetInfo&gt;(node.input(0));</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    GCTargetInfo::TensorType *input2         = get_backing_tensor&lt;GCTargetInfo&gt;(node.input(1));</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    GCTargetInfo::TensorType *output         = get_backing_tensor&lt;GCTargetInfo&gt;(node.output(0));</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4">EltwiseOperation</a>    eltwise_op     = node.eltwise_operation();</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a>       <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5d58c32bff63e4c34b3234f884a4da58">convert_policy</a> = node.convert_policy();</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(input1 == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(input2 == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    std::unique_ptr&lt;IFunction&gt; func = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    std::string                func_name;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="keywordflow">if</span>(eltwise_op == EltwiseOperation::Add)</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    {</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        std::tie(func, func_name) = create_named_function&lt;GCEltwiseFunctions::Addition&gt;(</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                                        std::string(<span class="stringliteral">&quot;GCArithmeticAddition&quot;</span>),</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                                        input1, input2, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5d58c32bff63e4c34b3234f884a4da58">convert_policy</a>);</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    }</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(eltwise_op == EltwiseOperation::Sub)</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    {</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Arithmetic subtraction is not supported in GLES backend&quot;</span>);</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    }</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(eltwise_op == EltwiseOperation::Mul)</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    {</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        std::tie(func, func_name) = create_named_function&lt;GCEltwiseFunctions::Multiplication&gt;(</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                                        std::string(<span class="stringliteral">&quot;PixelWiseMultiplication&quot;</span>),</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                                        input1, input2, output, 1.f);</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    }</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    {</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported element-wise operation!&quot;</span>);</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    }</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <span class="comment">// Log info</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                               &lt;&lt; node.name()</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.type()</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; GCTargetInfo::TargetType</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Operation: &quot;</span> &lt;&lt; func_name</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; input1-&gt;info()-&gt;data_type()</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Shape: &quot;</span> &lt;&lt; input1-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="keywordflow">return</span> func;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1graph_xhtml_aa12973876c037bddff8e9ece94aca0e4"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4">arm_compute::graph::EltwiseOperation</a></div><div class="ttdeci">EltwiseOperation</div><div class="ttdoc">Supported Element-wise operations.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00100">Types.h:100</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00352">Error.h:352</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a5d58c32bff63e4c34b3234f884a4da58"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a5d58c32bff63e4c34b3234f884a4da58">arm_compute::test::validation::convert_policy</a></div><div class="ttdeci">convert_policy</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_pixel_wise_multiplication_8cpp_source.xhtml#l00375">PixelWiseMultiplication.cpp:375</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_ab2d8baa35618bdad1d2814942355311e"><div class="ttname"><a href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_INFO(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00054">Logger.h:54</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_a300d153929a99c7b571d4cda3f7987a5"><div class="ttname"><a href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_VERBOSE(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00050">Logger.h:50</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a82b8ac759c804bc1fb4e2d21e178fb6f"><div class="ttname"><a href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">arm_compute::ConvertPolicy</a></div><div class="ttdeci">ConvertPolicy</div><div class="ttdoc">Policy to handle overflow.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00359">Types.h:359</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00352">ARM_COMPUTE_ERROR</a>, <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="graph_2_logger_8h_source.xhtml#l00054">ARM_COMPUTE_LOG_GRAPH_INFO</a>, <a class="el" href="graph_2_logger_8h_source.xhtml#l00050">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>, <a class="el" href="_eltwise_layer_node_8cpp_source.xhtml#l00045">EltwiseLayerNode::convert_policy()</a>, <a class="el" href="_n_e_o_n_2_pixel_wise_multiplication_8cpp_source.xhtml#l00375">arm_compute::test::validation::convert_policy</a>, <a class="el" href="_eltwise_layer_node_8cpp_source.xhtml#l00040">EltwiseLayerNode::eltwise_operation()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00102">INode::id()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00178">INode::num_inputs()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00183">INode::num_outputs()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, and <a class="el" href="_eltwise_layer_node_8cpp_source.xhtml#l00077">EltwiseLayerNode::type()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_g_c_functions_factory_8cpp_source.xhtml#l00232">GCFunctionFactory::create()</a>.</p>

</div>
</div>
<a id="a7880c3b249a6dad40da0ebcf6600b0e1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7880c3b249a6dad40da0ebcf6600b0e1">&#9670;&nbsp;</a></span>create_flatten_layer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;<a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a>&gt; arm_compute::graph::backends::detail::create_flatten_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_flatten_layer_node.xhtml">FlattenLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a backend flatten layer function. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">FlattenLayerFunction</td><td>Backend flatten function </td></tr>
    <tr><td class="paramname">TargetInfo</td><td>Target-specific information</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to create the backend function for</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Backend flatten layer function </dd></dl>

<p class="definition">Definition at line <a class="el" href="_function_helpers_8h_source.xhtml#l00821">821</a> of file <a class="el" href="_function_helpers_8h_source.xhtml">FunctionHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;{</div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 1 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;</div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>  = get_backing_tensor&lt;TargetInfo&gt;(node.input(0));</div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *output = get_backing_tensor&lt;TargetInfo&gt;(node.output(0));</div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;</div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;</div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;    <span class="comment">// Create and configure function</span></div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;    <span class="keyword">auto</span> func = support::cpp14::make_unique&lt;FlattenLayerFunction&gt;();</div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;    func-&gt;configure(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output);</div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;</div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;    <span class="comment">// Log info</span></div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;                               &lt;&lt; node.name()</div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.type()</div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;</div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_ab2d8baa35618bdad1d2814942355311e"><div class="ttname"><a href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_INFO(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00054">Logger.h:54</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="graph_2_logger_8h_source.xhtml#l00054">ARM_COMPUTE_LOG_GRAPH_INFO</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">arm_compute::test::validation::input</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, and <a class="el" href="_flatten_layer_node_8cpp_source.xhtml#l00065">FlattenLayerNode::type()</a>.</p>

</div>
</div>
<a id="ac64bbd0df74207f9ab59953e21311178"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac64bbd0df74207f9ab59953e21311178">&#9670;&nbsp;</a></span>create_fully_connected_layer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;<a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a>&gt; arm_compute::graph::backends::detail::create_fully_connected_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_fully_connected_layer_node.xhtml">FullyConnectedLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;&#160;</td>
          <td class="paramname"><em>ctx</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a backend fully connected layer function. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">FullyConnectedLayerFunction</td><td>Backend fully-connected function </td></tr>
    <tr><td class="paramname">TargetInfo</td><td>Target-specific information</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to create the backend function for </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ctx</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> context</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Backend fully connected layer function </dd></dl>

<p class="definition">Definition at line <a class="el" href="_function_helpers_8h_source.xhtml#l00860">860</a> of file <a class="el" href="_function_helpers_8h_source.xhtml">FunctionHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;{</div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 3 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;</div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>   = get_backing_tensor&lt;TargetInfo&gt;(node.input(0));</div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a> = get_backing_tensor&lt;TargetInfo&gt;(node.input(1));</div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *biases  = get_backing_tensor&lt;TargetInfo&gt;(node.input(2));</div><div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *output  = get_backing_tensor&lt;TargetInfo&gt;(node.output(0));</div><div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;    <span class="keyword">const</span> FullyConnectedLayerInfo    fc_info = node.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>();</div><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;</div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a> == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;</div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;    <span class="comment">// Create and configure function</span></div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;    <span class="keyword">auto</span> wm   = <a class="code" href="namespacearm__compute_1_1graph_1_1backends.xhtml#a32d8fea34ca818386a078939a03e3cb8">get_weights_manager</a>(ctx, TargetInfo::TargetType);</div><div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;    <span class="keyword">auto</span> mm   = <a class="code" href="namespacearm__compute_1_1graph_1_1backends.xhtml#a8919c520c1cb9086dd1116de509bd481">get_memory_manager</a>(ctx, TargetInfo::TargetType);</div><div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;    <span class="keyword">auto</span> func = support::cpp14::make_unique&lt;FullyConnectedLayerFunction&gt;(mm, wm.get());</div><div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;    func-&gt;configure(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, biases, output, fc_info);</div><div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;</div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_quantized = <a class="code" href="namespacearm__compute.xhtml#a14f46283f316e7f0fad301d5c1507e9f">is_data_type_quantized_asymmetric</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type());</div><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;</div><div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;    <span class="comment">// Log info</span></div><div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;    std::ostringstream qss;</div><div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;    <span class="keywordflow">if</span>(is_quantized)</div><div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;    {</div><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;        qss &lt;&lt; <span class="stringliteral">&quot; Input QuantInfo: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;quantization_info()</div><div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;            &lt;&lt; <span class="stringliteral">&quot; Weights QuantInfo: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#ac74736e3863207232a23b7181c1d0f44">quantization_info</a>()</div><div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;            &lt;&lt; <span class="stringliteral">&quot; Output QuantInfo: &quot;</span> &lt;&lt; output-&gt;info()-&gt;quantization_info();</div><div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;    }</div><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div><div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;                               &lt;&lt; node.name()</div><div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.type()</div><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div><div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div><div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;                               &lt;&lt; qss.str()</div><div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Weights shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">tensor_shape</a>()</div><div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;</div><div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div><div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_l_tensor_xhtml_ad45f0c01a0713dfb6bd7232c7f396fc4"><div class="ttname"><a href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">arm_compute::CLTensor::info</a></div><div class="ttdeci">TensorInfo * info() const override</div><div class="ttdoc">Interface to be implemented by the child class to return the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tensor_8cpp_source.xhtml#l00041">CLTensor.cpp:41</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml_ac74736e3863207232a23b7181c1d0f44"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#ac74736e3863207232a23b7181c1d0f44">arm_compute::TensorInfo::quantization_info</a></div><div class="ttdeci">QuantizationInfo quantization_info() const override</div><div class="ttdoc">Get the quantization settings (scale and offset) of the tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00311">TensorInfo.h:311</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_ab2d8baa35618bdad1d2814942355311e"><div class="ttname"><a href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_INFO(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00054">Logger.h:54</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a14f46283f316e7f0fad301d5c1507e9f"><div class="ttname"><a href="namespacearm__compute.xhtml#a14f46283f316e7f0fad301d5c1507e9f">arm_compute::is_data_type_quantized_asymmetric</a></div><div class="ttdeci">bool is_data_type_quantized_asymmetric(DataType dt)</div><div class="ttdoc">Check if a given data type is of asymmetric quantized type.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_utils_8h_source.xhtml#l01139">Utils.h:1139</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_xhtml_a8919c520c1cb9086dd1116de509bd481"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends.xhtml#a8919c520c1cb9086dd1116de509bd481">arm_compute::graph::backends::get_memory_manager</a></div><div class="ttdeci">std::shared_ptr&lt; IMemoryManager &gt; get_memory_manager(GraphContext &amp;ctx, Target target)</div><div class="ttdoc">Returns the memory manager for a given target.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2backends_2_utils_8h_source.xhtml#l00089">Utils.h:89</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a64a08a9fec5aeee8650e7182b6d171d0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">arm_compute::test::validation::weights</a></div><div class="ttdeci">CLTensor weights</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00188">ConvolutionLayer.cpp:188</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_xhtml_a32d8fea34ca818386a078939a03e3cb8"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends.xhtml#a32d8fea34ca818386a078939a03e3cb8">arm_compute::graph::backends::get_weights_manager</a></div><div class="ttdeci">std::shared_ptr&lt; IWeightsManager &gt; get_weights_manager(GraphContext &amp;ctx, Target target)</div><div class="ttdoc">Returns the weights manager for a given target.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2backends_2_utils_8h_source.xhtml#l00102">Utils.h:102</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml_a269b19ce3f357ac65f41f9951906e38e"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">arm_compute::TensorInfo::tensor_shape</a></div><div class="ttdeci">const TensorShape &amp; tensor_shape() const override</div><div class="ttdoc">Size for each dimension of the tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00261">TensorInfo.h:261</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="graph_2_logger_8h_source.xhtml#l00054">ARM_COMPUTE_LOG_GRAPH_INFO</a>, <a class="el" href="arm__compute_2graph_2backends_2_utils_8h_source.xhtml#l00089">arm_compute::graph::backends::get_memory_manager()</a>, <a class="el" href="arm__compute_2graph_2backends_2_utils_8h_source.xhtml#l00102">arm_compute::graph::backends::get_weights_manager()</a>, <a class="el" href="src_2graph_2nodes_2_fully_connected_layer_8cpp_source.xhtml#l00100">FullyConnectedLayerNode::info()</a>, <a class="el" href="_c_l_tensor_8cpp_source.xhtml#l00041">CLTensor::info()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">arm_compute::test::validation::input</a>, <a class="el" href="arm__compute_2core_2_utils_8h_source.xhtml#l01139">arm_compute::is_data_type_quantized_asymmetric()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00311">TensorInfo::quantization_info()</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00261">TensorInfo::tensor_shape()</a>, <a class="el" href="src_2graph_2nodes_2_fully_connected_layer_8cpp_source.xhtml#l00126">FullyConnectedLayerNode::type()</a>, and <a class="el" href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00188">arm_compute::test::validation::weights</a>.</p>

</div>
</div>
<a id="a7f44d10197128d3f478626b5c68b3c35"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7f44d10197128d3f478626b5c68b3c35">&#9670;&nbsp;</a></span>create_fused_convolution_batch_normalization_layer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;<a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a>&gt; arm_compute::graph::backends::detail::create_fused_convolution_batch_normalization_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_fused_convolution_batch_normalization_node.xhtml">FusedConvolutionBatchNormalizationNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;&#160;</td>
          <td class="paramname"><em>ctx</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a backend batch normalization layer function. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">BatchNormalizationLayerFunction</td><td>Backend batch normalization function </td></tr>
    <tr><td class="paramname">TargetInfo</td><td>Target-specific information</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to create the backend function for </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ctx</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> context</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Backend batch normalization layer function </dd></dl>

<p class="definition">Definition at line <a class="el" href="_function_helpers_8h_source.xhtml#l00182">182</a> of file <a class="el" href="_function_helpers_8h_source.xhtml">FunctionHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;{</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 7 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>   = get_backing_tensor&lt;TargetInfo&gt;(node.input(0));</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a> = get_backing_tensor&lt;TargetInfo&gt;(node.input(1));</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *biases  = get_backing_tensor&lt;TargetInfo&gt;(node.input(2));</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *mean    = get_backing_tensor&lt;TargetInfo&gt;(node.input(3));</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *var     = get_backing_tensor&lt;TargetInfo&gt;(node.input(4));</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *beta    = get_backing_tensor&lt;TargetInfo&gt;(node.input(5));</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *gamma   = get_backing_tensor&lt;TargetInfo&gt;(node.input(6));</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *output = get_backing_tensor&lt;TargetInfo&gt;(node.output(0));</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="keyword">const</span> PadStrideInfo       <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>  = node.convolution_info();</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a> = node.num_groups();</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span>                fast_math  = node.fast_math_hint() == FastMathHint::Enabled;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="keyword">const</span> ActivationLayerInfo fused_act  = node.fused_activation();</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>               <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>    = node.epsilon();</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="comment">// Create and configure function (we assume that functions have been validated before creation)</span></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    std::shared_ptr&lt;IMemoryManager&gt; mm = <a class="code" href="namespacearm__compute_1_1graph_1_1backends.xhtml#a8919c520c1cb9086dd1116de509bd481">get_memory_manager</a>(ctx, TargetInfo::TargetType);</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    std::unique_ptr&lt;IFunction&gt;      func;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    std::string                     func_name;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="keyword">using</span> FType = FusedConvolutionBatchNormalizationFunction&lt;TargetInfo, FusedLayerTypes&gt;;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <span class="comment">// Create and configure function</span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    std::tie(func, func_name) = create_named_memory_managed_function&lt;FType&gt;(</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                                    std::string(<span class="stringliteral">&quot;FusedConvolutionBatchNormalizationLayer&quot;</span>), mm, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, biases, output, mean, var, beta, gamma, <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a>, fast_math, fused_act);</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="comment">// Log info</span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                               &lt;&lt; node.name()</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.type()</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Weights shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">tensor_shape</a>()</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                               &lt;&lt; (fused_act.enabled() ? <span class="stringliteral">&quot; &quot;</span> + <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#ace86dc6f3dfa4f3c256b3999ab250c0a">to_string</a>(fused_act.activation()) : <span class="stringliteral">&quot;&quot;</span>)</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <span class="keywordflow">return</span> func;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_l_tensor_xhtml_ad45f0c01a0713dfb6bd7232c7f396fc4"><div class="ttname"><a href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">arm_compute::CLTensor::info</a></div><div class="ttdeci">TensorInfo * info() const override</div><div class="ttdoc">Interface to be implemented by the child class to return the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tensor_8cpp_source.xhtml#l00041">CLTensor.cpp:41</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1framework_xhtml_ace86dc6f3dfa4f3c256b3999ab250c0a"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#ace86dc6f3dfa4f3c256b3999ab250c0a">arm_compute::test::framework::to_string</a></div><div class="ttdeci">std::string to_string(DatasetMode mode)</div><div class="ttdef"><b>Definition:</b> <a href="_dataset_modes_8h_source.xhtml#l00100">DatasetModes.h:100</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a00525ff582f16038a1d3819aa44a23a3"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">arm_compute::test::validation::conv_info</a></div><div class="ttdeci">conv_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_winograd_8cpp_source.xhtml#l00597">Winograd.cpp:597</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_ab2d8baa35618bdad1d2814942355311e"><div class="ttname"><a href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_INFO(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00054">Logger.h:54</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a2270b3e1d20651d2d8341c858c890830"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">arm_compute::test::validation::num_groups</a></div><div class="ttdeci">const unsigned int num_groups</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00148">Im2Col.cpp:148</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_xhtml_a8919c520c1cb9086dd1116de509bd481"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends.xhtml#a8919c520c1cb9086dd1116de509bd481">arm_compute::graph::backends::get_memory_manager</a></div><div class="ttdeci">std::shared_ptr&lt; IMemoryManager &gt; get_memory_manager(GraphContext &amp;ctx, Target target)</div><div class="ttdoc">Returns the memory manager for a given target.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2backends_2_utils_8h_source.xhtml#l00089">Utils.h:89</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a64a08a9fec5aeee8650e7182b6d171d0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">arm_compute::test::validation::weights</a></div><div class="ttdeci">CLTensor weights</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00188">ConvolutionLayer.cpp:188</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml_a269b19ce3f357ac65f41f9951906e38e"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">arm_compute::TensorInfo::tensor_shape</a></div><div class="ttdeci">const TensorShape &amp; tensor_shape() const override</div><div class="ttdoc">Size for each dimension of the tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00261">TensorInfo.h:261</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1quantization_xhtml_a552dc3787d7ea1675f3e4e8993501d58"><div class="ttname"><a href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">arm_compute::quantization::epsilon</a></div><div class="ttdeci">constexpr float epsilon</div><div class="ttdef"><b>Definition:</b> <a href="_asymm_helpers_8cpp_source.xhtml#l00036">AsymmHelpers.cpp:36</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01649">ActivationLayerInfo::activation()</a>, <a class="el" href="graph_2_logger_8h_source.xhtml#l00054">ARM_COMPUTE_LOG_GRAPH_INFO</a>, <a class="el" href="_c_l_2_winograd_8cpp_source.xhtml#l00597">arm_compute::test::validation::conv_info</a>, <a class="el" href="_fused_convolution_batch_normalization_node_8cpp_source.xhtml#l00071">FusedConvolutionBatchNormalizationNode::convolution_info()</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#ac85a46f3ebd3ab09f576a994ac2dce11a00d23a76e43b46dae9ec7aa9dcbebb32">arm_compute::graph::Enabled</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01664">ActivationLayerInfo::enabled()</a>, <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00036">arm_compute::quantization::epsilon</a>, <a class="el" href="_fused_convolution_batch_normalization_node_8cpp_source.xhtml#l00051">FusedConvolutionBatchNormalizationNode::epsilon()</a>, <a class="el" href="_fused_convolution_batch_normalization_node_8cpp_source.xhtml#l00066">FusedConvolutionBatchNormalizationNode::fast_math_hint()</a>, <a class="el" href="_fused_convolution_batch_normalization_node_8cpp_source.xhtml#l00081">FusedConvolutionBatchNormalizationNode::fused_activation()</a>, <a class="el" href="arm__compute_2graph_2backends_2_utils_8h_source.xhtml#l00089">arm_compute::graph::backends::get_memory_manager()</a>, <a class="el" href="_c_l_tensor_8cpp_source.xhtml#l00041">CLTensor::info()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">arm_compute::test::validation::input</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_fused_convolution_batch_normalization_node_8cpp_source.xhtml#l00076">FusedConvolutionBatchNormalizationNode::num_groups()</a>, <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00148">arm_compute::test::validation::num_groups</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00261">TensorInfo::tensor_shape()</a>, <a class="el" href="tests_2_type_printer_8h_source.xhtml#l00064">arm_compute::to_string()</a>, <a class="el" href="_fused_convolution_batch_normalization_node_8cpp_source.xhtml#l00139">FusedConvolutionBatchNormalizationNode::type()</a>, and <a class="el" href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00188">arm_compute::test::validation::weights</a>.</p>

</div>
</div>
<a id="a7ec865e1ee296647ec995b501e5ceb8b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7ec865e1ee296647ec995b501e5ceb8b">&#9670;&nbsp;</a></span>create_fused_depthwise_convolution_batch_normalization_layer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;<a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a>&gt; arm_compute::graph::backends::detail::create_fused_depthwise_convolution_batch_normalization_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_fused_depthwise_convolution_batch_normalization_node.xhtml">FusedDepthwiseConvolutionBatchNormalizationNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;&#160;</td>
          <td class="paramname"><em>ctx</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a backend fused depthwise convolution batch normalization layer function. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">FusedLayerTypes</td><td>Fused layer types </td></tr>
    <tr><td class="paramname">TargetInfo</td><td>Target-specific information</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to create the backend function for </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ctx</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> context</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Backend fused depthwise convolution batch normalization layer function </dd></dl>

<p class="definition">Definition at line <a class="el" href="_function_helpers_8h_source.xhtml#l00239">239</a> of file <a class="el" href="_function_helpers_8h_source.xhtml">FunctionHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;{</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 7 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>   = get_backing_tensor&lt;TargetInfo&gt;(node.input(0));</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a> = get_backing_tensor&lt;TargetInfo&gt;(node.input(1));</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *biases  = get_backing_tensor&lt;TargetInfo&gt;(node.input(2));</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *mean    = get_backing_tensor&lt;TargetInfo&gt;(node.input(3));</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *var     = get_backing_tensor&lt;TargetInfo&gt;(node.input(4));</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *beta    = get_backing_tensor&lt;TargetInfo&gt;(node.input(5));</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *gamma   = get_backing_tensor&lt;TargetInfo&gt;(node.input(6));</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *output = get_backing_tensor&lt;TargetInfo&gt;(node.output(0));</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="keyword">const</span> PadStrideInfo       <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>        = node.convolution_info();</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>        depth_multiplier = node.depth_multiplier();</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <span class="keyword">const</span> ActivationLayerInfo fused_act        = node.fused_activation();</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>               <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>          = node.epsilon();</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="comment">// Create and configure function (we assume that functions have been validated before creation)</span></div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    std::shared_ptr&lt;IMemoryManager&gt; mm = <a class="code" href="namespacearm__compute_1_1graph_1_1backends.xhtml#a8919c520c1cb9086dd1116de509bd481">get_memory_manager</a>(ctx, TargetInfo::TargetType);</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    std::unique_ptr&lt;IFunction&gt;      func;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    std::string                     func_name;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    <span class="keyword">using</span> FType = FusedDepthwiseConvolutionBatchNormalizationFunction&lt;TargetInfo, FusedLayerTypes&gt;;</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    <span class="comment">// Create and configure function</span></div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    std::tie(func, func_name) = create_named_memory_managed_function&lt;FType&gt;(</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                                    std::string(<span class="stringliteral">&quot;FusedDepthwiseConvolutionBatchNormalizationLayer&quot;</span>), mm, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, biases, output, mean, var, beta, gamma, <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, depth_multiplier, fused_act);</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <span class="comment">// Log info</span></div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                               &lt;&lt; node.name()</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.type()</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Weights shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">tensor_shape</a>()</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;                               &lt;&lt; (fused_act.enabled() ? <span class="stringliteral">&quot; &quot;</span> + <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#ace86dc6f3dfa4f3c256b3999ab250c0a">to_string</a>(fused_act.activation()) : <span class="stringliteral">&quot;&quot;</span>)</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    <span class="keywordflow">return</span> func;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_l_tensor_xhtml_ad45f0c01a0713dfb6bd7232c7f396fc4"><div class="ttname"><a href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">arm_compute::CLTensor::info</a></div><div class="ttdeci">TensorInfo * info() const override</div><div class="ttdoc">Interface to be implemented by the child class to return the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tensor_8cpp_source.xhtml#l00041">CLTensor.cpp:41</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1framework_xhtml_ace86dc6f3dfa4f3c256b3999ab250c0a"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#ace86dc6f3dfa4f3c256b3999ab250c0a">arm_compute::test::framework::to_string</a></div><div class="ttdeci">std::string to_string(DatasetMode mode)</div><div class="ttdef"><b>Definition:</b> <a href="_dataset_modes_8h_source.xhtml#l00100">DatasetModes.h:100</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a00525ff582f16038a1d3819aa44a23a3"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">arm_compute::test::validation::conv_info</a></div><div class="ttdeci">conv_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_winograd_8cpp_source.xhtml#l00597">Winograd.cpp:597</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_ab2d8baa35618bdad1d2814942355311e"><div class="ttname"><a href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_INFO(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00054">Logger.h:54</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_xhtml_a8919c520c1cb9086dd1116de509bd481"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends.xhtml#a8919c520c1cb9086dd1116de509bd481">arm_compute::graph::backends::get_memory_manager</a></div><div class="ttdeci">std::shared_ptr&lt; IMemoryManager &gt; get_memory_manager(GraphContext &amp;ctx, Target target)</div><div class="ttdoc">Returns the memory manager for a given target.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2backends_2_utils_8h_source.xhtml#l00089">Utils.h:89</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a64a08a9fec5aeee8650e7182b6d171d0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">arm_compute::test::validation::weights</a></div><div class="ttdeci">CLTensor weights</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00188">ConvolutionLayer.cpp:188</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml_a269b19ce3f357ac65f41f9951906e38e"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">arm_compute::TensorInfo::tensor_shape</a></div><div class="ttdeci">const TensorShape &amp; tensor_shape() const override</div><div class="ttdoc">Size for each dimension of the tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00261">TensorInfo.h:261</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1quantization_xhtml_a552dc3787d7ea1675f3e4e8993501d58"><div class="ttname"><a href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">arm_compute::quantization::epsilon</a></div><div class="ttdeci">constexpr float epsilon</div><div class="ttdef"><b>Definition:</b> <a href="_asymm_helpers_8cpp_source.xhtml#l00036">AsymmHelpers.cpp:36</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01649">ActivationLayerInfo::activation()</a>, <a class="el" href="graph_2_logger_8h_source.xhtml#l00054">ARM_COMPUTE_LOG_GRAPH_INFO</a>, <a class="el" href="_c_l_2_winograd_8cpp_source.xhtml#l00597">arm_compute::test::validation::conv_info</a>, <a class="el" href="_fused_depthwise_convolution_batch_normalization_node_8cpp_source.xhtml#l00061">FusedDepthwiseConvolutionBatchNormalizationNode::convolution_info()</a>, <a class="el" href="_fused_depthwise_convolution_batch_normalization_node_8cpp_source.xhtml#l00066">FusedDepthwiseConvolutionBatchNormalizationNode::depth_multiplier()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01664">ActivationLayerInfo::enabled()</a>, <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00036">arm_compute::quantization::epsilon</a>, <a class="el" href="_fused_depthwise_convolution_batch_normalization_node_8cpp_source.xhtml#l00056">FusedDepthwiseConvolutionBatchNormalizationNode::epsilon()</a>, <a class="el" href="_fused_depthwise_convolution_batch_normalization_node_8cpp_source.xhtml#l00071">FusedDepthwiseConvolutionBatchNormalizationNode::fused_activation()</a>, <a class="el" href="arm__compute_2graph_2backends_2_utils_8h_source.xhtml#l00089">arm_compute::graph::backends::get_memory_manager()</a>, <a class="el" href="_c_l_tensor_8cpp_source.xhtml#l00041">CLTensor::info()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">arm_compute::test::validation::input</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00261">TensorInfo::tensor_shape()</a>, <a class="el" href="tests_2_type_printer_8h_source.xhtml#l00064">arm_compute::to_string()</a>, <a class="el" href="_fused_depthwise_convolution_batch_normalization_node_8cpp_source.xhtml#l00130">FusedDepthwiseConvolutionBatchNormalizationNode::type()</a>, and <a class="el" href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00188">arm_compute::test::validation::weights</a>.</p>

</div>
</div>
<a id="a1a18725e5da4a7ae62c9a3b731ab8fe1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1a18725e5da4a7ae62c9a3b731ab8fe1">&#9670;&nbsp;</a></span>create_generate_proposals_layer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;<a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a>&gt; arm_compute::graph::backends::detail::create_generate_proposals_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_generate_proposals_layer_node.xhtml">GenerateProposalsLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;&#160;</td>
          <td class="paramname"><em>ctx</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a backend generate proposals layer function. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">GenerateProposalsLayerFunction</td><td>Backend generate proposals function </td></tr>
    <tr><td class="paramname">TargetInfo</td><td>Target-specific information</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to create the backend function for </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ctx</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> context</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Backend generate proposals layer function </dd></dl>

<p class="definition">Definition at line <a class="el" href="_function_helpers_8h_source.xhtml#l00916">916</a> of file <a class="el" href="_function_helpers_8h_source.xhtml">FunctionHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;{</div><div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 3 <span class="comment">/* expected inputs */</span>, 3 <span class="comment">/* expected outputs */</span>);</div><div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;</div><div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *scores              = get_backing_tensor&lt;TargetInfo&gt;(node.input(0));</div><div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *deltas              = get_backing_tensor&lt;TargetInfo&gt;(node.input(1));</div><div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *anchors             = get_backing_tensor&lt;TargetInfo&gt;(node.input(2));</div><div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *proposals           = get_backing_tensor&lt;TargetInfo&gt;(node.output(0));</div><div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *scores_out          = get_backing_tensor&lt;TargetInfo&gt;(node.output(1));</div><div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *num_valid_proposals = get_backing_tensor&lt;TargetInfo&gt;(node.output(2));</div><div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;    <span class="keyword">const</span> GenerateProposalsInfo      <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>                = node.info();</div><div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;</div><div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(scores == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(deltas == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(anchors == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(proposals == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(scores_out == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;</div><div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;    <span class="comment">// Create and configure function</span></div><div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;    <span class="keyword">auto</span> func = support::cpp14::make_unique&lt;GenerateProposalsLayerFunction&gt;(<a class="code" href="namespacearm__compute_1_1graph_1_1backends.xhtml#a8919c520c1cb9086dd1116de509bd481">get_memory_manager</a>(ctx, TargetInfo::TargetType));</div><div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;    func-&gt;configure(scores, deltas, anchors, proposals, scores_out, num_valid_proposals, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>);</div><div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;</div><div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;    <span class="comment">// Log info</span></div><div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span> &lt;&lt; node.type()</div><div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target &quot;</span> &lt;&lt; TargetInfo::TargetType</div><div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; scores-&gt;info()-&gt;data_type()</div><div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Scores shape: &quot;</span> &lt;&lt; scores-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Deltas shape: &quot;</span> &lt;&lt; deltas-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Anchors shape: &quot;</span> &lt;&lt; anchors-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Proposals shape: &quot;</span> &lt;&lt; proposals-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Num valid proposals shape: &quot;</span> &lt;&lt; num_valid_proposals-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Scores Out shape: &quot;</span> &lt;&lt; scores_out-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;</div><div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div><div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_ab2d8baa35618bdad1d2814942355311e"><div class="ttname"><a href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_INFO(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00054">Logger.h:54</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_xhtml_a8919c520c1cb9086dd1116de509bd481"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends.xhtml#a8919c520c1cb9086dd1116de509bd481">arm_compute::graph::backends::get_memory_manager</a></div><div class="ttdeci">std::shared_ptr&lt; IMemoryManager &gt; get_memory_manager(GraphContext &amp;ctx, Target target)</div><div class="ttdoc">Returns the memory manager for a given target.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2backends_2_utils_8h_source.xhtml#l00089">Utils.h:89</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a4f4125dba5283887b34f889b1c615c0c"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">arm_compute::test::validation::info</a></div><div class="ttdeci">info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00182">ConvolutionLayer.cpp:182</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="graph_2_logger_8h_source.xhtml#l00054">ARM_COMPUTE_LOG_GRAPH_INFO</a>, <a class="el" href="arm__compute_2graph_2backends_2_utils_8h_source.xhtml#l00089">arm_compute::graph::backends::get_memory_manager()</a>, <a class="el" href="_generate_proposals_layer_node_8cpp_source.xhtml#l00042">GenerateProposalsLayerNode::info()</a>, <a class="el" href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00182">arm_compute::test::validation::info</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, and <a class="el" href="_generate_proposals_layer_node_8cpp_source.xhtml#l00092">GenerateProposalsLayerNode::type()</a>.</p>

</div>
</div>
<a id="a2dfc97df083b68f8409ba21d8a0110d8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2dfc97df083b68f8409ba21d8a0110d8">&#9670;&nbsp;</a></span>create_normalization_layer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;<a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a>&gt; arm_compute::graph::backends::detail::create_normalization_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_normalization_layer_node.xhtml">NormalizationLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;&#160;</td>
          <td class="paramname"><em>ctx</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a backend normalization layer function. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">NormalizationLayerFunction</td><td>Backend normalization function </td></tr>
    <tr><td class="paramname">TargetInfo</td><td>Target-specific information</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to create the backend function for </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ctx</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> context</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Backend normalization layer function </dd></dl>

<p class="definition">Definition at line <a class="el" href="_function_helpers_8h_source.xhtml#l00965">965</a> of file <a class="el" href="_function_helpers_8h_source.xhtml">FunctionHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;{</div><div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(ctx);</div><div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;</div><div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 1 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div><div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;</div><div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>     = get_backing_tensor&lt;TargetInfo&gt;(node.input(0));</div><div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *output    = get_backing_tensor&lt;TargetInfo&gt;(node.output(0));</div><div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;    <span class="keyword">const</span> NormalizationLayerInfo     norm_info = node.normalization_info();</div><div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;</div><div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;    <span class="comment">// Create and configure function</span></div><div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;    <span class="keyword">auto</span> func = support::cpp14::make_unique&lt;NormalizationLayerFunction&gt;();</div><div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;    func-&gt;configure(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, norm_info);</div><div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;</div><div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;    <span class="comment">// Log info</span></div><div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div><div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;                               &lt;&lt; node.name()</div><div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.type()</div><div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div><div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div><div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Normalization info: &quot;</span> &lt;&lt; norm_info.type()</div><div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;</div><div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div><div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_ab2d8baa35618bdad1d2814942355311e"><div class="ttname"><a href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_INFO(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00054">Logger.h:54</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="graph_2_logger_8h_source.xhtml#l00054">ARM_COMPUTE_LOG_GRAPH_INFO</a>, <a class="el" href="_error_8h_source.xhtml#l00152">ARM_COMPUTE_UNUSED</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">arm_compute::test::validation::input</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_normalization_layer_node_8cpp_source.xhtml#l00041">NormalizationLayerNode::normalization_info()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, and <a class="el" href="_normalization_layer_node_8cpp_source.xhtml#l00069">NormalizationLayerNode::type()</a>.</p>

</div>
</div>
<a id="ab68902cd2bb95bf47f5967718015343c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab68902cd2bb95bf47f5967718015343c">&#9670;&nbsp;</a></span>create_normalization_layer&lt; NENormalizationLayer, NETargetInfo &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;<a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a>&gt; <a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a2dfc97df083b68f8409ba21d8a0110d8">arm_compute::graph::backends::detail::create_normalization_layer</a>&lt; <a class="el" href="classarm__compute_1_1_n_e_normalization_layer.xhtml">NENormalizationLayer</a>, NETargetInfo &gt; </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_normalization_layer_node.xhtml">NormalizationLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;&#160;</td>
          <td class="paramname"><em>ctx</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_function_factory_8cpp_source.xhtml#l00156">156</a> of file <a class="el" href="_n_e_function_factory_8cpp_source.xhtml">NEFunctionFactory.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;{</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    validate_node&lt;NETargetInfo&gt;(node, 1 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    NETargetInfo::TensorType    *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>     = get_backing_tensor&lt;NETargetInfo&gt;(node.input(0));</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    NETargetInfo::TensorType    *output    = get_backing_tensor&lt;NETargetInfo&gt;(node.output(0));</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keyword">const</span> NormalizationLayerInfo norm_info = node.normalization_info();</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="comment">// Create and configure function</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keyword">auto</span> func = support::cpp14::make_unique&lt;NENormalizationLayer&gt;(<a class="code" href="namespacearm__compute_1_1graph_1_1backends.xhtml#a8919c520c1cb9086dd1116de509bd481">get_memory_manager</a>(ctx, NETargetInfo::TargetType));</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    func-&gt;configure(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, norm_info);</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="comment">// Log info</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                               &lt;&lt; node.name()</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.type()</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; NETargetInfo::TargetType</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Normalization info: &quot;</span> &lt;&lt; norm_info.type()</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_ab2d8baa35618bdad1d2814942355311e"><div class="ttname"><a href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_INFO(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00054">Logger.h:54</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_xhtml_a8919c520c1cb9086dd1116de509bd481"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends.xhtml#a8919c520c1cb9086dd1116de509bd481">arm_compute::graph::backends::get_memory_manager</a></div><div class="ttdeci">std::shared_ptr&lt; IMemoryManager &gt; get_memory_manager(GraphContext &amp;ctx, Target target)</div><div class="ttdoc">Returns the memory manager for a given target.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2backends_2_utils_8h_source.xhtml#l00089">Utils.h:89</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="graph_2_logger_8h_source.xhtml#l00054">ARM_COMPUTE_LOG_GRAPH_INFO</a>, <a class="el" href="arm__compute_2graph_2backends_2_utils_8h_source.xhtml#l00089">arm_compute::graph::backends::get_memory_manager()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">arm_compute::test::validation::input</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_normalization_layer_node_8cpp_source.xhtml#l00041">NormalizationLayerNode::normalization_info()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, and <a class="el" href="_normalization_layer_node_8cpp_source.xhtml#l00069">NormalizationLayerNode::type()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_n_e_function_factory_8cpp_source.xhtml#l00186">NEFunctionFactory::create()</a>.</p>

</div>
</div>
<a id="a92b35a365f58606a13baaf4501d78d9e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a92b35a365f58606a13baaf4501d78d9e">&#9670;&nbsp;</a></span>create_normalize_planar_yuv_layer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;<a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a>&gt; arm_compute::graph::backends::detail::create_normalize_planar_yuv_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_normalize_planar_y_u_v_layer_node.xhtml">NormalizePlanarYUVLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a backend normalize planar YUV layer function. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">NormalizePlanarYUVLayerFunction</td><td>Backend normalize planar YUV function </td></tr>
    <tr><td class="paramname">TargetInfo</td><td>Target-specific information</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to create the backend function for</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Backend normalize plnar YUV layer function </dd></dl>

<p class="definition">Definition at line <a class="el" href="_function_helpers_8h_source.xhtml#l01006">1006</a> of file <a class="el" href="_function_helpers_8h_source.xhtml">FunctionHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;{</div><div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 3 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div><div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;</div><div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>  = get_backing_tensor&lt;TargetInfo&gt;(node.input(0));</div><div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *mean   = get_backing_tensor&lt;TargetInfo&gt;(node.input(1));</div><div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *std    = get_backing_tensor&lt;TargetInfo&gt;(node.input(2));</div><div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *output = get_backing_tensor&lt;TargetInfo&gt;(node.output(0));</div><div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(mean == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(std == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;</div><div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;    <span class="comment">// Create and configure function</span></div><div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;    <span class="keyword">auto</span> func = support::cpp14::make_unique&lt;NormalizePlanarYUVLayerFunction&gt;();</div><div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;    func-&gt;configure(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, mean, std);</div><div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;</div><div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;    <span class="comment">// Log info</span></div><div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div><div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;                               &lt;&lt; node.name()</div><div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.type()</div><div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div><div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div><div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;</div><div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div><div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_ab2d8baa35618bdad1d2814942355311e"><div class="ttname"><a href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_INFO(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00054">Logger.h:54</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="graph_2_logger_8h_source.xhtml#l00054">ARM_COMPUTE_LOG_GRAPH_INFO</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">arm_compute::test::validation::input</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, and <a class="el" href="_normalize_planar_y_u_v_layer_node_8cpp_source.xhtml#l00063">NormalizePlanarYUVLayerNode::type()</a>.</p>

</div>
</div>
<a id="a127d0cce11ed3d411eaa5bd25c7a3ac1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a127d0cce11ed3d411eaa5bd25c7a3ac1">&#9670;&nbsp;</a></span>create_pad_layer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;<a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a>&gt; arm_compute::graph::backends::detail::create_pad_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_pad_layer_node.xhtml">PadLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a backend pad layer function. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">PadLayerFunction</td><td>Backend pad function </td></tr>
    <tr><td class="paramname">TargetInfo</td><td>Target-specific information</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to create the backend function for</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Backend pad layer function </dd></dl>

<p class="definition">Definition at line <a class="el" href="_function_helpers_8h_source.xhtml#l01046">1046</a> of file <a class="el" href="_function_helpers_8h_source.xhtml">FunctionHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;{</div><div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 1 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div><div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;</div><div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>   = get_backing_tensor&lt;TargetInfo&gt;(node.input(0));</div><div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *output  = get_backing_tensor&lt;TargetInfo&gt;(node.output(0));</div><div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ac1a1b012674e0f1de071a611391828ad">PaddingList</a>               &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a735a025fce26c1ef147b54426df18181">padding</a> = node.padding();</div><div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;</div><div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;    <span class="comment">// Create and configure function</span></div><div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;    <span class="keyword">auto</span> func = support::cpp14::make_unique&lt;PadLayerFunction&gt;();</div><div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;    func-&gt;configure(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a735a025fce26c1ef147b54426df18181">padding</a>);</div><div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;</div><div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;    <span class="comment">// Log info</span></div><div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div><div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;                               &lt;&lt; node.name()</div><div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.type()</div><div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div><div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div><div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;</div><div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div><div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;}</div><div class="ttc" id="namespacearm__compute_xhtml_ac1a1b012674e0f1de071a611391828ad"><div class="ttname"><a href="namespacearm__compute.xhtml#ac1a1b012674e0f1de071a611391828ad">arm_compute::PaddingList</a></div><div class="ttdeci">std::vector&lt; PaddingInfo &gt; PaddingList</div><div class="ttdoc">List of padding information.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00455">Types.h:455</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_ab2d8baa35618bdad1d2814942355311e"><div class="ttname"><a href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_INFO(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00054">Logger.h:54</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a735a025fce26c1ef147b54426df18181"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a735a025fce26c1ef147b54426df18181">arm_compute::test::validation::padding</a></div><div class="ttdeci">const PaddingSize padding</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_absolute_difference_8cpp_source.xhtml#l00113">AbsoluteDifference.cpp:113</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="graph_2_logger_8h_source.xhtml#l00054">ARM_COMPUTE_LOG_GRAPH_INFO</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">arm_compute::test::validation::input</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, <a class="el" href="_pad_layer_node_8cpp_source.xhtml#l00042">PadLayerNode::padding()</a>, <a class="el" href="_c_l_2_absolute_difference_8cpp_source.xhtml#l00113">arm_compute::test::validation::padding</a>, and <a class="el" href="_pad_layer_node_8cpp_source.xhtml#l00077">PadLayerNode::type()</a>.</p>

</div>
</div>
<a id="aa65a1becdfa5fc3533d79bba0cd4095c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa65a1becdfa5fc3533d79bba0cd4095c">&#9670;&nbsp;</a></span>create_permute_layer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;<a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a>&gt; arm_compute::graph::backends::detail::create_permute_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_permute_layer_node.xhtml">PermuteLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a backend permute layer function. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">PermuteLayerFunction</td><td>Backend permute function </td></tr>
    <tr><td class="paramname">TargetInfo</td><td>Target-specific information</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to create the backend function for</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Backend permute layer function </dd></dl>

<p class="definition">Definition at line <a class="el" href="_function_helpers_8h_source.xhtml#l01084">1084</a> of file <a class="el" href="_function_helpers_8h_source.xhtml">FunctionHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;{</div><div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 1 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div><div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;</div><div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>  = get_backing_tensor&lt;TargetInfo&gt;(node.input(0));</div><div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *output = get_backing_tensor&lt;TargetInfo&gt;(node.output(0));</div><div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a33e65be485104e2e9e69fca551d6f492">PermutationVector</a>         &amp;perm   = node.permutation_vector();</div><div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;</div><div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;    <span class="comment">// Create and configure function</span></div><div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;    <span class="keyword">auto</span> func = support::cpp14::make_unique&lt;PermuteLayerFunction&gt;();</div><div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;    func-&gt;configure(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, perm);</div><div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;</div><div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;    <span class="comment">// Log info</span></div><div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div><div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;                               &lt;&lt; node.name()</div><div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.type()</div><div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div><div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div><div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Permutation vector: &quot;</span> &lt;&lt; perm</div><div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;</div><div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div><div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;}</div><div class="ttc" id="namespacearm__compute_xhtml_a33e65be485104e2e9e69fca551d6f492"><div class="ttname"><a href="namespacearm__compute.xhtml#a33e65be485104e2e9e69fca551d6f492">arm_compute::PermutationVector</a></div><div class="ttdeci">Strides PermutationVector</div><div class="ttdoc">Permutation vector.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00048">Types.h:48</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_ab2d8baa35618bdad1d2814942355311e"><div class="ttname"><a href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_INFO(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00054">Logger.h:54</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="graph_2_logger_8h_source.xhtml#l00054">ARM_COMPUTE_LOG_GRAPH_INFO</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">arm_compute::test::validation::input</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, <a class="el" href="_permute_layer_node_8cpp_source.xhtml#l00042">PermuteLayerNode::permutation_vector()</a>, and <a class="el" href="_permute_layer_node_8cpp_source.xhtml#l00077">PermuteLayerNode::type()</a>.</p>

</div>
</div>
<a id="a0e51b62035e79b0f12964cae17ce0480"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0e51b62035e79b0f12964cae17ce0480">&#9670;&nbsp;</a></span>create_pooling_layer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;<a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a>&gt; arm_compute::graph::backends::detail::create_pooling_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_pooling_layer_node.xhtml">PoolingLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a backend pooling layer function. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">PoolingLayerFunction</td><td>Backend pooling function </td></tr>
    <tr><td class="paramname">TargetInfo</td><td>Target-specific information</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to create the backend function for</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Backend pooling layer function </dd></dl>

<p class="definition">Definition at line <a class="el" href="_function_helpers_8h_source.xhtml#l01123">1123</a> of file <a class="el" href="_function_helpers_8h_source.xhtml">FunctionHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;{</div><div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 1 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div><div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;</div><div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>     = get_backing_tensor&lt;TargetInfo&gt;(node.input(0));</div><div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *output    = get_backing_tensor&lt;TargetInfo&gt;(node.output(0));</div><div class="line"><a name="l01130"></a><span class="lineno"> 1130</span>&#160;    <span class="keyword">const</span> PoolingLayerInfo           pool_info = node.pooling_info();</div><div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;</div><div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160;    <span class="comment">// Create and configure function</span></div><div class="line"><a name="l01135"></a><span class="lineno"> 1135</span>&#160;    <span class="keyword">auto</span> func = support::cpp14::make_unique&lt;PoolingLayerFunction&gt;();</div><div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;    func-&gt;configure(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, pool_info);</div><div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;</div><div class="line"><a name="l01138"></a><span class="lineno"> 1138</span>&#160;    <span class="comment">// Log info</span></div><div class="line"><a name="l01139"></a><span class="lineno"> 1139</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div><div class="line"><a name="l01140"></a><span class="lineno"> 1140</span>&#160;                               &lt;&lt; node.name()</div><div class="line"><a name="l01141"></a><span class="lineno"> 1141</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.type()</div><div class="line"><a name="l01142"></a><span class="lineno"> 1142</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div><div class="line"><a name="l01143"></a><span class="lineno"> 1143</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div><div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l01145"></a><span class="lineno"> 1145</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l01146"></a><span class="lineno"> 1146</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Pooling info: &quot;</span> &lt;&lt; pool_info.pool_type</div><div class="line"><a name="l01147"></a><span class="lineno"> 1147</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l01148"></a><span class="lineno"> 1148</span>&#160;</div><div class="line"><a name="l01149"></a><span class="lineno"> 1149</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div><div class="line"><a name="l01150"></a><span class="lineno"> 1150</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_ab2d8baa35618bdad1d2814942355311e"><div class="ttname"><a href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_INFO(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00054">Logger.h:54</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="graph_2_logger_8h_source.xhtml#l00054">ARM_COMPUTE_LOG_GRAPH_INFO</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">arm_compute::test::validation::input</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, <a class="el" href="_pooling_layer_node_8cpp_source.xhtml#l00042">PoolingLayerNode::pooling_info()</a>, and <a class="el" href="_pooling_layer_node_8cpp_source.xhtml#l00091">PoolingLayerNode::type()</a>.</p>

</div>
</div>
<a id="a6806f347d8b4c0986cdfe4c45918972b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6806f347d8b4c0986cdfe4c45918972b">&#9670;&nbsp;</a></span>create_prelu_layer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;<a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a>&gt; arm_compute::graph::backends::detail::create_prelu_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_p_relu_layer_node.xhtml">PReluLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a backend PRelu layer function. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">PReluFunction</td><td>Backend PRelu function </td></tr>
    <tr><td class="paramname">TargetInfo</td><td>Target-specific information</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to create the backend function for</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Backend PRelu layer function </dd></dl>

<p class="definition">Definition at line <a class="el" href="_function_helpers_8h_source.xhtml#l01162">1162</a> of file <a class="el" href="_function_helpers_8h_source.xhtml">FunctionHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01163"></a><span class="lineno"> 1163</span>&#160;{</div><div class="line"><a name="l01164"></a><span class="lineno"> 1164</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 2 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div><div class="line"><a name="l01165"></a><span class="lineno"> 1165</span>&#160;</div><div class="line"><a name="l01166"></a><span class="lineno"> 1166</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l01167"></a><span class="lineno"> 1167</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>  = get_backing_tensor&lt;TargetInfo&gt;(node.input(0));</div><div class="line"><a name="l01168"></a><span class="lineno"> 1168</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3161c2c93c655dd30953372064ec627b">alpha</a>  = get_backing_tensor&lt;TargetInfo&gt;(node.input(1));</div><div class="line"><a name="l01169"></a><span class="lineno"> 1169</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *output = get_backing_tensor&lt;TargetInfo&gt;(node.output(0));</div><div class="line"><a name="l01170"></a><span class="lineno"> 1170</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> == <span class="keyword">nullptr</span> || <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3161c2c93c655dd30953372064ec627b">alpha</a> == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l01172"></a><span class="lineno"> 1172</span>&#160;</div><div class="line"><a name="l01173"></a><span class="lineno"> 1173</span>&#160;    <span class="comment">// Create and configure function</span></div><div class="line"><a name="l01174"></a><span class="lineno"> 1174</span>&#160;    <span class="keyword">auto</span> func = support::cpp14::make_unique&lt;PReluFunction&gt;();</div><div class="line"><a name="l01175"></a><span class="lineno"> 1175</span>&#160;    func-&gt;configure(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3161c2c93c655dd30953372064ec627b">alpha</a>, output);</div><div class="line"><a name="l01176"></a><span class="lineno"> 1176</span>&#160;</div><div class="line"><a name="l01177"></a><span class="lineno"> 1177</span>&#160;    <span class="comment">// Log info</span></div><div class="line"><a name="l01178"></a><span class="lineno"> 1178</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div><div class="line"><a name="l01179"></a><span class="lineno"> 1179</span>&#160;                               &lt;&lt; node.name()</div><div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.type()</div><div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div><div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div><div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;</div><div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div><div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_ab2d8baa35618bdad1d2814942355311e"><div class="ttname"><a href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_INFO(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00054">Logger.h:54</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a3161c2c93c655dd30953372064ec627b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a3161c2c93c655dd30953372064ec627b">arm_compute::test::validation::alpha</a></div><div class="ttdeci">const float alpha</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_accumulate_8cpp_source.xhtml#l00103">Accumulate.cpp:103</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_o_n_2_accumulate_8cpp_source.xhtml#l00103">arm_compute::test::validation::alpha</a>, <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="graph_2_logger_8h_source.xhtml#l00054">ARM_COMPUTE_LOG_GRAPH_INFO</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">arm_compute::test::validation::input</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, and <a class="el" href="_p_relu_layer_node_8cpp_source.xhtml#l00061">PReluLayerNode::type()</a>.</p>

</div>
</div>
<a id="a5567ed5ad9c8fb45d2748bab27163530"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5567ed5ad9c8fb45d2748bab27163530">&#9670;&nbsp;</a></span>create_print_layer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;<a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a>&gt; arm_compute::graph::backends::detail::create_print_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_print_layer_node.xhtml">PrintLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a backend print layer function. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">TargetInfo</td><td>Target-specific information</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to create the backend function for</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Backend print layer function </dd></dl>

<p class="definition">Definition at line <a class="el" href="_function_helpers_8h_source.xhtml#l01199">1199</a> of file <a class="el" href="_function_helpers_8h_source.xhtml">FunctionHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;{</div><div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 1 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div><div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160;</div><div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> = get_backing_tensor&lt;TargetInfo&gt;(node.input(0));</div><div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l01205"></a><span class="lineno"> 1205</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>);</div><div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160;</div><div class="line"><a name="l01207"></a><span class="lineno"> 1207</span>&#160;    <span class="comment">// Log info</span></div><div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div><div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;                               &lt;&lt; node.name()</div><div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.type()</div><div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div><div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div><div class="line"><a name="l01213"></a><span class="lineno"> 1213</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l01214"></a><span class="lineno"> 1214</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160;</div><div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_ab2d8baa35618bdad1d2814942355311e"><div class="ttname"><a href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_INFO(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00054">Logger.h:54</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="graph_2_logger_8h_source.xhtml#l00054">ARM_COMPUTE_LOG_GRAPH_INFO</a>, <a class="el" href="_error_8h_source.xhtml#l00152">ARM_COMPUTE_UNUSED</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">arm_compute::test::validation::input</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, and <a class="el" href="_print_layer_node_8cpp_source.xhtml#l00081">PrintLayerNode::type()</a>.</p>

</div>
</div>
<a id="aaf28fee838c38cc4da407a4dbc62f7b0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaf28fee838c38cc4da407a4dbc62f7b0">&#9670;&nbsp;</a></span>create_priorbox_layer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;<a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a>&gt; arm_compute::graph::backends::detail::create_priorbox_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_prior_box_layer_node.xhtml">PriorBoxLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a backend priorbox layer function. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">PriorBoxLayerFunction</td><td>Backend priorbox function </td></tr>
    <tr><td class="paramname">TargetInfo</td><td>Target-specific information</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to create the backend function for</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Backend priorbox layer function </dd></dl>

<p class="definition">Definition at line <a class="el" href="_function_helpers_8h_source.xhtml#l01229">1229</a> of file <a class="el" href="_function_helpers_8h_source.xhtml">FunctionHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;{</div><div class="line"><a name="l01231"></a><span class="lineno"> 1231</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 2 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div><div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160;</div><div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *input0     = get_backing_tensor&lt;TargetInfo&gt;(node.input(0));</div><div class="line"><a name="l01235"></a><span class="lineno"> 1235</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *input1     = get_backing_tensor&lt;TargetInfo&gt;(node.input(1));</div><div class="line"><a name="l01236"></a><span class="lineno"> 1236</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *output     = get_backing_tensor&lt;TargetInfo&gt;(node.output(0));</div><div class="line"><a name="l01237"></a><span class="lineno"> 1237</span>&#160;    <span class="keyword">const</span> PriorBoxLayerInfo          prior_info = node.priorbox_info();</div><div class="line"><a name="l01238"></a><span class="lineno"> 1238</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(input0 == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l01239"></a><span class="lineno"> 1239</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(input1 == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l01240"></a><span class="lineno"> 1240</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;</div><div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;    <span class="comment">// Create and configure function</span></div><div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160;    <span class="keyword">auto</span> func = support::cpp14::make_unique&lt;PriorBoxLayerFunction&gt;();</div><div class="line"><a name="l01244"></a><span class="lineno"> 1244</span>&#160;    func-&gt;configure(input0, input1, output, prior_info);</div><div class="line"><a name="l01245"></a><span class="lineno"> 1245</span>&#160;</div><div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;    <span class="comment">// Log info</span></div><div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div><div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160;                               &lt;&lt; node.name()</div><div class="line"><a name="l01249"></a><span class="lineno"> 1249</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.type()</div><div class="line"><a name="l01250"></a><span class="lineno"> 1250</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div><div class="line"><a name="l01251"></a><span class="lineno"> 1251</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; input0-&gt;info()-&gt;data_type()</div><div class="line"><a name="l01252"></a><span class="lineno"> 1252</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input0 shape: &quot;</span> &lt;&lt; input0-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l01253"></a><span class="lineno"> 1253</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input1 shape: &quot;</span> &lt;&lt; input1-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l01254"></a><span class="lineno"> 1254</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l01255"></a><span class="lineno"> 1255</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; PriorBoxLayer info: &quot;</span> &lt;&lt; prior_info</div><div class="line"><a name="l01256"></a><span class="lineno"> 1256</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l01257"></a><span class="lineno"> 1257</span>&#160;</div><div class="line"><a name="l01258"></a><span class="lineno"> 1258</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div><div class="line"><a name="l01259"></a><span class="lineno"> 1259</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_ab2d8baa35618bdad1d2814942355311e"><div class="ttname"><a href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_INFO(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00054">Logger.h:54</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="graph_2_logger_8h_source.xhtml#l00054">ARM_COMPUTE_LOG_GRAPH_INFO</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, <a class="el" href="_prior_box_layer_node_8cpp_source.xhtml#l00042">PriorBoxLayerNode::priorbox_info()</a>, and <a class="el" href="_prior_box_layer_node_8cpp_source.xhtml#l00085">PriorBoxLayerNode::type()</a>.</p>

</div>
</div>
<a id="a31be99a5d0f75045fc411e211824baad"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a31be99a5d0f75045fc411e211824baad">&#9670;&nbsp;</a></span>create_quantization_layer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;<a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a>&gt; arm_compute::graph::backends::detail::create_quantization_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_quantization_layer_node.xhtml">QuantizationLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a backend quantization layer function. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">QuantizationLayerFunction</td><td>Backend quantization function </td></tr>
    <tr><td class="paramname">TargetInfo</td><td>Target-specific information</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to create the backend function for</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Backend quantization layer function </dd></dl>

<p class="definition">Definition at line <a class="el" href="_function_helpers_8h_source.xhtml#l01271">1271</a> of file <a class="el" href="_function_helpers_8h_source.xhtml">FunctionHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01272"></a><span class="lineno"> 1272</span>&#160;{</div><div class="line"><a name="l01273"></a><span class="lineno"> 1273</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 1 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div><div class="line"><a name="l01274"></a><span class="lineno"> 1274</span>&#160;</div><div class="line"><a name="l01275"></a><span class="lineno"> 1275</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l01276"></a><span class="lineno"> 1276</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>  = get_backing_tensor&lt;TargetInfo&gt;(node.input(0));</div><div class="line"><a name="l01277"></a><span class="lineno"> 1277</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *output = get_backing_tensor&lt;TargetInfo&gt;(node.output(0));</div><div class="line"><a name="l01278"></a><span class="lineno"> 1278</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l01279"></a><span class="lineno"> 1279</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l01280"></a><span class="lineno"> 1280</span>&#160;</div><div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160;    <span class="comment">// Create and configure function</span></div><div class="line"><a name="l01282"></a><span class="lineno"> 1282</span>&#160;    <span class="keyword">auto</span> func = support::cpp14::make_unique&lt;QuantizationLayerFunction&gt;();</div><div class="line"><a name="l01283"></a><span class="lineno"> 1283</span>&#160;    func-&gt;configure(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output);</div><div class="line"><a name="l01284"></a><span class="lineno"> 1284</span>&#160;</div><div class="line"><a name="l01285"></a><span class="lineno"> 1285</span>&#160;    <span class="comment">// Log info</span></div><div class="line"><a name="l01286"></a><span class="lineno"> 1286</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div><div class="line"><a name="l01287"></a><span class="lineno"> 1287</span>&#160;                               &lt;&lt; node.name()</div><div class="line"><a name="l01288"></a><span class="lineno"> 1288</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.type()</div><div class="line"><a name="l01289"></a><span class="lineno"> 1289</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div><div class="line"><a name="l01290"></a><span class="lineno"> 1290</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div><div class="line"><a name="l01291"></a><span class="lineno"> 1291</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l01292"></a><span class="lineno"> 1292</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l01293"></a><span class="lineno"> 1293</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l01294"></a><span class="lineno"> 1294</span>&#160;</div><div class="line"><a name="l01295"></a><span class="lineno"> 1295</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div><div class="line"><a name="l01296"></a><span class="lineno"> 1296</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_ab2d8baa35618bdad1d2814942355311e"><div class="ttname"><a href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_INFO(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00054">Logger.h:54</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="graph_2_logger_8h_source.xhtml#l00054">ARM_COMPUTE_LOG_GRAPH_INFO</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">arm_compute::test::validation::input</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, and <a class="el" href="_quantization_layer_node_8cpp_source.xhtml#l00067">QuantizationLayerNode::type()</a>.</p>

</div>
</div>
<a id="a0331e6b2b68ea76e9415f7f148d92601"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0331e6b2b68ea76e9415f7f148d92601">&#9670;&nbsp;</a></span>create_reorg_layer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;<a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a>&gt; arm_compute::graph::backends::detail::create_reorg_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_reorg_layer_node.xhtml">ReorgLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a backend reorg layer function. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">ReorgLayerFunction</td><td>Backend reorg function </td></tr>
    <tr><td class="paramname">TargetInfo</td><td>Target-specific information</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to create the backend function for</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Backend reshape layer function </dd></dl>

<p class="definition">Definition at line <a class="el" href="_function_helpers_8h_source.xhtml#l01308">1308</a> of file <a class="el" href="_function_helpers_8h_source.xhtml">FunctionHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01309"></a><span class="lineno"> 1309</span>&#160;{</div><div class="line"><a name="l01310"></a><span class="lineno"> 1310</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 1 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div><div class="line"><a name="l01311"></a><span class="lineno"> 1311</span>&#160;</div><div class="line"><a name="l01312"></a><span class="lineno"> 1312</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l01313"></a><span class="lineno"> 1313</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>  = get_backing_tensor&lt;TargetInfo&gt;(node.input(0));</div><div class="line"><a name="l01314"></a><span class="lineno"> 1314</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *output = get_backing_tensor&lt;TargetInfo&gt;(node.output(0));</div><div class="line"><a name="l01315"></a><span class="lineno"> 1315</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l01316"></a><span class="lineno"> 1316</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l01317"></a><span class="lineno"> 1317</span>&#160;</div><div class="line"><a name="l01318"></a><span class="lineno"> 1318</span>&#160;    <span class="comment">// Create and configure function</span></div><div class="line"><a name="l01319"></a><span class="lineno"> 1319</span>&#160;    <span class="keyword">auto</span> func = support::cpp14::make_unique&lt;ReorgLayerFunction&gt;();</div><div class="line"><a name="l01320"></a><span class="lineno"> 1320</span>&#160;    func-&gt;configure(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, node.stride());</div><div class="line"><a name="l01321"></a><span class="lineno"> 1321</span>&#160;</div><div class="line"><a name="l01322"></a><span class="lineno"> 1322</span>&#160;    <span class="comment">// Log info</span></div><div class="line"><a name="l01323"></a><span class="lineno"> 1323</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div><div class="line"><a name="l01324"></a><span class="lineno"> 1324</span>&#160;                               &lt;&lt; node.name()</div><div class="line"><a name="l01325"></a><span class="lineno"> 1325</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.type()</div><div class="line"><a name="l01326"></a><span class="lineno"> 1326</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div><div class="line"><a name="l01327"></a><span class="lineno"> 1327</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div><div class="line"><a name="l01328"></a><span class="lineno"> 1328</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l01329"></a><span class="lineno"> 1329</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l01330"></a><span class="lineno"> 1330</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l01331"></a><span class="lineno"> 1331</span>&#160;</div><div class="line"><a name="l01332"></a><span class="lineno"> 1332</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div><div class="line"><a name="l01333"></a><span class="lineno"> 1333</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_ab2d8baa35618bdad1d2814942355311e"><div class="ttname"><a href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_INFO(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00054">Logger.h:54</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="graph_2_logger_8h_source.xhtml#l00054">ARM_COMPUTE_LOG_GRAPH_INFO</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">arm_compute::test::validation::input</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, <a class="el" href="_reorg_layer_node_8cpp_source.xhtml#l00041">ReorgLayerNode::stride()</a>, and <a class="el" href="_reorg_layer_node_8cpp_source.xhtml#l00088">ReorgLayerNode::type()</a>.</p>

</div>
</div>
<a id="ad1922deea021647290d0c206723e6c73"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad1922deea021647290d0c206723e6c73">&#9670;&nbsp;</a></span>create_reshape_layer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;<a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a>&gt; arm_compute::graph::backends::detail::create_reshape_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_reshape_layer_node.xhtml">ReshapeLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a backend reshape layer function. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">ReshapeLayerFunction</td><td>Backend reshape function </td></tr>
    <tr><td class="paramname">TargetInfo</td><td>Target-specific information</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to create the backend function for</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Backend reshape layer function </dd></dl>

<p class="definition">Definition at line <a class="el" href="_function_helpers_8h_source.xhtml#l01345">1345</a> of file <a class="el" href="_function_helpers_8h_source.xhtml">FunctionHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01346"></a><span class="lineno"> 1346</span>&#160;{</div><div class="line"><a name="l01347"></a><span class="lineno"> 1347</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 1 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div><div class="line"><a name="l01348"></a><span class="lineno"> 1348</span>&#160;</div><div class="line"><a name="l01349"></a><span class="lineno"> 1349</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l01350"></a><span class="lineno"> 1350</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>  = get_backing_tensor&lt;TargetInfo&gt;(node.input(0));</div><div class="line"><a name="l01351"></a><span class="lineno"> 1351</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *output = get_backing_tensor&lt;TargetInfo&gt;(node.output(0));</div><div class="line"><a name="l01352"></a><span class="lineno"> 1352</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l01353"></a><span class="lineno"> 1353</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l01354"></a><span class="lineno"> 1354</span>&#160;</div><div class="line"><a name="l01355"></a><span class="lineno"> 1355</span>&#160;    <span class="comment">// Create and configure function</span></div><div class="line"><a name="l01356"></a><span class="lineno"> 1356</span>&#160;    <span class="keyword">auto</span> func = support::cpp14::make_unique&lt;ReshapeLayerFunction&gt;();</div><div class="line"><a name="l01357"></a><span class="lineno"> 1357</span>&#160;    func-&gt;configure(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output);</div><div class="line"><a name="l01358"></a><span class="lineno"> 1358</span>&#160;</div><div class="line"><a name="l01359"></a><span class="lineno"> 1359</span>&#160;    <span class="comment">// Log info</span></div><div class="line"><a name="l01360"></a><span class="lineno"> 1360</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div><div class="line"><a name="l01361"></a><span class="lineno"> 1361</span>&#160;                               &lt;&lt; node.name()</div><div class="line"><a name="l01362"></a><span class="lineno"> 1362</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.type()</div><div class="line"><a name="l01363"></a><span class="lineno"> 1363</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div><div class="line"><a name="l01364"></a><span class="lineno"> 1364</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div><div class="line"><a name="l01365"></a><span class="lineno"> 1365</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l01366"></a><span class="lineno"> 1366</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l01367"></a><span class="lineno"> 1367</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l01368"></a><span class="lineno"> 1368</span>&#160;</div><div class="line"><a name="l01369"></a><span class="lineno"> 1369</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div><div class="line"><a name="l01370"></a><span class="lineno"> 1370</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_ab2d8baa35618bdad1d2814942355311e"><div class="ttname"><a href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_INFO(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00054">Logger.h:54</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="graph_2_logger_8h_source.xhtml#l00054">ARM_COMPUTE_LOG_GRAPH_INFO</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">arm_compute::test::validation::input</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, and <a class="el" href="src_2graph_2nodes_2_reshape_layer_8cpp_source.xhtml#l00066">ReshapeLayerNode::type()</a>.</p>

</div>
</div>
<a id="adb3a9be16de941b0f601e16c8ac76533"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adb3a9be16de941b0f601e16c8ac76533">&#9670;&nbsp;</a></span>create_resize_layer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;<a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a>&gt; arm_compute::graph::backends::detail::create_resize_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_resize_layer_node.xhtml">ResizeLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a backend resize layer function. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">ResizeLayerFunction</td><td>Backend resize function </td></tr>
    <tr><td class="paramname">TargetInfo</td><td>Target-specific information</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to create the backend function for</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Backend resize layer function </dd></dl>

<p class="definition">Definition at line <a class="el" href="_function_helpers_8h_source.xhtml#l01382">1382</a> of file <a class="el" href="_function_helpers_8h_source.xhtml">FunctionHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01383"></a><span class="lineno"> 1383</span>&#160;{</div><div class="line"><a name="l01384"></a><span class="lineno"> 1384</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 1 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div><div class="line"><a name="l01385"></a><span class="lineno"> 1385</span>&#160;</div><div class="line"><a name="l01386"></a><span class="lineno"> 1386</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l01387"></a><span class="lineno"> 1387</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>  = get_backing_tensor&lt;TargetInfo&gt;(node.input(0));</div><div class="line"><a name="l01388"></a><span class="lineno"> 1388</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *output = get_backing_tensor&lt;TargetInfo&gt;(node.output(0));</div><div class="line"><a name="l01389"></a><span class="lineno"> 1389</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l01390"></a><span class="lineno"> 1390</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l01391"></a><span class="lineno"> 1391</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad986b73e9d5f47a623a9b6d773c25e34">policy</a> = node.policy();</div><div class="line"><a name="l01392"></a><span class="lineno"> 1392</span>&#160;</div><div class="line"><a name="l01393"></a><span class="lineno"> 1393</span>&#160;    <span class="comment">// Create and configure function</span></div><div class="line"><a name="l01394"></a><span class="lineno"> 1394</span>&#160;    <span class="keyword">auto</span> func = support::cpp14::make_unique&lt;ResizeLayerFunction&gt;();</div><div class="line"><a name="l01395"></a><span class="lineno"> 1395</span>&#160;    func-&gt;configure(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad986b73e9d5f47a623a9b6d773c25e34">policy</a>, BorderMode::CONSTANT);</div><div class="line"><a name="l01396"></a><span class="lineno"> 1396</span>&#160;</div><div class="line"><a name="l01397"></a><span class="lineno"> 1397</span>&#160;    <span class="comment">// Log info</span></div><div class="line"><a name="l01398"></a><span class="lineno"> 1398</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div><div class="line"><a name="l01399"></a><span class="lineno"> 1399</span>&#160;                               &lt;&lt; node.name()</div><div class="line"><a name="l01400"></a><span class="lineno"> 1400</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.type()</div><div class="line"><a name="l01401"></a><span class="lineno"> 1401</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div><div class="line"><a name="l01402"></a><span class="lineno"> 1402</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div><div class="line"><a name="l01403"></a><span class="lineno"> 1403</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l01404"></a><span class="lineno"> 1404</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l01405"></a><span class="lineno"> 1405</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Interpolation: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad986b73e9d5f47a623a9b6d773c25e34">policy</a></div><div class="line"><a name="l01406"></a><span class="lineno"> 1406</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l01407"></a><span class="lineno"> 1407</span>&#160;</div><div class="line"><a name="l01408"></a><span class="lineno"> 1408</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div><div class="line"><a name="l01409"></a><span class="lineno"> 1409</span>&#160;}</div><div class="ttc" id="namespacearm__compute_xhtml_a966a9c417ce5e94dca08d9b5e745c0c9"><div class="ttname"><a href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">arm_compute::InterpolationPolicy</a></div><div class="ttdeci">InterpolationPolicy</div><div class="ttdoc">Interpolation method.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00366">Types.h:366</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ad986b73e9d5f47a623a9b6d773c25e34"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ad986b73e9d5f47a623a9b6d773c25e34">arm_compute::test::validation::policy</a></div><div class="ttdeci">policy</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_arithmetic_addition_8cpp_source.xhtml#l00139">ArithmeticAddition.cpp:139</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_ab2d8baa35618bdad1d2814942355311e"><div class="ttname"><a href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_INFO(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00054">Logger.h:54</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="graph_2_logger_8h_source.xhtml#l00054">ARM_COMPUTE_LOG_GRAPH_INFO</a>, <a class="el" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92">arm_compute::CONSTANT</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">arm_compute::test::validation::input</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, <a class="el" href="_resize_layer_node_8cpp_source.xhtml#l00041">ResizeLayerNode::policy()</a>, <a class="el" href="_c_l_2_arithmetic_addition_8cpp_source.xhtml#l00139">arm_compute::test::validation::policy</a>, and <a class="el" href="_resize_layer_node_8cpp_source.xhtml#l00081">ResizeLayerNode::type()</a>.</p>

</div>
</div>
<a id="adef77d1f64203fe2828b3f992c87f5df"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adef77d1f64203fe2828b3f992c87f5df">&#9670;&nbsp;</a></span>create_roi_align_layer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;<a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a>&gt; arm_compute::graph::backends::detail::create_roi_align_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_r_o_i_align_layer_node.xhtml">ROIAlignLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a backend ROI align layer function. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">ROIAlignLayerFunction</td><td>ROI Align function </td></tr>
    <tr><td class="paramname">TargetInfo</td><td>Target-specific information</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to create the backend function for</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>ROI Align layer function </dd></dl>

<p class="definition">Definition at line <a class="el" href="_function_helpers_8h_source.xhtml#l01421">1421</a> of file <a class="el" href="_function_helpers_8h_source.xhtml">FunctionHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01422"></a><span class="lineno"> 1422</span>&#160;{</div><div class="line"><a name="l01423"></a><span class="lineno"> 1423</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 2 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div><div class="line"><a name="l01424"></a><span class="lineno"> 1424</span>&#160;</div><div class="line"><a name="l01425"></a><span class="lineno"> 1425</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l01426"></a><span class="lineno"> 1426</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>  = get_backing_tensor&lt;TargetInfo&gt;(node.input(0));</div><div class="line"><a name="l01427"></a><span class="lineno"> 1427</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *rois   = get_backing_tensor&lt;TargetInfo&gt;(node.input(1));</div><div class="line"><a name="l01428"></a><span class="lineno"> 1428</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *output = get_backing_tensor&lt;TargetInfo&gt;(node.output(0));</div><div class="line"><a name="l01429"></a><span class="lineno"> 1429</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l01430"></a><span class="lineno"> 1430</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l01431"></a><span class="lineno"> 1431</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(rois == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l01432"></a><span class="lineno"> 1432</span>&#160;</div><div class="line"><a name="l01433"></a><span class="lineno"> 1433</span>&#160;    <span class="keyword">const</span> ROIPoolingLayerInfo pool_info = node.pooling_info();</div><div class="line"><a name="l01434"></a><span class="lineno"> 1434</span>&#160;</div><div class="line"><a name="l01435"></a><span class="lineno"> 1435</span>&#160;    <span class="comment">// Create and configure function</span></div><div class="line"><a name="l01436"></a><span class="lineno"> 1436</span>&#160;    <span class="keyword">auto</span> func = support::cpp14::make_unique&lt;ROIAlignLayerFunction&gt;();</div><div class="line"><a name="l01437"></a><span class="lineno"> 1437</span>&#160;</div><div class="line"><a name="l01438"></a><span class="lineno"> 1438</span>&#160;    func-&gt;configure(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, rois, output, pool_info);</div><div class="line"><a name="l01439"></a><span class="lineno"> 1439</span>&#160;</div><div class="line"><a name="l01440"></a><span class="lineno"> 1440</span>&#160;    <span class="comment">// Log info</span></div><div class="line"><a name="l01441"></a><span class="lineno"> 1441</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div><div class="line"><a name="l01442"></a><span class="lineno"> 1442</span>&#160;                               &lt;&lt; node.name()</div><div class="line"><a name="l01443"></a><span class="lineno"> 1443</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.type()</div><div class="line"><a name="l01444"></a><span class="lineno"> 1444</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div><div class="line"><a name="l01445"></a><span class="lineno"> 1445</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div><div class="line"><a name="l01446"></a><span class="lineno"> 1446</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l01447"></a><span class="lineno"> 1447</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l01448"></a><span class="lineno"> 1448</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; ROIs shape: &quot;</span> &lt;&lt; rois-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l01449"></a><span class="lineno"> 1449</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; ROIPooling width: &quot;</span> &lt;&lt; pool_info.pooled_width()</div><div class="line"><a name="l01450"></a><span class="lineno"> 1450</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; ROIPooling height: &quot;</span> &lt;&lt; pool_info.pooled_height()</div><div class="line"><a name="l01451"></a><span class="lineno"> 1451</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l01452"></a><span class="lineno"> 1452</span>&#160;</div><div class="line"><a name="l01453"></a><span class="lineno"> 1453</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div><div class="line"><a name="l01454"></a><span class="lineno"> 1454</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_ab2d8baa35618bdad1d2814942355311e"><div class="ttname"><a href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_INFO(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00054">Logger.h:54</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="graph_2_logger_8h_source.xhtml#l00054">ARM_COMPUTE_LOG_GRAPH_INFO</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">arm_compute::test::validation::input</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01394">ROIPoolingLayerInfo::pooled_height()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01389">ROIPoolingLayerInfo::pooled_width()</a>, <a class="el" href="_r_o_i_align_layer_node_8cpp_source.xhtml#l00043">ROIAlignLayerNode::pooling_info()</a>, and <a class="el" href="_r_o_i_align_layer_node_8cpp_source.xhtml#l00085">ROIAlignLayerNode::type()</a>.</p>

</div>
</div>
<a id="a69a819dc92f559ed0b788392391da602"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a69a819dc92f559ed0b788392391da602">&#9670;&nbsp;</a></span>create_slice_layer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;<a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a>&gt; arm_compute::graph::backends::detail::create_slice_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_slice_layer_node.xhtml">SliceLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a backend slice layer function. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">SliceLayerFunction</td><td>Backend slice function </td></tr>
    <tr><td class="paramname">TargetInfo</td><td>Target-specific information</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to create the backend function for</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Backend slice layer function </dd></dl>

<p class="definition">Definition at line <a class="el" href="_function_helpers_8h_source.xhtml#l01466">1466</a> of file <a class="el" href="_function_helpers_8h_source.xhtml">FunctionHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01467"></a><span class="lineno"> 1467</span>&#160;{</div><div class="line"><a name="l01468"></a><span class="lineno"> 1468</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 1 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div><div class="line"><a name="l01469"></a><span class="lineno"> 1469</span>&#160;</div><div class="line"><a name="l01470"></a><span class="lineno"> 1470</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l01471"></a><span class="lineno"> 1471</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>  = get_backing_tensor&lt;TargetInfo&gt;(node.input(0));</div><div class="line"><a name="l01472"></a><span class="lineno"> 1472</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *output = get_backing_tensor&lt;TargetInfo&gt;(node.output(0));</div><div class="line"><a name="l01473"></a><span class="lineno"> 1473</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l01474"></a><span class="lineno"> 1474</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l01475"></a><span class="lineno"> 1475</span>&#160;</div><div class="line"><a name="l01476"></a><span class="lineno"> 1476</span>&#160;    <span class="comment">// Create and configure function</span></div><div class="line"><a name="l01477"></a><span class="lineno"> 1477</span>&#160;    <span class="keyword">auto</span> func = support::cpp14::make_unique&lt;SliceLayerFunction&gt;();</div><div class="line"><a name="l01478"></a><span class="lineno"> 1478</span>&#160;    func-&gt;configure(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, node.starts(), node.ends());</div><div class="line"><a name="l01479"></a><span class="lineno"> 1479</span>&#160;</div><div class="line"><a name="l01480"></a><span class="lineno"> 1480</span>&#160;    <span class="comment">// Log info</span></div><div class="line"><a name="l01481"></a><span class="lineno"> 1481</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div><div class="line"><a name="l01482"></a><span class="lineno"> 1482</span>&#160;                               &lt;&lt; node.name()</div><div class="line"><a name="l01483"></a><span class="lineno"> 1483</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.type()</div><div class="line"><a name="l01484"></a><span class="lineno"> 1484</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div><div class="line"><a name="l01485"></a><span class="lineno"> 1485</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div><div class="line"><a name="l01486"></a><span class="lineno"> 1486</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l01487"></a><span class="lineno"> 1487</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l01488"></a><span class="lineno"> 1488</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l01489"></a><span class="lineno"> 1489</span>&#160;</div><div class="line"><a name="l01490"></a><span class="lineno"> 1490</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div><div class="line"><a name="l01491"></a><span class="lineno"> 1491</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_ab2d8baa35618bdad1d2814942355311e"><div class="ttname"><a href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_INFO(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00054">Logger.h:54</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="graph_2_logger_8h_source.xhtml#l00054">ARM_COMPUTE_LOG_GRAPH_INFO</a>, <a class="el" href="_slice_layer_node_8cpp_source.xhtml#l00047">SliceLayerNode::ends()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">arm_compute::test::validation::input</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, <a class="el" href="_slice_layer_node_8cpp_source.xhtml#l00042">SliceLayerNode::starts()</a>, and <a class="el" href="_slice_layer_node_8cpp_source.xhtml#l00086">SliceLayerNode::type()</a>.</p>

</div>
</div>
<a id="a5271c97b6bef5972c5e259307d52a4da"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5271c97b6bef5972c5e259307d52a4da">&#9670;&nbsp;</a></span>create_softmax_layer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;<a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a>&gt; arm_compute::graph::backends::detail::create_softmax_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_softmax_layer_node.xhtml">SoftmaxLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;&#160;</td>
          <td class="paramname"><em>ctx</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a backend softmax layer function. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">SoftmaxLayerFunction</td><td>Backend softmax function </td></tr>
    <tr><td class="paramname">TargetInfo</td><td>Target-specific information</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to create the backend function for </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ctx</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> context</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Backend softmax layer function </dd></dl>

<p class="definition">Definition at line <a class="el" href="_function_helpers_8h_source.xhtml#l01504">1504</a> of file <a class="el" href="_function_helpers_8h_source.xhtml">FunctionHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01505"></a><span class="lineno"> 1505</span>&#160;{</div><div class="line"><a name="l01506"></a><span class="lineno"> 1506</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 1 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div><div class="line"><a name="l01507"></a><span class="lineno"> 1507</span>&#160;</div><div class="line"><a name="l01508"></a><span class="lineno"> 1508</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l01509"></a><span class="lineno"> 1509</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>  = get_backing_tensor&lt;TargetInfo&gt;(node.input(0));</div><div class="line"><a name="l01510"></a><span class="lineno"> 1510</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *output = get_backing_tensor&lt;TargetInfo&gt;(node.output(0));</div><div class="line"><a name="l01511"></a><span class="lineno"> 1511</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>                      beta   = node.beta();</div><div class="line"><a name="l01512"></a><span class="lineno"> 1512</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l01513"></a><span class="lineno"> 1513</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l01514"></a><span class="lineno"> 1514</span>&#160;</div><div class="line"><a name="l01515"></a><span class="lineno"> 1515</span>&#160;    <span class="comment">// Create and configure function</span></div><div class="line"><a name="l01516"></a><span class="lineno"> 1516</span>&#160;    <span class="keyword">auto</span> func = support::cpp14::make_unique&lt;SoftmaxLayerFunction&gt;(<a class="code" href="namespacearm__compute_1_1graph_1_1backends.xhtml#a8919c520c1cb9086dd1116de509bd481">get_memory_manager</a>(ctx, TargetInfo::TargetType));</div><div class="line"><a name="l01517"></a><span class="lineno"> 1517</span>&#160;    func-&gt;configure(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, beta);</div><div class="line"><a name="l01518"></a><span class="lineno"> 1518</span>&#160;</div><div class="line"><a name="l01519"></a><span class="lineno"> 1519</span>&#160;    <span class="comment">// Log info</span></div><div class="line"><a name="l01520"></a><span class="lineno"> 1520</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div><div class="line"><a name="l01521"></a><span class="lineno"> 1521</span>&#160;                               &lt;&lt; node.name()</div><div class="line"><a name="l01522"></a><span class="lineno"> 1522</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.type()</div><div class="line"><a name="l01523"></a><span class="lineno"> 1523</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div><div class="line"><a name="l01524"></a><span class="lineno"> 1524</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div><div class="line"><a name="l01525"></a><span class="lineno"> 1525</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l01526"></a><span class="lineno"> 1526</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l01527"></a><span class="lineno"> 1527</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l01528"></a><span class="lineno"> 1528</span>&#160;</div><div class="line"><a name="l01529"></a><span class="lineno"> 1529</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div><div class="line"><a name="l01530"></a><span class="lineno"> 1530</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_ab2d8baa35618bdad1d2814942355311e"><div class="ttname"><a href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_INFO(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00054">Logger.h:54</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_xhtml_a8919c520c1cb9086dd1116de509bd481"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends.xhtml#a8919c520c1cb9086dd1116de509bd481">arm_compute::graph::backends::get_memory_manager</a></div><div class="ttdeci">std::shared_ptr&lt; IMemoryManager &gt; get_memory_manager(GraphContext &amp;ctx, Target target)</div><div class="ttdoc">Returns the memory manager for a given target.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2backends_2_utils_8h_source.xhtml#l00089">Utils.h:89</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="graph_2_logger_8h_source.xhtml#l00054">ARM_COMPUTE_LOG_GRAPH_INFO</a>, <a class="el" href="_softmax_layer_node_8cpp_source.xhtml#l00041">SoftmaxLayerNode::beta()</a>, <a class="el" href="arm__compute_2graph_2backends_2_utils_8h_source.xhtml#l00089">arm_compute::graph::backends::get_memory_manager()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">arm_compute::test::validation::input</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, and <a class="el" href="_softmax_layer_node_8cpp_source.xhtml#l00072">SoftmaxLayerNode::type()</a>.</p>

</div>
</div>
<a id="ae157076aa533f9db0960dea1d5fc5014"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae157076aa533f9db0960dea1d5fc5014">&#9670;&nbsp;</a></span>create_stack_layer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;<a class="el" href="classarm__compute_1_1_i_function.xhtml">arm_compute::IFunction</a>&gt; arm_compute::graph::backends::detail::create_stack_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_stack_layer_node.xhtml">StackLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a backend layer stack function. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">StackLayerFunction</td><td>Backend stack function </td></tr>
    <tr><td class="paramname">TargetInfo</td><td>Target-specific information</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to create the backend function for</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Backend stack layer function </dd></dl>

<p class="definition">Definition at line <a class="el" href="_function_helpers_8h_source.xhtml#l01542">1542</a> of file <a class="el" href="_function_helpers_8h_source.xhtml">FunctionHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01543"></a><span class="lineno"> 1543</span>&#160;{</div><div class="line"><a name="l01544"></a><span class="lineno"> 1544</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Creating Stack node with ID : &quot;</span> &lt;&lt; node.id() &lt;&lt; <span class="stringliteral">&quot; and Name: &quot;</span> &lt;&lt; node.name() &lt;&lt; std::endl);</div><div class="line"><a name="l01545"></a><span class="lineno"> 1545</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(node.num_outputs() != 1);</div><div class="line"><a name="l01546"></a><span class="lineno"> 1546</span>&#160;</div><div class="line"><a name="l01547"></a><span class="lineno"> 1547</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l01548"></a><span class="lineno"> 1548</span>&#160;    std::vector&lt;typename TargetInfo::TensorType *&gt; inputs;</div><div class="line"><a name="l01549"></a><span class="lineno"> 1549</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; node.num_inputs(); ++i)</div><div class="line"><a name="l01550"></a><span class="lineno"> 1550</span>&#160;    {</div><div class="line"><a name="l01551"></a><span class="lineno"> 1551</span>&#160;        inputs.push_back(get_backing_tensor&lt;TargetInfo&gt;(node.input(i)));</div><div class="line"><a name="l01552"></a><span class="lineno"> 1552</span>&#160;    }</div><div class="line"><a name="l01553"></a><span class="lineno"> 1553</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *output = get_backing_tensor&lt;TargetInfo&gt;(node.output(0));</div><div class="line"><a name="l01554"></a><span class="lineno"> 1554</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>                        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#accc088009d44c521706aa98d6387ee21">axis</a>   = node.axis();</div><div class="line"><a name="l01555"></a><span class="lineno"> 1555</span>&#160;</div><div class="line"><a name="l01556"></a><span class="lineno"> 1556</span>&#160;    <span class="comment">// Create and configure function</span></div><div class="line"><a name="l01557"></a><span class="lineno"> 1557</span>&#160;    <span class="keyword">auto</span> func = support::cpp14::make_unique&lt;StackLayerFunction&gt;();</div><div class="line"><a name="l01558"></a><span class="lineno"> 1558</span>&#160;    func-&gt;configure(inputs, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#accc088009d44c521706aa98d6387ee21">axis</a>, output);</div><div class="line"><a name="l01559"></a><span class="lineno"> 1559</span>&#160;</div><div class="line"><a name="l01560"></a><span class="lineno"> 1560</span>&#160;    <span class="comment">// Log info</span></div><div class="line"><a name="l01561"></a><span class="lineno"> 1561</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div><div class="line"><a name="l01562"></a><span class="lineno"> 1562</span>&#160;                               &lt;&lt; node.name()</div><div class="line"><a name="l01563"></a><span class="lineno"> 1563</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.type()</div><div class="line"><a name="l01564"></a><span class="lineno"> 1564</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div><div class="line"><a name="l01565"></a><span class="lineno"> 1565</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; output-&gt;info()-&gt;data_type()</div><div class="line"><a name="l01566"></a><span class="lineno"> 1566</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Inputs shape: &quot;</span> &lt;&lt; inputs[0]-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l01567"></a><span class="lineno"> 1567</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l01568"></a><span class="lineno"> 1568</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Num Inputs: &quot;</span> &lt;&lt; inputs.size()</div><div class="line"><a name="l01569"></a><span class="lineno"> 1569</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Axis: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#accc088009d44c521706aa98d6387ee21">axis</a></div><div class="line"><a name="l01570"></a><span class="lineno"> 1570</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l01571"></a><span class="lineno"> 1571</span>&#160;</div><div class="line"><a name="l01572"></a><span class="lineno"> 1572</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div><div class="line"><a name="l01573"></a><span class="lineno"> 1573</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_ab2d8baa35618bdad1d2814942355311e"><div class="ttname"><a href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_INFO(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00054">Logger.h:54</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_accc088009d44c521706aa98d6387ee21"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#accc088009d44c521706aa98d6387ee21">arm_compute::test::validation::axis</a></div><div class="ttdeci">axis</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_stack_layer_8cpp_source.xhtml#l00226">StackLayer.cpp:226</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_a300d153929a99c7b571d4cda3f7987a5"><div class="ttname"><a href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_VERBOSE(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00050">Logger.h:50</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="graph_2_logger_8h_source.xhtml#l00054">ARM_COMPUTE_LOG_GRAPH_INFO</a>, <a class="el" href="graph_2_logger_8h_source.xhtml#l00050">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>, <a class="el" href="_stack_layer_node_8cpp_source.xhtml#l00045">StackLayerNode::axis()</a>, <a class="el" href="_n_e_o_n_2_stack_layer_8cpp_source.xhtml#l00226">arm_compute::test::validation::axis</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00102">INode::id()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00178">INode::num_inputs()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00183">INode::num_outputs()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, and <a class="el" href="_stack_layer_node_8cpp_source.xhtml#l00105">StackLayerNode::type()</a>.</p>

</div>
</div>
<a id="acd9d23be81ad915ff875876c6606f576"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acd9d23be81ad915ff875876c6606f576">&#9670;&nbsp;</a></span>create_upsample_layer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;<a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a>&gt; arm_compute::graph::backends::detail::create_upsample_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_upsample_layer_node.xhtml">UpsampleLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;&#160;</td>
          <td class="paramname"><em>ctx</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a backend Upsample layer function. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">UpsampleLayerFunction</td><td>Backend Upsample function </td></tr>
    <tr><td class="paramname">TargetInfo</td><td>Target-specific information</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to create the backend function for </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ctx</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> context</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Backend Upsample layer function </dd></dl>

<p class="definition">Definition at line <a class="el" href="_function_helpers_8h_source.xhtml#l01585">1585</a> of file <a class="el" href="_function_helpers_8h_source.xhtml">FunctionHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01586"></a><span class="lineno"> 1586</span>&#160;{</div><div class="line"><a name="l01587"></a><span class="lineno"> 1587</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(ctx);</div><div class="line"><a name="l01588"></a><span class="lineno"> 1588</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 1 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div><div class="line"><a name="l01589"></a><span class="lineno"> 1589</span>&#160;</div><div class="line"><a name="l01590"></a><span class="lineno"> 1590</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l01591"></a><span class="lineno"> 1591</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>             = get_backing_tensor&lt;TargetInfo&gt;(node.input(0));</div><div class="line"><a name="l01592"></a><span class="lineno"> 1592</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *output            = get_backing_tensor&lt;TargetInfo&gt;(node.output(0));</div><div class="line"><a name="l01593"></a><span class="lineno"> 1593</span>&#160;    <span class="keyword">const</span> Size2D                     <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>              = node.info();</div><div class="line"><a name="l01594"></a><span class="lineno"> 1594</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a>        upsampling_policy = node.upsampling_policy();</div><div class="line"><a name="l01595"></a><span class="lineno"> 1595</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(upsampling_policy != InterpolationPolicy::NEAREST_NEIGHBOR);</div><div class="line"><a name="l01596"></a><span class="lineno"> 1596</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.x() != 2 || <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.y() != 2);</div><div class="line"><a name="l01597"></a><span class="lineno"> 1597</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l01598"></a><span class="lineno"> 1598</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l01599"></a><span class="lineno"> 1599</span>&#160;</div><div class="line"><a name="l01600"></a><span class="lineno"> 1600</span>&#160;    <span class="comment">// Create and configure function</span></div><div class="line"><a name="l01601"></a><span class="lineno"> 1601</span>&#160;    <span class="keyword">auto</span> func = support::cpp14::make_unique&lt;UpsampleLayerFunction&gt;();</div><div class="line"><a name="l01602"></a><span class="lineno"> 1602</span>&#160;    func-&gt;configure(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>, upsampling_policy);</div><div class="line"><a name="l01603"></a><span class="lineno"> 1603</span>&#160;</div><div class="line"><a name="l01604"></a><span class="lineno"> 1604</span>&#160;    <span class="comment">// Log info</span></div><div class="line"><a name="l01605"></a><span class="lineno"> 1605</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div><div class="line"><a name="l01606"></a><span class="lineno"> 1606</span>&#160;                               &lt;&lt; node.name()</div><div class="line"><a name="l01607"></a><span class="lineno"> 1607</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.type()</div><div class="line"><a name="l01608"></a><span class="lineno"> 1608</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div><div class="line"><a name="l01609"></a><span class="lineno"> 1609</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div><div class="line"><a name="l01610"></a><span class="lineno"> 1610</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l01611"></a><span class="lineno"> 1611</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l01612"></a><span class="lineno"> 1612</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Strides: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a></div><div class="line"><a name="l01613"></a><span class="lineno"> 1613</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Upsampling policy: &quot;</span> &lt;&lt; upsampling_policy</div><div class="line"><a name="l01614"></a><span class="lineno"> 1614</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l01615"></a><span class="lineno"> 1615</span>&#160;</div><div class="line"><a name="l01616"></a><span class="lineno"> 1616</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div><div class="line"><a name="l01617"></a><span class="lineno"> 1617</span>&#160;}</div><div class="ttc" id="namespacearm__compute_xhtml_a966a9c417ce5e94dca08d9b5e745c0c9"><div class="ttname"><a href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">arm_compute::InterpolationPolicy</a></div><div class="ttdeci">InterpolationPolicy</div><div class="ttdoc">Interpolation method.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00366">Types.h:366</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_ab2d8baa35618bdad1d2814942355311e"><div class="ttname"><a href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_INFO(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00054">Logger.h:54</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a4f4125dba5283887b34f889b1c615c0c"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">arm_compute::test::validation::info</a></div><div class="ttdeci">info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00182">ConvolutionLayer.cpp:182</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="graph_2_logger_8h_source.xhtml#l00054">ARM_COMPUTE_LOG_GRAPH_INFO</a>, <a class="el" href="_error_8h_source.xhtml#l00152">ARM_COMPUTE_UNUSED</a>, <a class="el" href="_upsample_layer_node_8cpp_source.xhtml#l00041">UpsampleLayerNode::info()</a>, <a class="el" href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00182">arm_compute::test::validation::info</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">arm_compute::test::validation::input</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9a7f5ccbc3d30c2cd3fd04d567946cbde2">arm_compute::NEAREST_NEIGHBOR</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, <a class="el" href="_upsample_layer_node_8cpp_source.xhtml#l00088">UpsampleLayerNode::type()</a>, and <a class="el" href="_upsample_layer_node_8cpp_source.xhtml#l00046">UpsampleLayerNode::upsampling_policy()</a>.</p>

</div>
</div>
<a id="a7db148217bc0f1f5a4adf6194c858d24"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7db148217bc0f1f5a4adf6194c858d24">&#9670;&nbsp;</a></span>create_yolo_layer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;<a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a>&gt; arm_compute::graph::backends::detail::create_yolo_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_y_o_l_o_layer_node.xhtml">YOLOLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;&#160;</td>
          <td class="paramname"><em>ctx</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a backend YOLO layer function. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">YoloLayerFunction</td><td>Backend YOLO function </td></tr>
    <tr><td class="paramname">TargetInfo</td><td>Target-specific information</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to create the backend function for </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ctx</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> context</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Backend YOLO layer function </dd></dl>

<p class="definition">Definition at line <a class="el" href="_function_helpers_8h_source.xhtml#l01629">1629</a> of file <a class="el" href="_function_helpers_8h_source.xhtml">FunctionHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01630"></a><span class="lineno"> 1630</span>&#160;{</div><div class="line"><a name="l01631"></a><span class="lineno"> 1631</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(ctx);</div><div class="line"><a name="l01632"></a><span class="lineno"> 1632</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 1 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div><div class="line"><a name="l01633"></a><span class="lineno"> 1633</span>&#160;</div><div class="line"><a name="l01634"></a><span class="lineno"> 1634</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l01635"></a><span class="lineno"> 1635</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>       = get_backing_tensor&lt;TargetInfo&gt;(node.input(0));</div><div class="line"><a name="l01636"></a><span class="lineno"> 1636</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *output      = get_backing_tensor&lt;TargetInfo&gt;(node.output(0));</div><div class="line"><a name="l01637"></a><span class="lineno"> 1637</span>&#160;    <span class="keyword">const</span> ActivationLayerInfo        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>    = node.activation_info();</div><div class="line"><a name="l01638"></a><span class="lineno"> 1638</span>&#160;    <span class="keyword">const</span> int32_t                    num_classes = node.num_classes();</div><div class="line"><a name="l01639"></a><span class="lineno"> 1639</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(num_classes &lt;= 0);</div><div class="line"><a name="l01640"></a><span class="lineno"> 1640</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l01641"></a><span class="lineno"> 1641</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l01642"></a><span class="lineno"> 1642</span>&#160;</div><div class="line"><a name="l01643"></a><span class="lineno"> 1643</span>&#160;    <span class="comment">// Create and configure function</span></div><div class="line"><a name="l01644"></a><span class="lineno"> 1644</span>&#160;    <span class="keyword">auto</span> func = support::cpp14::make_unique&lt;YOLOlayerFunction&gt;();</div><div class="line"><a name="l01645"></a><span class="lineno"> 1645</span>&#160;    func-&gt;configure(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>, num_classes);</div><div class="line"><a name="l01646"></a><span class="lineno"> 1646</span>&#160;</div><div class="line"><a name="l01647"></a><span class="lineno"> 1647</span>&#160;    <span class="comment">// Log info</span></div><div class="line"><a name="l01648"></a><span class="lineno"> 1648</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div><div class="line"><a name="l01649"></a><span class="lineno"> 1649</span>&#160;                               &lt;&lt; node.name()</div><div class="line"><a name="l01650"></a><span class="lineno"> 1650</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.type()</div><div class="line"><a name="l01651"></a><span class="lineno"> 1651</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div><div class="line"><a name="l01652"></a><span class="lineno"> 1652</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div><div class="line"><a name="l01653"></a><span class="lineno"> 1653</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l01654"></a><span class="lineno"> 1654</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l01655"></a><span class="lineno"> 1655</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Activation function: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.activation()</div><div class="line"><a name="l01656"></a><span class="lineno"> 1656</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Num classes: &quot;</span> &lt;&lt; num_classes</div><div class="line"><a name="l01657"></a><span class="lineno"> 1657</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l01658"></a><span class="lineno"> 1658</span>&#160;</div><div class="line"><a name="l01659"></a><span class="lineno"> 1659</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div><div class="line"><a name="l01660"></a><span class="lineno"> 1660</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a1f8aca235c095df227e7444f6b237eb1"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">arm_compute::test::validation::act_info</a></div><div class="ttdeci">act_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00183">ConvolutionLayer.cpp:183</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_ab2d8baa35618bdad1d2814942355311e"><div class="ttname"><a href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_INFO(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00054">Logger.h:54</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00183">arm_compute::test::validation::act_info</a>, <a class="el" href="_y_o_l_o_layer_node_8cpp_source.xhtml#l00041">YOLOLayerNode::activation_info()</a>, <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="graph_2_logger_8h_source.xhtml#l00054">ARM_COMPUTE_LOG_GRAPH_INFO</a>, <a class="el" href="_error_8h_source.xhtml#l00152">ARM_COMPUTE_UNUSED</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">arm_compute::test::validation::input</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_y_o_l_o_layer_node_8cpp_source.xhtml#l00046">YOLOLayerNode::num_classes()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, and <a class="el" href="_y_o_l_o_layer_node_8cpp_source.xhtml#l00074">YOLOLayerNode::type()</a>.</p>

</div>
</div>
<a id="a69dd1fc17c7a15f4125873be182c8c76"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a69dd1fc17c7a15f4125873be182c8c76">&#9670;&nbsp;</a></span>get_backing_tensor()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">TargetInfo::TensorType* arm_compute::graph::backends::detail::get_backing_tensor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml">arm_compute::graph::Tensor</a> *&#160;</td>
          <td class="paramname"><em>tensor</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns backing tensor of a given tensor. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">TargetInfo</td><td>Target information</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td><a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml" title="Tensor object.">Tensor</a> to extract the backing tensor from</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Backing tensor if present else nullptr </dd></dl>

<p class="definition">Definition at line <a class="el" href="_function_helpers_8h_source.xhtml#l00059">59</a> of file <a class="el" href="_function_helpers_8h_source.xhtml">FunctionHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;{</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *backing_tensor = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keywordflow">if</span>(tensor != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    {</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(tensor-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_tensor.xhtml#a0d3608f94078b90ab1ff9e9465d4ed3b">desc</a>().<a class="code" href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml#a2a7ca82c5e74421cb45f17e936abf964">target</a> != TargetInfo::TargetType);</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <span class="comment">// Get backing tensor handle</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        ITensorHandle *tensor_handle = tensor-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_tensor.xhtml#a45c1ef0023ce430d009ec79c97761544">handle</a>();</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="comment">// Get backing tensor</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        backing_tensor = (tensor_handle != <span class="keyword">nullptr</span>) ? arm_compute::utils::cast::polymorphic_cast&lt;typename TargetInfo::TensorType *&gt;(&amp;tensor_handle-&gt;tensor()) : <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    }</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keywordflow">return</span> backing_tensor;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1graph_1_1_tensor_xhtml_a45c1ef0023ce430d009ec79c97761544"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_tensor.xhtml#a45c1ef0023ce430d009ec79c97761544">arm_compute::graph::Tensor::handle</a></div><div class="ttdeci">ITensorHandle * handle()</div><div class="ttdoc">Backend tensor handle accessor.</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_tensor_8cpp_source.xhtml#l00055">Tensor.cpp:55</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_tensor_xhtml_a0d3608f94078b90ab1ff9e9465d4ed3b"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_tensor.xhtml#a0d3608f94078b90ab1ff9e9465d4ed3b">arm_compute::graph::Tensor::desc</a></div><div class="ttdeci">TensorDescriptor &amp; desc()</div><div class="ttdoc">TensorInfo metadata accessor.</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_tensor_8cpp_source.xhtml#l00040">Tensor.cpp:40</a></div></div>
<div class="ttc" id="structarm__compute_1_1graph_1_1_tensor_descriptor_xhtml_a2a7ca82c5e74421cb45f17e936abf964"><div class="ttname"><a href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml#a2a7ca82c5e74421cb45f17e936abf964">arm_compute::graph::TensorDescriptor::target</a></div><div class="ttdeci">Target target</div><div class="ttdoc">Target.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_descriptor_8h_source.xhtml#l00113">TensorDescriptor.h:113</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="graph_2_tensor_8cpp_source.xhtml#l00040">Tensor::desc()</a>, <a class="el" href="graph_2_tensor_8cpp_source.xhtml#l00055">Tensor::handle()</a>, and <a class="el" href="_tensor_descriptor_8h_source.xhtml#l00113">TensorDescriptor::target</a>.</p>

</div>
</div>
<a id="a9785ffbaaa220b6725a93a6f7f3145ca"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9785ffbaaa220b6725a93a6f7f3145ca">&#9670;&nbsp;</a></span>get_backing_tensor_info()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a>* arm_compute::graph::backends::detail::get_backing_tensor_info </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml">arm_compute::graph::Tensor</a> *&#160;</td>
          <td class="paramname"><em>tensor</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns backing tensor info of a given tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td><a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml" title="Tensor object.">Tensor</a> to extract the backing tensor from</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Backing tensor tensor info if present else nullptr </dd></dl>

<p class="definition">Definition at line <a class="el" href="_validate_helpers_8h_source.xhtml#l00050">50</a> of file <a class="el" href="_validate_helpers_8h_source.xhtml">ValidateHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;{</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keywordflow">return</span> ((tensor == <span class="keyword">nullptr</span>) || (tensor-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_tensor.xhtml#a45c1ef0023ce430d009ec79c97761544">handle</a>() == <span class="keyword">nullptr</span>)) ? nullptr : tensor-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_tensor.xhtml#a45c1ef0023ce430d009ec79c97761544">handle</a>()-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_i_tensor_handle.xhtml#a91efb5b2e262ec5e55059ff1fd9accc6">tensor</a>().<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>();</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1graph_1_1_tensor_xhtml_a45c1ef0023ce430d009ec79c97761544"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_tensor.xhtml#a45c1ef0023ce430d009ec79c97761544">arm_compute::graph::Tensor::handle</a></div><div class="ttdeci">ITensorHandle * handle()</div><div class="ttdoc">Backend tensor handle accessor.</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_tensor_8cpp_source.xhtml#l00055">Tensor.cpp:55</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_tensor_handle_xhtml_a91efb5b2e262ec5e55059ff1fd9accc6"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_tensor_handle.xhtml#a91efb5b2e262ec5e55059ff1fd9accc6">arm_compute::graph::ITensorHandle::tensor</a></div><div class="ttdeci">virtual arm_compute::ITensor &amp; tensor()=0</div><div class="ttdoc">Backend tensor object accessor.</div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml_a0e95dc1e53c361348314873b168ae237"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">arm_compute::ITensor::info</a></div><div class="ttdeci">virtual ITensorInfo * info() const =0</div><div class="ttdoc">Interface to be implemented by the child class to return the tensor's metadata.</div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="graph_2_tensor_8cpp_source.xhtml#l00055">Tensor::handle()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, and <a class="el" href="classarm__compute_1_1graph_1_1_i_tensor_handle.xhtml#a91efb5b2e262ec5e55059ff1fd9accc6">ITensorHandle::tensor()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_validate_helpers_8h_source.xhtml#l00064">validate_bounding_box_transform_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00088">validate_channel_shuffle_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00114">validate_convolution_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00172">validate_depthwise_convolution_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00211">validate_dequantization_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00232">validate_detection_output_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00256">validate_detection_post_process_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00284">validate_generate_proposals_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00311">validate_normalize_planar_yuv_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00336">validate_pad_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00359">validate_permute_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00382">validate_prelu_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00405">validate_priorbox_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00429">validate_quantization_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00452">validate_reorg_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00475">validate_reshape_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00498">validate_roi_align_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00523">validate_slice_layer()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00547">validate_upsample_layer()</a>, and <a class="el" href="_validate_helpers_8h_source.xhtml#l00569">validate_yolo_layer()</a>.</p>

</div>
</div>
<a id="a94ce5eb74599047cd5f8b735e2464d12"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a94ce5eb74599047cd5f8b735e2464d12">&#9670;&nbsp;</a></span>validate_bounding_box_transform_layer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> arm_compute::graph::backends::detail::validate_bounding_box_transform_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_bounding_box_transform_layer_node.xhtml">BoundingBoxTransformLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Validates a Bounding Box Transform layer node. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">BoundingBoxTransformLayer</td><td>Bounding Box Transform layer function type</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to validate</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="_validate_helpers_8h_source.xhtml#l00064">64</a> of file <a class="el" href="_validate_helpers_8h_source.xhtml">ValidateHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;{</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Validating BoundingBoxTransformLayer node with ID : &quot;</span> &lt;&lt; node.id() &lt;&lt; <span class="stringliteral">&quot; and Name: &quot;</span> &lt;&lt; node.name() &lt;&lt; std::endl);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.num_inputs() != 2);</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.num_outputs() != 1);</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a>      *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>     = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.input(0));</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a>      *deltas    = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.input(1));</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a>      *output    = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.output(0));</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keyword">const</span> BoundingBoxTransformInfo bbox_info = node.info();</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a4feaaa70771629f4b5dcf3b219c8b647">BoundingBoxTransformLayer::validate</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, deltas, bbox_info);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a9785ffbaaa220b6725a93a6f7f3145ca"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">arm_compute::graph::backends::detail::get_backing_tensor_info</a></div><div class="ttdeci">arm_compute::ITensorInfo * get_backing_tensor_info(arm_compute::graph::Tensor *tensor)</div><div class="ttdoc">Returns backing tensor info of a given tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_validate_helpers_8h_source.xhtml#l00050">ValidateHelpers.h:50</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a></div><div class="ttdoc">Store the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_info_8h_source.xhtml#l00040">ITensorInfo.h:40</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a206d6e247e0957ac3dee45d27756fc25"><div class="ttname"><a href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true, an error is returned.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00296">Error.h:296</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_a300d153929a99c7b571d4cda3f7987a5"><div class="ttname"><a href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_VERBOSE(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00050">Logger.h:50</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a4feaaa70771629f4b5dcf3b219c8b647"><div class="ttname"><a href="namespacearm__compute.xhtml#a4feaaa70771629f4b5dcf3b219c8b647">arm_compute::validate</a></div><div class="ttdeci">Status validate(const ITensorInfo *scores_in, const ITensorInfo *boxes_in, const ITensorInfo *batch_splits_in, const ITensorInfo *scores_out, const ITensorInfo *boxes_out, const ITensorInfo *classes, const ITensorInfo *batch_splits_out, const ITensorInfo *keeps, const ITensorInfo *keeps_size, const BoxNMSLimitInfo info)</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_box_with_non_maxima_suppression_limit_8cpp_source.xhtml#l00196">CPPBoxWithNonMaximaSuppressionLimit.cpp:196</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="graph_2_logger_8h_source.xhtml#l00050">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>, <a class="el" href="_error_8h_source.xhtml#l00296">ARM_COMPUTE_RETURN_ERROR_ON</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00050">get_backing_tensor_info()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00102">INode::id()</a>, <a class="el" href="_bounding_box_transform_layer_node_8cpp_source.xhtml#l00042">BoundingBoxTransformLayerNode::info()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">arm_compute::test::validation::input</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00178">INode::num_inputs()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00183">INode::num_outputs()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, and <a class="el" href="_c_p_p_box_with_non_maxima_suppression_limit_8cpp_source.xhtml#l00196">arm_compute::validate()</a>.</p>

</div>
</div>
<a id="ab4632d71bdb4542008ad33b7b74b7b2c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab4632d71bdb4542008ad33b7b74b7b2c">&#9670;&nbsp;</a></span>validate_channel_shuffle_layer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> arm_compute::graph::backends::detail::validate_channel_shuffle_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_channel_shuffle_layer_node.xhtml">ChannelShuffleLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Validates a Channel Shuffle layer node. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">ChannelShuffleLayer</td><td>Channel Shuffle layer function type</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to validate</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="_validate_helpers_8h_source.xhtml#l00088">88</a> of file <a class="el" href="_validate_helpers_8h_source.xhtml">ValidateHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;{</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Validating ChannelShuffle node with ID : &quot;</span> &lt;&lt; node.id() &lt;&lt; <span class="stringliteral">&quot; and Name: &quot;</span> &lt;&lt; node.name() &lt;&lt; std::endl);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.num_inputs() != 1);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.num_outputs() != 1);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>      = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.input(0));</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *output     = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.output(0));</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a> = node.num_groups();</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a4feaaa70771629f4b5dcf3b219c8b647">ChannelShuffleLayer::validate</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a>);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a9785ffbaaa220b6725a93a6f7f3145ca"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">arm_compute::graph::backends::detail::get_backing_tensor_info</a></div><div class="ttdeci">arm_compute::ITensorInfo * get_backing_tensor_info(arm_compute::graph::Tensor *tensor)</div><div class="ttdoc">Returns backing tensor info of a given tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_validate_helpers_8h_source.xhtml#l00050">ValidateHelpers.h:50</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a></div><div class="ttdoc">Store the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_info_8h_source.xhtml#l00040">ITensorInfo.h:40</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a206d6e247e0957ac3dee45d27756fc25"><div class="ttname"><a href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true, an error is returned.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00296">Error.h:296</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a2270b3e1d20651d2d8341c858c890830"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">arm_compute::test::validation::num_groups</a></div><div class="ttdeci">const unsigned int num_groups</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00148">Im2Col.cpp:148</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_a300d153929a99c7b571d4cda3f7987a5"><div class="ttname"><a href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_VERBOSE(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00050">Logger.h:50</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a4feaaa70771629f4b5dcf3b219c8b647"><div class="ttname"><a href="namespacearm__compute.xhtml#a4feaaa70771629f4b5dcf3b219c8b647">arm_compute::validate</a></div><div class="ttdeci">Status validate(const ITensorInfo *scores_in, const ITensorInfo *boxes_in, const ITensorInfo *batch_splits_in, const ITensorInfo *scores_out, const ITensorInfo *boxes_out, const ITensorInfo *classes, const ITensorInfo *batch_splits_out, const ITensorInfo *keeps, const ITensorInfo *keeps_size, const BoxNMSLimitInfo info)</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_box_with_non_maxima_suppression_limit_8cpp_source.xhtml#l00196">CPPBoxWithNonMaximaSuppressionLimit.cpp:196</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="graph_2_logger_8h_source.xhtml#l00050">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>, <a class="el" href="_error_8h_source.xhtml#l00296">ARM_COMPUTE_RETURN_ERROR_ON</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00050">get_backing_tensor_info()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00102">INode::id()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">arm_compute::test::validation::input</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_channel_shuffle_layer_node_8cpp_source.xhtml#l00040">ChannelShuffleLayerNode::num_groups()</a>, <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00148">arm_compute::test::validation::num_groups</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00178">INode::num_inputs()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00183">INode::num_outputs()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, and <a class="el" href="_c_p_p_box_with_non_maxima_suppression_limit_8cpp_source.xhtml#l00196">arm_compute::validate()</a>.</p>

</div>
</div>
<a id="a84a36a0cae1ceb4313891ca841b11cb3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a84a36a0cae1ceb4313891ca841b11cb3">&#9670;&nbsp;</a></span>validate_convolution_layer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> arm_compute::graph::backends::detail::validate_convolution_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_convolution_layer_node.xhtml">ConvolutionLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Validates a Convolution layer node. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">ConvolutionLayer</td><td>Default Convolution layer function type </td></tr>
    <tr><td class="paramname">DirectConvolutionLayer</td><td>Direct Convolution layer function type </td></tr>
    <tr><td class="paramname">GEMMConvolutionLayer</td><td>GEMM Convolution layer function type </td></tr>
    <tr><td class="paramname">WinogradConvolutionLayer</td><td>Winograd Convolution layer function type</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to validate</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="_validate_helpers_8h_source.xhtml#l00114">114</a> of file <a class="el" href="_validate_helpers_8h_source.xhtml">ValidateHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;{</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Validating ConvolutionLayer node with ID : &quot;</span> &lt;&lt; node.id() &lt;&lt; <span class="stringliteral">&quot; and Name: &quot;</span> &lt;&lt; node.name() &lt;&lt; std::endl);</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.num_inputs() != 3);</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.num_outputs() != 1);</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>   = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.input(0));</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a> = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.input(1));</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *biases  = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.input(2));</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *output  = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.output(0));</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute.xhtml#a14f46283f316e7f0fad301d5c1507e9f">is_data_type_quantized_asymmetric</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;data_type()))</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    {</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        biases-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a9ebcdce876b4cd07736afa47d50154de">set_data_type</a>(DataType::S32);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    }</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="keyword">const</span> PadStrideInfo     <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>      = node.convolution_info();</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517d">ConvolutionMethod</a> conv_algorithm = node.convolution_method();</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span>              fast_math      = node.fast_math_hint() == FastMathHint::Enabled;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>      <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a>     = node.num_groups();</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="comment">// Validate function</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    Status status{};</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keywordflow">switch</span>(conv_algorithm)</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    {</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        <span class="keywordflow">case</span> ConvolutionMethod::Direct:</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a> != 1, <span class="stringliteral">&quot;DirectConvolutionLayer does not support grouping!&quot;</span>);</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            status = <a class="code" href="namespacearm__compute.xhtml#a4feaaa70771629f4b5dcf3b219c8b647">DirectConvolutionLayer::validate</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, biases, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        <span class="keywordflow">case</span> ConvolutionMethod::GEMM:</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;            status = <a class="code" href="namespacearm__compute.xhtml#a4feaaa70771629f4b5dcf3b219c8b647">GEMMConvolutionLayer::validate</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, biases, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>,</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                                                    WeightsInfo(), Size2D(1, 1), ActivationLayerInfo(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a>);</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        <span class="keywordflow">case</span> ConvolutionMethod::Winograd:</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;            <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a> != 1, <span class="stringliteral">&quot;WinogradConvolutionLayer does not support grouping!&quot;</span>);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;            status = <a class="code" href="namespacearm__compute.xhtml#a4feaaa70771629f4b5dcf3b219c8b647">WinogradConvolutionLayer::validate</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, biases, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, ActivationLayerInfo(), fast_math);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <span class="keywordflow">case</span> ConvolutionMethod::Default:</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;            status = <a class="code" href="namespacearm__compute.xhtml#a4feaaa70771629f4b5dcf3b219c8b647">ConvolutionLayer::validate</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, biases, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>,</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                                                WeightsInfo(), Size2D(1, 1), ActivationLayerInfo(), fast_math, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a>);</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;            <a class="code" href="_error_8h.xhtml#a9561091f3566e78ad3aa39259bc4126a">ARM_COMPUTE_RETURN_ERROR_MSG</a>(<span class="stringliteral">&quot;Unsupported convolution method&quot;</span>);</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    }</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keywordflow">return</span> status;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a9785ffbaaa220b6725a93a6f7f3145ca"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">arm_compute::graph::backends::detail::get_backing_tensor_info</a></div><div class="ttdeci">arm_compute::ITensorInfo * get_backing_tensor_info(arm_compute::graph::Tensor *tensor)</div><div class="ttdoc">Returns backing tensor info of a given tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_validate_helpers_8h_source.xhtml#l00050">ValidateHelpers.h:50</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a00525ff582f16038a1d3819aa44a23a3"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">arm_compute::test::validation::conv_info</a></div><div class="ttdeci">conv_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_winograd_8cpp_source.xhtml#l00597">Winograd.cpp:597</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a></div><div class="ttdoc">Store the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_info_8h_source.xhtml#l00040">ITensorInfo.h:40</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a683661ae75dcb7aef16b9c9bde31517d"><div class="ttname"><a href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517d">arm_compute::ConvolutionMethod</a></div><div class="ttdeci">ConvolutionMethod</div><div class="ttdoc">Available ConvolutionMethod.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00135">Types.h:135</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a206d6e247e0957ac3dee45d27756fc25"><div class="ttname"><a href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true, an error is returned.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00296">Error.h:296</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a2270b3e1d20651d2d8341c858c890830"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">arm_compute::test::validation::num_groups</a></div><div class="ttdeci">const unsigned int num_groups</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00148">Im2Col.cpp:148</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a9ebcdce876b4cd07736afa47d50154de"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a9ebcdce876b4cd07736afa47d50154de">arm_compute::ITensorInfo::set_data_type</a></div><div class="ttdeci">virtual ITensorInfo &amp; set_data_type(DataType data_type)=0</div><div class="ttdoc">Set the data type to the specified value.</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a14f46283f316e7f0fad301d5c1507e9f"><div class="ttname"><a href="namespacearm__compute.xhtml#a14f46283f316e7f0fad301d5c1507e9f">arm_compute::is_data_type_quantized_asymmetric</a></div><div class="ttdeci">bool is_data_type_quantized_asymmetric(DataType dt)</div><div class="ttdoc">Check if a given data type is of asymmetric quantized type.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_utils_8h_source.xhtml#l01139">Utils.h:1139</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a9561091f3566e78ad3aa39259bc4126a"><div class="ttname"><a href="_error_8h.xhtml#a9561091f3566e78ad3aa39259bc4126a">ARM_COMPUTE_RETURN_ERROR_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_MSG(...)</div><div class="ttdoc">An error is returned with the given description.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00194">Error.h:194</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_a300d153929a99c7b571d4cda3f7987a5"><div class="ttname"><a href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_VERBOSE(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00050">Logger.h:50</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a64a08a9fec5aeee8650e7182b6d171d0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">arm_compute::test::validation::weights</a></div><div class="ttdeci">CLTensor weights</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00188">ConvolutionLayer.cpp:188</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a1c69762a42ab8add645d0a949b6f4b1f"><div class="ttname"><a href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_MSG(cond, msg)</div><div class="ttdoc">If the condition is true, an error is returned.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00244">Error.h:244</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a4feaaa70771629f4b5dcf3b219c8b647"><div class="ttname"><a href="namespacearm__compute.xhtml#a4feaaa70771629f4b5dcf3b219c8b647">arm_compute::validate</a></div><div class="ttdeci">Status validate(const ITensorInfo *scores_in, const ITensorInfo *boxes_in, const ITensorInfo *batch_splits_in, const ITensorInfo *scores_out, const ITensorInfo *boxes_out, const ITensorInfo *classes, const ITensorInfo *batch_splits_out, const ITensorInfo *keeps, const ITensorInfo *keeps_size, const BoxNMSLimitInfo info)</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_box_with_non_maxima_suppression_limit_8cpp_source.xhtml#l00196">CPPBoxWithNonMaximaSuppressionLimit.cpp:196</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="graph_2_logger_8h_source.xhtml#l00050">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>, <a class="el" href="_error_8h_source.xhtml#l00194">ARM_COMPUTE_RETURN_ERROR_MSG</a>, <a class="el" href="_error_8h_source.xhtml#l00296">ARM_COMPUTE_RETURN_ERROR_ON</a>, <a class="el" href="_error_8h_source.xhtml#l00244">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>, <a class="el" href="_c_l_2_winograd_8cpp_source.xhtml#l00597">arm_compute::test::validation::conv_info</a>, <a class="el" href="_convolution_layer_node_8cpp_source.xhtml#l00066">ConvolutionLayerNode::convolution_info()</a>, <a class="el" href="_convolution_layer_node_8cpp_source.xhtml#l00051">ConvolutionLayerNode::convolution_method()</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517da7a1920d61156abc05a60135aefe8bc67">arm_compute::graph::Default</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517dafd1dd0c603be8170f9eae0be9f2f6afb">arm_compute::graph::Direct</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#ac85a46f3ebd3ab09f576a994ac2dce11a00d23a76e43b46dae9ec7aa9dcbebb32">arm_compute::graph::Enabled</a>, <a class="el" href="_convolution_layer_node_8cpp_source.xhtml#l00061">ConvolutionLayerNode::fast_math_hint()</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517da5174aac3927faa9ee34befb7fc87a9e3">arm_compute::graph::GEMM</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00050">get_backing_tensor_info()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00102">INode::id()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">arm_compute::test::validation::input</a>, <a class="el" href="arm__compute_2core_2_utils_8h_source.xhtml#l01139">arm_compute::is_data_type_quantized_asymmetric()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_convolution_layer_node_8cpp_source.xhtml#l00071">ConvolutionLayerNode::num_groups()</a>, <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00148">arm_compute::test::validation::num_groups</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00178">INode::num_inputs()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00183">INode::num_outputs()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::S32</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a9ebcdce876b4cd07736afa47d50154de">ITensorInfo::set_data_type()</a>, <a class="el" href="_c_p_p_box_with_non_maxima_suppression_limit_8cpp_source.xhtml#l00196">arm_compute::validate()</a>, <a class="el" href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00188">arm_compute::test::validation::weights</a>, and <a class="el" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517da09db1dd1078ec6bdbe2722b4558e578f">arm_compute::graph::Winograd</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_node_validator_8cpp_source.xhtml#l00041">CLNodeValidator::validate()</a>, <a class="el" href="_n_e_node_validator_8cpp_source.xhtml#l00041">NENodeValidator::validate()</a>, and <a class="el" href="_g_c_node_validator_8cpp_source.xhtml#l00095">GCNodeValidator::validate()</a>.</p>

</div>
</div>
<a id="acdd027e9c5015bdd7102c142b553f222"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acdd027e9c5015bdd7102c142b553f222">&#9670;&nbsp;</a></span>validate_depthwise_convolution_layer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> arm_compute::graph::backends::detail::validate_depthwise_convolution_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_depthwise_convolution_layer_node.xhtml">DepthwiseConvolutionLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Validates a Depthwise Convolution layer node. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">DepthwiseConvolutionLayer</td><td>Default Depthwise Convolution layer type</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to validate</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="_validate_helpers_8h_source.xhtml#l00172">172</a> of file <a class="el" href="_validate_helpers_8h_source.xhtml">ValidateHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;{</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Validating DepthwiseConvolutionLayer node with ID : &quot;</span> &lt;&lt; node.id() &lt;&lt; <span class="stringliteral">&quot; and Name: &quot;</span> &lt;&lt; node.name() &lt;&lt; std::endl);</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.num_inputs() != 3);</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.num_outputs() != 1);</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>   = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">detail::get_backing_tensor_info</a>(node.input(0));</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a> = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">detail::get_backing_tensor_info</a>(node.input(1));</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *biases  = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.input(2));</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *output  = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.output(0));</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <span class="keyword">const</span> PadStrideInfo              <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>        = node.convolution_info();</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a75ce9b1baad4303a53124d6f0795821f">DepthwiseConvolutionMethod</a> dwc_algorithm    = node.depthwise_convolution_method();</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>                        depth_multiplier = node.depth_multiplier();</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="comment">// Validate function</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    Status status{};</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="keywordflow">switch</span>(dwc_algorithm)</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    {</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        <span class="keywordflow">case</span> DepthwiseConvolutionMethod::Default:</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        <span class="keywordflow">case</span> DepthwiseConvolutionMethod::Optimized3x3:</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;            status = <a class="code" href="namespacearm__compute.xhtml#a4feaaa70771629f4b5dcf3b219c8b647">DepthwiseConvolutionLayer::validate</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, biases, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, depth_multiplier);</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            <a class="code" href="_error_8h.xhtml#a9561091f3566e78ad3aa39259bc4126a">ARM_COMPUTE_RETURN_ERROR_MSG</a>(<span class="stringliteral">&quot;Unsupported depthwise convolution method&quot;</span>);</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    }</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="keywordflow">return</span> status;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a9785ffbaaa220b6725a93a6f7f3145ca"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">arm_compute::graph::backends::detail::get_backing_tensor_info</a></div><div class="ttdeci">arm_compute::ITensorInfo * get_backing_tensor_info(arm_compute::graph::Tensor *tensor)</div><div class="ttdoc">Returns backing tensor info of a given tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_validate_helpers_8h_source.xhtml#l00050">ValidateHelpers.h:50</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a00525ff582f16038a1d3819aa44a23a3"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">arm_compute::test::validation::conv_info</a></div><div class="ttdeci">conv_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_winograd_8cpp_source.xhtml#l00597">Winograd.cpp:597</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a></div><div class="ttdoc">Store the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_info_8h_source.xhtml#l00040">ITensorInfo.h:40</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a206d6e247e0957ac3dee45d27756fc25"><div class="ttname"><a href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true, an error is returned.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00296">Error.h:296</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a75ce9b1baad4303a53124d6f0795821f"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a75ce9b1baad4303a53124d6f0795821f">arm_compute::graph::DepthwiseConvolutionMethod</a></div><div class="ttdeci">DepthwiseConvolutionMethod</div><div class="ttdoc">Supported Depthwise Convolution layer methods.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00117">Types.h:117</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a9561091f3566e78ad3aa39259bc4126a"><div class="ttname"><a href="_error_8h.xhtml#a9561091f3566e78ad3aa39259bc4126a">ARM_COMPUTE_RETURN_ERROR_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_MSG(...)</div><div class="ttdoc">An error is returned with the given description.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00194">Error.h:194</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_a300d153929a99c7b571d4cda3f7987a5"><div class="ttname"><a href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_VERBOSE(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00050">Logger.h:50</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a64a08a9fec5aeee8650e7182b6d171d0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">arm_compute::test::validation::weights</a></div><div class="ttdeci">CLTensor weights</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00188">ConvolutionLayer.cpp:188</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a4feaaa70771629f4b5dcf3b219c8b647"><div class="ttname"><a href="namespacearm__compute.xhtml#a4feaaa70771629f4b5dcf3b219c8b647">arm_compute::validate</a></div><div class="ttdeci">Status validate(const ITensorInfo *scores_in, const ITensorInfo *boxes_in, const ITensorInfo *batch_splits_in, const ITensorInfo *scores_out, const ITensorInfo *boxes_out, const ITensorInfo *classes, const ITensorInfo *batch_splits_out, const ITensorInfo *keeps, const ITensorInfo *keeps_size, const BoxNMSLimitInfo info)</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_box_with_non_maxima_suppression_limit_8cpp_source.xhtml#l00196">CPPBoxWithNonMaximaSuppressionLimit.cpp:196</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="graph_2_logger_8h_source.xhtml#l00050">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>, <a class="el" href="_error_8h_source.xhtml#l00194">ARM_COMPUTE_RETURN_ERROR_MSG</a>, <a class="el" href="_error_8h_source.xhtml#l00296">ARM_COMPUTE_RETURN_ERROR_ON</a>, <a class="el" href="_c_l_2_winograd_8cpp_source.xhtml#l00597">arm_compute::test::validation::conv_info</a>, <a class="el" href="_depthwise_convolution_layer_node_8cpp_source.xhtml#l00058">DepthwiseConvolutionLayerNode::convolution_info()</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#a75ce9b1baad4303a53124d6f0795821fa7a1920d61156abc05a60135aefe8bc67">arm_compute::graph::Default</a>, <a class="el" href="_depthwise_convolution_layer_node_8cpp_source.xhtml#l00043">DepthwiseConvolutionLayerNode::depth_multiplier()</a>, <a class="el" href="_depthwise_convolution_layer_node_8cpp_source.xhtml#l00053">DepthwiseConvolutionLayerNode::depthwise_convolution_method()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00050">get_backing_tensor_info()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00102">INode::id()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">arm_compute::test::validation::input</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00178">INode::num_inputs()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00183">INode::num_outputs()</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#a75ce9b1baad4303a53124d6f0795821fa3bb7b7f3f021a006e65111fc1d226938">arm_compute::graph::Optimized3x3</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, <a class="el" href="_c_p_p_box_with_non_maxima_suppression_limit_8cpp_source.xhtml#l00196">arm_compute::validate()</a>, and <a class="el" href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00188">arm_compute::test::validation::weights</a>.</p>

<p class="reference">Referenced by <a class="el" href="_g_c_node_validator_8cpp_source.xhtml#l00095">GCNodeValidator::validate()</a>.</p>

</div>
</div>
<a id="a891884386a167090b520930b164870f9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a891884386a167090b520930b164870f9">&#9670;&nbsp;</a></span>validate_dequantization_layer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> arm_compute::graph::backends::detail::validate_dequantization_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_dequantization_layer_node.xhtml">DequantizationLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Validates a dequantize layer node. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">DequantizationLayer</td><td>Dequantize layer type</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to validate</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="_validate_helpers_8h_source.xhtml#l00211">211</a> of file <a class="el" href="_validate_helpers_8h_source.xhtml">ValidateHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;{</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Validating DetectionOutputLayer node with ID : &quot;</span> &lt;&lt; node.id() &lt;&lt; <span class="stringliteral">&quot; and Name: &quot;</span> &lt;&lt; node.name() &lt;&lt; std::endl);</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.num_inputs() != 1);</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.num_outputs() != 1);</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>  = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.input(0));</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *output = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.output(0));</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a4feaaa70771629f4b5dcf3b219c8b647">DequantizationLayer::validate</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output);</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a9785ffbaaa220b6725a93a6f7f3145ca"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">arm_compute::graph::backends::detail::get_backing_tensor_info</a></div><div class="ttdeci">arm_compute::ITensorInfo * get_backing_tensor_info(arm_compute::graph::Tensor *tensor)</div><div class="ttdoc">Returns backing tensor info of a given tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_validate_helpers_8h_source.xhtml#l00050">ValidateHelpers.h:50</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a></div><div class="ttdoc">Store the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_info_8h_source.xhtml#l00040">ITensorInfo.h:40</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a206d6e247e0957ac3dee45d27756fc25"><div class="ttname"><a href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true, an error is returned.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00296">Error.h:296</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_a300d153929a99c7b571d4cda3f7987a5"><div class="ttname"><a href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_VERBOSE(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00050">Logger.h:50</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a4feaaa70771629f4b5dcf3b219c8b647"><div class="ttname"><a href="namespacearm__compute.xhtml#a4feaaa70771629f4b5dcf3b219c8b647">arm_compute::validate</a></div><div class="ttdeci">Status validate(const ITensorInfo *scores_in, const ITensorInfo *boxes_in, const ITensorInfo *batch_splits_in, const ITensorInfo *scores_out, const ITensorInfo *boxes_out, const ITensorInfo *classes, const ITensorInfo *batch_splits_out, const ITensorInfo *keeps, const ITensorInfo *keeps_size, const BoxNMSLimitInfo info)</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_box_with_non_maxima_suppression_limit_8cpp_source.xhtml#l00196">CPPBoxWithNonMaximaSuppressionLimit.cpp:196</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="graph_2_logger_8h_source.xhtml#l00050">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>, <a class="el" href="_error_8h_source.xhtml#l00296">ARM_COMPUTE_RETURN_ERROR_ON</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00050">get_backing_tensor_info()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00102">INode::id()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">arm_compute::test::validation::input</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00178">INode::num_inputs()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00183">INode::num_outputs()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, and <a class="el" href="_c_p_p_box_with_non_maxima_suppression_limit_8cpp_source.xhtml#l00196">arm_compute::validate()</a>.</p>

</div>
</div>
<a id="a432fd13bfda1435e0d3a8aa5b3dddf4f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a432fd13bfda1435e0d3a8aa5b3dddf4f">&#9670;&nbsp;</a></span>validate_detection_output_layer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> arm_compute::graph::backends::detail::validate_detection_output_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_detection_output_layer_node.xhtml">DetectionOutputLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Validates a detection output layer node. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">DetectionOutputLayer</td><td>DetectionOutput layer type</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to validate</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="_validate_helpers_8h_source.xhtml#l00232">232</a> of file <a class="el" href="_validate_helpers_8h_source.xhtml">ValidateHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;{</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Validating DetectionOutputLayer node with ID : &quot;</span> &lt;&lt; node.id() &lt;&lt; <span class="stringliteral">&quot; and Name: &quot;</span> &lt;&lt; node.name() &lt;&lt; std::endl);</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.num_inputs() != 3);</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.num_outputs() != 1);</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a>      *input0      = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.input(0));</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a>      *input1      = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.input(1));</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a>      *input2      = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.input(2));</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a>      *output      = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.output(0));</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="keyword">const</span> DetectionOutputLayerInfo detect_info = node.detection_output_info();</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a4feaaa70771629f4b5dcf3b219c8b647">DetectionOutputLayer::validate</a>(input0, input1, input2, output, detect_info);</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a9785ffbaaa220b6725a93a6f7f3145ca"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">arm_compute::graph::backends::detail::get_backing_tensor_info</a></div><div class="ttdeci">arm_compute::ITensorInfo * get_backing_tensor_info(arm_compute::graph::Tensor *tensor)</div><div class="ttdoc">Returns backing tensor info of a given tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_validate_helpers_8h_source.xhtml#l00050">ValidateHelpers.h:50</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a></div><div class="ttdoc">Store the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_info_8h_source.xhtml#l00040">ITensorInfo.h:40</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a206d6e247e0957ac3dee45d27756fc25"><div class="ttname"><a href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true, an error is returned.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00296">Error.h:296</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_a300d153929a99c7b571d4cda3f7987a5"><div class="ttname"><a href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_VERBOSE(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00050">Logger.h:50</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a4feaaa70771629f4b5dcf3b219c8b647"><div class="ttname"><a href="namespacearm__compute.xhtml#a4feaaa70771629f4b5dcf3b219c8b647">arm_compute::validate</a></div><div class="ttdeci">Status validate(const ITensorInfo *scores_in, const ITensorInfo *boxes_in, const ITensorInfo *batch_splits_in, const ITensorInfo *scores_out, const ITensorInfo *boxes_out, const ITensorInfo *classes, const ITensorInfo *batch_splits_out, const ITensorInfo *keeps, const ITensorInfo *keeps_size, const BoxNMSLimitInfo info)</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_box_with_non_maxima_suppression_limit_8cpp_source.xhtml#l00196">CPPBoxWithNonMaximaSuppressionLimit.cpp:196</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="graph_2_logger_8h_source.xhtml#l00050">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>, <a class="el" href="_error_8h_source.xhtml#l00296">ARM_COMPUTE_RETURN_ERROR_ON</a>, <a class="el" href="_detection_output_layer_node_8cpp_source.xhtml#l00042">DetectionOutputLayerNode::detection_output_info()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00050">get_backing_tensor_info()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00102">INode::id()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00178">INode::num_inputs()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00183">INode::num_outputs()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, and <a class="el" href="_c_p_p_box_with_non_maxima_suppression_limit_8cpp_source.xhtml#l00196">arm_compute::validate()</a>.</p>

</div>
</div>
<a id="a9c20f659744b7e6854294198184c60f1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9c20f659744b7e6854294198184c60f1">&#9670;&nbsp;</a></span>validate_detection_post_process_layer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> arm_compute::graph::backends::detail::validate_detection_post_process_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_detection_post_process_layer_node.xhtml">DetectionPostProcessLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Validates a detection post process layer node. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">DetectionPostProcessLayer</td><td>DetectionOutput layer type</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to validate</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="_validate_helpers_8h_source.xhtml#l00256">256</a> of file <a class="el" href="_validate_helpers_8h_source.xhtml">ValidateHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;{</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Validating DetectionPostProcessLayer node with ID : &quot;</span> &lt;&lt; node.id() &lt;&lt; <span class="stringliteral">&quot; and Name: &quot;</span> &lt;&lt; node.name() &lt;&lt; std::endl);</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.num_inputs() != 3);</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.num_outputs() != 4);</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a>           *input0      = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.input(0));</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a>           *input1      = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.input(1));</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a>           *input2      = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.input(2));</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a>           *output0     = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.output(0));</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a>           *output1     = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.output(1));</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a>           *output2     = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.output(2));</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a>           *output3     = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.output(3));</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <span class="keyword">const</span> DetectionPostProcessLayerInfo detect_info = node.detection_post_process_info();</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a4feaaa70771629f4b5dcf3b219c8b647">DetectionPostProcessLayer::validate</a>(input0, input1, input2, output0, output1, output2, output3, detect_info);</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a9785ffbaaa220b6725a93a6f7f3145ca"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">arm_compute::graph::backends::detail::get_backing_tensor_info</a></div><div class="ttdeci">arm_compute::ITensorInfo * get_backing_tensor_info(arm_compute::graph::Tensor *tensor)</div><div class="ttdoc">Returns backing tensor info of a given tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_validate_helpers_8h_source.xhtml#l00050">ValidateHelpers.h:50</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a></div><div class="ttdoc">Store the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_info_8h_source.xhtml#l00040">ITensorInfo.h:40</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a206d6e247e0957ac3dee45d27756fc25"><div class="ttname"><a href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true, an error is returned.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00296">Error.h:296</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_a300d153929a99c7b571d4cda3f7987a5"><div class="ttname"><a href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_VERBOSE(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00050">Logger.h:50</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a4feaaa70771629f4b5dcf3b219c8b647"><div class="ttname"><a href="namespacearm__compute.xhtml#a4feaaa70771629f4b5dcf3b219c8b647">arm_compute::validate</a></div><div class="ttdeci">Status validate(const ITensorInfo *scores_in, const ITensorInfo *boxes_in, const ITensorInfo *batch_splits_in, const ITensorInfo *scores_out, const ITensorInfo *boxes_out, const ITensorInfo *classes, const ITensorInfo *batch_splits_out, const ITensorInfo *keeps, const ITensorInfo *keeps_size, const BoxNMSLimitInfo info)</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_box_with_non_maxima_suppression_limit_8cpp_source.xhtml#l00196">CPPBoxWithNonMaximaSuppressionLimit.cpp:196</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="graph_2_logger_8h_source.xhtml#l00050">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>, <a class="el" href="_error_8h_source.xhtml#l00296">ARM_COMPUTE_RETURN_ERROR_ON</a>, <a class="el" href="_detection_post_process_layer_node_8cpp_source.xhtml#l00042">DetectionPostProcessLayerNode::detection_post_process_info()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00050">get_backing_tensor_info()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00102">INode::id()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00178">INode::num_inputs()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00183">INode::num_outputs()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, and <a class="el" href="_c_p_p_box_with_non_maxima_suppression_limit_8cpp_source.xhtml#l00196">arm_compute::validate()</a>.</p>

</div>
</div>
<a id="a40f232193e819dfc9dc9edbabefd5b7a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a40f232193e819dfc9dc9edbabefd5b7a">&#9670;&nbsp;</a></span>validate_generate_proposals_layer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> arm_compute::graph::backends::detail::validate_generate_proposals_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_generate_proposals_layer_node.xhtml">GenerateProposalsLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Validates a Generate Proposals layer node. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">GenerateProposalsLayer</td><td>Generate Proposals layer type</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to validate</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="_validate_helpers_8h_source.xhtml#l00284">284</a> of file <a class="el" href="_validate_helpers_8h_source.xhtml">ValidateHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;{</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Validating GenerateProposalsLayer node with ID : &quot;</span> &lt;&lt; node.id() &lt;&lt; <span class="stringliteral">&quot; and Name: &quot;</span> &lt;&lt; node.name() &lt;&lt; std::endl);</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.num_inputs() != 3);</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.num_outputs() != 3);</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a>   *scores              = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">detail::get_backing_tensor_info</a>(node.input(0));</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a>   *deltas              = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">detail::get_backing_tensor_info</a>(node.input(1));</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a>   *anchors             = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">detail::get_backing_tensor_info</a>(node.input(2));</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a>   *proposals           = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.output(0));</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a>   *scores_out          = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.output(1));</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a>   *num_valid_proposals = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.output(2));</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    <span class="keyword">const</span> GenerateProposalsInfo <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>                = node.info();</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a4feaaa70771629f4b5dcf3b219c8b647">GenerateProposalsLayer::validate</a>(scores, deltas, anchors, proposals, scores_out, num_valid_proposals, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>);</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a9785ffbaaa220b6725a93a6f7f3145ca"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">arm_compute::graph::backends::detail::get_backing_tensor_info</a></div><div class="ttdeci">arm_compute::ITensorInfo * get_backing_tensor_info(arm_compute::graph::Tensor *tensor)</div><div class="ttdoc">Returns backing tensor info of a given tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_validate_helpers_8h_source.xhtml#l00050">ValidateHelpers.h:50</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a></div><div class="ttdoc">Store the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_info_8h_source.xhtml#l00040">ITensorInfo.h:40</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a206d6e247e0957ac3dee45d27756fc25"><div class="ttname"><a href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true, an error is returned.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00296">Error.h:296</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_a300d153929a99c7b571d4cda3f7987a5"><div class="ttname"><a href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_VERBOSE(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00050">Logger.h:50</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a4f4125dba5283887b34f889b1c615c0c"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">arm_compute::test::validation::info</a></div><div class="ttdeci">info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00182">ConvolutionLayer.cpp:182</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a4feaaa70771629f4b5dcf3b219c8b647"><div class="ttname"><a href="namespacearm__compute.xhtml#a4feaaa70771629f4b5dcf3b219c8b647">arm_compute::validate</a></div><div class="ttdeci">Status validate(const ITensorInfo *scores_in, const ITensorInfo *boxes_in, const ITensorInfo *batch_splits_in, const ITensorInfo *scores_out, const ITensorInfo *boxes_out, const ITensorInfo *classes, const ITensorInfo *batch_splits_out, const ITensorInfo *keeps, const ITensorInfo *keeps_size, const BoxNMSLimitInfo info)</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_box_with_non_maxima_suppression_limit_8cpp_source.xhtml#l00196">CPPBoxWithNonMaximaSuppressionLimit.cpp:196</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="graph_2_logger_8h_source.xhtml#l00050">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>, <a class="el" href="_error_8h_source.xhtml#l00296">ARM_COMPUTE_RETURN_ERROR_ON</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00050">get_backing_tensor_info()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00102">INode::id()</a>, <a class="el" href="_generate_proposals_layer_node_8cpp_source.xhtml#l00042">GenerateProposalsLayerNode::info()</a>, <a class="el" href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00182">arm_compute::test::validation::info</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00178">INode::num_inputs()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00183">INode::num_outputs()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, and <a class="el" href="_c_p_p_box_with_non_maxima_suppression_limit_8cpp_source.xhtml#l00196">arm_compute::validate()</a>.</p>

</div>
</div>
<a id="aa6fabefcb8c4bd308219565ddcf00928"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa6fabefcb8c4bd308219565ddcf00928">&#9670;&nbsp;</a></span>validate_node()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::graph::backends::detail::validate_node </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>num_expected_inputs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>num_expected_outputs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_function_helpers_8h_source.xhtml#l00075">75</a> of file <a class="el" href="_function_helpers_8h_source.xhtml">FunctionHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;{</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Creating &quot;</span> &lt;&lt; node.type()</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                                  &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                                  &lt;&lt; <span class="stringliteral">&quot; ID: &quot;</span> &lt;&lt; node.id()</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                                  &lt;&lt; node.name()</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                                  &lt;&lt; std::endl);</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(TargetInfo::TargetType != node.assigned_target());</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(node.num_inputs() != num_expected_inputs);</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(node.num_outputs() != num_expected_outputs);</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(node, num_expected_inputs, num_expected_outputs);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_a300d153929a99c7b571d4cda3f7987a5"><div class="ttname"><a href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_VERBOSE(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00050">Logger.h:50</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="graph_2_logger_8h_source.xhtml#l00050">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>, <a class="el" href="_error_8h_source.xhtml#l00152">ARM_COMPUTE_UNUSED</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00198">INode::assigned_target()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00102">INode::id()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00178">INode::num_inputs()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00183">INode::num_outputs()</a>, and <a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a6b2d83e561886647467f86c20ce39bec">INode::type()</a>.</p>

</div>
</div>
<a id="ad6c95a270f3275bd5711ce6ec193c4ff"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad6c95a270f3275bd5711ce6ec193c4ff">&#9670;&nbsp;</a></span>validate_normalize_planar_yuv_layer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> arm_compute::graph::backends::detail::validate_normalize_planar_yuv_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_normalize_planar_y_u_v_layer_node.xhtml">NormalizePlanarYUVLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Validates a NormalizePlanarYUV layer node. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">NormalizePlanarYUVLayer</td><td>layer type</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to validate</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="_validate_helpers_8h_source.xhtml#l00311">311</a> of file <a class="el" href="_validate_helpers_8h_source.xhtml">ValidateHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;{</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Validating NormalizePlanarYUVLayer node with ID : &quot;</span> &lt;&lt; node.id() &lt;&lt; <span class="stringliteral">&quot; and Name: &quot;</span> &lt;&lt; node.name() &lt;&lt; std::endl);</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.num_inputs() != 3);</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.num_outputs() != 1);</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>  = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">detail::get_backing_tensor_info</a>(node.input(0));</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *mean   = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">detail::get_backing_tensor_info</a>(node.input(1));</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *std    = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">detail::get_backing_tensor_info</a>(node.input(2));</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *output = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.output(0));</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    <span class="comment">// Validate function</span></div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a4feaaa70771629f4b5dcf3b219c8b647">NormalizePlanarYUVLayer::validate</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, mean, std);</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a9785ffbaaa220b6725a93a6f7f3145ca"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">arm_compute::graph::backends::detail::get_backing_tensor_info</a></div><div class="ttdeci">arm_compute::ITensorInfo * get_backing_tensor_info(arm_compute::graph::Tensor *tensor)</div><div class="ttdoc">Returns backing tensor info of a given tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_validate_helpers_8h_source.xhtml#l00050">ValidateHelpers.h:50</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a></div><div class="ttdoc">Store the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_info_8h_source.xhtml#l00040">ITensorInfo.h:40</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a206d6e247e0957ac3dee45d27756fc25"><div class="ttname"><a href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true, an error is returned.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00296">Error.h:296</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_a300d153929a99c7b571d4cda3f7987a5"><div class="ttname"><a href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_VERBOSE(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00050">Logger.h:50</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a4feaaa70771629f4b5dcf3b219c8b647"><div class="ttname"><a href="namespacearm__compute.xhtml#a4feaaa70771629f4b5dcf3b219c8b647">arm_compute::validate</a></div><div class="ttdeci">Status validate(const ITensorInfo *scores_in, const ITensorInfo *boxes_in, const ITensorInfo *batch_splits_in, const ITensorInfo *scores_out, const ITensorInfo *boxes_out, const ITensorInfo *classes, const ITensorInfo *batch_splits_out, const ITensorInfo *keeps, const ITensorInfo *keeps_size, const BoxNMSLimitInfo info)</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_box_with_non_maxima_suppression_limit_8cpp_source.xhtml#l00196">CPPBoxWithNonMaximaSuppressionLimit.cpp:196</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="graph_2_logger_8h_source.xhtml#l00050">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>, <a class="el" href="_error_8h_source.xhtml#l00296">ARM_COMPUTE_RETURN_ERROR_ON</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00050">get_backing_tensor_info()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00102">INode::id()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">arm_compute::test::validation::input</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00178">INode::num_inputs()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00183">INode::num_outputs()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, and <a class="el" href="_c_p_p_box_with_non_maxima_suppression_limit_8cpp_source.xhtml#l00196">arm_compute::validate()</a>.</p>

</div>
</div>
<a id="ada206e294c8d07093a8a50e08172c272"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ada206e294c8d07093a8a50e08172c272">&#9670;&nbsp;</a></span>validate_pad_layer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> arm_compute::graph::backends::detail::validate_pad_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_pad_layer_node.xhtml">PadLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Validates a pad layer node. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">PadLayer</td><td>Pad layer type</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to validate</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="_validate_helpers_8h_source.xhtml#l00336">336</a> of file <a class="el" href="_validate_helpers_8h_source.xhtml">ValidateHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;{</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Validating PadLayer node with ID : &quot;</span> &lt;&lt; node.id() &lt;&lt; <span class="stringliteral">&quot; and Name: &quot;</span> &lt;&lt; node.name() &lt;&lt; std::endl);</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.num_inputs() != 1);</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.num_outputs() != 1);</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>   = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.input(0));</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *output  = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.output(0));</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ac1a1b012674e0f1de071a611391828ad">PaddingList</a>        &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a735a025fce26c1ef147b54426df18181">padding</a> = node.padding();</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a4feaaa70771629f4b5dcf3b219c8b647">PadLayer::validate</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a735a025fce26c1ef147b54426df18181">padding</a>);</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;}</div><div class="ttc" id="namespacearm__compute_xhtml_ac1a1b012674e0f1de071a611391828ad"><div class="ttname"><a href="namespacearm__compute.xhtml#ac1a1b012674e0f1de071a611391828ad">arm_compute::PaddingList</a></div><div class="ttdeci">std::vector&lt; PaddingInfo &gt; PaddingList</div><div class="ttdoc">List of padding information.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00455">Types.h:455</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a9785ffbaaa220b6725a93a6f7f3145ca"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">arm_compute::graph::backends::detail::get_backing_tensor_info</a></div><div class="ttdeci">arm_compute::ITensorInfo * get_backing_tensor_info(arm_compute::graph::Tensor *tensor)</div><div class="ttdoc">Returns backing tensor info of a given tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_validate_helpers_8h_source.xhtml#l00050">ValidateHelpers.h:50</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a></div><div class="ttdoc">Store the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_info_8h_source.xhtml#l00040">ITensorInfo.h:40</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a206d6e247e0957ac3dee45d27756fc25"><div class="ttname"><a href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true, an error is returned.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00296">Error.h:296</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_a300d153929a99c7b571d4cda3f7987a5"><div class="ttname"><a href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_VERBOSE(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00050">Logger.h:50</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a735a025fce26c1ef147b54426df18181"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a735a025fce26c1ef147b54426df18181">arm_compute::test::validation::padding</a></div><div class="ttdeci">const PaddingSize padding</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_absolute_difference_8cpp_source.xhtml#l00113">AbsoluteDifference.cpp:113</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a4feaaa70771629f4b5dcf3b219c8b647"><div class="ttname"><a href="namespacearm__compute.xhtml#a4feaaa70771629f4b5dcf3b219c8b647">arm_compute::validate</a></div><div class="ttdeci">Status validate(const ITensorInfo *scores_in, const ITensorInfo *boxes_in, const ITensorInfo *batch_splits_in, const ITensorInfo *scores_out, const ITensorInfo *boxes_out, const ITensorInfo *classes, const ITensorInfo *batch_splits_out, const ITensorInfo *keeps, const ITensorInfo *keeps_size, const BoxNMSLimitInfo info)</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_box_with_non_maxima_suppression_limit_8cpp_source.xhtml#l00196">CPPBoxWithNonMaximaSuppressionLimit.cpp:196</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="graph_2_logger_8h_source.xhtml#l00050">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>, <a class="el" href="_error_8h_source.xhtml#l00296">ARM_COMPUTE_RETURN_ERROR_ON</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00050">get_backing_tensor_info()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00102">INode::id()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">arm_compute::test::validation::input</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00178">INode::num_inputs()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00183">INode::num_outputs()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, <a class="el" href="_pad_layer_node_8cpp_source.xhtml#l00042">PadLayerNode::padding()</a>, <a class="el" href="_c_l_2_absolute_difference_8cpp_source.xhtml#l00113">arm_compute::test::validation::padding</a>, and <a class="el" href="_c_p_p_box_with_non_maxima_suppression_limit_8cpp_source.xhtml#l00196">arm_compute::validate()</a>.</p>

</div>
</div>
<a id="aeb6f53f28ef137932823d17554043056"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeb6f53f28ef137932823d17554043056">&#9670;&nbsp;</a></span>validate_permute_layer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> arm_compute::graph::backends::detail::validate_permute_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_permute_layer_node.xhtml">PermuteLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Validates a permute layer node. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">PermuteLayer</td><td>Permute layer type</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to validate</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="_validate_helpers_8h_source.xhtml#l00359">359</a> of file <a class="el" href="_validate_helpers_8h_source.xhtml">ValidateHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;{</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Validating PermuteLayer node with ID : &quot;</span> &lt;&lt; node.id() &lt;&lt; <span class="stringliteral">&quot; and Name: &quot;</span> &lt;&lt; node.name() &lt;&lt; std::endl);</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.num_inputs() != 1);</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.num_outputs() != 1);</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>  = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.input(0));</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *output = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.output(0));</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a33e65be485104e2e9e69fca551d6f492">PermutationVector</a> &amp;perm   = node.permutation_vector();</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a4feaaa70771629f4b5dcf3b219c8b647">PermuteLayer::validate</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, perm);</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a9785ffbaaa220b6725a93a6f7f3145ca"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">arm_compute::graph::backends::detail::get_backing_tensor_info</a></div><div class="ttdeci">arm_compute::ITensorInfo * get_backing_tensor_info(arm_compute::graph::Tensor *tensor)</div><div class="ttdoc">Returns backing tensor info of a given tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_validate_helpers_8h_source.xhtml#l00050">ValidateHelpers.h:50</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a33e65be485104e2e9e69fca551d6f492"><div class="ttname"><a href="namespacearm__compute.xhtml#a33e65be485104e2e9e69fca551d6f492">arm_compute::PermutationVector</a></div><div class="ttdeci">Strides PermutationVector</div><div class="ttdoc">Permutation vector.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00048">Types.h:48</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a></div><div class="ttdoc">Store the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_info_8h_source.xhtml#l00040">ITensorInfo.h:40</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a206d6e247e0957ac3dee45d27756fc25"><div class="ttname"><a href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true, an error is returned.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00296">Error.h:296</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_a300d153929a99c7b571d4cda3f7987a5"><div class="ttname"><a href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_VERBOSE(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00050">Logger.h:50</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a4feaaa70771629f4b5dcf3b219c8b647"><div class="ttname"><a href="namespacearm__compute.xhtml#a4feaaa70771629f4b5dcf3b219c8b647">arm_compute::validate</a></div><div class="ttdeci">Status validate(const ITensorInfo *scores_in, const ITensorInfo *boxes_in, const ITensorInfo *batch_splits_in, const ITensorInfo *scores_out, const ITensorInfo *boxes_out, const ITensorInfo *classes, const ITensorInfo *batch_splits_out, const ITensorInfo *keeps, const ITensorInfo *keeps_size, const BoxNMSLimitInfo info)</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_box_with_non_maxima_suppression_limit_8cpp_source.xhtml#l00196">CPPBoxWithNonMaximaSuppressionLimit.cpp:196</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="graph_2_logger_8h_source.xhtml#l00050">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>, <a class="el" href="_error_8h_source.xhtml#l00296">ARM_COMPUTE_RETURN_ERROR_ON</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00050">get_backing_tensor_info()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00102">INode::id()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">arm_compute::test::validation::input</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00178">INode::num_inputs()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00183">INode::num_outputs()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, <a class="el" href="_permute_layer_node_8cpp_source.xhtml#l00042">PermuteLayerNode::permutation_vector()</a>, and <a class="el" href="_c_p_p_box_with_non_maxima_suppression_limit_8cpp_source.xhtml#l00196">arm_compute::validate()</a>.</p>

</div>
</div>
<a id="a5f83a0fbf23529c0f205c6732b3c8312"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5f83a0fbf23529c0f205c6732b3c8312">&#9670;&nbsp;</a></span>validate_prelu_layer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> arm_compute::graph::backends::detail::validate_prelu_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_p_relu_layer_node.xhtml">PReluLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Validates a PRelu layer node. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">PReluLayer</td><td>PRelu layer type</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to validate</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="_validate_helpers_8h_source.xhtml#l00382">382</a> of file <a class="el" href="_validate_helpers_8h_source.xhtml">ValidateHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;{</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Validating PRelu node with ID : &quot;</span> &lt;&lt; node.id() &lt;&lt; <span class="stringliteral">&quot; and Name: &quot;</span> &lt;&lt; node.name() &lt;&lt; std::endl);</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.num_inputs() != 2);</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.num_outputs() != 1);</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>  = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.input(0));</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3161c2c93c655dd30953372064ec627b">alpha</a>  = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.input(1));</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *output = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.output(0));</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a4feaaa70771629f4b5dcf3b219c8b647">PReluLayer::validate</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3161c2c93c655dd30953372064ec627b">alpha</a>, output);</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a9785ffbaaa220b6725a93a6f7f3145ca"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">arm_compute::graph::backends::detail::get_backing_tensor_info</a></div><div class="ttdeci">arm_compute::ITensorInfo * get_backing_tensor_info(arm_compute::graph::Tensor *tensor)</div><div class="ttdoc">Returns backing tensor info of a given tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_validate_helpers_8h_source.xhtml#l00050">ValidateHelpers.h:50</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a></div><div class="ttdoc">Store the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_info_8h_source.xhtml#l00040">ITensorInfo.h:40</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a206d6e247e0957ac3dee45d27756fc25"><div class="ttname"><a href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true, an error is returned.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00296">Error.h:296</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a3161c2c93c655dd30953372064ec627b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a3161c2c93c655dd30953372064ec627b">arm_compute::test::validation::alpha</a></div><div class="ttdeci">const float alpha</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_accumulate_8cpp_source.xhtml#l00103">Accumulate.cpp:103</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_a300d153929a99c7b571d4cda3f7987a5"><div class="ttname"><a href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_VERBOSE(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00050">Logger.h:50</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a4feaaa70771629f4b5dcf3b219c8b647"><div class="ttname"><a href="namespacearm__compute.xhtml#a4feaaa70771629f4b5dcf3b219c8b647">arm_compute::validate</a></div><div class="ttdeci">Status validate(const ITensorInfo *scores_in, const ITensorInfo *boxes_in, const ITensorInfo *batch_splits_in, const ITensorInfo *scores_out, const ITensorInfo *boxes_out, const ITensorInfo *classes, const ITensorInfo *batch_splits_out, const ITensorInfo *keeps, const ITensorInfo *keeps_size, const BoxNMSLimitInfo info)</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_box_with_non_maxima_suppression_limit_8cpp_source.xhtml#l00196">CPPBoxWithNonMaximaSuppressionLimit.cpp:196</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_o_n_2_accumulate_8cpp_source.xhtml#l00103">arm_compute::test::validation::alpha</a>, <a class="el" href="graph_2_logger_8h_source.xhtml#l00050">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>, <a class="el" href="_error_8h_source.xhtml#l00296">ARM_COMPUTE_RETURN_ERROR_ON</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00050">get_backing_tensor_info()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00102">INode::id()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">arm_compute::test::validation::input</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00178">INode::num_inputs()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00183">INode::num_outputs()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, and <a class="el" href="_c_p_p_box_with_non_maxima_suppression_limit_8cpp_source.xhtml#l00196">arm_compute::validate()</a>.</p>

</div>
</div>
<a id="a76682a55960d790a11357ab922a5d659"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a76682a55960d790a11357ab922a5d659">&#9670;&nbsp;</a></span>validate_priorbox_layer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> arm_compute::graph::backends::detail::validate_priorbox_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_prior_box_layer_node.xhtml">PriorBoxLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Validates a priorbox layer node. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">PriorBoxLayer</td><td>PriorBox layer type</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to validate</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="_validate_helpers_8h_source.xhtml#l00405">405</a> of file <a class="el" href="_validate_helpers_8h_source.xhtml">ValidateHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;{</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Validating PriorBoxLayer node with ID : &quot;</span> &lt;&lt; node.id() &lt;&lt; <span class="stringliteral">&quot; and Name: &quot;</span> &lt;&lt; node.name() &lt;&lt; std::endl);</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.num_inputs() != 2);</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.num_outputs() != 1);</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *input0     = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.input(0));</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *input1     = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.input(1));</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *output     = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.output(0));</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    <span class="keyword">const</span> PriorBoxLayerInfo   prior_info = node.priorbox_info();</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a4feaaa70771629f4b5dcf3b219c8b647">PriorBoxLayer::validate</a>(input0, input1, output, prior_info);</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a9785ffbaaa220b6725a93a6f7f3145ca"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">arm_compute::graph::backends::detail::get_backing_tensor_info</a></div><div class="ttdeci">arm_compute::ITensorInfo * get_backing_tensor_info(arm_compute::graph::Tensor *tensor)</div><div class="ttdoc">Returns backing tensor info of a given tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_validate_helpers_8h_source.xhtml#l00050">ValidateHelpers.h:50</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a></div><div class="ttdoc">Store the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_info_8h_source.xhtml#l00040">ITensorInfo.h:40</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a206d6e247e0957ac3dee45d27756fc25"><div class="ttname"><a href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true, an error is returned.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00296">Error.h:296</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_a300d153929a99c7b571d4cda3f7987a5"><div class="ttname"><a href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_VERBOSE(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00050">Logger.h:50</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a4feaaa70771629f4b5dcf3b219c8b647"><div class="ttname"><a href="namespacearm__compute.xhtml#a4feaaa70771629f4b5dcf3b219c8b647">arm_compute::validate</a></div><div class="ttdeci">Status validate(const ITensorInfo *scores_in, const ITensorInfo *boxes_in, const ITensorInfo *batch_splits_in, const ITensorInfo *scores_out, const ITensorInfo *boxes_out, const ITensorInfo *classes, const ITensorInfo *batch_splits_out, const ITensorInfo *keeps, const ITensorInfo *keeps_size, const BoxNMSLimitInfo info)</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_box_with_non_maxima_suppression_limit_8cpp_source.xhtml#l00196">CPPBoxWithNonMaximaSuppressionLimit.cpp:196</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="graph_2_logger_8h_source.xhtml#l00050">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>, <a class="el" href="_error_8h_source.xhtml#l00296">ARM_COMPUTE_RETURN_ERROR_ON</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00050">get_backing_tensor_info()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00102">INode::id()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00178">INode::num_inputs()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00183">INode::num_outputs()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, <a class="el" href="_prior_box_layer_node_8cpp_source.xhtml#l00042">PriorBoxLayerNode::priorbox_info()</a>, and <a class="el" href="_c_p_p_box_with_non_maxima_suppression_limit_8cpp_source.xhtml#l00196">arm_compute::validate()</a>.</p>

</div>
</div>
<a id="a959fdd41c94dde46a21dd2bf6d50c48b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a959fdd41c94dde46a21dd2bf6d50c48b">&#9670;&nbsp;</a></span>validate_quantization_layer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> arm_compute::graph::backends::detail::validate_quantization_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_quantization_layer_node.xhtml">QuantizationLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Validates a Quantization layer node. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">QuantizationLayer</td><td>Quantization layer type</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to validate</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="_validate_helpers_8h_source.xhtml#l00429">429</a> of file <a class="el" href="_validate_helpers_8h_source.xhtml">ValidateHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;{</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Validating QuantizationLayer node with ID : &quot;</span> &lt;&lt; node.id() &lt;&lt; <span class="stringliteral">&quot; and Name: &quot;</span> &lt;&lt; node.name() &lt;&lt; std::endl);</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.num_inputs() != 1);</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.num_outputs() != 1);</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    <span class="comment">// Extract input and output</span></div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>  = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">detail::get_backing_tensor_info</a>(node.input(0));</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *output = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.output(0));</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    <span class="comment">// Validate function</span></div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a4feaaa70771629f4b5dcf3b219c8b647">QuantizationLayer::validate</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output);</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a9785ffbaaa220b6725a93a6f7f3145ca"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">arm_compute::graph::backends::detail::get_backing_tensor_info</a></div><div class="ttdeci">arm_compute::ITensorInfo * get_backing_tensor_info(arm_compute::graph::Tensor *tensor)</div><div class="ttdoc">Returns backing tensor info of a given tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_validate_helpers_8h_source.xhtml#l00050">ValidateHelpers.h:50</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a></div><div class="ttdoc">Store the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_info_8h_source.xhtml#l00040">ITensorInfo.h:40</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a206d6e247e0957ac3dee45d27756fc25"><div class="ttname"><a href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true, an error is returned.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00296">Error.h:296</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_a300d153929a99c7b571d4cda3f7987a5"><div class="ttname"><a href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_VERBOSE(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00050">Logger.h:50</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a4feaaa70771629f4b5dcf3b219c8b647"><div class="ttname"><a href="namespacearm__compute.xhtml#a4feaaa70771629f4b5dcf3b219c8b647">arm_compute::validate</a></div><div class="ttdeci">Status validate(const ITensorInfo *scores_in, const ITensorInfo *boxes_in, const ITensorInfo *batch_splits_in, const ITensorInfo *scores_out, const ITensorInfo *boxes_out, const ITensorInfo *classes, const ITensorInfo *batch_splits_out, const ITensorInfo *keeps, const ITensorInfo *keeps_size, const BoxNMSLimitInfo info)</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_box_with_non_maxima_suppression_limit_8cpp_source.xhtml#l00196">CPPBoxWithNonMaximaSuppressionLimit.cpp:196</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="graph_2_logger_8h_source.xhtml#l00050">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>, <a class="el" href="_error_8h_source.xhtml#l00296">ARM_COMPUTE_RETURN_ERROR_ON</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00050">get_backing_tensor_info()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00102">INode::id()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">arm_compute::test::validation::input</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00178">INode::num_inputs()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00183">INode::num_outputs()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, and <a class="el" href="_c_p_p_box_with_non_maxima_suppression_limit_8cpp_source.xhtml#l00196">arm_compute::validate()</a>.</p>

</div>
</div>
<a id="a4451f539afe63a19da3d17ee95582277"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4451f539afe63a19da3d17ee95582277">&#9670;&nbsp;</a></span>validate_reorg_layer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> arm_compute::graph::backends::detail::validate_reorg_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_reorg_layer_node.xhtml">ReorgLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Validates a Reorg layer node. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">ReorgLayer</td><td>Reorg layer type</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to validate</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="_validate_helpers_8h_source.xhtml#l00452">452</a> of file <a class="el" href="_validate_helpers_8h_source.xhtml">ValidateHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;{</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Validating ReorgLayer node with ID : &quot;</span> &lt;&lt; node.id() &lt;&lt; <span class="stringliteral">&quot; and Name: &quot;</span> &lt;&lt; node.name() &lt;&lt; std::endl);</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.num_inputs() != 1);</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.num_outputs() != 1);</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    <span class="comment">// Extract input and output</span></div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>  = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">detail::get_backing_tensor_info</a>(node.input(0));</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *output = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.output(0));</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;    <span class="comment">// Validate function</span></div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a4feaaa70771629f4b5dcf3b219c8b647">ReorgLayer::validate</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, node.stride());</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a9785ffbaaa220b6725a93a6f7f3145ca"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">arm_compute::graph::backends::detail::get_backing_tensor_info</a></div><div class="ttdeci">arm_compute::ITensorInfo * get_backing_tensor_info(arm_compute::graph::Tensor *tensor)</div><div class="ttdoc">Returns backing tensor info of a given tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_validate_helpers_8h_source.xhtml#l00050">ValidateHelpers.h:50</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a></div><div class="ttdoc">Store the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_info_8h_source.xhtml#l00040">ITensorInfo.h:40</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a206d6e247e0957ac3dee45d27756fc25"><div class="ttname"><a href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true, an error is returned.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00296">Error.h:296</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_a300d153929a99c7b571d4cda3f7987a5"><div class="ttname"><a href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_VERBOSE(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00050">Logger.h:50</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a4feaaa70771629f4b5dcf3b219c8b647"><div class="ttname"><a href="namespacearm__compute.xhtml#a4feaaa70771629f4b5dcf3b219c8b647">arm_compute::validate</a></div><div class="ttdeci">Status validate(const ITensorInfo *scores_in, const ITensorInfo *boxes_in, const ITensorInfo *batch_splits_in, const ITensorInfo *scores_out, const ITensorInfo *boxes_out, const ITensorInfo *classes, const ITensorInfo *batch_splits_out, const ITensorInfo *keeps, const ITensorInfo *keeps_size, const BoxNMSLimitInfo info)</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_box_with_non_maxima_suppression_limit_8cpp_source.xhtml#l00196">CPPBoxWithNonMaximaSuppressionLimit.cpp:196</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="graph_2_logger_8h_source.xhtml#l00050">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>, <a class="el" href="_error_8h_source.xhtml#l00296">ARM_COMPUTE_RETURN_ERROR_ON</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00050">get_backing_tensor_info()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00102">INode::id()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">arm_compute::test::validation::input</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00178">INode::num_inputs()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00183">INode::num_outputs()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, <a class="el" href="_reorg_layer_node_8cpp_source.xhtml#l00041">ReorgLayerNode::stride()</a>, and <a class="el" href="_c_p_p_box_with_non_maxima_suppression_limit_8cpp_source.xhtml#l00196">arm_compute::validate()</a>.</p>

</div>
</div>
<a id="ad4cb768bba67e8ccb02d0903da459ecb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad4cb768bba67e8ccb02d0903da459ecb">&#9670;&nbsp;</a></span>validate_reshape_layer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> arm_compute::graph::backends::detail::validate_reshape_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_reshape_layer_node.xhtml">ReshapeLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Validates a Reshape layer node. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">ReshapeLayer</td><td>Reshape layer type</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to validate</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="_validate_helpers_8h_source.xhtml#l00475">475</a> of file <a class="el" href="_validate_helpers_8h_source.xhtml">ValidateHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;{</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Validating ReshapeLayer node with ID : &quot;</span> &lt;&lt; node.id() &lt;&lt; <span class="stringliteral">&quot; and Name: &quot;</span> &lt;&lt; node.name() &lt;&lt; std::endl);</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.num_inputs() != 1);</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.num_outputs() != 1);</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;    <span class="comment">// Extract input and output</span></div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>  = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">detail::get_backing_tensor_info</a>(node.input(0));</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *output = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">detail::get_backing_tensor_info</a>(node.output(0));</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;    <span class="comment">// Validate function</span></div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a4feaaa70771629f4b5dcf3b219c8b647">ReshapeLayer::validate</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output);</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a9785ffbaaa220b6725a93a6f7f3145ca"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">arm_compute::graph::backends::detail::get_backing_tensor_info</a></div><div class="ttdeci">arm_compute::ITensorInfo * get_backing_tensor_info(arm_compute::graph::Tensor *tensor)</div><div class="ttdoc">Returns backing tensor info of a given tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_validate_helpers_8h_source.xhtml#l00050">ValidateHelpers.h:50</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a></div><div class="ttdoc">Store the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_info_8h_source.xhtml#l00040">ITensorInfo.h:40</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a206d6e247e0957ac3dee45d27756fc25"><div class="ttname"><a href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true, an error is returned.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00296">Error.h:296</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_a300d153929a99c7b571d4cda3f7987a5"><div class="ttname"><a href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_VERBOSE(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00050">Logger.h:50</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a4feaaa70771629f4b5dcf3b219c8b647"><div class="ttname"><a href="namespacearm__compute.xhtml#a4feaaa70771629f4b5dcf3b219c8b647">arm_compute::validate</a></div><div class="ttdeci">Status validate(const ITensorInfo *scores_in, const ITensorInfo *boxes_in, const ITensorInfo *batch_splits_in, const ITensorInfo *scores_out, const ITensorInfo *boxes_out, const ITensorInfo *classes, const ITensorInfo *batch_splits_out, const ITensorInfo *keeps, const ITensorInfo *keeps_size, const BoxNMSLimitInfo info)</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_box_with_non_maxima_suppression_limit_8cpp_source.xhtml#l00196">CPPBoxWithNonMaximaSuppressionLimit.cpp:196</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="graph_2_logger_8h_source.xhtml#l00050">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>, <a class="el" href="_error_8h_source.xhtml#l00296">ARM_COMPUTE_RETURN_ERROR_ON</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00050">get_backing_tensor_info()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00102">INode::id()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">arm_compute::test::validation::input</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00178">INode::num_inputs()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00183">INode::num_outputs()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, and <a class="el" href="_c_p_p_box_with_non_maxima_suppression_limit_8cpp_source.xhtml#l00196">arm_compute::validate()</a>.</p>

</div>
</div>
<a id="a366fca5f1c0a2ed6ee50e9d619d4f2e5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a366fca5f1c0a2ed6ee50e9d619d4f2e5">&#9670;&nbsp;</a></span>validate_roi_align_layer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> arm_compute::graph::backends::detail::validate_roi_align_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_r_o_i_align_layer_node.xhtml">ROIAlignLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Validates a ROI Align layer node. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">ROIAlignLayer</td><td>ROIAlign layer type</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to validate</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="_validate_helpers_8h_source.xhtml#l00498">498</a> of file <a class="el" href="_validate_helpers_8h_source.xhtml">ValidateHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;{</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Validating ROIAlignLayer node with ID : &quot;</span> &lt;&lt; node.id() &lt;&lt; <span class="stringliteral">&quot; and Name: &quot;</span> &lt;&lt; node.name() &lt;&lt; std::endl);</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.num_inputs() != 2);</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.num_outputs() != 1);</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    <span class="comment">// Extract input and output</span></div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>     = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">detail::get_backing_tensor_info</a>(node.input(0));</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *rois      = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">detail::get_backing_tensor_info</a>(node.input(1));</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *output    = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">detail::get_backing_tensor_info</a>(node.output(0));</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    <span class="keyword">const</span> ROIPoolingLayerInfo &amp;pool_info = node.pooling_info();</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    <span class="comment">// Validate function</span></div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a4feaaa70771629f4b5dcf3b219c8b647">ROIAlignLayer::validate</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, rois, output, pool_info);</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a9785ffbaaa220b6725a93a6f7f3145ca"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">arm_compute::graph::backends::detail::get_backing_tensor_info</a></div><div class="ttdeci">arm_compute::ITensorInfo * get_backing_tensor_info(arm_compute::graph::Tensor *tensor)</div><div class="ttdoc">Returns backing tensor info of a given tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_validate_helpers_8h_source.xhtml#l00050">ValidateHelpers.h:50</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a></div><div class="ttdoc">Store the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_info_8h_source.xhtml#l00040">ITensorInfo.h:40</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a206d6e247e0957ac3dee45d27756fc25"><div class="ttname"><a href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true, an error is returned.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00296">Error.h:296</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_a300d153929a99c7b571d4cda3f7987a5"><div class="ttname"><a href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_VERBOSE(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00050">Logger.h:50</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a4feaaa70771629f4b5dcf3b219c8b647"><div class="ttname"><a href="namespacearm__compute.xhtml#a4feaaa70771629f4b5dcf3b219c8b647">arm_compute::validate</a></div><div class="ttdeci">Status validate(const ITensorInfo *scores_in, const ITensorInfo *boxes_in, const ITensorInfo *batch_splits_in, const ITensorInfo *scores_out, const ITensorInfo *boxes_out, const ITensorInfo *classes, const ITensorInfo *batch_splits_out, const ITensorInfo *keeps, const ITensorInfo *keeps_size, const BoxNMSLimitInfo info)</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_box_with_non_maxima_suppression_limit_8cpp_source.xhtml#l00196">CPPBoxWithNonMaximaSuppressionLimit.cpp:196</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="graph_2_logger_8h_source.xhtml#l00050">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>, <a class="el" href="_error_8h_source.xhtml#l00296">ARM_COMPUTE_RETURN_ERROR_ON</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00050">get_backing_tensor_info()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00102">INode::id()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">arm_compute::test::validation::input</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00178">INode::num_inputs()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00183">INode::num_outputs()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, <a class="el" href="_r_o_i_align_layer_node_8cpp_source.xhtml#l00043">ROIAlignLayerNode::pooling_info()</a>, and <a class="el" href="_c_p_p_box_with_non_maxima_suppression_limit_8cpp_source.xhtml#l00196">arm_compute::validate()</a>.</p>

</div>
</div>
<a id="a3c749cc534b2801f46ec56d78abc7fef"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3c749cc534b2801f46ec56d78abc7fef">&#9670;&nbsp;</a></span>validate_slice_layer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> arm_compute::graph::backends::detail::validate_slice_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_slice_layer_node.xhtml">SliceLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Validates a Slice layer node. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">SliceLayer</td><td>Slice layer function type</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to validate</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="_validate_helpers_8h_source.xhtml#l00523">523</a> of file <a class="el" href="_validate_helpers_8h_source.xhtml">ValidateHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;{</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Validating Slice node with ID : &quot;</span> &lt;&lt; node.id() &lt;&lt; <span class="stringliteral">&quot; and Name: &quot;</span> &lt;&lt; node.name() &lt;&lt; std::endl);</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.num_inputs() != 1);</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.num_outputs() != 1);</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>  = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.input(0));</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *output = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.output(0));</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;    <span class="keyword">const</span> Coordinates         starts = node.starts();</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;    <span class="keyword">const</span> Coordinates         ends   = node.ends();</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a4feaaa70771629f4b5dcf3b219c8b647">SliceLayer::validate</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, starts, ends);</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a9785ffbaaa220b6725a93a6f7f3145ca"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">arm_compute::graph::backends::detail::get_backing_tensor_info</a></div><div class="ttdeci">arm_compute::ITensorInfo * get_backing_tensor_info(arm_compute::graph::Tensor *tensor)</div><div class="ttdoc">Returns backing tensor info of a given tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_validate_helpers_8h_source.xhtml#l00050">ValidateHelpers.h:50</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a></div><div class="ttdoc">Store the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_info_8h_source.xhtml#l00040">ITensorInfo.h:40</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a206d6e247e0957ac3dee45d27756fc25"><div class="ttname"><a href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true, an error is returned.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00296">Error.h:296</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_a300d153929a99c7b571d4cda3f7987a5"><div class="ttname"><a href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_VERBOSE(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00050">Logger.h:50</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a4feaaa70771629f4b5dcf3b219c8b647"><div class="ttname"><a href="namespacearm__compute.xhtml#a4feaaa70771629f4b5dcf3b219c8b647">arm_compute::validate</a></div><div class="ttdeci">Status validate(const ITensorInfo *scores_in, const ITensorInfo *boxes_in, const ITensorInfo *batch_splits_in, const ITensorInfo *scores_out, const ITensorInfo *boxes_out, const ITensorInfo *classes, const ITensorInfo *batch_splits_out, const ITensorInfo *keeps, const ITensorInfo *keeps_size, const BoxNMSLimitInfo info)</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_box_with_non_maxima_suppression_limit_8cpp_source.xhtml#l00196">CPPBoxWithNonMaximaSuppressionLimit.cpp:196</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="graph_2_logger_8h_source.xhtml#l00050">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>, <a class="el" href="_error_8h_source.xhtml#l00296">ARM_COMPUTE_RETURN_ERROR_ON</a>, <a class="el" href="_slice_layer_node_8cpp_source.xhtml#l00047">SliceLayerNode::ends()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00050">get_backing_tensor_info()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00102">INode::id()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">arm_compute::test::validation::input</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00178">INode::num_inputs()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00183">INode::num_outputs()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, <a class="el" href="_slice_layer_node_8cpp_source.xhtml#l00042">SliceLayerNode::starts()</a>, and <a class="el" href="_c_p_p_box_with_non_maxima_suppression_limit_8cpp_source.xhtml#l00196">arm_compute::validate()</a>.</p>

</div>
</div>
<a id="a8396c4dda471ae2dc627e25adfbe1bcf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8396c4dda471ae2dc627e25adfbe1bcf">&#9670;&nbsp;</a></span>validate_upsample_layer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> arm_compute::graph::backends::detail::validate_upsample_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_upsample_layer_node.xhtml">UpsampleLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Validates a Upsample layer node. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">UpsampleLayer</td><td>Upsample layer type</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to validate</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="_validate_helpers_8h_source.xhtml#l00547">547</a> of file <a class="el" href="_validate_helpers_8h_source.xhtml">ValidateHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;{</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Validating UpsampleLayer node with ID : &quot;</span> &lt;&lt; node.id() &lt;&lt; <span class="stringliteral">&quot; and Name: &quot;</span> &lt;&lt; node.name() &lt;&lt; std::endl);</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.num_inputs() != 1);</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.num_outputs() != 1);</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;    <span class="comment">// Extract input and output</span></div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>  = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">detail::get_backing_tensor_info</a>(node.input(0));</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *output = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.output(0));</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;    <span class="comment">// Validate function</span></div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a4feaaa70771629f4b5dcf3b219c8b647">UpsampleLayer::validate</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, node.info(), node.upsampling_policy());</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a9785ffbaaa220b6725a93a6f7f3145ca"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">arm_compute::graph::backends::detail::get_backing_tensor_info</a></div><div class="ttdeci">arm_compute::ITensorInfo * get_backing_tensor_info(arm_compute::graph::Tensor *tensor)</div><div class="ttdoc">Returns backing tensor info of a given tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_validate_helpers_8h_source.xhtml#l00050">ValidateHelpers.h:50</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a></div><div class="ttdoc">Store the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_info_8h_source.xhtml#l00040">ITensorInfo.h:40</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a206d6e247e0957ac3dee45d27756fc25"><div class="ttname"><a href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true, an error is returned.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00296">Error.h:296</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_a300d153929a99c7b571d4cda3f7987a5"><div class="ttname"><a href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_VERBOSE(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00050">Logger.h:50</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a4feaaa70771629f4b5dcf3b219c8b647"><div class="ttname"><a href="namespacearm__compute.xhtml#a4feaaa70771629f4b5dcf3b219c8b647">arm_compute::validate</a></div><div class="ttdeci">Status validate(const ITensorInfo *scores_in, const ITensorInfo *boxes_in, const ITensorInfo *batch_splits_in, const ITensorInfo *scores_out, const ITensorInfo *boxes_out, const ITensorInfo *classes, const ITensorInfo *batch_splits_out, const ITensorInfo *keeps, const ITensorInfo *keeps_size, const BoxNMSLimitInfo info)</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_box_with_non_maxima_suppression_limit_8cpp_source.xhtml#l00196">CPPBoxWithNonMaximaSuppressionLimit.cpp:196</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="graph_2_logger_8h_source.xhtml#l00050">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>, <a class="el" href="_error_8h_source.xhtml#l00296">ARM_COMPUTE_RETURN_ERROR_ON</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00050">get_backing_tensor_info()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00102">INode::id()</a>, <a class="el" href="_upsample_layer_node_8cpp_source.xhtml#l00041">UpsampleLayerNode::info()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">arm_compute::test::validation::input</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00178">INode::num_inputs()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00183">INode::num_outputs()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, <a class="el" href="_upsample_layer_node_8cpp_source.xhtml#l00046">UpsampleLayerNode::upsampling_policy()</a>, and <a class="el" href="_c_p_p_box_with_non_maxima_suppression_limit_8cpp_source.xhtml#l00196">arm_compute::validate()</a>.</p>

</div>
</div>
<a id="a7ef4fa6499c747d322a74136249afa6b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7ef4fa6499c747d322a74136249afa6b">&#9670;&nbsp;</a></span>validate_yolo_layer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> arm_compute::graph::backends::detail::validate_yolo_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_y_o_l_o_layer_node.xhtml">YOLOLayerNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Validates a YOLO layer node. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">YOLOLayer</td><td>YOLO layer type</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to validate</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="_validate_helpers_8h_source.xhtml#l00569">569</a> of file <a class="el" href="_validate_helpers_8h_source.xhtml">ValidateHelpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;{</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Validating YOLOLayer node with ID : &quot;</span> &lt;&lt; node.id() &lt;&lt; <span class="stringliteral">&quot; and Name: &quot;</span> &lt;&lt; node.name() &lt;&lt; std::endl);</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.num_inputs() != 1);</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(node.num_outputs() != 1);</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;    <span class="comment">// Extract input and output</span></div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>  = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">detail::get_backing_tensor_info</a>(node.input(0));</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a> *output = <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">get_backing_tensor_info</a>(node.output(0));</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;    <span class="comment">// Validate function</span></div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a4feaaa70771629f4b5dcf3b219c8b647">YOLOLayer::validate</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, node.activation_info(), node.num_classes());</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a9785ffbaaa220b6725a93a6f7f3145ca"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9785ffbaaa220b6725a93a6f7f3145ca">arm_compute::graph::backends::detail::get_backing_tensor_info</a></div><div class="ttdeci">arm_compute::ITensorInfo * get_backing_tensor_info(arm_compute::graph::Tensor *tensor)</div><div class="ttdoc">Returns backing tensor info of a given tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_validate_helpers_8h_source.xhtml#l00050">ValidateHelpers.h:50</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a></div><div class="ttdoc">Store the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_info_8h_source.xhtml#l00040">ITensorInfo.h:40</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a206d6e247e0957ac3dee45d27756fc25"><div class="ttname"><a href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true, an error is returned.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00296">Error.h:296</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_a300d153929a99c7b571d4cda3f7987a5"><div class="ttname"><a href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_VERBOSE(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00050">Logger.h:50</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a4feaaa70771629f4b5dcf3b219c8b647"><div class="ttname"><a href="namespacearm__compute.xhtml#a4feaaa70771629f4b5dcf3b219c8b647">arm_compute::validate</a></div><div class="ttdeci">Status validate(const ITensorInfo *scores_in, const ITensorInfo *boxes_in, const ITensorInfo *batch_splits_in, const ITensorInfo *scores_out, const ITensorInfo *boxes_out, const ITensorInfo *classes, const ITensorInfo *batch_splits_out, const ITensorInfo *keeps, const ITensorInfo *keeps_size, const BoxNMSLimitInfo info)</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_box_with_non_maxima_suppression_limit_8cpp_source.xhtml#l00196">CPPBoxWithNonMaximaSuppressionLimit.cpp:196</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_y_o_l_o_layer_node_8cpp_source.xhtml#l00041">YOLOLayerNode::activation_info()</a>, <a class="el" href="graph_2_logger_8h_source.xhtml#l00050">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>, <a class="el" href="_error_8h_source.xhtml#l00296">ARM_COMPUTE_RETURN_ERROR_ON</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00050">get_backing_tensor_info()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00102">INode::id()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">arm_compute::test::validation::input</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00107">INode::name()</a>, <a class="el" href="_y_o_l_o_layer_node_8cpp_source.xhtml#l00046">YOLOLayerNode::num_classes()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00178">INode::num_inputs()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00183">INode::num_outputs()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, and <a class="el" href="_c_p_p_box_with_non_maxima_suppression_limit_8cpp_source.xhtml#l00196">arm_compute::validate()</a>.</p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1graph.xhtml">graph</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1graph_1_1backends.xhtml">backends</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml">detail</a></li>
    <li class="footer">Generated on Thu Mar 5 2020 16:07:18 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
