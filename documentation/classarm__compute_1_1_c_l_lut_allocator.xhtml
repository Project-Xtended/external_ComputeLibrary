<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: CLLutAllocator Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classarm__compute_1_1_c_l_lut_allocator.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">CLLutAllocator Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Basic implementation of a CL memory LUT allocator.  
 <a href="classarm__compute_1_1_c_l_lut_allocator.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_c_l_lut_allocator_8h_source.xhtml">CLLutAllocator.h</a>&gt;</code></p>
<div class="dynheader">
Collaboration diagram for CLLutAllocator:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classarm__compute_1_1_c_l_lut_allocator__coll__graph.svg" width="126" height="112"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:aa1e425aebd0805be1916fddde364aaa1"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_lut_allocator.xhtml#aa1e425aebd0805be1916fddde364aaa1">CLLutAllocator</a> ()</td></tr>
<tr class="memdesc:aa1e425aebd0805be1916fddde364aaa1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="#aa1e425aebd0805be1916fddde364aaa1">More...</a><br /></td></tr>
<tr class="separator:aa1e425aebd0805be1916fddde364aaa1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a864b976ba255c0cd2e1e2a848c89f4a3"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_lut_allocator.xhtml#a864b976ba255c0cd2e1e2a848c89f4a3">~CLLutAllocator</a> ()=default</td></tr>
<tr class="memdesc:a864b976ba255c0cd2e1e2a848c89f4a3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default destructor.  <a href="#a864b976ba255c0cd2e1e2a848c89f4a3">More...</a><br /></td></tr>
<tr class="separator:a864b976ba255c0cd2e1e2a848c89f4a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a65d09435ca3956fb0c4409e622bfd5da"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_lut_allocator.xhtml#a65d09435ca3956fb0c4409e622bfd5da">CLLutAllocator</a> (const <a class="el" href="classarm__compute_1_1_c_l_lut_allocator.xhtml">CLLutAllocator</a> &amp;)=delete</td></tr>
<tr class="memdesc:a65d09435ca3956fb0c4409e622bfd5da"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prevent instances of this class from being copied (As this class contains pointers)  <a href="#a65d09435ca3956fb0c4409e622bfd5da">More...</a><br /></td></tr>
<tr class="separator:a65d09435ca3956fb0c4409e622bfd5da"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2de13c6fbd9dd5506f12627b87415a51"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarm__compute_1_1_c_l_lut_allocator.xhtml">CLLutAllocator</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_lut_allocator.xhtml#a2de13c6fbd9dd5506f12627b87415a51">operator=</a> (const <a class="el" href="classarm__compute_1_1_c_l_lut_allocator.xhtml">CLLutAllocator</a> &amp;)=delete</td></tr>
<tr class="memdesc:a2de13c6fbd9dd5506f12627b87415a51"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prevent instances of this class from being copy assigned (As this class contains pointers)  <a href="#a2de13c6fbd9dd5506f12627b87415a51">More...</a><br /></td></tr>
<tr class="separator:a2de13c6fbd9dd5506f12627b87415a51"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a99c07c946023f413991a249db8b99ab0"><td class="memItemLeft" align="right" valign="top">uint8_t *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_lut_allocator.xhtml#a99c07c946023f413991a249db8b99ab0">data</a> ()</td></tr>
<tr class="memdesc:a99c07c946023f413991a249db8b99ab0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface to be implemented by the child class to return the pointer to the mapped data.  <a href="#a99c07c946023f413991a249db8b99ab0">More...</a><br /></td></tr>
<tr class="separator:a99c07c946023f413991a249db8b99ab0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac7e247b94ceae35db2a172961ab83df9"><td class="memItemLeft" align="right" valign="top">const cl::Buffer &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_lut_allocator.xhtml#ac7e247b94ceae35db2a172961ab83df9">cl_data</a> () const</td></tr>
<tr class="memdesc:ac7e247b94ceae35db2a172961ab83df9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface to be implemented by the child class to return the pointer to the CL data.  <a href="#ac7e247b94ceae35db2a172961ab83df9">More...</a><br /></td></tr>
<tr class="separator:ac7e247b94ceae35db2a172961ab83df9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a15eaecea13a8a49c8d259fddefcbd7ac"><td class="memItemLeft" align="right" valign="top">uint8_t *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_lut_allocator.xhtml#a15eaecea13a8a49c8d259fddefcbd7ac">map</a> (cl::CommandQueue &amp;q, bool blocking)</td></tr>
<tr class="memdesc:a15eaecea13a8a49c8d259fddefcbd7ac"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enqueue a map operation of the allocated buffer on the given queue.  <a href="#a15eaecea13a8a49c8d259fddefcbd7ac">More...</a><br /></td></tr>
<tr class="separator:a15eaecea13a8a49c8d259fddefcbd7ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a34b854d640d247bd7422f60ca2f3a05c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_lut_allocator.xhtml#a34b854d640d247bd7422f60ca2f3a05c">unmap</a> (cl::CommandQueue &amp;q, uint8_t *mapping)</td></tr>
<tr class="memdesc:a34b854d640d247bd7422f60ca2f3a05c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enqueue an unmap operation of the allocated buffer on the given queue.  <a href="#a34b854d640d247bd7422f60ca2f3a05c">More...</a><br /></td></tr>
<tr class="separator:a34b854d640d247bd7422f60ca2f3a05c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarm__compute_1_1_i_lut_allocator"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarm__compute_1_1_i_lut_allocator')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarm__compute_1_1_i_lut_allocator.xhtml">ILutAllocator</a></td></tr>
<tr class="memitem:acb80847d132eba25605f9fc43a42f652 inherit pub_methods_classarm__compute_1_1_i_lut_allocator"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_lut_allocator.xhtml#acb80847d132eba25605f9fc43a42f652">ILutAllocator</a> ()</td></tr>
<tr class="memdesc:acb80847d132eba25605f9fc43a42f652 inherit pub_methods_classarm__compute_1_1_i_lut_allocator"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="classarm__compute_1_1_i_lut_allocator.xhtml#acb80847d132eba25605f9fc43a42f652">More...</a><br /></td></tr>
<tr class="separator:acb80847d132eba25605f9fc43a42f652 inherit pub_methods_classarm__compute_1_1_i_lut_allocator"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9c34313e5cddaebce855b939e42efc32 inherit pub_methods_classarm__compute_1_1_i_lut_allocator"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_lut_allocator.xhtml#a9c34313e5cddaebce855b939e42efc32">~ILutAllocator</a> ()=default</td></tr>
<tr class="memdesc:a9c34313e5cddaebce855b939e42efc32 inherit pub_methods_classarm__compute_1_1_i_lut_allocator"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default virtual destructor.  <a href="classarm__compute_1_1_i_lut_allocator.xhtml#a9c34313e5cddaebce855b939e42efc32">More...</a><br /></td></tr>
<tr class="separator:a9c34313e5cddaebce855b939e42efc32 inherit pub_methods_classarm__compute_1_1_i_lut_allocator"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a07b8c40feb14af938204e68d8c2e5759 inherit pub_methods_classarm__compute_1_1_i_lut_allocator"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_lut_allocator.xhtml#a07b8c40feb14af938204e68d8c2e5759">ILutAllocator</a> (<a class="el" href="classarm__compute_1_1_i_lut_allocator.xhtml">ILutAllocator</a> &amp;&amp;)=default</td></tr>
<tr class="memdesc:a07b8c40feb14af938204e68d8c2e5759 inherit pub_methods_classarm__compute_1_1_i_lut_allocator"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be move constructed.  <a href="classarm__compute_1_1_i_lut_allocator.xhtml#a07b8c40feb14af938204e68d8c2e5759">More...</a><br /></td></tr>
<tr class="separator:a07b8c40feb14af938204e68d8c2e5759 inherit pub_methods_classarm__compute_1_1_i_lut_allocator"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afc1c53ed4dcc1a723b9b9dcf67c578a1 inherit pub_methods_classarm__compute_1_1_i_lut_allocator"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_i_lut_allocator.xhtml">ILutAllocator</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_lut_allocator.xhtml#afc1c53ed4dcc1a723b9b9dcf67c578a1">operator=</a> (<a class="el" href="classarm__compute_1_1_i_lut_allocator.xhtml">ILutAllocator</a> &amp;&amp;)=default</td></tr>
<tr class="memdesc:afc1c53ed4dcc1a723b9b9dcf67c578a1 inherit pub_methods_classarm__compute_1_1_i_lut_allocator"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be moved.  <a href="classarm__compute_1_1_i_lut_allocator.xhtml#afc1c53ed4dcc1a723b9b9dcf67c578a1">More...</a><br /></td></tr>
<tr class="separator:afc1c53ed4dcc1a723b9b9dcf67c578a1 inherit pub_methods_classarm__compute_1_1_i_lut_allocator"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4ef157737b45c46f115e14b425512800 inherit pub_methods_classarm__compute_1_1_i_lut_allocator"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_lut_allocator.xhtml#a4ef157737b45c46f115e14b425512800">init</a> (size_t <a class="el" href="classarm__compute_1_1_i_lut_allocator.xhtml#ab13544f21571d4f4dd804cb4b96e2987">num_elements</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> data_type)</td></tr>
<tr class="memdesc:a4ef157737b45c46f115e14b425512800 inherit pub_methods_classarm__compute_1_1_i_lut_allocator"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocate an LUT of the requested number of elements and data_type.  <a href="classarm__compute_1_1_i_lut_allocator.xhtml#a4ef157737b45c46f115e14b425512800">More...</a><br /></td></tr>
<tr class="separator:a4ef157737b45c46f115e14b425512800 inherit pub_methods_classarm__compute_1_1_i_lut_allocator"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab13544f21571d4f4dd804cb4b96e2987 inherit pub_methods_classarm__compute_1_1_i_lut_allocator"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_lut_allocator.xhtml#ab13544f21571d4f4dd804cb4b96e2987">num_elements</a> () const</td></tr>
<tr class="memdesc:ab13544f21571d4f4dd804cb4b96e2987 inherit pub_methods_classarm__compute_1_1_i_lut_allocator"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the total number of elements in the LUT.  <a href="classarm__compute_1_1_i_lut_allocator.xhtml#ab13544f21571d4f4dd804cb4b96e2987">More...</a><br /></td></tr>
<tr class="separator:ab13544f21571d4f4dd804cb4b96e2987 inherit pub_methods_classarm__compute_1_1_i_lut_allocator"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa5369d30001dbd8880fb58d6af2b40a0 inherit pub_methods_classarm__compute_1_1_i_lut_allocator"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_lut_allocator.xhtml#aa5369d30001dbd8880fb58d6af2b40a0">type</a> () const</td></tr>
<tr class="memdesc:aa5369d30001dbd8880fb58d6af2b40a0 inherit pub_methods_classarm__compute_1_1_i_lut_allocator"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the type of the LUT.  <a href="classarm__compute_1_1_i_lut_allocator.xhtml#aa5369d30001dbd8880fb58d6af2b40a0">More...</a><br /></td></tr>
<tr class="separator:aa5369d30001dbd8880fb58d6af2b40a0 inherit pub_methods_classarm__compute_1_1_i_lut_allocator"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a259cb5a711406a8c3e5d937eb9350cca inherit pub_methods_classarm__compute_1_1_i_lut_allocator"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_lut_allocator.xhtml#a259cb5a711406a8c3e5d937eb9350cca">size</a> () const</td></tr>
<tr class="memdesc:a259cb5a711406a8c3e5d937eb9350cca inherit pub_methods_classarm__compute_1_1_i_lut_allocator"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the total size in bytes of the LUT.  <a href="classarm__compute_1_1_i_lut_allocator.xhtml#a259cb5a711406a8c3e5d937eb9350cca">More...</a><br /></td></tr>
<tr class="separator:a259cb5a711406a8c3e5d937eb9350cca inherit pub_methods_classarm__compute_1_1_i_lut_allocator"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Basic implementation of a CL memory LUT allocator. </p>

<p class="definition">Definition at line <a class="el" href="_c_l_lut_allocator_8h_source.xhtml#l00036">36</a> of file <a class="el" href="_c_l_lut_allocator_8h_source.xhtml">CLLutAllocator.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="aa1e425aebd0805be1916fddde364aaa1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa1e425aebd0805be1916fddde364aaa1">&#9670;&nbsp;</a></span>CLLutAllocator() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_c_l_lut_allocator.xhtml">CLLutAllocator</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Default constructor. </p>

<p class="definition">Definition at line <a class="el" href="_c_l_lut_allocator_8cpp_source.xhtml#l00031">31</a> of file <a class="el" href="_c_l_lut_allocator_8cpp_source.xhtml">CLLutAllocator.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    : _buffer(), _mapping(<span class="keyword">nullptr</span>)</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;{</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a864b976ba255c0cd2e1e2a848c89f4a3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a864b976ba255c0cd2e1e2a848c89f4a3">&#9670;&nbsp;</a></span>~CLLutAllocator()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classarm__compute_1_1_c_l_lut_allocator.xhtml">CLLutAllocator</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default destructor. </p>

</div>
</div>
<a id="a65d09435ca3956fb0c4409e622bfd5da"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a65d09435ca3956fb0c4409e622bfd5da">&#9670;&nbsp;</a></span>CLLutAllocator() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_c_l_lut_allocator.xhtml">CLLutAllocator</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_c_l_lut_allocator.xhtml">CLLutAllocator</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prevent instances of this class from being copied (As this class contains pointers) </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="ac7e247b94ceae35db2a172961ab83df9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac7e247b94ceae35db2a172961ab83df9">&#9670;&nbsp;</a></span>cl_data()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const cl::Buffer &amp; cl_data </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Interface to be implemented by the child class to return the pointer to the CL data. </p>
<dl class="section return"><dt>Returns</dt><dd>pointer to the CL data. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_c_l_lut_allocator_8cpp_source.xhtml#l00041">41</a> of file <a class="el" href="_c_l_lut_allocator_8cpp_source.xhtml">CLLutAllocator.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keywordflow">return</span> _buffer;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;}</div></div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_c_l_lut_8cpp_source.xhtml#l00063">CLLut::cl_buffer()</a>.</p>

</div>
</div>
<a id="a99c07c946023f413991a249db8b99ab0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a99c07c946023f413991a249db8b99ab0">&#9670;&nbsp;</a></span>data()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint8_t * data </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Interface to be implemented by the child class to return the pointer to the mapped data. </p>
<dl class="section return"><dt>Returns</dt><dd>pointer to the mapped data. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_c_l_lut_allocator_8cpp_source.xhtml#l00036">36</a> of file <a class="el" href="_c_l_lut_allocator_8cpp_source.xhtml">CLLutAllocator.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keywordflow">return</span> _mapping;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a15eaecea13a8a49c8d259fddefcbd7ac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a15eaecea13a8a49c8d259fddefcbd7ac">&#9670;&nbsp;</a></span>map()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint8_t * map </td>
          <td>(</td>
          <td class="paramtype">cl::CommandQueue &amp;&#160;</td>
          <td class="paramname"><em>q</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>blocking</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Enqueue a map operation of the allocated buffer on the given queue. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">q</td><td>The CL command queue to use for the mapping operation. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">blocking</td><td>If true, then the mapping will be ready to use by the time this method returns, else it is the caller's responsibility to flush the queue and wait for the mapping operation to have completed before using the returned mapping pointer.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The mapping address. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_c_l_lut_allocator_8cpp_source.xhtml#l00046">46</a> of file <a class="el" href="_c_l_lut_allocator_8cpp_source.xhtml">CLLutAllocator.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;{</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(_buffer.get() == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keywordflow">return</span> static_cast&lt;uint8_t *&gt;(q.enqueueMapBuffer(_buffer, blocking ? CL_TRUE : CL_FALSE, CL_MAP_READ | CL_MAP_WRITE, 0, <a class="code" href="classarm__compute_1_1_i_lut_allocator.xhtml#a259cb5a711406a8c3e5d937eb9350cca">size</a>()));</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_lut_allocator_xhtml_a259cb5a711406a8c3e5d937eb9350cca"><div class="ttname"><a href="classarm__compute_1_1_i_lut_allocator.xhtml#a259cb5a711406a8c3e5d937eb9350cca">arm_compute::ILutAllocator::size</a></div><div class="ttdeci">size_t size() const</div><div class="ttdoc">Returns the total size in bytes of the LUT.</div><div class="ttdef"><b>Definition:</b> <a href="_i_lut_allocator_8cpp_source.xhtml#l00055">ILutAllocator.cpp:55</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, and <a class="el" href="_i_lut_allocator_8cpp_source.xhtml#l00055">ILutAllocator::size()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_lut_8cpp_source.xhtml#l00068">CLLut::clear()</a>.</p>

</div>
</div>
<a id="a2de13c6fbd9dd5506f12627b87415a51"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2de13c6fbd9dd5506f12627b87415a51">&#9670;&nbsp;</a></span>operator=()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classarm__compute_1_1_c_l_lut_allocator.xhtml">CLLutAllocator</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_c_l_lut_allocator.xhtml">CLLutAllocator</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prevent instances of this class from being copy assigned (As this class contains pointers) </p>

</div>
</div>
<a id="a34b854d640d247bd7422f60ca2f3a05c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a34b854d640d247bd7422f60ca2f3a05c">&#9670;&nbsp;</a></span>unmap()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void unmap </td>
          <td>(</td>
          <td class="paramtype">cl::CommandQueue &amp;&#160;</td>
          <td class="paramname"><em>q</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>mapping</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Enqueue an unmap operation of the allocated buffer on the given queue. </p>
<dl class="section note"><dt>Note</dt><dd>This method simply enqueue the unmap operation, it is the caller's responsibility to flush the queue and make sure the unmap is finished before the memory is accessed by the device.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">q</td><td>The CL command queue to use for the mapping operation. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">mapping</td><td>The cpu mapping to unmap. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_c_l_lut_allocator_8cpp_source.xhtml#l00052">52</a> of file <a class="el" href="_c_l_lut_allocator_8cpp_source.xhtml">CLLutAllocator.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;{</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(_buffer.get() == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    q.enqueueUnmapMemObject(_buffer, mapping);</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_lut_8cpp_source.xhtml#l00068">CLLut::clear()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>arm_compute/runtime/CL/<a class="el" href="_c_l_lut_allocator_8h_source.xhtml">CLLutAllocator.h</a></li>
<li>src/runtime/CL/<a class="el" href="_c_l_lut_allocator_8cpp_source.xhtml">CLLutAllocator.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1_c_l_lut_allocator.xhtml">CLLutAllocator</a></li>
    <li class="footer">Generated on Fri Feb 21 2020 11:10:26 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
