<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: Data Structures</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.02.1</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('annotated.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Data Structures</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock">Here are the data structures with brief descriptions:</div><div class="directory">
<div class="levels">[detail level <span onclick="javascript:toggleLevel(1);">1</span><span onclick="javascript:toggleLevel(2);">2</span><span onclick="javascript:toggleLevel(3);">3</span><span onclick="javascript:toggleLevel(4);">4</span><span onclick="javascript:toggleLevel(5);">5</span><span onclick="javascript:toggleLevel(6);">6</span>]</div><table class="directory">
<tr id="row_0_" class="even"><td class="entry"><span style="width:0px;display:inline-block;">&#160;</span><span id="arr_0_" class="arrow" onclick="toggleFolder('0_')">&#9658;</span><span class="icona"><span class="icon">N</span></span><a class="el" href="namespacearm__compute.xhtml" target="_self">arm_compute</a></td><td class="desc">Copyright (c) 2017-2020 ARM Limited </td></tr>
<tr id="row_0_0_" style="display:none;"><td class="entry"><span style="width:16px;display:inline-block;">&#160;</span><span id="arr_0_0_" class="arrow" onclick="toggleFolder('0_0_')">&#9658;</span><span class="icona"><span class="icon">N</span></span><a class="el" href="namespacearm__compute_1_1cl__gemm.xhtml" target="_self">cl_gemm</a></td><td class="desc"></td></tr>
<tr id="row_0_0_0_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1cl__gemm_1_1_c_l_g_e_m_m_native_kernel_configuration_bifrost.xhtml" target="_self">CLGEMMNativeKernelConfigurationBifrost</a></td><td class="desc">Bifrost based OpenCL GEMMNative configuration </td></tr>
<tr id="row_0_0_1_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1cl__gemm_1_1_c_l_g_e_m_m_native_kernel_configuration_factory.xhtml" target="_self">CLGEMMNativeKernelConfigurationFactory</a></td><td class="desc">CLGEMMNative factory class </td></tr>
<tr id="row_0_0_2_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1cl__gemm_1_1_c_l_g_e_m_m_reshaped_kernel_configuration_bifrost.xhtml" target="_self">CLGEMMReshapedKernelConfigurationBifrost</a></td><td class="desc">Bifrost based OpenCL GEMMReshaped configuration </td></tr>
<tr id="row_0_0_3_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1cl__gemm_1_1_c_l_g_e_m_m_reshaped_kernel_configuration_factory.xhtml" target="_self">CLGEMMReshapedKernelConfigurationFactory</a></td><td class="desc">CLGEMMReshaped factory class </td></tr>
<tr id="row_0_0_4_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1cl__gemm_1_1_c_l_g_e_m_m_reshaped_only_r_h_s_kernel_configuration_bifrost.xhtml" target="_self">CLGEMMReshapedOnlyRHSKernelConfigurationBifrost</a></td><td class="desc">Bifrost based OpenCL GEMMReshapedOnlyRHS configuration </td></tr>
<tr id="row_0_0_5_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1cl__gemm_1_1_c_l_g_e_m_m_reshaped_only_r_h_s_kernel_configuration_factory.xhtml" target="_self">CLGEMMReshapedOnlyRHSKernelConfigurationFactory</a></td><td class="desc">CLGEMMReshapedOnlyRHS factory class </td></tr>
<tr id="row_0_1_" style="display:none;"><td class="entry"><span style="width:16px;display:inline-block;">&#160;</span><span id="arr_0_1_" class="arrow" onclick="toggleFolder('0_1_')">&#9658;</span><span class="icona"><span class="icon">N</span></span><a class="el" href="namespacearm__compute_1_1cl__tuner.xhtml" target="_self">cl_tuner</a></td><td class="desc"></td></tr>
<tr id="row_0_1_0_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1cl__tuner_1_1_c_l_l_w_s_list.xhtml" target="_self">CLLWSList</a></td><td class="desc">Non instantiable base class for LWS combinations that use Index2Cooard mapping </td></tr>
<tr id="row_0_1_1_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1cl__tuner_1_1_c_l_l_w_s_list_exhaustive.xhtml" target="_self">CLLWSListExhaustive</a></td><td class="desc">Exhaustive list of all possible LWS values </td></tr>
<tr id="row_0_1_2_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1cl__tuner_1_1_c_l_l_w_s_list_factory.xhtml" target="_self">CLLWSListFactory</a></td><td class="desc">Factory to construct an <a class="el" href="classarm__compute_1_1cl__tuner_1_1_i_c_l_l_w_s_list.xhtml" title="Interface for LWS lists.">ICLLWSList</a> object based on the CL tuner mode </td></tr>
<tr id="row_0_1_3_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1cl__tuner_1_1_c_l_l_w_s_list_normal.xhtml" target="_self">CLLWSListNormal</a></td><td class="desc">A subset of LWS values that are either factors of gws when gws[2] &lt; 16 or power of 2 </td></tr>
<tr id="row_0_1_4_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1cl__tuner_1_1_c_l_l_w_s_list_rapid.xhtml" target="_self">CLLWSListRapid</a></td><td class="desc">A minimal subset of LWS values that only have 1,2 and 4/8 </td></tr>
<tr id="row_0_1_5_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1cl__tuner_1_1_i_c_l_l_w_s_list.xhtml" target="_self">ICLLWSList</a></td><td class="desc">Interface for LWS lists </td></tr>
<tr id="row_0_2_" style="display:none;"><td class="entry"><span style="width:16px;display:inline-block;">&#160;</span><span id="arr_0_2_" class="arrow" onclick="toggleFolder('0_2_')">&#9658;</span><span class="icona"><span class="icon">N</span></span><a class="el" href="namespacearm__compute_1_1detail.xhtml" target="_self">detail</a></td><td class="desc"></td></tr>
<tr id="row_0_2_0_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1detail_1_1brelu.xhtml" target="_self">brelu</a></td><td class="desc">Bounded RELU activation object </td></tr>
<tr id="row_0_2_1_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1detail_1_1compare__dimension.xhtml" target="_self">compare_dimension</a></td><td class="desc">Function to compare two <a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions</a> objects and throw an error on mismatch </td></tr>
<tr id="row_0_2_2_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1detail_1_1dummy.xhtml" target="_self">dummy</a></td><td class="desc">Dummy activation object </td></tr>
<tr id="row_0_2_3_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1detail_1_1get__tensor__info__t.xhtml" target="_self">get_tensor_info_t</a></td><td class="desc">Get the info for a tensor, dummy struct </td></tr>
<tr id="row_0_2_4_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1detail_1_1get__tensor__info__t_3_01_i_tensor_info_01_5_01_4.xhtml" target="_self">get_tensor_info_t&lt; ITensorInfo * &gt;</a></td><td class="desc">Get the info for a tensor </td></tr>
<tr id="row_0_2_5_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1detail_1_1linear.xhtml" target="_self">linear</a></td><td class="desc">Linear activation object </td></tr>
<tr id="row_0_2_6_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1detail_1_1logistic.xhtml" target="_self">logistic</a></td><td class="desc">Logistic activation object </td></tr>
<tr id="row_0_2_7_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1detail_1_1lubrelu.xhtml" target="_self">lubrelu</a></td><td class="desc">Lower-Upper Bounded RELU activation object </td></tr>
<tr id="row_0_2_8_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1detail_1_1relu.xhtml" target="_self">relu</a></td><td class="desc">RELU activation object </td></tr>
<tr id="row_0_2_9_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1detail_1_1square.xhtml" target="_self">square</a></td><td class="desc">Square activation object </td></tr>
<tr id="row_0_3_" style="display:none;"><td class="entry"><span style="width:16px;display:inline-block;">&#160;</span><span id="arr_0_3_" class="arrow" onclick="toggleFolder('0_3_')">&#9658;</span><span class="icona"><span class="icon">N</span></span><a class="el" href="namespacearm__compute_1_1gles.xhtml" target="_self">gles</a></td><td class="desc"></td></tr>
<tr id="row_0_3_0_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1gles_1_1_n_d_range.xhtml" target="_self">NDRange</a></td><td class="desc">Class interface for specifying <a class="el" href="classarm__compute_1_1gles_1_1_n_d_range.xhtml" title="Class interface for specifying NDRange values.">NDRange</a> values </td></tr>
<tr id="row_0_4_" style="display:none;"><td class="entry"><span style="width:16px;display:inline-block;">&#160;</span><span id="arr_0_4_" class="arrow" onclick="toggleFolder('0_4_')">&#9658;</span><span class="icona"><span class="icon">N</span></span><a class="el" href="namespacearm__compute_1_1graph.xhtml" target="_self">graph</a></td><td class="desc"></td></tr>
<tr id="row_0_4_0_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span id="arr_0_4_0_" class="arrow" onclick="toggleFolder('0_4_0_')">&#9658;</span><span class="icona"><span class="icon">N</span></span><a class="el" href="namespacearm__compute_1_1graph_1_1backends.xhtml" target="_self">backends</a></td><td class="desc"></td></tr>
<tr id="row_0_4_0_0_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span id="arr_0_4_0_0_" class="arrow" onclick="toggleFolder('0_4_0_0_')">&#9658;</span><span class="icona"><span class="icon">N</span></span><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml" target="_self">detail</a></td><td class="desc"></td></tr>
<tr id="row_0_4_0_0_0_" style="display:none;"><td class="entry"><span style="width:80px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1backends_1_1detail_1_1_backend_registrar.xhtml" target="_self">BackendRegistrar</a></td><td class="desc">Helper class to statically register a backend </td></tr>
<tr id="row_0_4_0_1_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1backends_1_1_backend_registry.xhtml" target="_self">BackendRegistry</a></td><td class="desc">Registry holding all the supported backends </td></tr>
<tr id="row_0_4_0_2_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1backends_1_1_c_l_device_backend.xhtml" target="_self">CLDeviceBackend</a></td><td class="desc">OpenCL device backend </td></tr>
<tr id="row_0_4_0_3_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1backends_1_1_c_l_function_factory.xhtml" target="_self">CLFunctionFactory</a></td><td class="desc">Factory for generating OpenCL backend functions </td></tr>
<tr id="row_0_4_0_4_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1backends_1_1_c_l_node_validator.xhtml" target="_self">CLNodeValidator</a></td><td class="desc"></td></tr>
<tr id="row_0_4_0_5_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1backends_1_1_c_l_sub_tensor_handle.xhtml" target="_self">CLSubTensorHandle</a></td><td class="desc">OpenCL Sub-Tensor handle interface object </td></tr>
<tr id="row_0_4_0_6_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1backends_1_1_c_l_tensor_handle.xhtml" target="_self">CLTensorHandle</a></td><td class="desc">OpenCL <a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml" title="Tensor object.">Tensor</a> handle interface object </td></tr>
<tr id="row_0_4_0_7_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1backends_1_1_fused_convolution_batch_normalization_function.xhtml" target="_self">FusedConvolutionBatchNormalizationFunction</a></td><td class="desc">Wrapper function to first apply {NE, CL}BatchNormalizationLayer on the weights and then run {NE, CL}ConvolutionLayer with the modified weights </td></tr>
<tr id="row_0_4_0_8_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1backends_1_1_fused_depthwise_convolution_batch_normalization_function.xhtml" target="_self">FusedDepthwiseConvolutionBatchNormalizationFunction</a></td><td class="desc">Wrapper function to first apply {NE, CL}BatchNormalizationLayer on the weights and then run {NE, CL}DepthwiseConvolutionLayer with the modified weights </td></tr>
<tr id="row_0_4_0_9_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1backends_1_1_g_c_device_backend.xhtml" target="_self">GCDeviceBackend</a></td><td class="desc">GLES Compute device backend </td></tr>
<tr id="row_0_4_0_10_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1backends_1_1_g_c_function_factory.xhtml" target="_self">GCFunctionFactory</a></td><td class="desc">Factory for generating GLES compute backend functions </td></tr>
<tr id="row_0_4_0_11_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1backends_1_1_g_c_node_validator.xhtml" target="_self">GCNodeValidator</a></td><td class="desc"></td></tr>
<tr id="row_0_4_0_12_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1backends_1_1_g_c_tensor_handle.xhtml" target="_self">GCTensorHandle</a></td><td class="desc">GLES compute tensor handle interface object </td></tr>
<tr id="row_0_4_0_13_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1backends_1_1_i_device_backend.xhtml" target="_self">IDeviceBackend</a></td><td class="desc">Device backend interface </td></tr>
<tr id="row_0_4_0_14_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1backends_1_1_n_e_device_backend.xhtml" target="_self">NEDeviceBackend</a></td><td class="desc">NEON device backend </td></tr>
<tr id="row_0_4_0_15_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1backends_1_1_n_e_function_factory.xhtml" target="_self">NEFunctionFactory</a></td><td class="desc">Factory for generating NEON backend functions </td></tr>
<tr id="row_0_4_0_16_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1backends_1_1_n_e_node_validator.xhtml" target="_self">NENodeValidator</a></td><td class="desc"></td></tr>
<tr id="row_0_4_0_17_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1backends_1_1_n_e_sub_tensor_handle.xhtml" target="_self">NESubTensorHandle</a></td><td class="desc">NEON Sub-Tensor handle interface object </td></tr>
<tr id="row_0_4_0_18_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1backends_1_1_n_e_tensor_handle.xhtml" target="_self">NETensorHandle</a></td><td class="desc">NEON <a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml" title="Tensor object.">Tensor</a> handle interface object </td></tr>
<tr id="row_0_4_1_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span id="arr_0_4_1_" class="arrow" onclick="toggleFolder('0_4_1_')">&#9658;</span><span class="icona"><span class="icon">N</span></span><a class="el" href="namespacearm__compute_1_1graph_1_1descriptors.xhtml" target="_self">descriptors</a></td><td class="desc"></td></tr>
<tr id="row_0_4_1_0_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1graph_1_1descriptors_1_1_concat_layer_descriptor.xhtml" target="_self">ConcatLayerDescriptor</a></td><td class="desc">Concatenate layer descriptor </td></tr>
<tr id="row_0_4_2_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span id="arr_0_4_2_" class="arrow" onclick="toggleFolder('0_4_2_')">&#9658;</span><span class="icona"><span class="icon">N</span></span><a class="el" href="namespacearm__compute_1_1graph_1_1frontend.xhtml" target="_self">frontend</a></td><td class="desc"></td></tr>
<tr id="row_0_4_2_0_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_activation_layer.xhtml" target="_self">ActivationLayer</a></td><td class="desc">Activation Layer </td></tr>
<tr id="row_0_4_2_1_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_batch_normalization_layer.xhtml" target="_self">BatchNormalizationLayer</a></td><td class="desc">Batchnormalization Layer </td></tr>
<tr id="row_0_4_2_2_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_bounding_box_transform_layer.xhtml" target="_self">BoundingBoxTransformLayer</a></td><td class="desc">Bounding Box Transform Layer </td></tr>
<tr id="row_0_4_2_3_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_channel_shuffle_layer.xhtml" target="_self">ChannelShuffleLayer</a></td><td class="desc">Channel Shuffle Layer </td></tr>
<tr id="row_0_4_2_4_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_concat_layer.xhtml" target="_self">ConcatLayer</a></td><td class="desc">Concat Layer </td></tr>
<tr id="row_0_4_2_5_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_constant_layer.xhtml" target="_self">ConstantLayer</a></td><td class="desc">Constant Layer </td></tr>
<tr id="row_0_4_2_6_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_convolution_layer.xhtml" target="_self">ConvolutionLayer</a></td><td class="desc">Convolution Layer </td></tr>
<tr id="row_0_4_2_7_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_deconvolution_layer.xhtml" target="_self">DeconvolutionLayer</a></td><td class="desc">Deconvolution Layer </td></tr>
<tr id="row_0_4_2_8_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_depthwise_convolution_layer.xhtml" target="_self">DepthwiseConvolutionLayer</a></td><td class="desc">Depthwise Convolution Layer </td></tr>
<tr id="row_0_4_2_9_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_dequantization_layer.xhtml" target="_self">DequantizationLayer</a></td><td class="desc">Dequantization Layer </td></tr>
<tr id="row_0_4_2_10_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_detection_output_layer.xhtml" target="_self">DetectionOutputLayer</a></td><td class="desc">DetectionOutput Layer </td></tr>
<tr id="row_0_4_2_11_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_detection_post_process_layer.xhtml" target="_self">DetectionPostProcessLayer</a></td><td class="desc">DetectionOutputPostProcess Layer </td></tr>
<tr id="row_0_4_2_12_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_dummy_layer.xhtml" target="_self">DummyLayer</a></td><td class="desc">Dummy Layer </td></tr>
<tr id="row_0_4_2_13_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_eltwise_layer.xhtml" target="_self">EltwiseLayer</a></td><td class="desc"></td></tr>
<tr id="row_0_4_2_14_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_flatten_layer.xhtml" target="_self">FlattenLayer</a></td><td class="desc">Flatten Layer </td></tr>
<tr id="row_0_4_2_15_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_fully_connected_layer.xhtml" target="_self">FullyConnectedLayer</a></td><td class="desc">Fully Connected Layer </td></tr>
<tr id="row_0_4_2_16_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_generate_proposals_layer.xhtml" target="_self">GenerateProposalsLayer</a></td><td class="desc">Generate Proposals Layer </td></tr>
<tr id="row_0_4_2_17_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml" target="_self">ILayer</a></td><td class="desc"><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml" title="ILayer interface.">ILayer</a> interface </td></tr>
<tr id="row_0_4_2_18_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_input_layer.xhtml" target="_self">InputLayer</a></td><td class="desc">Input Layer </td></tr>
<tr id="row_0_4_2_19_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml" target="_self">IStream</a></td><td class="desc"><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_stream.xhtml" title="Stream frontend class to construct simple graphs in a stream fashion.">Stream</a> interface </td></tr>
<tr id="row_0_4_2_20_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_normalization_layer.xhtml" target="_self">NormalizationLayer</a></td><td class="desc">Normalization Layer </td></tr>
<tr id="row_0_4_2_21_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_normalize_planar_y_u_v_layer.xhtml" target="_self">NormalizePlanarYUVLayer</a></td><td class="desc">Normalize planar YUV Layer </td></tr>
<tr id="row_0_4_2_22_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_output_layer.xhtml" target="_self">OutputLayer</a></td><td class="desc">Output Layer </td></tr>
<tr id="row_0_4_2_23_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_pad_layer.xhtml" target="_self">PadLayer</a></td><td class="desc">Pad Layer </td></tr>
<tr id="row_0_4_2_24_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_permute_layer.xhtml" target="_self">PermuteLayer</a></td><td class="desc">Permute Layer </td></tr>
<tr id="row_0_4_2_25_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_pooling_layer.xhtml" target="_self">PoolingLayer</a></td><td class="desc">Pooling Layer </td></tr>
<tr id="row_0_4_2_26_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_p_relu_layer.xhtml" target="_self">PReluLayer</a></td><td class="desc">PRelu Layer </td></tr>
<tr id="row_0_4_2_27_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_print_layer.xhtml" target="_self">PrintLayer</a></td><td class="desc">Print Layer </td></tr>
<tr id="row_0_4_2_28_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_prior_box_layer.xhtml" target="_self">PriorBoxLayer</a></td><td class="desc">PriorBox Layer </td></tr>
<tr id="row_0_4_2_29_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_quantization_layer.xhtml" target="_self">QuantizationLayer</a></td><td class="desc">Quantization Layer </td></tr>
<tr id="row_0_4_2_30_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_reorg_layer.xhtml" target="_self">ReorgLayer</a></td><td class="desc">Reorg Layer </td></tr>
<tr id="row_0_4_2_31_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_reshape_layer.xhtml" target="_self">ReshapeLayer</a></td><td class="desc">Reshape Layer </td></tr>
<tr id="row_0_4_2_32_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_resize_layer.xhtml" target="_self">ResizeLayer</a></td><td class="desc">Resize Layer </td></tr>
<tr id="row_0_4_2_33_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_r_o_i_align_layer.xhtml" target="_self">ROIAlignLayer</a></td><td class="desc">ROIAlign Layer </td></tr>
<tr id="row_0_4_2_34_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_scale_layer.xhtml" target="_self">ScaleLayer</a></td><td class="desc">Scale Layer </td></tr>
<tr id="row_0_4_2_35_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_slice_layer.xhtml" target="_self">SliceLayer</a></td><td class="desc">Slice Layer </td></tr>
<tr id="row_0_4_2_36_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_softmax_layer.xhtml" target="_self">SoftmaxLayer</a></td><td class="desc">Softmax Layer </td></tr>
<tr id="row_0_4_2_37_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_stack_layer.xhtml" target="_self">StackLayer</a></td><td class="desc">Stack Layer </td></tr>
<tr id="row_0_4_2_38_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_stream.xhtml" target="_self">Stream</a></td><td class="desc"><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_stream.xhtml" title="Stream frontend class to construct simple graphs in a stream fashion.">Stream</a> frontend class to construct simple graphs in a stream fashion </td></tr>
<tr id="row_0_4_2_39_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml" target="_self">StreamHints</a></td><td class="desc">Hints that can be passed to the stream to expose parameterization </td></tr>
<tr id="row_0_4_2_40_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml" target="_self">SubStream</a></td><td class="desc">Sub stream class </td></tr>
<tr id="row_0_4_2_41_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_upsample_layer.xhtml" target="_self">UpsampleLayer</a></td><td class="desc">Upsample Layer </td></tr>
<tr id="row_0_4_2_42_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_y_o_l_o_layer.xhtml" target="_self">YOLOLayer</a></td><td class="desc">YOLO Layer </td></tr>
<tr id="row_0_4_3_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_activation_layer_node.xhtml" target="_self">ActivationLayerNode</a></td><td class="desc">Activation Layer node </td></tr>
<tr id="row_0_4_4_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_batch_normalization_layer_node.xhtml" target="_self">BatchNormalizationLayerNode</a></td><td class="desc">Batch Normalization Layer node </td></tr>
<tr id="row_0_4_5_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_bounding_box_transform_layer_node.xhtml" target="_self">BoundingBoxTransformLayerNode</a></td><td class="desc">Bounding Box Transform Layer node </td></tr>
<tr id="row_0_4_6_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_channel_shuffle_layer_node.xhtml" target="_self">ChannelShuffleLayerNode</a></td><td class="desc">Channel Shuffle Layer node </td></tr>
<tr id="row_0_4_7_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_concatenate_layer_node.xhtml" target="_self">ConcatenateLayerNode</a></td><td class="desc">Concatenation Layer node </td></tr>
<tr id="row_0_4_8_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_const_node.xhtml" target="_self">ConstNode</a></td><td class="desc">Const node </td></tr>
<tr id="row_0_4_9_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_convolution_layer_node.xhtml" target="_self">ConvolutionLayerNode</a></td><td class="desc">Convolution Layer node </td></tr>
<tr id="row_0_4_10_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_deconvolution_layer_node.xhtml" target="_self">DeconvolutionLayerNode</a></td><td class="desc">Deconvolution Layer node </td></tr>
<tr id="row_0_4_11_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_default_node_visitor.xhtml" target="_self">DefaultNodeVisitor</a></td><td class="desc">Default visitor implementation </td></tr>
<tr id="row_0_4_12_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_depth_concat_sub_tensor_mutator.xhtml" target="_self">DepthConcatSubTensorMutator</a></td><td class="desc">Mutation pass to optimize depth concatenation operations by using sub-tensors </td></tr>
<tr id="row_0_4_13_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_depthwise_convolution_layer_node.xhtml" target="_self">DepthwiseConvolutionLayerNode</a></td><td class="desc">Depthwise Convolution Layer node </td></tr>
<tr id="row_0_4_14_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_dequantization_layer_node.xhtml" target="_self">DequantizationLayerNode</a></td><td class="desc">Dequantize Layer node </td></tr>
<tr id="row_0_4_15_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_detection_output_layer_node.xhtml" target="_self">DetectionOutputLayerNode</a></td><td class="desc">DetectionOutput Layer node </td></tr>
<tr id="row_0_4_16_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_detection_post_process_layer_node.xhtml" target="_self">DetectionPostProcessLayerNode</a></td><td class="desc">DetectionPostProcess Layer node </td></tr>
<tr id="row_0_4_17_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_dot_graph_printer.xhtml" target="_self">DotGraphPrinter</a></td><td class="desc"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> printer interface </td></tr>
<tr id="row_0_4_18_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_dot_graph_visitor.xhtml" target="_self">DotGraphVisitor</a></td><td class="desc"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> printer visitor </td></tr>
<tr id="row_0_4_19_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_dummy_node.xhtml" target="_self">DummyNode</a></td><td class="desc">Dummy Layer node </td></tr>
<tr id="row_0_4_20_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_edge.xhtml" target="_self">Edge</a></td><td class="desc"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> <a class="el" href="classarm__compute_1_1graph_1_1_edge.xhtml" title="Graph Edge.">Edge</a> </td></tr>
<tr id="row_0_4_21_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_eltwise_layer_node.xhtml" target="_self">EltwiseLayerNode</a></td><td class="desc">Eltwise Layer node </td></tr>
<tr id="row_0_4_22_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1graph_1_1_execution_task.xhtml" target="_self">ExecutionTask</a></td><td class="desc">Execution task </td></tr>
<tr id="row_0_4_23_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1graph_1_1_execution_workload.xhtml" target="_self">ExecutionWorkload</a></td><td class="desc">Execution workload </td></tr>
<tr id="row_0_4_24_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_flatten_layer_node.xhtml" target="_self">FlattenLayerNode</a></td><td class="desc">Flatten Layer node </td></tr>
<tr id="row_0_4_25_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_fully_connected_layer_node.xhtml" target="_self">FullyConnectedLayerNode</a></td><td class="desc">Fully Connected Layer node </td></tr>
<tr id="row_0_4_26_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_fused_convolution_batch_normalization_node.xhtml" target="_self">FusedConvolutionBatchNormalizationNode</a></td><td class="desc">Batch Normalization node </td></tr>
<tr id="row_0_4_27_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_fused_depthwise_convolution_batch_normalization_node.xhtml" target="_self">FusedDepthwiseConvolutionBatchNormalizationNode</a></td><td class="desc">Fused Depthwise Convolution Batch Normalization node </td></tr>
<tr id="row_0_4_28_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_generate_proposals_layer_node.xhtml" target="_self">GenerateProposalsLayerNode</a></td><td class="desc">Generate Proposals Layer node </td></tr>
<tr id="row_0_4_29_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" target="_self">Graph</a></td><td class="desc"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> class </td></tr>
<tr id="row_0_4_30_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml" target="_self">GraphBuilder</a></td><td class="desc"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> builder class </td></tr>
<tr id="row_0_4_31_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1graph_1_1_graph_config.xhtml" target="_self">GraphConfig</a></td><td class="desc"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> configuration structure Device target types </td></tr>
<tr id="row_0_4_32_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_graph_context.xhtml" target="_self">GraphContext</a></td><td class="desc"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> context </td></tr>
<tr id="row_0_4_33_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_graph_manager.xhtml" target="_self">GraphManager</a></td><td class="desc"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> manager class </td></tr>
<tr id="row_0_4_34_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_grouped_convolution_mutator.xhtml" target="_self">GroupedConvolutionMutator</a></td><td class="desc">Mutation pass to implement/optimize grouped convolutions </td></tr>
<tr id="row_0_4_35_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_i_graph_mutator.xhtml" target="_self">IGraphMutator</a></td><td class="desc"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> mutator interface </td></tr>
<tr id="row_0_4_36_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_i_graph_printer.xhtml" target="_self">IGraphPrinter</a></td><td class="desc"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> printer interface </td></tr>
<tr id="row_0_4_37_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml" target="_self">INode</a></td><td class="desc">Node interface </td></tr>
<tr id="row_0_4_38_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_i_node_visitor.xhtml" target="_self">INodeVisitor</a></td><td class="desc">Node visitor interface </td></tr>
<tr id="row_0_4_39_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_in_place_operation_mutator.xhtml" target="_self">InPlaceOperationMutator</a></td><td class="desc">Mutation pass to optimize operations that can be performed in-place </td></tr>
<tr id="row_0_4_40_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_input_node.xhtml" target="_self">InputNode</a></td><td class="desc">Input Layer node </td></tr>
<tr id="row_0_4_41_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_i_tensor_accessor.xhtml" target="_self">ITensorAccessor</a></td><td class="desc"><a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml" title="Tensor object.">Tensor</a> accessor interface </td></tr>
<tr id="row_0_4_42_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_i_tensor_handle.xhtml" target="_self">ITensorHandle</a></td><td class="desc"><a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml" title="Tensor object.">Tensor</a> handle interface object </td></tr>
<tr id="row_0_4_43_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1graph_1_1_memory_manager_context.xhtml" target="_self">MemoryManagerContext</a></td><td class="desc">Contains structs required for memory management </td></tr>
<tr id="row_0_4_44_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_node_execution_method_mutator.xhtml" target="_self">NodeExecutionMethodMutator</a></td><td class="desc">Mutation pass to fall-back to default execution method </td></tr>
<tr id="row_0_4_45_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_node_fusion_mutator.xhtml" target="_self">NodeFusionMutator</a></td><td class="desc">Mutation pass to fuss nodes </td></tr>
<tr id="row_0_4_46_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml" target="_self">NodeIdxPair</a></td><td class="desc">NodeID-index struct </td></tr>
<tr id="row_0_4_47_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml" target="_self">NodeParams</a></td><td class="desc">Common node parameters </td></tr>
<tr id="row_0_4_48_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_normalization_layer_node.xhtml" target="_self">NormalizationLayerNode</a></td><td class="desc">Normalization Layer node </td></tr>
<tr id="row_0_4_49_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_normalize_planar_y_u_v_layer_node.xhtml" target="_self">NormalizePlanarYUVLayerNode</a></td><td class="desc">Batch Normalization Layer node </td></tr>
<tr id="row_0_4_50_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_output_node.xhtml" target="_self">OutputNode</a></td><td class="desc">Output Layer node </td></tr>
<tr id="row_0_4_51_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_pad_layer_node.xhtml" target="_self">PadLayerNode</a></td><td class="desc">Pad Layer node </td></tr>
<tr id="row_0_4_52_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_pass_manager.xhtml" target="_self">PassManager</a></td><td class="desc">Pass manager </td></tr>
<tr id="row_0_4_53_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_permute_layer_node.xhtml" target="_self">PermuteLayerNode</a></td><td class="desc">Permute Layer node </td></tr>
<tr id="row_0_4_54_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_pooling_layer_node.xhtml" target="_self">PoolingLayerNode</a></td><td class="desc">Pooling Layer node </td></tr>
<tr id="row_0_4_55_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_p_relu_layer_node.xhtml" target="_self">PReluLayerNode</a></td><td class="desc">PRelu Layer node </td></tr>
<tr id="row_0_4_56_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_print_layer_node.xhtml" target="_self">PrintLayerNode</a></td><td class="desc">Print Layer node </td></tr>
<tr id="row_0_4_57_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_prior_box_layer_node.xhtml" target="_self">PriorBoxLayerNode</a></td><td class="desc">PriorBox Layer node </td></tr>
<tr id="row_0_4_58_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_quantization_layer_node.xhtml" target="_self">QuantizationLayerNode</a></td><td class="desc">Quantization Layer node </td></tr>
<tr id="row_0_4_59_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_reorg_layer_node.xhtml" target="_self">ReorgLayerNode</a></td><td class="desc">Reorg Layer node </td></tr>
<tr id="row_0_4_60_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_reshape_layer_node.xhtml" target="_self">ReshapeLayerNode</a></td><td class="desc">Reshape Layer node </td></tr>
<tr id="row_0_4_61_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_resize_layer_node.xhtml" target="_self">ResizeLayerNode</a></td><td class="desc">Resize Layer node </td></tr>
<tr id="row_0_4_62_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_r_o_i_align_layer_node.xhtml" target="_self">ROIAlignLayerNode</a></td><td class="desc">ROI Align node </td></tr>
<tr id="row_0_4_63_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_slice_layer_node.xhtml" target="_self">SliceLayerNode</a></td><td class="desc">Slice Layer node </td></tr>
<tr id="row_0_4_64_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_softmax_layer_node.xhtml" target="_self">SoftmaxLayerNode</a></td><td class="desc">Softmax Layer node </td></tr>
<tr id="row_0_4_65_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_split_layer_node.xhtml" target="_self">SplitLayerNode</a></td><td class="desc">Split Layer node </td></tr>
<tr id="row_0_4_66_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_split_layer_sub_tensor_mutator.xhtml" target="_self">SplitLayerSubTensorMutator</a></td><td class="desc">Mutation pass to optimize split operations by using sub-tensors </td></tr>
<tr id="row_0_4_67_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_stack_layer_node.xhtml" target="_self">StackLayerNode</a></td><td class="desc">Stack Layer node </td></tr>
<tr id="row_0_4_68_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_synthetic_data_type_mutator.xhtml" target="_self">SyntheticDataTypeMutator</a></td><td class="desc">Mutation pass to create synthetic graphs of a given data type </td></tr>
<tr id="row_0_4_69_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_task_executor.xhtml" target="_self">TaskExecutor</a></td><td class="desc">Task executor </td></tr>
<tr id="row_0_4_70_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml" target="_self">Tensor</a></td><td class="desc"><a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml" title="Tensor object.">Tensor</a> object </td></tr>
<tr id="row_0_4_71_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml" target="_self">TensorDescriptor</a></td><td class="desc"><a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml" title="Tensor object.">Tensor</a> metadata class </td></tr>
<tr id="row_0_4_72_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_upsample_layer_node.xhtml" target="_self">UpsampleLayerNode</a></td><td class="desc">Upsample Layer node </td></tr>
<tr id="row_0_4_73_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1graph_1_1_weights_manager_context.xhtml" target="_self">WeightsManagerContext</a></td><td class="desc">Contains structs required for weights management </td></tr>
<tr id="row_0_4_74_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph_1_1_y_o_l_o_layer_node.xhtml" target="_self">YOLOLayerNode</a></td><td class="desc">YOLO Layer node </td></tr>
<tr id="row_0_5_" style="display:none;"><td class="entry"><span style="width:16px;display:inline-block;">&#160;</span><span id="arr_0_5_" class="arrow" onclick="toggleFolder('0_5_')">&#9658;</span><span class="icona"><span class="icon">N</span></span><a class="el" href="namespacearm__compute_1_1graph__utils.xhtml" target="_self">graph_utils</a></td><td class="desc"></td></tr>
<tr id="row_0_5_0_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph__utils_1_1_caffe_preproccessor.xhtml" target="_self">CaffePreproccessor</a></td><td class="desc">Caffe preproccessor </td></tr>
<tr id="row_0_5_1_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph__utils_1_1_detection_output_accessor.xhtml" target="_self">DetectionOutputAccessor</a></td><td class="desc">Detection output accessor class </td></tr>
<tr id="row_0_5_2_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph__utils_1_1_dummy_accessor.xhtml" target="_self">DummyAccessor</a></td><td class="desc">Dummy accessor class </td></tr>
<tr id="row_0_5_3_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph__utils_1_1_image_accessor.xhtml" target="_self">ImageAccessor</a></td><td class="desc"><a class="el" href="struct_image.xhtml" title="Structure to hold Image information.">Image</a> accessor class </td></tr>
<tr id="row_0_5_4_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph__utils_1_1_i_preprocessor.xhtml" target="_self">IPreprocessor</a></td><td class="desc">Preprocessor interface </td></tr>
<tr id="row_0_5_5_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph__utils_1_1_num_py_accessor.xhtml" target="_self">NumPyAccessor</a></td><td class="desc">NumPy accessor class </td></tr>
<tr id="row_0_5_6_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph__utils_1_1_num_py_bin_loader.xhtml" target="_self">NumPyBinLoader</a></td><td class="desc">Numpy Binary loader class </td></tr>
<tr id="row_0_5_7_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph__utils_1_1_p_p_m_writer.xhtml" target="_self">PPMWriter</a></td><td class="desc">PPM writer class </td></tr>
<tr id="row_0_5_8_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph__utils_1_1_print_accessor.xhtml" target="_self">PrintAccessor</a></td><td class="desc">Print accessor class </td></tr>
<tr id="row_0_5_9_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph__utils_1_1_random_accessor.xhtml" target="_self">RandomAccessor</a></td><td class="desc">Random accessor class </td></tr>
<tr id="row_0_5_10_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph__utils_1_1_save_num_py_accessor.xhtml" target="_self">SaveNumPyAccessor</a></td><td class="desc">SaveNumPy accessor class </td></tr>
<tr id="row_0_5_11_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph__utils_1_1_t_f_preproccessor.xhtml" target="_self">TFPreproccessor</a></td><td class="desc">TF preproccessor </td></tr>
<tr id="row_0_5_12_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph__utils_1_1_top_n_predictions_accessor.xhtml" target="_self">TopNPredictionsAccessor</a></td><td class="desc">Result accessor class </td></tr>
<tr id="row_0_5_13_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph__utils_1_1_validation_input_accessor.xhtml" target="_self">ValidationInputAccessor</a></td><td class="desc">Input Accessor used for network validation </td></tr>
<tr id="row_0_5_14_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1graph__utils_1_1_validation_output_accessor.xhtml" target="_self">ValidationOutputAccessor</a></td><td class="desc">Output Accessor used for network validation </td></tr>
<tr id="row_0_6_" style="display:none;"><td class="entry"><span style="width:16px;display:inline-block;">&#160;</span><span id="arr_0_6_" class="arrow" onclick="toggleFolder('0_6_')">&#9658;</span><span class="icona"><span class="icon">N</span></span><a class="el" href="namespacearm__compute_1_1helpers.xhtml" target="_self">helpers</a></td><td class="desc"></td></tr>
<tr id="row_0_6_0_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span id="arr_0_6_0_" class="arrow" onclick="toggleFolder('0_6_0_')">&#9658;</span><span class="icona"><span class="icon">N</span></span><a class="el" href="namespacearm__compute_1_1helpers_1_1float__ops.xhtml" target="_self">float_ops</a></td><td class="desc"></td></tr>
<tr id="row_0_6_0_0_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="unionarm__compute_1_1helpers_1_1float__ops_1_1_raw_float.xhtml" target="_self">RawFloat</a></td><td class="desc"></td></tr>
<tr id="row_0_7_" style="display:none;"><td class="entry"><span style="width:16px;display:inline-block;">&#160;</span><span id="arr_0_7_" class="arrow" onclick="toggleFolder('0_7_')">&#9658;</span><span class="icona"><span class="icon">N</span></span><a class="el" href="namespacearm__compute_1_1io.xhtml" target="_self">io</a></td><td class="desc"></td></tr>
<tr id="row_0_7_0_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1io_1_1_file_handler.xhtml" target="_self">FileHandler</a></td><td class="desc">File Handling interface </td></tr>
<tr id="row_0_8_" style="display:none;"><td class="entry"><span style="width:16px;display:inline-block;">&#160;</span><span id="arr_0_8_" class="arrow" onclick="toggleFolder('0_8_')">&#9658;</span><span class="icona"><span class="icon">N</span></span><a class="el" href="namespacearm__compute_1_1logging.xhtml" target="_self">logging</a></td><td class="desc"></td></tr>
<tr id="row_0_8_0_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1logging_1_1_date_decorator.xhtml" target="_self">DateDecorator</a></td><td class="desc">Date Decorator </td></tr>
<tr id="row_0_8_1_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1logging_1_1_file_printer.xhtml" target="_self">FilePrinter</a></td><td class="desc">File <a class="el" href="classarm__compute_1_1logging_1_1_printer.xhtml" title="Base printer class to be inherited by other printer classes.">Printer</a> </td></tr>
<tr id="row_0_8_2_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1logging_1_1_i_decorator.xhtml" target="_self">IDecorator</a></td><td class="desc">Log message decorator interface </td></tr>
<tr id="row_0_8_3_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1logging_1_1_logger.xhtml" target="_self">Logger</a></td><td class="desc"><a class="el" href="classarm__compute_1_1logging_1_1_logger.xhtml" title="Logger class.">Logger</a> class </td></tr>
<tr id="row_0_8_4_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1logging_1_1_logger_registry.xhtml" target="_self">LoggerRegistry</a></td><td class="desc">Registry class holding all the instantiated loggers </td></tr>
<tr id="row_0_8_5_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1logging_1_1_log_level_decorator.xhtml" target="_self">LogLevelDecorator</a></td><td class="desc">Log Level Decorator </td></tr>
<tr id="row_0_8_6_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1logging_1_1_log_msg.xhtml" target="_self">LogMsg</a></td><td class="desc">Log message </td></tr>
<tr id="row_0_8_7_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1logging_1_1_printer.xhtml" target="_self">Printer</a></td><td class="desc">Base printer class to be inherited by other printer classes </td></tr>
<tr id="row_0_8_8_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1logging_1_1_std_printer.xhtml" target="_self">StdPrinter</a></td><td class="desc">Std <a class="el" href="classarm__compute_1_1logging_1_1_printer.xhtml" title="Base printer class to be inherited by other printer classes.">Printer</a> </td></tr>
<tr id="row_0_8_9_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1logging_1_1_string_decorator.xhtml" target="_self">StringDecorator</a></td><td class="desc">String Decorator </td></tr>
<tr id="row_0_8_10_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1logging_1_1_thread_id_decorator.xhtml" target="_self">ThreadIdDecorator</a></td><td class="desc">Thread ID Decorator </td></tr>
<tr id="row_0_9_" style="display:none;"><td class="entry"><span style="width:16px;display:inline-block;">&#160;</span><span id="arr_0_9_" class="arrow" onclick="toggleFolder('0_9_')">&#9658;</span><span class="icona"><span class="icon">N</span></span><a class="el" href="namespacearm__compute_1_1misc.xhtml" target="_self">misc</a></td><td class="desc"></td></tr>
<tr id="row_0_9_0_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1misc_1_1_c_r_t_p.xhtml" target="_self">CRTP</a></td><td class="desc">Curiously recurring template pattern Interface </td></tr>
<tr id="row_0_9_1_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1misc_1_1_i_cloneable.xhtml" target="_self">ICloneable</a></td><td class="desc">Clonable Interface </td></tr>
<tr id="row_0_10_" style="display:none;"><td class="entry"><span style="width:16px;display:inline-block;">&#160;</span><span id="arr_0_10_" class="arrow" onclick="toggleFolder('0_10_')">&#9658;</span><span class="icona"><span class="icon">N</span></span><a class="el" href="namespacearm__compute_1_1support.xhtml" target="_self">support</a></td><td class="desc"></td></tr>
<tr id="row_0_10_0_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span id="arr_0_10_0_" class="arrow" onclick="toggleFolder('0_10_0_')">&#9658;</span><span class="icona"><span class="icon">N</span></span><a class="el" href="namespacearm__compute_1_1support_1_1cpp14.xhtml" target="_self">cpp14</a></td><td class="desc"></td></tr>
<tr id="row_0_10_0_0_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1support_1_1cpp14_1_1___unique__if.xhtml" target="_self">_Unique_if</a></td><td class="desc">Make_unique is missing in CPP11 </td></tr>
<tr id="row_0_10_0_1_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1support_1_1cpp14_1_1___unique__if_3_01_t[]_4.xhtml" target="_self">_Unique_if&lt; T[]&gt;</a></td><td class="desc">Template for array </td></tr>
<tr id="row_0_10_0_2_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1support_1_1cpp14_1_1___unique__if_3_01_t[_n]_4.xhtml" target="_self">_Unique_if&lt; T[N]&gt;</a></td><td class="desc">Template for array with known bounds (to throw an error) </td></tr>
<tr id="row_0_11_" style="display:none;"><td class="entry"><span style="width:16px;display:inline-block;">&#160;</span><span id="arr_0_11_" class="arrow" onclick="toggleFolder('0_11_')">&#9658;</span><span class="icona"><span class="icon">N</span></span><a class="el" href="namespacearm__compute_1_1test.xhtml" target="_self">test</a></td><td class="desc"></td></tr>
<tr id="row_0_11_0_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span id="arr_0_11_0_" class="arrow" onclick="toggleFolder('0_11_0_')">&#9658;</span><span class="icona"><span class="icon">N</span></span><a class="el" href="namespacearm__compute_1_1test_1_1benchmark.xhtml" target="_self">benchmark</a></td><td class="desc"></td></tr>
<tr id="row_0_11_0_0_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span id="arr_0_11_0_0_" class="arrow" onclick="toggleFolder('0_11_0_0_')">&#9658;</span><span class="icona"><span class="icon">N</span></span><a class="el" href="namespacearm__compute_1_1test_1_1benchmark_1_1_c_l_suite.xhtml" target="_self">CLSuite</a></td><td class="desc"></td></tr>
<tr id="row_0_11_1_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span id="arr_0_11_1_" class="arrow" onclick="toggleFolder('0_11_1_')">&#9658;</span><span class="icona"><span class="icon">N</span></span><a class="el" href="namespacearm__compute_1_1test_1_1colorconvert__helper.xhtml" target="_self">colorconvert_helper</a></td><td class="desc"></td></tr>
<tr id="row_0_11_2_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span id="arr_0_11_2_" class="arrow" onclick="toggleFolder('0_11_2_')">&#9658;</span><span class="icona"><span class="icon">N</span></span><a class="el" href="namespacearm__compute_1_1test_1_1convolution__3d.xhtml" target="_self">convolution_3d</a></td><td class="desc"></td></tr>
<tr id="row_0_11_3_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span id="arr_0_11_3_" class="arrow" onclick="toggleFolder('0_11_3_')">&#9658;</span><span class="icona"><span class="icon">N</span></span><a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml" target="_self">framework</a></td><td class="desc"></td></tr>
<tr id="row_0_11_3_0_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span id="arr_0_11_3_0_" class="arrow" onclick="toggleFolder('0_11_3_0_')">&#9658;</span><span class="icona"><span class="icon">N</span></span><a class="el" href="namespacearm__compute_1_1test_1_1framework_1_1dataset.xhtml" target="_self">dataset</a></td><td class="desc"></td></tr>
<tr id="row_0_11_3_0_0_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span id="arr_0_11_3_0_0_" class="arrow" onclick="toggleFolder('0_11_3_0_0_')">&#9658;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1framework_1_1dataset_1_1_cartesian_product_dataset.xhtml" target="_self">CartesianProductDataset</a></td><td class="desc">Implementation of a dataset representing all combinations of values of the input datasets </td></tr>
<tr id="row_0_11_3_0_0_0_" style="display:none;"><td class="entry"><span style="width:96px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1test_1_1framework_1_1dataset_1_1_cartesian_product_dataset_1_1iterator.xhtml" target="_self">iterator</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_iterator.xhtml" title="Iterator updated by execute_window_loop for each window element.">Iterator</a> for the dataset </td></tr>
<tr id="row_0_11_3_0_1_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span id="arr_0_11_3_0_1_" class="arrow" onclick="toggleFolder('0_11_3_0_1_')">&#9658;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1framework_1_1dataset_1_1_container_dataset.xhtml" target="_self">ContainerDataset</a></td><td class="desc">Implementation of a dataset created from a container </td></tr>
<tr id="row_0_11_3_0_1_0_" style="display:none;"><td class="entry"><span style="width:96px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1test_1_1framework_1_1dataset_1_1_container_dataset_1_1iterator.xhtml" target="_self">iterator</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_iterator.xhtml" title="Iterator updated by execute_window_loop for each window element.">Iterator</a> for the dataset </td></tr>
<tr id="row_0_11_3_0_2_" style="display:none;"><td class="entry"><span style="width:80px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1framework_1_1dataset_1_1_dataset.xhtml" target="_self">Dataset</a></td><td class="desc">Abstract dataset base class </td></tr>
<tr id="row_0_11_3_0_3_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span id="arr_0_11_3_0_3_" class="arrow" onclick="toggleFolder('0_11_3_0_3_')">&#9658;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1framework_1_1dataset_1_1_initializer_list_dataset.xhtml" target="_self">InitializerListDataset</a></td><td class="desc">Implementation of a dataset created from an initializer list </td></tr>
<tr id="row_0_11_3_0_3_0_" style="display:none;"><td class="entry"><span style="width:96px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1test_1_1framework_1_1dataset_1_1_initializer_list_dataset_1_1iterator.xhtml" target="_self">iterator</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_iterator.xhtml" title="Iterator updated by execute_window_loop for each window element.">Iterator</a> for the dataset </td></tr>
<tr id="row_0_11_3_0_4_" style="display:none;"><td class="entry"><span style="width:80px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1test_1_1framework_1_1dataset_1_1is__container.xhtml" target="_self">is_container</a></td><td class="desc">Base case </td></tr>
<tr id="row_0_11_3_0_5_" style="display:none;"><td class="entry"><span style="width:80px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1test_1_1framework_1_1dataset_1_1is__container_3_01std_1_1vector_3_01_v_00_01_a_01_4_01_4.xhtml" target="_self">is_container&lt; std::vector&lt; V, A &gt; &gt;</a></td><td class="desc"><a class="el" href="struct_vector.xhtml" title="Structure to hold Vector information.">Vector</a> is considered a container </td></tr>
<tr id="row_0_11_3_0_6_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span id="arr_0_11_3_0_6_" class="arrow" onclick="toggleFolder('0_11_3_0_6_')">&#9658;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1framework_1_1dataset_1_1_join_dataset.xhtml" target="_self">JoinDataset</a></td><td class="desc">Implementation of a dataset representing the concatenation of the input datasets </td></tr>
<tr id="row_0_11_3_0_6_0_" style="display:none;"><td class="entry"><span style="width:96px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1test_1_1framework_1_1dataset_1_1_join_dataset_1_1iterator.xhtml" target="_self">iterator</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_iterator.xhtml" title="Iterator updated by execute_window_loop for each window element.">Iterator</a> for the dataset </td></tr>
<tr id="row_0_11_3_0_7_" style="display:none;"><td class="entry"><span style="width:80px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1framework_1_1dataset_1_1_named_dataset.xhtml" target="_self">NamedDataset</a></td><td class="desc">Abstract implementation of a named dataset </td></tr>
<tr id="row_0_11_3_0_8_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span id="arr_0_11_3_0_8_" class="arrow" onclick="toggleFolder('0_11_3_0_8_')">&#9658;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1framework_1_1dataset_1_1_range_dataset.xhtml" target="_self">RangeDataset</a></td><td class="desc">Implementation of a dataset created from a range of values </td></tr>
<tr id="row_0_11_3_0_8_0_" style="display:none;"><td class="entry"><span style="width:96px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1test_1_1framework_1_1dataset_1_1_range_dataset_1_1iterator.xhtml" target="_self">iterator</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_iterator.xhtml" title="Iterator updated by execute_window_loop for each window element.">Iterator</a> for the dataset </td></tr>
<tr id="row_0_11_3_0_9_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span id="arr_0_11_3_0_9_" class="arrow" onclick="toggleFolder('0_11_3_0_9_')">&#9658;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1framework_1_1dataset_1_1_singleton_dataset.xhtml" target="_self">SingletonDataset</a></td><td class="desc">Implementation of a dataset holding a single value </td></tr>
<tr id="row_0_11_3_0_9_0_" style="display:none;"><td class="entry"><span style="width:96px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1test_1_1framework_1_1dataset_1_1_singleton_dataset_1_1iterator.xhtml" target="_self">iterator</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_iterator.xhtml" title="Iterator updated by execute_window_loop for each window element.">Iterator</a> for the dataset </td></tr>
<tr id="row_0_11_3_0_10_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span id="arr_0_11_3_0_10_" class="arrow" onclick="toggleFolder('0_11_3_0_10_')">&#9658;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1framework_1_1dataset_1_1_zip_dataset.xhtml" target="_self">ZipDataset</a></td><td class="desc">Implementation of a dataset representing pairs of values of the input datasets </td></tr>
<tr id="row_0_11_3_0_10_0_" style="display:none;"><td class="entry"><span style="width:96px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1test_1_1framework_1_1dataset_1_1_zip_dataset_1_1iterator.xhtml" target="_self">iterator</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_iterator.xhtml" title="Iterator updated by execute_window_loop for each window element.">Iterator</a> for the dataset </td></tr>
<tr id="row_0_11_3_1_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span id="arr_0_11_3_1_" class="arrow" onclick="toggleFolder('0_11_3_1_')">&#9658;</span><span class="icona"><span class="icon">N</span></span><a class="el" href="namespacearm__compute_1_1test_1_1framework_1_1detail.xhtml" target="_self">detail</a></td><td class="desc"></td></tr>
<tr id="row_0_11_3_1_0_" style="display:none;"><td class="entry"><span style="width:80px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1framework_1_1detail_1_1_test_case_registrar.xhtml" target="_self">TestCaseRegistrar</a></td><td class="desc">Helper class to statically register a test case </td></tr>
<tr id="row_0_11_3_1_1_" style="display:none;"><td class="entry"><span style="width:80px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1framework_1_1detail_1_1_test_suite_registrar.xhtml" target="_self">TestSuiteRegistrar</a></td><td class="desc">Helper class to statically begin and end a test suite </td></tr>
<tr id="row_0_11_3_2_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_common_options.xhtml" target="_self">CommonOptions</a></td><td class="desc">Common command line options used to configure the framework </td></tr>
<tr id="row_0_11_3_3_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_data_test_case.xhtml" target="_self">DataTestCase</a></td><td class="desc">Data test case class </td></tr>
<tr id="row_0_11_3_4_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_data_test_case_factory.xhtml" target="_self">DataTestCaseFactory</a></td><td class="desc">Implementation of a test case factory to create data test cases </td></tr>
<tr id="row_0_11_3_5_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_file_not_found.xhtml" target="_self">FileNotFound</a></td><td class="desc">Error class for when some external assets are missing </td></tr>
<tr id="row_0_11_3_6_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_fixture.xhtml" target="_self">Fixture</a></td><td class="desc">Abstract fixture class </td></tr>
<tr id="row_0_11_3_7_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml" target="_self">Framework</a></td><td class="desc">Main framework class </td></tr>
<tr id="row_0_11_3_8_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1test_1_1framework_1_1_framework_config.xhtml" target="_self">FrameworkConfig</a></td><td class="desc"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml" title="Main framework class.">Framework</a> configuration structure </td></tr>
<tr id="row_0_11_3_9_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml" target="_self">Instrument</a></td><td class="desc">Interface for classes that can be used to measure performance </td></tr>
<tr id="row_0_11_3_10_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1test_1_1framework_1_1_instruments_info.xhtml" target="_self">InstrumentsInfo</a></td><td class="desc"></td></tr>
<tr id="row_0_11_3_11_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instruments_stats.xhtml" target="_self">InstrumentsStats</a></td><td class="desc">Generate common statistics for a set of measurements </td></tr>
<tr id="row_0_11_3_12_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_i_scheduler_user.xhtml" target="_self">ISchedulerUser</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_scheduler.xhtml" title="Configurable scheduler which supports multiple multithreading APIs and choosing between different sch...">Scheduler</a> user interface </td></tr>
<tr id="row_0_11_3_13_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_j_s_o_n_printer.xhtml" target="_self">JSONPrinter</a></td><td class="desc">Implementation of a <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_printer.xhtml">Printer</a> that produces JSON output </td></tr>
<tr id="row_0_11_3_14_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_mali_counter.xhtml" target="_self">MaliCounter</a></td><td class="desc"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml" title="Interface for classes that can be used to measure performance.">Instrument</a> implementation for mali hw counters </td></tr>
<tr id="row_0_11_3_15_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span id="arr_0_11_3_15_" class="arrow" onclick="toggleFolder('0_11_3_15_')">&#9658;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1test_1_1framework_1_1_measurement.xhtml" target="_self">Measurement</a></td><td class="desc">Generic measurement that stores values as either double or long long int </td></tr>
<tr id="row_0_11_3_15_0_" style="display:none;"><td class="entry"><span style="width:80px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml" target="_self">Value</a></td><td class="desc"><a class="el" href="structarm__compute_1_1test_1_1framework_1_1_measurement.xhtml" title="Generic measurement that stores values as either double or long long int.">Measurement</a> value </td></tr>
<tr id="row_0_11_3_16_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_clock.xhtml" target="_self">OpenCLClock</a></td><td class="desc"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml" title="Interface for classes that can be used to measure performance.">Instrument</a> creating measurements based on the information returned by clGetEventProfilingInfo for each OpenCL kernel executed </td></tr>
<tr id="row_0_11_3_17_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml" target="_self">OpenCLMemoryUsage</a></td><td class="desc"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml" title="Interface for classes that can be used to measure performance.">Instrument</a> collecting memory usage information for OpenCL </td></tr>
<tr id="row_0_11_3_18_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_p_m_u.xhtml" target="_self">PMU</a></td><td class="desc">Class provides access to CPU hardware counters </td></tr>
<tr id="row_0_11_3_19_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_p_m_u_counter.xhtml" target="_self">PMUCounter</a></td><td class="desc">Implementation of an instrument to count CPU cycles </td></tr>
<tr id="row_0_11_3_20_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_pretty_printer.xhtml" target="_self">PrettyPrinter</a></td><td class="desc">Implementation of a <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_printer.xhtml">Printer</a> that produces human readable output </td></tr>
<tr id="row_0_11_3_21_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_printer.xhtml" target="_self">Printer</a></td><td class="desc">Abstract printer class used by the <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml">Framework</a> to present output </td></tr>
<tr id="row_0_11_3_22_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_profiler.xhtml" target="_self">Profiler</a></td><td class="desc"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_profiler.xhtml" title="Profiler class to collect benchmark numbers.">Profiler</a> class to collect benchmark numbers </td></tr>
<tr id="row_0_11_3_23_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span id="arr_0_11_3_23_" class="arrow" onclick="toggleFolder('0_11_3_23_')">&#9658;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml" target="_self">SchedulerClock</a></td><td class="desc"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml" title="Interface for classes that can be used to measure performance.">Instrument</a> creating measurements based on the information returned by clGetEventProfilingInfo for each OpenCL kernel executed </td></tr>
<tr id="row_0_11_3_23_0_" style="display:none;"><td class="entry"><span style="width:80px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1test_1_1framework_1_1_scheduler_clock_1_1kernel__info.xhtml" target="_self">kernel_info</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> information </td></tr>
<tr id="row_0_11_3_24_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_simple_test_case_factory.xhtml" target="_self">SimpleTestCaseFactory</a></td><td class="desc">Implementation of a test case factory to create non-data test cases </td></tr>
<tr id="row_0_11_3_25_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_test_case.xhtml" target="_self">TestCase</a></td><td class="desc">Abstract test case class </td></tr>
<tr id="row_0_11_3_26_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml" target="_self">TestCaseFactory</a></td><td class="desc">Abstract factory class to create test cases </td></tr>
<tr id="row_0_11_3_27_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_test_error.xhtml" target="_self">TestError</a></td><td class="desc">Error class for failures during test execution </td></tr>
<tr id="row_0_11_3_28_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_test_filter.xhtml" target="_self">TestFilter</a></td><td class="desc">Test filter class </td></tr>
<tr id="row_0_11_3_29_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1test_1_1framework_1_1_test_info.xhtml" target="_self">TestInfo</a></td><td class="desc">Information about a test case </td></tr>
<tr id="row_0_11_3_30_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1test_1_1framework_1_1_test_result.xhtml" target="_self">TestResult</a></td><td class="desc">Class to store results of a test </td></tr>
<tr id="row_0_11_3_31_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_wall_clock.xhtml" target="_self">WallClock</a></td><td class="desc">Implementation of an instrument to measure elapsed wall-clock time in milliseconds </td></tr>
<tr id="row_0_11_4_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span id="arr_0_11_4_" class="arrow" onclick="toggleFolder('0_11_4_')">&#9658;</span><span class="icona"><span class="icon">N</span></span><a class="el" href="namespacearm__compute_1_1test_1_1traits.xhtml" target="_self">traits</a></td><td class="desc"></td></tr>
<tr id="row_0_11_4_0_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1test_1_1traits_1_1promote.xhtml" target="_self">promote</a></td><td class="desc">Promote a type </td></tr>
<tr id="row_0_11_4_1_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1test_1_1traits_1_1promote_3_01float_01_4.xhtml" target="_self">promote&lt; float &gt;</a></td><td class="desc">Promote float to float </td></tr>
<tr id="row_0_11_4_2_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1test_1_1traits_1_1promote_3_01half_01_4.xhtml" target="_self">promote&lt; half &gt;</a></td><td class="desc">Promote half to half </td></tr>
<tr id="row_0_11_4_3_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1test_1_1traits_1_1promote_3_01int16__t_01_4.xhtml" target="_self">promote&lt; int16_t &gt;</a></td><td class="desc">Promote int16_t to int32_t </td></tr>
<tr id="row_0_11_4_4_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1test_1_1traits_1_1promote_3_01int32__t_01_4.xhtml" target="_self">promote&lt; int32_t &gt;</a></td><td class="desc">Promote int32_t to int64_t </td></tr>
<tr id="row_0_11_4_5_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1test_1_1traits_1_1promote_3_01int8__t_01_4.xhtml" target="_self">promote&lt; int8_t &gt;</a></td><td class="desc">Promote int8_t to int16_t </td></tr>
<tr id="row_0_11_4_6_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1test_1_1traits_1_1promote_3_01uint16__t_01_4.xhtml" target="_self">promote&lt; uint16_t &gt;</a></td><td class="desc">Promote uint16_t to uint32_t </td></tr>
<tr id="row_0_11_4_7_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1test_1_1traits_1_1promote_3_01uint32__t_01_4.xhtml" target="_self">promote&lt; uint32_t &gt;</a></td><td class="desc">Promote uint32_t to uint64_t </td></tr>
<tr id="row_0_11_4_8_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1test_1_1traits_1_1promote_3_01uint8__t_01_4.xhtml" target="_self">promote&lt; uint8_t &gt;</a></td><td class="desc">Promote uint8_t to uint16_t </td></tr>
<tr id="row_0_11_5_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span id="arr_0_11_5_" class="arrow" onclick="toggleFolder('0_11_5_')">&#9658;</span><span class="icona"><span class="icon">N</span></span><a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml" target="_self">validation</a></td><td class="desc"></td></tr>
<tr id="row_0_11_5_0_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_absolute_tolerance.xhtml" target="_self">AbsoluteTolerance</a></td><td class="desc">Class reprensenting an absolute tolerance value </td></tr>
<tr id="row_0_11_5_1_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1test_1_1validation_1_1_canny_edge_parameters.xhtml" target="_self">CannyEdgeParameters</a></td><td class="desc">Parameters of Canny edge algorithm </td></tr>
<tr id="row_0_11_5_2_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1test_1_1validation_1_1compare.xhtml" target="_self">compare</a></td><td class="desc"></td></tr>
<tr id="row_0_11_5_3_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1test_1_1validation_1_1compare_3_01_absolute_tolerance_3_01_u_01_4_01_4.xhtml" target="_self">compare&lt; AbsoluteTolerance&lt; U &gt; &gt;</a></td><td class="desc">Compare values with an absolute tolerance </td></tr>
<tr id="row_0_11_5_4_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1test_1_1validation_1_1compare_3_01_relative_tolerance_3_01_u_01_4_01_4.xhtml" target="_self">compare&lt; RelativeTolerance&lt; U &gt; &gt;</a></td><td class="desc">Compare values with a relative tolerance </td></tr>
<tr id="row_0_11_5_5_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1test_1_1validation_1_1compare__base.xhtml" target="_self">compare_base</a></td><td class="desc"></td></tr>
<tr id="row_0_11_5_6_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1test_1_1validation_1_1_harris_corners_parameters.xhtml" target="_self">HarrisCornersParameters</a></td><td class="desc">Parameters of Harris Corners algorithm </td></tr>
<tr id="row_0_11_5_7_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1test_1_1validation_1_1is__floating__point.xhtml" target="_self">is_floating_point</a></td><td class="desc"></td></tr>
<tr id="row_0_11_5_8_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1test_1_1validation_1_1is__floating__point_3_01half_01_4.xhtml" target="_self">is_floating_point&lt; half &gt;</a></td><td class="desc"></td></tr>
<tr id="row_0_11_5_9_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_relative_tolerance.xhtml" target="_self">RelativeTolerance</a></td><td class="desc">Class reprensenting a relative tolerance value </td></tr>
<tr id="row_0_11_6_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1_accessor.xhtml" target="_self">Accessor</a></td><td class="desc"><a class="el" href="classarm__compute_1_1test_1_1_accessor.xhtml" title="Accessor implementation for Tensor objects.">Accessor</a> implementation for <a class="el" href="classarm__compute_1_1_tensor.xhtml">Tensor</a> objects </td></tr>
<tr id="row_0_11_7_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1_array_accessor.xhtml" target="_self">ArrayAccessor</a></td><td class="desc"><a class="el" href="classarm__compute_1_1test_1_1_array_accessor.xhtml" title="ArrayAccessor implementation for Array objects.">ArrayAccessor</a> implementation for <a class="el" href="classarm__compute_1_1_array.xhtml">Array</a> objects </td></tr>
<tr id="row_0_11_8_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1_assets_library.xhtml" target="_self">AssetsLibrary</a></td><td class="desc">Factory class to create and fill tensors </td></tr>
<tr id="row_0_11_9_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1_c_l_accessor.xhtml" target="_self">CLAccessor</a></td><td class="desc"><a class="el" href="classarm__compute_1_1test_1_1_accessor.xhtml" title="Accessor implementation for Tensor objects.">Accessor</a> implementation for <a class="el" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a> objects </td></tr>
<tr id="row_0_11_10_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1_c_l_array_accessor.xhtml" target="_self">CLArrayAccessor</a></td><td class="desc"><a class="el" href="classarm__compute_1_1test_1_1_accessor.xhtml" title="Accessor implementation for Tensor objects.">Accessor</a> implementation for <a class="el" href="classarm__compute_1_1_c_l_array.xhtml">CLArray</a> objects </td></tr>
<tr id="row_0_11_11_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1_c_l_h_o_g_accessor.xhtml" target="_self">CLHOGAccessor</a></td><td class="desc"><a class="el" href="classarm__compute_1_1test_1_1_accessor.xhtml" title="Accessor implementation for Tensor objects.">Accessor</a> implementation for <a class="el" href="classarm__compute_1_1_c_l_h_o_g.xhtml">CLHOG</a> objects </td></tr>
<tr id="row_0_11_12_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1_c_l_lut_accessor.xhtml" target="_self">CLLutAccessor</a></td><td class="desc"><a class="el" href="classarm__compute_1_1test_1_1_accessor.xhtml" title="Accessor implementation for Tensor objects.">Accessor</a> implementation for <a class="el" href="classarm__compute_1_1_c_l_lut.xhtml">CLLut</a> objects </td></tr>
<tr id="row_0_11_13_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1_c_l_synthetize_function.xhtml" target="_self">CLSynthetizeFunction</a></td><td class="desc">This template synthetizes an <a class="el" href="classarm__compute_1_1_i_c_l_simple_function.xhtml" title="Basic interface for functions which have a single OpenCL kernel.">ICLSimpleFunction</a> which runs the given kernel K </td></tr>
<tr id="row_0_11_14_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1_c_l_synthetize_function_init_output_with_zero_and_with_zero_constant_border.xhtml" target="_self">CLSynthetizeFunctionInitOutputWithZeroAndWithZeroConstantBorder</a></td><td class="desc">As above but this also initializes to zero the input tensor </td></tr>
<tr id="row_0_11_15_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1_c_l_synthetize_function_with_zero_constant_border.xhtml" target="_self">CLSynthetizeFunctionWithZeroConstantBorder</a></td><td class="desc">As above but this also setups a Zero border on the input tensor of the specified bordersize </td></tr>
<tr id="row_0_11_16_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1test_1_1common__promoted__signed__type.xhtml" target="_self">common_promoted_signed_type</a></td><td class="desc">Find the signed promoted common type </td></tr>
<tr id="row_0_11_17_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1test_1_1common__promoted__unsigned__type.xhtml" target="_self">common_promoted_unsigned_type</a></td><td class="desc">Find the unsigned promoted common type </td></tr>
<tr id="row_0_11_18_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1_context_scheduler_user.xhtml" target="_self">ContextSchedulerUser</a></td><td class="desc"></td></tr>
<tr id="row_0_11_19_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1test_1_1_context_type.xhtml" target="_self">ContextType</a></td><td class="desc"></td></tr>
<tr id="row_0_11_20_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1test_1_1_context_type_3_01_tensor_01_4.xhtml" target="_self">ContextType&lt; Tensor &gt;</a></td><td class="desc"></td></tr>
<tr id="row_0_11_21_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1_g_c_accessor.xhtml" target="_self">GCAccessor</a></td><td class="desc"><a class="el" href="classarm__compute_1_1test_1_1_accessor.xhtml" title="Accessor implementation for Tensor objects.">Accessor</a> implementation for <a class="el" href="classarm__compute_1_1_g_c_tensor.xhtml">GCTensor</a> objects </td></tr>
<tr id="row_0_11_22_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1_h_o_g_accessor.xhtml" target="_self">HOGAccessor</a></td><td class="desc"><a class="el" href="classarm__compute_1_1test_1_1_accessor.xhtml" title="Accessor implementation for Tensor objects.">Accessor</a> implementation for <a class="el" href="classarm__compute_1_1_h_o_g.xhtml">HOG</a> objects </td></tr>
<tr id="row_0_11_23_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1_i_accessor.xhtml" target="_self">IAccessor</a></td><td class="desc">Common interface to provide information and access to tensor like structures </td></tr>
<tr id="row_0_11_24_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1_i_array_accessor.xhtml" target="_self">IArrayAccessor</a></td><td class="desc">Common interface to provide information and access to array like structures </td></tr>
<tr id="row_0_11_25_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1_i_h_o_g_accessor.xhtml" target="_self">IHOGAccessor</a></td><td class="desc">Common interface to access <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object.">HOG</a> structure </td></tr>
<tr id="row_0_11_26_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1_i_lut_accessor.xhtml" target="_self">ILutAccessor</a></td><td class="desc">Common interface to provide information and access to <a class="el" href="classarm__compute_1_1_lut.xhtml" title="Basic implementation of the LUT interface.">Lut</a> like structures </td></tr>
<tr id="row_0_11_27_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1_lut_accessor.xhtml" target="_self">LutAccessor</a></td><td class="desc"><a class="el" href="classarm__compute_1_1test_1_1_accessor.xhtml" title="Accessor implementation for Tensor objects.">Accessor</a> implementation for <a class="el" href="classarm__compute_1_1_lut.xhtml">Lut</a> objects </td></tr>
<tr id="row_0_11_28_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1_n_e_synthetize_function.xhtml" target="_self">NESynthetizeFunction</a></td><td class="desc">This template synthetizes an <a class="el" href="classarm__compute_1_1_i_n_e_simple_function.xhtml" title="Basic interface for functions which have a single NEON kernel.">INESimpleFunction</a> which runs the given kernel K </td></tr>
<tr id="row_0_11_29_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1_n_e_synthetize_function_with_zero_constant_border.xhtml" target="_self">NESynthetizeFunctionWithZeroConstantBorder</a></td><td class="desc">As above but this also setups a Zero border on the input tensor of the specified bordersize </td></tr>
<tr id="row_0_11_30_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1_n_e_synthetize_function_with_zero_constant_kernel_border.xhtml" target="_self">NESynthetizeFunctionWithZeroConstantKernelBorder</a></td><td class="desc">As above but this also setups a Zero border on the input tensor of the kernel's bordersize </td></tr>
<tr id="row_0_11_31_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1_padding_calculator.xhtml" target="_self">PaddingCalculator</a></td><td class="desc">Calculate required padding </td></tr>
<tr id="row_0_11_32_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1_parameters_library.xhtml" target="_self">ParametersLibrary</a></td><td class="desc">Class that contains all the global parameters used by the tests </td></tr>
<tr id="row_0_11_33_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1_raw_lut_accessor.xhtml" target="_self">RawLutAccessor</a></td><td class="desc"><a class="el" href="classarm__compute_1_1test_1_1_accessor.xhtml" title="Accessor implementation for Tensor objects.">Accessor</a> implementation for std::map-lut objects </td></tr>
<tr id="row_0_11_34_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml" target="_self">RawTensor</a></td><td class="desc">Subclass of <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml" title="Simple tensor object that stores elements in a consecutive chunk of memory.">SimpleTensor</a> using uint8_t as value type </td></tr>
<tr id="row_0_11_35_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml" target="_self">SimpleTensor</a></td><td class="desc">Simple tensor object that stores elements in a consecutive chunk of memory </td></tr>
<tr id="row_0_11_36_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor_accessor.xhtml" target="_self">SimpleTensorAccessor</a></td><td class="desc"><a class="el" href="classarm__compute_1_1test_1_1_accessor.xhtml" title="Accessor implementation for Tensor objects.">Accessor</a> implementation for <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a> objects </td></tr>
<tr id="row_0_11_37_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1test_1_1_tensor_cache.xhtml" target="_self">TensorCache</a></td><td class="desc">Stores <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> categorised by the image they are created from including name, format and channel </td></tr>
<tr id="row_0_12_" style="display:none;"><td class="entry"><span style="width:16px;display:inline-block;">&#160;</span><span id="arr_0_12_" class="arrow" onclick="toggleFolder('0_12_')">&#9658;</span><span class="icona"><span class="icon">N</span></span><a class="el" href="namespacearm__compute_1_1traits.xhtml" target="_self">traits</a></td><td class="desc"></td></tr>
<tr id="row_0_12_0_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1traits_1_1is__contained.xhtml" target="_self">is_contained</a></td><td class="desc">Check if a type T is contained in a tuple Tuple of types </td></tr>
<tr id="row_0_12_1_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1traits_1_1is__contained_3_01_t_00_01std_1_1tuple_3_01_t_00_01_ts_8_8_8_01_4_01_4.xhtml" target="_self">is_contained&lt; T, std::tuple&lt; T, Ts... &gt; &gt;</a></td><td class="desc"></td></tr>
<tr id="row_0_12_2_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1traits_1_1is__contained_3_01_t_00_01std_1_1tuple_3_01_u_00_01_ts_8_8_8_01_4_01_4.xhtml" target="_self">is_contained&lt; T, std::tuple&lt; U, Ts... &gt; &gt;</a></td><td class="desc"></td></tr>
<tr id="row_0_12_3_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1traits_1_1is__contained_3_01_t_00_01std_1_1tuple_3_4_01_4.xhtml" target="_self">is_contained&lt; T, std::tuple&lt;&gt; &gt;</a></td><td class="desc"></td></tr>
<tr id="row_0_13_" style="display:none;"><td class="entry"><span style="width:16px;display:inline-block;">&#160;</span><span id="arr_0_13_" class="arrow" onclick="toggleFolder('0_13_')">&#9658;</span><span class="icona"><span class="icon">N</span></span><a class="el" href="namespacearm__compute_1_1tuners.xhtml" target="_self">tuners</a></td><td class="desc"></td></tr>
<tr id="row_0_13_0_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1tuners_1_1_bifrost_tuner.xhtml" target="_self">BifrostTuner</a></td><td class="desc">Bifrost based OpenCL tuner implementation </td></tr>
<tr id="row_0_13_1_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1tuners_1_1_midgard_tuner.xhtml" target="_self">MidgardTuner</a></td><td class="desc">Midgard based OpenCL tuner implementation </td></tr>
<tr id="row_0_13_2_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1tuners_1_1_tuner_factory.xhtml" target="_self">TunerFactory</a></td><td class="desc">Tuner factory class </td></tr>
<tr id="row_0_14_" style="display:none;"><td class="entry"><span style="width:16px;display:inline-block;">&#160;</span><span id="arr_0_14_" class="arrow" onclick="toggleFolder('0_14_')">&#9658;</span><span class="icona"><span class="icon">N</span></span><a class="el" href="namespacearm__compute_1_1utility.xhtml" target="_self">utility</a></td><td class="desc"></td></tr>
<tr id="row_0_15_" style="display:none;"><td class="entry"><span style="width:16px;display:inline-block;">&#160;</span><span id="arr_0_15_" class="arrow" onclick="toggleFolder('0_15_')">&#9658;</span><span class="icona"><span class="icon">N</span></span><a class="el" href="namespacearm__compute_1_1utils.xhtml" target="_self">utils</a></td><td class="desc"></td></tr>
<tr id="row_0_15_0_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span id="arr_0_15_0_" class="arrow" onclick="toggleFolder('0_15_0_')">&#9658;</span><span class="icona"><span class="icon">N</span></span><a class="el" href="namespacearm__compute_1_1utils_1_1iterable.xhtml" target="_self">iterable</a></td><td class="desc"></td></tr>
<tr id="row_0_15_0_0_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1utils_1_1iterable_1_1reverse__iterable.xhtml" target="_self">reverse_iterable</a></td><td class="desc">Reverse range iterable class </td></tr>
<tr id="row_0_15_1_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span id="arr_0_15_1_" class="arrow" onclick="toggleFolder('0_15_1_')">&#9658;</span><span class="icona"><span class="icon">N</span></span><a class="el" href="namespacearm__compute_1_1utils_1_1mmap__io.xhtml" target="_self">mmap_io</a></td><td class="desc"></td></tr>
<tr id="row_0_15_1_0_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1utils_1_1mmap__io_1_1_m_mapped_file.xhtml" target="_self">MMappedFile</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_memory.xhtml" title="CPU implementation of memory object.">Memory</a> mapped file class </td></tr>
<tr id="row_0_15_2_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span id="arr_0_15_2_" class="arrow" onclick="toggleFolder('0_15_2_')">&#9658;</span><span class="icona"><span class="icon">N</span></span><a class="el" href="namespacearm__compute_1_1utils_1_1random.xhtml" target="_self">random</a></td><td class="desc"></td></tr>
<tr id="row_0_15_2_0_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1utils_1_1random_1_1_ranged_uniform_distribution.xhtml" target="_self">RangedUniformDistribution</a></td><td class="desc">Uniform distribution within a given number of sub-ranges </td></tr>
<tr id="row_0_15_3_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span id="arr_0_15_3_" class="arrow" onclick="toggleFolder('0_15_3_')">&#9658;</span><span class="icona"><span class="icon">N</span></span><a class="el" href="namespacearm__compute_1_1utils_1_1requires.xhtml" target="_self">requires</a></td><td class="desc"></td></tr>
<tr id="row_0_15_4_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span id="arr_0_15_4_" class="arrow" onclick="toggleFolder('0_15_4_')">&#9658;</span><span class="icona"><span class="icon">N</span></span><a class="el" href="namespacearm__compute_1_1utils_1_1traits.xhtml" target="_self">traits</a></td><td class="desc"></td></tr>
<tr id="row_0_15_4_0_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1utils_1_1traits_1_1is__floating__point.xhtml" target="_self">is_floating_point</a></td><td class="desc"></td></tr>
<tr id="row_0_15_4_1_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1utils_1_1traits_1_1is__floating__point_3_01half_01_4.xhtml" target="_self">is_floating_point&lt; half &gt;</a></td><td class="desc"></td></tr>
<tr id="row_0_15_5_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1utils_1_1_command_line_parser.xhtml" target="_self">CommandLineParser</a></td><td class="desc">Class to parse command line arguments </td></tr>
<tr id="row_0_15_6_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1utils_1_1_common_graph_options.xhtml" target="_self">CommonGraphOptions</a></td><td class="desc">Common command line options used to configure the graph examples </td></tr>
<tr id="row_0_15_7_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1utils_1_1_common_graph_params.xhtml" target="_self">CommonGraphParams</a></td><td class="desc">Structure holding all the common graph parameters </td></tr>
<tr id="row_0_15_8_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1utils_1_1_common_graph_validate_options.xhtml" target="_self">CommonGraphValidateOptions</a></td><td class="desc"><a class="el" href="classarm__compute_1_1utils_1_1_common_graph_validate_options.xhtml" title="CommonGraphValidateOptions command line options used to configure the graph examples.">CommonGraphValidateOptions</a> command line options used to configure the graph examples </td></tr>
<tr id="row_0_15_9_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1utils_1_1_common_params.xhtml" target="_self">CommonParams</a></td><td class="desc">Structure holding all the graph <a class="el" href="classarm__compute_1_1utils_1_1_example.xhtml" title="Abstract Example class.">Example</a> parameters </td></tr>
<tr id="row_0_15_10_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1utils_1_1_convolution_params.xhtml" target="_self">ConvolutionParams</a></td><td class="desc">Structure holding all the Convolution layer graph parameters </td></tr>
<tr id="row_0_15_11_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1utils_1_1_enum_list_option.xhtml" target="_self">EnumListOption</a></td><td class="desc">Implementation of an option that accepts any number of values from a fixed set </td></tr>
<tr id="row_0_15_12_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1utils_1_1_enum_option.xhtml" target="_self">EnumOption</a></td><td class="desc">Implementation of a simple option that accepts a value from a fixed set </td></tr>
<tr id="row_0_15_13_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1utils_1_1_example.xhtml" target="_self">Example</a></td><td class="desc">Abstract <a class="el" href="classarm__compute_1_1utils_1_1_example.xhtml" title="Abstract Example class.">Example</a> class </td></tr>
<tr id="row_0_15_14_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1utils_1_1_example_params.xhtml" target="_self">ExampleParams</a></td><td class="desc">Structure holding all the graph <a class="el" href="classarm__compute_1_1utils_1_1_example.xhtml" title="Abstract Example class.">Example</a> parameters </td></tr>
<tr id="row_0_15_15_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1utils_1_1_file_image_feeder.xhtml" target="_self">FileImageFeeder</a></td><td class="desc">File <a class="el" href="struct_image.xhtml" title="Structure to hold Image information.">Image</a> feeder concrete implementation </td></tr>
<tr id="row_0_15_16_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1utils_1_1_framework_params.xhtml" target="_self">FrameworkParams</a></td><td class="desc">Structure holding all the common graph parameters </td></tr>
<tr id="row_0_15_17_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1utils_1_1_fully_connected_params.xhtml" target="_self">FullyConnectedParams</a></td><td class="desc">Structure holding all the fully_connected layer graph parameters </td></tr>
<tr id="row_0_15_18_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1utils_1_1_graph_validate_example.xhtml" target="_self">GraphValidateExample</a></td><td class="desc"></td></tr>
<tr id="row_0_15_19_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1utils_1_1_i_image_data_feeder.xhtml" target="_self">IImageDataFeeder</a></td><td class="desc"><a class="el" href="struct_image.xhtml" title="Structure to hold Image information.">Image</a> feeder interface </td></tr>
<tr id="row_0_15_20_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1utils_1_1_i_image_loader.xhtml" target="_self">IImageLoader</a></td><td class="desc"><a class="el" href="struct_image.xhtml" title="Structure to hold Image information.">Image</a> loader interface </td></tr>
<tr id="row_0_15_21_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1utils_1_1_image_loader_factory.xhtml" target="_self">ImageLoaderFactory</a></td><td class="desc">Factory for generating appropriate image loader </td></tr>
<tr id="row_0_15_22_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1utils_1_1_j_p_e_g_loader.xhtml" target="_self">JPEGLoader</a></td><td class="desc">Class to load the content of a JPEG file into an <a class="el" href="struct_image.xhtml" title="Structure to hold Image information.">Image</a> </td></tr>
<tr id="row_0_15_23_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1utils_1_1_list_option.xhtml" target="_self">ListOption</a></td><td class="desc">Implementation of an option that accepts any number of values </td></tr>
<tr id="row_0_15_24_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1utils_1_1_memory_image_feeder.xhtml" target="_self">MemoryImageFeeder</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_memory.xhtml" title="CPU implementation of memory object.">Memory</a> <a class="el" href="struct_image.xhtml" title="Structure to hold Image information.">Image</a> feeder concrete implementation </td></tr>
<tr id="row_0_15_25_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1utils_1_1_n_p_y_loader.xhtml" target="_self">NPYLoader</a></td><td class="desc">Numpy data loader </td></tr>
<tr id="row_0_15_26_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1utils_1_1_option.xhtml" target="_self">Option</a></td><td class="desc">Abstract base class for a command line option </td></tr>
<tr id="row_0_15_27_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1utils_1_1_p_p_m_loader.xhtml" target="_self">PPMLoader</a></td><td class="desc">PPM <a class="el" href="struct_image.xhtml" title="Structure to hold Image information.">Image</a> loader concrete implementation </td></tr>
<tr id="row_0_15_28_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1utils_1_1_simple_option.xhtml" target="_self">SimpleOption</a></td><td class="desc">Implementation of an option that accepts a single value </td></tr>
<tr id="row_0_15_29_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1utils_1_1_tensor_params.xhtml" target="_self">TensorParams</a></td><td class="desc">Structure holding all the input tensor graph parameters </td></tr>
<tr id="row_0_15_30_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1utils_1_1_toggle_option.xhtml" target="_self">ToggleOption</a></td><td class="desc">Implementation of an option that can be either true or false </td></tr>
<tr id="row_0_15_31_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1utils_1_1uniform__real__distribution__fp16.xhtml" target="_self">uniform_real_distribution_fp16</a></td><td class="desc">Specialized class to generate random non-zero FP16 values </td></tr>
<tr id="row_0_15_32_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1utils_1_1_validate_example.xhtml" target="_self">ValidateExample</a></td><td class="desc">Abstract <a class="el" href="classarm__compute_1_1utils_1_1_validate_example.xhtml" title="Abstract ValidateExample class.">ValidateExample</a> class </td></tr>
<tr id="row_0_15_33_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1utils_1_1_verification_params.xhtml" target="_self">VerificationParams</a></td><td class="desc">Structure holding all the verification graph parameters </td></tr>
<tr id="row_0_15_34_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml" target="_self">VerifyAccessor</a></td><td class="desc">Graph example validation accessor class </td></tr>
<tr id="row_0_16_" style="display:none;"><td class="entry"><span style="width:16px;display:inline-block;">&#160;</span><span id="arr_0_16_" class="arrow" onclick="toggleFolder('0_16_')">&#9658;</span><span class="icona"><span class="icon">N</span></span><a class="el" href="namespacearm__compute_1_1weights__transformations.xhtml" target="_self">weights_transformations</a></td><td class="desc"></td></tr>
<tr id="row_0_16_0_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1weights__transformations_1_1_c_l_convert_fully_connected_weights_managed.xhtml" target="_self">CLConvertFullyConnectedWeightsManaged</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_convert_fully_connected_weights_kernel.xhtml">CLConvertFullyConnectedWeightsKernel</a> </td></tr>
<tr id="row_0_16_1_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1weights__transformations_1_1_c_l_convolution_layer_reshape_weights_transform.xhtml" target="_self">CLConvolutionLayerReshapeWeightsTransform</a></td><td class="desc">Basic function to manage the reshape weights generated from <a class="el" href="classarm__compute_1_1_c_l_convolution_layer_reshape_weights.xhtml">CLConvolutionLayerReshapeWeights</a> </td></tr>
<tr id="row_0_16_2_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1weights__transformations_1_1_c_l_fully_connected_layer_reshape_weights_managed.xhtml" target="_self">CLFullyConnectedLayerReshapeWeightsManaged</a></td><td class="desc">Basic function to manage the reshape weights generated from <a class="el" href="classarm__compute_1_1_c_l_fully_connected_layer_reshape_weights.xhtml">CLFullyConnectedLayerReshapeWeights</a> </td></tr>
<tr id="row_0_16_3_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1weights__transformations_1_1_c_l_g_e_m_m_reshape_r_h_s_matrix_kernel_managed.xhtml" target="_self">CLGEMMReshapeRHSMatrixKernelManaged</a></td><td class="desc">Basic function to manage the reshape weights generated from <a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_reshape_r_h_s_matrix_kernel.xhtml">CLGEMMReshapeRHSMatrixKernel</a> </td></tr>
<tr id="row_0_16_4_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1weights__transformations_1_1_n_e_convert_fully_connected_weights_managed.xhtml" target="_self">NEConvertFullyConnectedWeightsManaged</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_convert_fully_connected_weights_kernel.xhtml">NEConvertFullyConnectedWeightsKernel</a> </td></tr>
<tr id="row_0_16_5_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1weights__transformations_1_1_n_e_convolution_layer_reshape_weights_transform.xhtml" target="_self">NEConvolutionLayerReshapeWeightsTransform</a></td><td class="desc">Basic function to manage the reshape weights generated from <a class="el" href="classarm__compute_1_1_n_e_convolution_layer_reshape_weights.xhtml">NEConvolutionLayerReshapeWeights</a> </td></tr>
<tr id="row_0_16_6_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1weights__transformations_1_1_n_e_fully_connected_layer_reshape_weights_managed.xhtml" target="_self">NEFullyConnectedLayerReshapeWeightsManaged</a></td><td class="desc">Basic function to manage the reshape weights generated from <a class="el" href="classarm__compute_1_1_n_e_fully_connected_layer_reshape_weights.xhtml">NEFullyConnectedLayerReshapeWeights</a> </td></tr>
<tr id="row_0_17_" style="display:none;"><td class="entry"><span style="width:16px;display:inline-block;">&#160;</span><span id="arr_0_17_" class="arrow" onclick="toggleFolder('0_17_')">&#9658;</span><span class="icona"><span class="icon">N</span></span><a class="el" href="namespacearm__compute_1_1wrapper.xhtml" target="_self">wrapper</a></td><td class="desc"></td></tr>
<tr id="row_0_17_0_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span id="arr_0_17_0_" class="arrow" onclick="toggleFolder('0_17_0_')">&#9658;</span><span class="icona"><span class="icon">N</span></span><a class="el" href="namespacearm__compute_1_1wrapper_1_1traits.xhtml" target="_self">traits</a></td><td class="desc"></td></tr>
<tr id="row_0_17_0_0_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1wrapper_1_1traits_1_1neon__bitvector.xhtml" target="_self">neon_bitvector</a></td><td class="desc">Create the appropriate NEON vector given its type and size in terms of bits </td></tr>
<tr id="row_0_17_0_1_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1wrapper_1_1traits_1_1neon__vector.xhtml" target="_self">neon_vector</a></td><td class="desc">Create the appropriate NEON vector given its type and size in terms of elements </td></tr>
<tr id="row_0_17_0_2_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1wrapper_1_1traits_1_1promote.xhtml" target="_self">promote</a></td><td class="desc">Promote a type </td></tr>
<tr id="row_0_17_0_3_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1wrapper_1_1traits_1_1promote_3_01float_01_4.xhtml" target="_self">promote&lt; float &gt;</a></td><td class="desc"></td></tr>
<tr id="row_0_17_0_4_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1wrapper_1_1traits_1_1promote_3_01half_01_4.xhtml" target="_self">promote&lt; half &gt;</a></td><td class="desc"></td></tr>
<tr id="row_0_17_0_5_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1wrapper_1_1traits_1_1promote_3_01int16__t_01_4.xhtml" target="_self">promote&lt; int16_t &gt;</a></td><td class="desc"></td></tr>
<tr id="row_0_17_0_6_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1wrapper_1_1traits_1_1promote_3_01int32__t_01_4.xhtml" target="_self">promote&lt; int32_t &gt;</a></td><td class="desc"></td></tr>
<tr id="row_0_17_0_7_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1wrapper_1_1traits_1_1promote_3_01int8__t_01_4.xhtml" target="_self">promote&lt; int8_t &gt;</a></td><td class="desc"></td></tr>
<tr id="row_0_17_0_8_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1wrapper_1_1traits_1_1promote_3_01uint16__t_01_4.xhtml" target="_self">promote&lt; uint16_t &gt;</a></td><td class="desc"></td></tr>
<tr id="row_0_17_0_9_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1wrapper_1_1traits_1_1promote_3_01uint32__t_01_4.xhtml" target="_self">promote&lt; uint32_t &gt;</a></td><td class="desc"></td></tr>
<tr id="row_0_17_0_10_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1wrapper_1_1traits_1_1promote_3_01uint8__t_01_4.xhtml" target="_self">promote&lt; uint8_t &gt;</a></td><td class="desc"></td></tr>
<tr id="row_0_17_0_11_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1wrapper_1_1traits_1_1vector__128__tag.xhtml" target="_self">vector_128_tag</a></td><td class="desc">128-bit vector tag </td></tr>
<tr id="row_0_17_0_12_" style="display:none;"><td class="entry"><span style="width:64px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1wrapper_1_1traits_1_1vector__64__tag.xhtml" target="_self">vector_64_tag</a></td><td class="desc">64-bit vector tag </td></tr>
<tr id="row_0_18_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_access_window_auto_padding.xhtml" target="_self">AccessWindowAutoPadding</a></td><td class="desc">Dummy access window </td></tr>
<tr id="row_0_19_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_access_window_horizontal.xhtml" target="_self">AccessWindowHorizontal</a></td><td class="desc">Implementation of a row access pattern </td></tr>
<tr id="row_0_20_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_access_window_rectangle.xhtml" target="_self">AccessWindowRectangle</a></td><td class="desc">Implementation of a rectangular access pattern </td></tr>
<tr id="row_0_21_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_access_window_static.xhtml" target="_self">AccessWindowStatic</a></td><td class="desc">Implementation of a static rectangular access pattern </td></tr>
<tr id="row_0_22_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_access_window_transpose.xhtml" target="_self">AccessWindowTranspose</a></td><td class="desc">Implementation of a XY-transpose access pattern </td></tr>
<tr id="row_0_23_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_access_window_vertical.xhtml" target="_self">AccessWindowVertical</a></td><td class="desc">Implementation of a column access pattern </td></tr>
<tr id="row_0_24_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml" target="_self">ActivationLayerInfo</a></td><td class="desc">Activation Layer Information class </td></tr>
<tr id="row_0_25_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_allocator.xhtml" target="_self">Allocator</a></td><td class="desc">Default malloc allocator implementation </td></tr>
<tr id="row_0_26_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_array.xhtml" target="_self">Array</a></td><td class="desc">Basic implementation of the <a class="el" href="classarm__compute_1_1_i_array.xhtml" title="Array of type T.">IArray</a> interface which allocates a static number of T values </td></tr>
<tr id="row_0_27_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1_blob_info.xhtml" target="_self">BlobInfo</a></td><td class="desc">Meta-data information for each blob </td></tr>
<tr id="row_0_28_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_blob_lifetime_manager.xhtml" target="_self">BlobLifetimeManager</a></td><td class="desc">Concrete class that tracks the lifetime of registered tensors and calculates the systems memory requirements in terms of blobs </td></tr>
<tr id="row_0_29_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_blob_memory_pool.xhtml" target="_self">BlobMemoryPool</a></td><td class="desc">Blob memory pool </td></tr>
<tr id="row_0_30_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1_border_size.xhtml" target="_self">BorderSize</a></td><td class="desc">Container for 2D border size </td></tr>
<tr id="row_0_31_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_bounding_box_transform_info.xhtml" target="_self">BoundingBoxTransformInfo</a></td><td class="desc">Bounding Box Transform information class </td></tr>
<tr id="row_0_32_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_box_n_m_s_limit_info.xhtml" target="_self">BoxNMSLimitInfo</a></td><td class="desc">BoxWithNonMaximaSuppressionLimit Information class </td></tr>
<tr id="row_0_33_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_abs_layer.xhtml" target="_self">CLAbsLayer</a></td><td class="desc">Basic function to get the absolute value of an input tensor </td></tr>
<tr id="row_0_34_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_absolute_difference.xhtml" target="_self">CLAbsoluteDifference</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_absolute_difference_kernel.xhtml">CLAbsoluteDifferenceKernel</a> </td></tr>
<tr id="row_0_35_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_absolute_difference_kernel.xhtml" target="_self">CLAbsoluteDifferenceKernel</a></td><td class="desc">Interface for the absolute difference kernel </td></tr>
<tr id="row_0_36_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_accumulate.xhtml" target="_self">CLAccumulate</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_accumulate_kernel.xhtml">CLAccumulateKernel</a> </td></tr>
<tr id="row_0_37_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_accumulate_kernel.xhtml" target="_self">CLAccumulateKernel</a></td><td class="desc">Interface for the accumulate kernel </td></tr>
<tr id="row_0_38_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_accumulate_squared.xhtml" target="_self">CLAccumulateSquared</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_accumulate_squared_kernel.xhtml">CLAccumulateSquaredKernel</a> </td></tr>
<tr id="row_0_39_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_accumulate_squared_kernel.xhtml" target="_self">CLAccumulateSquaredKernel</a></td><td class="desc">Interface for the accumulate squared kernel </td></tr>
<tr id="row_0_40_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_accumulate_weighted.xhtml" target="_self">CLAccumulateWeighted</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_accumulate_weighted_kernel.xhtml">CLAccumulateWeightedKernel</a> </td></tr>
<tr id="row_0_41_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_accumulate_weighted_kernel.xhtml" target="_self">CLAccumulateWeightedKernel</a></td><td class="desc">Interface for the accumulate weighted kernel </td></tr>
<tr id="row_0_42_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_activation_layer.xhtml" target="_self">CLActivationLayer</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_activation_layer_kernel.xhtml">CLActivationLayerKernel</a> </td></tr>
<tr id="row_0_43_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_activation_layer_kernel.xhtml" target="_self">CLActivationLayerKernel</a></td><td class="desc">Interface for the activation layer kernel </td></tr>
<tr id="row_0_44_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_arg_min_max_layer.xhtml" target="_self">CLArgMinMaxLayer</a></td><td class="desc">Function to calculate the index of the minimum or maximum values in a tensor based on an axis </td></tr>
<tr id="row_0_45_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_arg_min_max_layer_kernel.xhtml" target="_self">CLArgMinMaxLayerKernel</a></td><td class="desc">Interface for the reduction operation kernel </td></tr>
<tr id="row_0_46_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml" target="_self">CLArithmeticAddition</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_saturated_arithmetic_operation_kernel.xhtml">CLSaturatedArithmeticOperationKernel</a> for addition </td></tr>
<tr id="row_0_47_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_arithmetic_division.xhtml" target="_self">CLArithmeticDivision</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_saturated_arithmetic_operation_kernel.xhtml">CLSaturatedArithmeticOperationKernel</a> for division </td></tr>
<tr id="row_0_48_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_arithmetic_operation_kernel.xhtml" target="_self">CLArithmeticOperationKernel</a></td><td class="desc"></td></tr>
<tr id="row_0_49_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_arithmetic_subtraction.xhtml" target="_self">CLArithmeticSubtraction</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_saturated_arithmetic_operation_kernel.xhtml">CLSaturatedArithmeticOperationKernel</a> for subtraction </td></tr>
<tr id="row_0_50_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_array.xhtml" target="_self">CLArray</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_c_l_array.xhtml" title="CLArray implementation.">CLArray</a> implementation </td></tr>
<tr id="row_0_51_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_batch_concatenate_layer_kernel.xhtml" target="_self">CLBatchConcatenateLayerKernel</a></td><td class="desc">Interface for the batch concatenate kernel </td></tr>
<tr id="row_0_52_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_batch_normalization_layer.xhtml" target="_self">CLBatchNormalizationLayer</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_normalization_layer_kernel.xhtml">CLNormalizationLayerKernel</a> and simulate a batch normalization layer </td></tr>
<tr id="row_0_53_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_batch_normalization_layer_kernel.xhtml" target="_self">CLBatchNormalizationLayerKernel</a></td><td class="desc">Interface for the BatchNormalization layer kernel </td></tr>
<tr id="row_0_54_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_batch_to_space_layer.xhtml" target="_self">CLBatchToSpaceLayer</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_batch_to_space_layer_kernel.xhtml">CLBatchToSpaceLayerKernel</a> </td></tr>
<tr id="row_0_55_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_batch_to_space_layer_kernel.xhtml" target="_self">CLBatchToSpaceLayerKernel</a></td><td class="desc">Interface for the batch to space kernel </td></tr>
<tr id="row_0_56_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_bitwise_and.xhtml" target="_self">CLBitwiseAnd</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_bitwise_and_kernel.xhtml">CLBitwiseAndKernel</a> </td></tr>
<tr id="row_0_57_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_bitwise_and_kernel.xhtml" target="_self">CLBitwiseAndKernel</a></td><td class="desc">Interface for the bitwise AND operation kernel </td></tr>
<tr id="row_0_58_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_bitwise_not.xhtml" target="_self">CLBitwiseNot</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_bitwise_not_kernel.xhtml">CLBitwiseNotKernel</a> </td></tr>
<tr id="row_0_59_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_bitwise_not_kernel.xhtml" target="_self">CLBitwiseNotKernel</a></td><td class="desc">Interface for the bitwise NOT operation kernel </td></tr>
<tr id="row_0_60_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_bitwise_or.xhtml" target="_self">CLBitwiseOr</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_bitwise_or_kernel.xhtml">CLBitwiseOrKernel</a> </td></tr>
<tr id="row_0_61_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_bitwise_or_kernel.xhtml" target="_self">CLBitwiseOrKernel</a></td><td class="desc">Interface for the bitwise OR operation kernel </td></tr>
<tr id="row_0_62_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_bitwise_xor.xhtml" target="_self">CLBitwiseXor</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_bitwise_xor_kernel.xhtml">CLBitwiseXorKernel</a> </td></tr>
<tr id="row_0_63_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_bitwise_xor_kernel.xhtml" target="_self">CLBitwiseXorKernel</a></td><td class="desc">Interface for the bitwise XOR operation kernel </td></tr>
<tr id="row_0_64_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_bounding_box_transform.xhtml" target="_self">CLBoundingBoxTransform</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_bounding_box_transform_kernel.xhtml">CLBoundingBoxTransformKernel</a> </td></tr>
<tr id="row_0_65_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_bounding_box_transform_kernel.xhtml" target="_self">CLBoundingBoxTransformKernel</a></td><td class="desc">Interface for the bounding box kernel </td></tr>
<tr id="row_0_66_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_box3x3.xhtml" target="_self">CLBox3x3</a></td><td class="desc">Basic function to execute box filter 3x3 </td></tr>
<tr id="row_0_67_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_box3x3_kernel.xhtml" target="_self">CLBox3x3Kernel</a></td><td class="desc">Interface for the box 3x3 filter kernel </td></tr>
<tr id="row_0_68_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_buffer_allocator.xhtml" target="_self">CLBufferAllocator</a></td><td class="desc">Default OpenCL cl buffer allocator implementation </td></tr>
<tr id="row_0_69_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_buffer_memory_region.xhtml" target="_self">CLBufferMemoryRegion</a></td><td class="desc">OpenCL buffer memory region implementation </td></tr>
<tr id="row_0_70_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_build_options.xhtml" target="_self">CLBuildOptions</a></td><td class="desc">Build options </td></tr>
<tr id="row_0_71_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_canny_edge.xhtml" target="_self">CLCannyEdge</a></td><td class="desc">Basic function to execute canny edge on OpenCL </td></tr>
<tr id="row_0_72_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_cast.xhtml" target="_self">CLCast</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_depth_convert_layer_kernel.xhtml">CLDepthConvertLayerKernel</a> </td></tr>
<tr id="row_0_73_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_channel_combine.xhtml" target="_self">CLChannelCombine</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_channel_combine_kernel.xhtml">CLChannelCombineKernel</a> to perform channel combination </td></tr>
<tr id="row_0_74_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_channel_combine_kernel.xhtml" target="_self">CLChannelCombineKernel</a></td><td class="desc">Interface for the channel combine kernel </td></tr>
<tr id="row_0_75_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_channel_extract.xhtml" target="_self">CLChannelExtract</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_channel_extract_kernel.xhtml">CLChannelExtractKernel</a> to perform channel extraction </td></tr>
<tr id="row_0_76_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_channel_extract_kernel.xhtml" target="_self">CLChannelExtractKernel</a></td><td class="desc">Interface for the channel extract kernel </td></tr>
<tr id="row_0_77_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_channel_shuffle_layer.xhtml" target="_self">CLChannelShuffleLayer</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_channel_shuffle_layer_kernel.xhtml">CLChannelShuffleLayerKernel</a> </td></tr>
<tr id="row_0_78_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_channel_shuffle_layer_kernel.xhtml" target="_self">CLChannelShuffleLayerKernel</a></td><td class="desc">Interface for the channel shuffle kernel </td></tr>
<tr id="row_0_79_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_coarse_s_v_m_memory_region.xhtml" target="_self">CLCoarseSVMMemoryRegion</a></td><td class="desc">OpenCL coarse-grain SVM memory region implementation </td></tr>
<tr id="row_0_80_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1_c_l_coefficient_table.xhtml" target="_self">CLCoefficientTable</a></td><td class="desc">Structure for storing Spatial Gradient Matrix and the minimum eigenvalue for each keypoint </td></tr>
<tr id="row_0_81_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_col2_im_kernel.xhtml" target="_self">CLCol2ImKernel</a></td><td class="desc">Interface for the col2im reshaping kernel </td></tr>
<tr id="row_0_82_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_color_convert.xhtml" target="_self">CLColorConvert</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_color_convert_kernel.xhtml">CLColorConvertKernel</a> </td></tr>
<tr id="row_0_83_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_color_convert_kernel.xhtml" target="_self">CLColorConvertKernel</a></td><td class="desc">Interface for the color convert kernel </td></tr>
<tr id="row_0_84_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_comparison.xhtml" target="_self">CLComparison</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_comparison_kernel.xhtml">CLComparisonKernel</a> </td></tr>
<tr id="row_0_85_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_comparison_kernel.xhtml" target="_self">CLComparisonKernel</a></td><td class="desc">Interface for the comparison kernel </td></tr>
<tr id="row_0_86_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_comparison_static.xhtml" target="_self">CLComparisonStatic</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_comparison_kernel.xhtml">CLComparisonKernel</a> </td></tr>
<tr id="row_0_87_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_complex_pixel_wise_multiplication.xhtml" target="_self">CLComplexPixelWiseMultiplication</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_complex_pixel_wise_multiplication_kernel.xhtml">CLComplexPixelWiseMultiplicationKernel</a> </td></tr>
<tr id="row_0_88_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_complex_pixel_wise_multiplication_kernel.xhtml" target="_self">CLComplexPixelWiseMultiplicationKernel</a></td><td class="desc">Interface for the complex pixelwise multiplication kernel </td></tr>
<tr id="row_0_89_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_compute_all_anchors.xhtml" target="_self">CLComputeAllAnchors</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_compute_all_anchors_kernel.xhtml">CLComputeAllAnchorsKernel</a> </td></tr>
<tr id="row_0_90_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_compute_all_anchors_kernel.xhtml" target="_self">CLComputeAllAnchorsKernel</a></td><td class="desc">Interface for Compute All Anchors kernel </td></tr>
<tr id="row_0_91_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_concatenate_layer.xhtml" target="_self">CLConcatenateLayer</a></td><td class="desc">Basic function to execute concatenate tensors along a given axis </td></tr>
<tr id="row_0_92_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_convert_fully_connected_weights.xhtml" target="_self">CLConvertFullyConnectedWeights</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_convert_fully_connected_weights_kernel.xhtml">CLConvertFullyConnectedWeightsKernel</a> </td></tr>
<tr id="row_0_93_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_convert_fully_connected_weights_kernel.xhtml" target="_self">CLConvertFullyConnectedWeightsKernel</a></td><td class="desc">Interface to convert the 2D Fully Connected weights from NCHW to NHWC or vice versa </td></tr>
<tr id="row_0_94_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_convolution3x3.xhtml" target="_self">CLConvolution3x3</a></td><td class="desc">Basic function to execute convolution of size 3x3 </td></tr>
<tr id="row_0_95_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_convolution_kernel.xhtml" target="_self">CLConvolutionKernel</a></td><td class="desc">Interface for the kernel to run an arbitrary size convolution on a tensor </td></tr>
<tr id="row_0_96_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_convolution_layer.xhtml" target="_self">CLConvolutionLayer</a></td><td class="desc">Basic function to compute the convolution layer </td></tr>
<tr id="row_0_97_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_convolution_layer_reshape_weights.xhtml" target="_self">CLConvolutionLayerReshapeWeights</a></td><td class="desc">Function to reshape and transpose the weights </td></tr>
<tr id="row_0_98_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_convolution_rectangle.xhtml" target="_self">CLConvolutionRectangle</a></td><td class="desc">Basic function to execute non-square convolution </td></tr>
<tr id="row_0_99_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_convolution_rectangle_kernel.xhtml" target="_self">CLConvolutionRectangleKernel</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> for the running convolution on a rectangle matrix </td></tr>
<tr id="row_0_100_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_convolution_square.xhtml" target="_self">CLConvolutionSquare</a></td><td class="desc">Basic function to execute square convolution.Currently it supports 5x5, 7x7, 9x9 </td></tr>
<tr id="row_0_101_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_copy.xhtml" target="_self">CLCopy</a></td><td class="desc"></td></tr>
<tr id="row_0_102_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_copy_kernel.xhtml" target="_self">CLCopyKernel</a></td><td class="desc">OpenCL kernel to perform a copy between two tensors </td></tr>
<tr id="row_0_103_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_copy_to_array_kernel.xhtml" target="_self">CLCopyToArrayKernel</a></td><td class="desc">CL kernel to copy keypoints information to ICLKeyPointArray and counts the number of key points </td></tr>
<tr id="row_0_104_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_core_runtime_context.xhtml" target="_self">CLCoreRuntimeContext</a></td><td class="desc">Core runtime context for OpenCL </td></tr>
<tr id="row_0_105_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_crop_kernel.xhtml" target="_self">CLCropKernel</a></td><td class="desc">OpenCL kernel to perform a copy between two tensors </td></tr>
<tr id="row_0_106_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_crop_resize.xhtml" target="_self">CLCropResize</a></td><td class="desc">Function to perform cropping and resizing </td></tr>
<tr id="row_0_107_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_deconvolution_layer.xhtml" target="_self">CLDeconvolutionLayer</a></td><td class="desc">Basic function to compute the deconvolution layer </td></tr>
<tr id="row_0_108_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_deconvolution_layer_upsample.xhtml" target="_self">CLDeconvolutionLayerUpsample</a></td><td class="desc">Basic function to execute deconvolution upsample on OpenCL </td></tr>
<tr id="row_0_109_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_deconvolution_layer_upsample_kernel.xhtml" target="_self">CLDeconvolutionLayerUpsampleKernel</a></td><td class="desc">Interface for the Deconvolution layer kernel on OpenCL </td></tr>
<tr id="row_0_110_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_deconvolution_reshape_output_kernel.xhtml" target="_self">CLDeconvolutionReshapeOutputKernel</a></td><td class="desc">Interface for the OpenCL kernel to be used for reshaping the tensor before returning the result of deconvolution </td></tr>
<tr id="row_0_111_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_depth_concatenate_layer_kernel.xhtml" target="_self">CLDepthConcatenateLayerKernel</a></td><td class="desc">Interface for the depth concatenate kernel </td></tr>
<tr id="row_0_112_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_depth_convert_layer.xhtml" target="_self">CLDepthConvertLayer</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_depth_convert_layer_kernel.xhtml">CLDepthConvertLayerKernel</a> </td></tr>
<tr id="row_0_113_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_depth_convert_layer_kernel.xhtml" target="_self">CLDepthConvertLayerKernel</a></td><td class="desc">Interface for the depth conversion kernel </td></tr>
<tr id="row_0_114_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_depth_to_space_layer.xhtml" target="_self">CLDepthToSpaceLayer</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_depth_to_space_layer_kernel.xhtml">CLDepthToSpaceLayerKernel</a> </td></tr>
<tr id="row_0_115_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_depth_to_space_layer_kernel.xhtml" target="_self">CLDepthToSpaceLayerKernel</a></td><td class="desc">Interface for the depth to space kernel </td></tr>
<tr id="row_0_116_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_depthwise_convolution_layer.xhtml" target="_self">CLDepthwiseConvolutionLayer</a></td><td class="desc">Function to execute a depthwise convolution </td></tr>
<tr id="row_0_117_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_depthwise_convolution_layer3x3.xhtml" target="_self">CLDepthwiseConvolutionLayer3x3</a></td><td class="desc">Basic function to execute a depthwise convolution for kernel size 3x3xC (when data layout NCHW) or Cx3x3 (when data layout NHWC) </td></tr>
<tr id="row_0_118_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_depthwise_convolution_layer3x3_n_c_h_w_kernel.xhtml" target="_self">CLDepthwiseConvolutionLayer3x3NCHWKernel</a></td><td class="desc">Interface for the kernel to run a 3x3 depthwise convolution on a tensor when the data layout is NCHW </td></tr>
<tr id="row_0_119_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_depthwise_convolution_layer3x3_n_h_w_c_kernel.xhtml" target="_self">CLDepthwiseConvolutionLayer3x3NHWCKernel</a></td><td class="desc">Interface for the kernel to run a 3x3 depthwise convolution on a tensor when the data layout is NHWC </td></tr>
<tr id="row_0_120_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_depthwise_convolution_layer_native_kernel.xhtml" target="_self">CLDepthwiseConvolutionLayerNativeKernel</a></td><td class="desc">Interface for the kernel to run a MxN depthwise convolution </td></tr>
<tr id="row_0_121_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_depthwise_convolution_layer_reshape_weights_kernel.xhtml" target="_self">CLDepthwiseConvolutionLayerReshapeWeightsKernel</a></td><td class="desc">Interface for the kernel to reshape the weights of depthwise convolution </td></tr>
<tr id="row_0_122_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_dequantization_layer.xhtml" target="_self">CLDequantizationLayer</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_dequantization_layer_kernel.xhtml">CLDequantizationLayerKernel</a> that dequantizes an input tensor </td></tr>
<tr id="row_0_123_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_dequantization_layer_kernel.xhtml" target="_self">CLDequantizationLayerKernel</a></td><td class="desc">Interface for the dequantization layer kernel </td></tr>
<tr id="row_0_124_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_derivative.xhtml" target="_self">CLDerivative</a></td><td class="desc">Basic function to execute first order derivative operator </td></tr>
<tr id="row_0_125_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_derivative_kernel.xhtml" target="_self">CLDerivativeKernel</a></td><td class="desc">Interface for the derivative kernel </td></tr>
<tr id="row_0_126_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1_c_l_device_options.xhtml" target="_self">CLDeviceOptions</a></td><td class="desc">OpenCL device options </td></tr>
<tr id="row_0_127_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_dilate.xhtml" target="_self">CLDilate</a></td><td class="desc">Basic function to execute dilate </td></tr>
<tr id="row_0_128_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_dilate_kernel.xhtml" target="_self">CLDilateKernel</a></td><td class="desc">Interface for the dilate kernel </td></tr>
<tr id="row_0_129_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_direct_convolution_layer.xhtml" target="_self">CLDirectConvolutionLayer</a></td><td class="desc">Basic function to execute direct convolution function: </td></tr>
<tr id="row_0_130_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_direct_convolution_layer_kernel.xhtml" target="_self">CLDirectConvolutionLayerKernel</a></td><td class="desc">Interface for the direct convolution kernel </td></tr>
<tr id="row_0_131_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_direct_deconvolution_layer.xhtml" target="_self">CLDirectDeconvolutionLayer</a></td><td class="desc">Function to run the deconvolution layer </td></tr>
<tr id="row_0_132_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_distribution1_d.xhtml" target="_self">CLDistribution1D</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_c_l_distribution1_d.xhtml" title="CLDistribution1D object class.">CLDistribution1D</a> object class </td></tr>
<tr id="row_0_133_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_edge_non_max_suppression_kernel.xhtml" target="_self">CLEdgeNonMaxSuppressionKernel</a></td><td class="desc">OpenCL kernel to perform Non-Maxima suppression for Canny Edge </td></tr>
<tr id="row_0_134_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_edge_trace_kernel.xhtml" target="_self">CLEdgeTraceKernel</a></td><td class="desc">OpenCL kernel to perform Edge tracing </td></tr>
<tr id="row_0_135_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_elementwise_max.xhtml" target="_self">CLElementwiseMax</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_arithmetic_operation_kernel.xhtml">CLArithmeticOperationKernel</a> for max </td></tr>
<tr id="row_0_136_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_elementwise_min.xhtml" target="_self">CLElementwiseMin</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_arithmetic_operation_kernel.xhtml">CLArithmeticOperationKernel</a> for min </td></tr>
<tr id="row_0_137_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_elementwise_operation_kernel.xhtml" target="_self">CLElementwiseOperationKernel</a></td><td class="desc">Interface for an element-wise operation kernel </td></tr>
<tr id="row_0_138_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_elementwise_power.xhtml" target="_self">CLElementwisePower</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_arithmetic_operation_kernel.xhtml">CLArithmeticOperationKernel</a> for power </td></tr>
<tr id="row_0_139_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_elementwise_squared_diff.xhtml" target="_self">CLElementwiseSquaredDiff</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_arithmetic_operation_kernel.xhtml">CLArithmeticOperationKernel</a> for squared difference </td></tr>
<tr id="row_0_140_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_element_wise_unary_layer_kernel.xhtml" target="_self">CLElementWiseUnaryLayerKernel</a></td><td class="desc">Interface for the elementwise unary operator </td></tr>
<tr id="row_0_141_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_equalize_histogram.xhtml" target="_self">CLEqualizeHistogram</a></td><td class="desc">Basic function to execute histogram equalization </td></tr>
<tr id="row_0_142_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_erode.xhtml" target="_self">CLErode</a></td><td class="desc">Basic function to execute erode </td></tr>
<tr id="row_0_143_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_erode_kernel.xhtml" target="_self">CLErodeKernel</a></td><td class="desc">Interface for the erode kernel </td></tr>
<tr id="row_0_144_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_exp_layer.xhtml" target="_self">CLExpLayer</a></td><td class="desc">Basic function to perform exponential on an input tensor </td></tr>
<tr id="row_0_145_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_fast_corners.xhtml" target="_self">CLFastCorners</a></td><td class="desc">Basic function to execute fast corners </td></tr>
<tr id="row_0_146_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_fast_corners_kernel.xhtml" target="_self">CLFastCornersKernel</a></td><td class="desc">CL kernel to perform fast corners </td></tr>
<tr id="row_0_147_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_f_f_t1_d.xhtml" target="_self">CLFFT1D</a></td><td class="desc">Basic function to execute one dimensional FFT </td></tr>
<tr id="row_0_148_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_f_f_t2_d.xhtml" target="_self">CLFFT2D</a></td><td class="desc">Basic function to execute two dimensional FFT </td></tr>
<tr id="row_0_149_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_f_f_t_convolution_layer.xhtml" target="_self">CLFFTConvolutionLayer</a></td><td class="desc">Basic function to execute FFT-based convolution on OpenCL </td></tr>
<tr id="row_0_150_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_f_f_t_digit_reverse_kernel.xhtml" target="_self">CLFFTDigitReverseKernel</a></td><td class="desc">Interface for the digit reverse operation kernel </td></tr>
<tr id="row_0_151_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_f_f_t_radix_stage_kernel.xhtml" target="_self">CLFFTRadixStageKernel</a></td><td class="desc">Interface for the FFT radix stage kernel </td></tr>
<tr id="row_0_152_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_f_f_t_scale_kernel.xhtml" target="_self">CLFFTScaleKernel</a></td><td class="desc">Interface for the inverse fft scale kernel </td></tr>
<tr id="row_0_153_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_fill.xhtml" target="_self">CLFill</a></td><td class="desc">Function to run <a class="el" href="classarm__compute_1_1_c_l_memset_kernel.xhtml">CLMemsetKernel</a> to fill a tensor with a scalar value </td></tr>
<tr id="row_0_154_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_fill_border.xhtml" target="_self">CLFillBorder</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_fill_border_kernel.xhtml">CLFillBorderKernel</a> </td></tr>
<tr id="row_0_155_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_fill_border_kernel.xhtml" target="_self">CLFillBorderKernel</a></td><td class="desc">Interface for filling the border of a kernel </td></tr>
<tr id="row_0_156_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_fine_s_v_m_memory_region.xhtml" target="_self">CLFineSVMMemoryRegion</a></td><td class="desc">OpenCL fine-grain SVM memory region implementation </td></tr>
<tr id="row_0_157_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_flatten_layer.xhtml" target="_self">CLFlattenLayer</a></td><td class="desc">Basic function to execute flatten </td></tr>
<tr id="row_0_158_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_flatten_layer_kernel.xhtml" target="_self">CLFlattenLayerKernel</a></td><td class="desc">OpenCL interface for the flatten kernel </td></tr>
<tr id="row_0_159_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_floor.xhtml" target="_self">CLFloor</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_floor_kernel.xhtml">CLFloorKernel</a> </td></tr>
<tr id="row_0_160_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_floor_kernel.xhtml" target="_self">CLFloorKernel</a></td><td class="desc">OpenCL kernel to perform a floor operation </td></tr>
<tr id="row_0_161_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_fully_connected_layer.xhtml" target="_self">CLFullyConnectedLayer</a></td><td class="desc">Basic function to compute a Fully Connected layer on OpenCL </td></tr>
<tr id="row_0_162_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_fully_connected_layer_reshape_weights.xhtml" target="_self">CLFullyConnectedLayerReshapeWeights</a></td><td class="desc">Basic function to reshape the weights of Fully Connected layer with OpenCL </td></tr>
<tr id="row_0_163_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_fuse_batch_normalization.xhtml" target="_self">CLFuseBatchNormalization</a></td><td class="desc">Basic function to fuse the batch normalization node to a preceding convolution node </td></tr>
<tr id="row_0_164_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_fuse_batch_normalization_kernel.xhtml" target="_self">CLFuseBatchNormalizationKernel</a></td><td class="desc">OpenCL kernel to fuse the batch normalization node to a preceding convolution node </td></tr>
<tr id="row_0_165_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_gather.xhtml" target="_self">CLGather</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_gather_kernel.xhtml">CLGatherKernel</a> </td></tr>
<tr id="row_0_166_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_gather_kernel.xhtml" target="_self">CLGatherKernel</a></td><td class="desc">Interface for the kernel to perform tensor reshaping </td></tr>
<tr id="row_0_167_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_gaussian3x3.xhtml" target="_self">CLGaussian3x3</a></td><td class="desc">Basic function to execute gaussian filter 3x3 </td></tr>
<tr id="row_0_168_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_gaussian3x3_kernel.xhtml" target="_self">CLGaussian3x3Kernel</a></td><td class="desc">Interface for the Gaussian 3x3 filter kernel </td></tr>
<tr id="row_0_169_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_gaussian5x5.xhtml" target="_self">CLGaussian5x5</a></td><td class="desc">Basic function to execute gaussian filter 5x5 </td></tr>
<tr id="row_0_170_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_gaussian5x5_hor_kernel.xhtml" target="_self">CLGaussian5x5HorKernel</a></td><td class="desc">Interface for the kernel to run the horizontal pass of 5x5 Gaussian filter on a tensor </td></tr>
<tr id="row_0_171_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_gaussian5x5_vert_kernel.xhtml" target="_self">CLGaussian5x5VertKernel</a></td><td class="desc">Interface for the kernel to run the vertical pass of 5x5 Gaussian filter on a tensor </td></tr>
<tr id="row_0_172_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_gaussian_pyramid.xhtml" target="_self">CLGaussianPyramid</a></td><td class="desc">Common interface for all Gaussian pyramid functions </td></tr>
<tr id="row_0_173_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_gaussian_pyramid_half.xhtml" target="_self">CLGaussianPyramidHalf</a></td><td class="desc">Basic function to execute gaussian pyramid with HALF scale factor </td></tr>
<tr id="row_0_174_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_gaussian_pyramid_hor_kernel.xhtml" target="_self">CLGaussianPyramidHorKernel</a></td><td class="desc">OpenCL kernel to perform a Gaussian filter and half scaling across width (horizontal pass) </td></tr>
<tr id="row_0_175_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_gaussian_pyramid_orb.xhtml" target="_self">CLGaussianPyramidOrb</a></td><td class="desc">Basic function to execute gaussian pyramid with ORB scale factor </td></tr>
<tr id="row_0_176_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_gaussian_pyramid_vert_kernel.xhtml" target="_self">CLGaussianPyramidVertKernel</a></td><td class="desc">OpenCL kernel to perform a Gaussian filter and half scaling across height (vertical pass) </td></tr>
<tr id="row_0_177_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml" target="_self">CLGEMM</a></td><td class="desc">Basic function to execute GEMM on OpenCL </td></tr>
<tr id="row_0_178_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_convolution_layer.xhtml" target="_self">CLGEMMConvolutionLayer</a></td><td class="desc">Basic function to compute the convolution layer </td></tr>
<tr id="row_0_179_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_deconvolution_layer.xhtml" target="_self">CLGEMMDeconvolutionLayer</a></td><td class="desc">Function to run the deconvolution layer through a call to GEMM </td></tr>
<tr id="row_0_180_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_a_reduction_kernel.xhtml" target="_self">CLGEMMLowpMatrixAReductionKernel</a></td><td class="desc">OpenCL kernel used to compute the row-vectors of sums of all the entries in each row of Matrix A </td></tr>
<tr id="row_0_181_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_b_reduction_kernel.xhtml" target="_self">CLGEMMLowpMatrixBReductionKernel</a></td><td class="desc">OpenCL kernel used to compute the row-vectors of sums of all the entries in each column of Matrix B </td></tr>
<tr id="row_0_182_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_multiply_core.xhtml" target="_self">CLGEMMLowpMatrixMultiplyCore</a></td><td class="desc">Basic function to execute GEMMLowpMatrixMultiplyCore on OpenCL </td></tr>
<tr id="row_0_183_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_multiply_kernel.xhtml" target="_self">CLGEMMLowpMatrixMultiplyKernel</a></td><td class="desc">OpenCL kernel to multiply matrices </td></tr>
<tr id="row_0_184_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_multiply_native_kernel.xhtml" target="_self">CLGEMMLowpMatrixMultiplyNativeKernel</a></td><td class="desc">OpenCL kernel to multiply matrices with QASYMM8/QASYMM8_SIGNED data type </td></tr>
<tr id="row_0_185_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_multiply_reshaped_kernel.xhtml" target="_self">CLGEMMLowpMatrixMultiplyReshapedKernel</a></td><td class="desc">OpenCL kernel to multiply matrices when both the input matrices LHS (input0) and RHS (input1) have been reshaped </td></tr>
<tr id="row_0_186_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_multiply_reshaped_only_r_h_s_kernel.xhtml" target="_self">CLGEMMLowpMatrixMultiplyReshapedOnlyRHSKernel</a></td><td class="desc">OpenCL kernel to multiply matrices with QASYMM8 data type when only the input matrix RHS (input1) has been reshaped </td></tr>
<tr id="row_0_187_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_offset_contribution_kernel.xhtml" target="_self">CLGEMMLowpOffsetContributionKernel</a></td><td class="desc">OpenCL kernel used to add the offset contribution after <a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_multiply_kernel.xhtml">CLGEMMLowpMatrixMultiplyKernel</a> </td></tr>
<tr id="row_0_188_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_offset_contribution_output_stage_kernel.xhtml" target="_self">CLGEMMLowpOffsetContributionOutputStageKernel</a></td><td class="desc">OpenCL kernel used to add the offset contribution after <a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_multiply_kernel.xhtml">CLGEMMLowpMatrixMultiplyKernel</a> and perform the output stage </td></tr>
<tr id="row_0_189_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_quantize_down_int32_to_int16_scale_by_fixed_point.xhtml" target="_self">CLGEMMLowpQuantizeDownInt32ToInt16ScaleByFixedPoint</a></td><td class="desc">Basic function to execute <a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_quantize_down_int32_to_int16_scale_by_fixed_point.xhtml" title="Basic function to execute CLGEMMLowpQuantizeDownInt32ToInt16ScaleByFixedPoint on OpenCL.">CLGEMMLowpQuantizeDownInt32ToInt16ScaleByFixedPoint</a> on OpenCL </td></tr>
<tr id="row_0_190_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_quantize_down_int32_to_int16_scale_by_fixed_point_kernel.xhtml" target="_self">CLGEMMLowpQuantizeDownInt32ToInt16ScaleByFixedPointKernel</a></td><td class="desc">CL kernel used to quantize down the int32 accumulator values of GEMMLowp to QSYMM16 </td></tr>
<tr id="row_0_191_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_quantize_down_int32_to_int8_scale_by_fixed_point.xhtml" target="_self">CLGEMMLowpQuantizeDownInt32ToInt8ScaleByFixedPoint</a></td><td class="desc">Basic function to execute <a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_quantize_down_int32_to_int8_scale_by_fixed_point.xhtml" title="Basic function to execute CLGEMMLowpQuantizeDownInt32ToInt8ScaleByFixedPoint on OpenCL.">CLGEMMLowpQuantizeDownInt32ToInt8ScaleByFixedPoint</a> on OpenCL </td></tr>
<tr id="row_0_192_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_quantize_down_int32_to_int8_scale_by_fixed_point_kernel.xhtml" target="_self">CLGEMMLowpQuantizeDownInt32ToInt8ScaleByFixedPointKernel</a></td><td class="desc">OpenCL kernel used to quantize down the int32 accumulator values of GEMMLowp to QASYMM8_SIGNED </td></tr>
<tr id="row_0_193_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_quantize_down_int32_to_uint8_scale.xhtml" target="_self">CLGEMMLowpQuantizeDownInt32ToUint8Scale</a></td><td class="desc">Basic function to execute <a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_quantize_down_int32_to_uint8_scale.xhtml" title="Basic function to execute CLGEMMLowpQuantizeDownInt32ToUint8Scale on OpenCL.">CLGEMMLowpQuantizeDownInt32ToUint8Scale</a> on OpenCL </td></tr>
<tr id="row_0_194_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_quantize_down_int32_to_uint8_scale_by_fixed_point.xhtml" target="_self">CLGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPoint</a></td><td class="desc">Basic function to execute <a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_quantize_down_int32_to_uint8_scale_by_fixed_point.xhtml" title="Basic function to execute CLGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPoint on OpenCL.">CLGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPoint</a> on OpenCL </td></tr>
<tr id="row_0_195_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_quantize_down_int32_to_uint8_scale_by_fixed_point_kernel.xhtml" target="_self">CLGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel</a></td><td class="desc">OpenCL kernel used to quantize down the int32 accumulator values of GEMMLowp to QASYMM8 </td></tr>
<tr id="row_0_196_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_quantize_down_int32_to_uint8_scale_by_float.xhtml" target="_self">CLGEMMLowpQuantizeDownInt32ToUint8ScaleByFloat</a></td><td class="desc">Basic function to execute <a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_quantize_down_int32_to_uint8_scale_by_float.xhtml" title="Basic function to execute CLGEMMLowpQuantizeDownInt32ToUint8ScaleByFloat on OpenCL.">CLGEMMLowpQuantizeDownInt32ToUint8ScaleByFloat</a> on OpenCL </td></tr>
<tr id="row_0_197_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_quantize_down_int32_to_uint8_scale_by_float_kernel.xhtml" target="_self">CLGEMMLowpQuantizeDownInt32ToUint8ScaleByFloatKernel</a></td><td class="desc">OpenCL kernel used to quantize down the int32 accumulator values of GEMMLowp to QASYMM8 </td></tr>
<tr id="row_0_198_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_quantize_down_int32_to_uint8_scale_kernel.xhtml" target="_self">CLGEMMLowpQuantizeDownInt32ToUint8ScaleKernel</a></td><td class="desc">OpenCL kernel used to quantize down the int32 accumulator values of GEMMLowp to QASYMM8 </td></tr>
<tr id="row_0_199_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_matrix_accumulate_biases_kernel.xhtml" target="_self">CLGEMMMatrixAccumulateBiasesKernel</a></td><td class="desc">Interface to add a bias to each row of the input tensor </td></tr>
<tr id="row_0_200_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_matrix_multiply_kernel.xhtml" target="_self">CLGEMMMatrixMultiplyKernel</a></td><td class="desc">OpenCL kernel to multiply two input matrices "A" and "B" and add a martix "C" if provided </td></tr>
<tr id="row_0_201_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_matrix_multiply_native_kernel.xhtml" target="_self">CLGEMMMatrixMultiplyNativeKernel</a></td><td class="desc">OpenCL kernel to multiply matrices when neither of the input matrices have been reshaped </td></tr>
<tr id="row_0_202_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_matrix_multiply_reshaped_kernel.xhtml" target="_self">CLGEMMMatrixMultiplyReshapedKernel</a></td><td class="desc">OpenCL kernel to multiply matrices when both the input matrices LHS (input0) and RHS (input1) have been reshaped </td></tr>
<tr id="row_0_203_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_matrix_multiply_reshaped_only_r_h_s_kernel.xhtml" target="_self">CLGEMMMatrixMultiplyReshapedOnlyRHSKernel</a></td><td class="desc">OpenCL kernel to multiply matrices when only the input matrix RHS (input1) has been reshaped </td></tr>
<tr id="row_0_204_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_matrix_vector_multiply_kernel.xhtml" target="_self">CLGEMMMatrixVectorMultiplyKernel</a></td><td class="desc">Interface for the GEMM matrix vector multiply kernel </td></tr>
<tr id="row_0_205_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_reshape_l_h_s_matrix_kernel.xhtml" target="_self">CLGEMMReshapeLHSMatrixKernel</a></td><td class="desc">OpenCL kernel to reshape the LHS matrix when performing the matrix multiplication </td></tr>
<tr id="row_0_206_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_reshape_r_h_s_matrix_kernel.xhtml" target="_self">CLGEMMReshapeRHSMatrixKernel</a></td><td class="desc">OpenCL kernel to reshape the RHS matrix when performing the matrix multiplication In particular, this kernel splits the input matrix in blocks of size K0xN0 and stores each one in the output matrix unrolling the values </td></tr>
<tr id="row_0_207_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_generate_proposals_layer.xhtml" target="_self">CLGenerateProposalsLayer</a></td><td class="desc">Basic function to generate proposals for a RPN (Region Proposal Network) </td></tr>
<tr id="row_0_208_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_gradient_kernel.xhtml" target="_self">CLGradientKernel</a></td><td class="desc">OpenCL kernel to perform Gradient computation </td></tr>
<tr id="row_0_209_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_harris_corners.xhtml" target="_self">CLHarrisCorners</a></td><td class="desc">Basic function to execute harris corners detection </td></tr>
<tr id="row_0_210_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_harris_score_kernel.xhtml" target="_self">CLHarrisScoreKernel</a></td><td class="desc">Interface for the harris score kernel </td></tr>
<tr id="row_0_211_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_height_concatenate_layer_kernel.xhtml" target="_self">CLHeightConcatenateLayerKernel</a></td><td class="desc">Interface for the height concatenate kernel </td></tr>
<tr id="row_0_212_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_histogram.xhtml" target="_self">CLHistogram</a></td><td class="desc">Basic function to execute histogram </td></tr>
<tr id="row_0_213_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_histogram_border_kernel.xhtml" target="_self">CLHistogramBorderKernel</a></td><td class="desc">Interface to run the histogram kernel to handle the leftover part of image </td></tr>
<tr id="row_0_214_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_histogram_kernel.xhtml" target="_self">CLHistogramKernel</a></td><td class="desc">Interface to run the histogram kernel </td></tr>
<tr id="row_0_215_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_h_o_g.xhtml" target="_self">CLHOG</a></td><td class="desc">OpenCL implementation of <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object.">HOG</a> data-object </td></tr>
<tr id="row_0_216_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_h_o_g_block_normalization_kernel.xhtml" target="_self">CLHOGBlockNormalizationKernel</a></td><td class="desc">OpenCL kernel to perform <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object.">HOG</a> block normalization </td></tr>
<tr id="row_0_217_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_h_o_g_descriptor.xhtml" target="_self">CLHOGDescriptor</a></td><td class="desc">Basic function to calculate <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object.">HOG</a> descriptor </td></tr>
<tr id="row_0_218_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_h_o_g_detector.xhtml" target="_self">CLHOGDetector</a></td><td class="desc">Basic function to execute <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object.">HOG</a> detector based on linear SVM </td></tr>
<tr id="row_0_219_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_h_o_g_detector_kernel.xhtml" target="_self">CLHOGDetectorKernel</a></td><td class="desc">OpenCL kernel to perform <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object.">HOG</a> detector kernel using linear SVM </td></tr>
<tr id="row_0_220_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_h_o_g_gradient.xhtml" target="_self">CLHOGGradient</a></td><td class="desc">Basic function to calculate the gradient for <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object.">HOG</a> </td></tr>
<tr id="row_0_221_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_h_o_g_multi_detection.xhtml" target="_self">CLHOGMultiDetection</a></td><td class="desc">Basic function to detect multiple objects (or the same object at different scales) on the same input image using <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object.">HOG</a> </td></tr>
<tr id="row_0_222_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_h_o_g_orientation_binning_kernel.xhtml" target="_self">CLHOGOrientationBinningKernel</a></td><td class="desc">OpenCL kernel to perform <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object.">HOG</a> Orientation Binning </td></tr>
<tr id="row_0_223_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_im2_col_kernel.xhtml" target="_self">CLIm2ColKernel</a></td><td class="desc">Interface for the im2col reshape kernel </td></tr>
<tr id="row_0_224_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_instance_normalization_layer.xhtml" target="_self">CLInstanceNormalizationLayer</a></td><td class="desc">Basic function to perform a Instance normalization </td></tr>
<tr id="row_0_225_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_instance_normalization_layer_kernel.xhtml" target="_self">CLInstanceNormalizationLayerKernel</a></td><td class="desc">Interface for performing an instance normalization </td></tr>
<tr id="row_0_226_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_integral_image.xhtml" target="_self">CLIntegralImage</a></td><td class="desc">Basic function to execute integral image </td></tr>
<tr id="row_0_227_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_integral_image_hor_kernel.xhtml" target="_self">CLIntegralImageHorKernel</a></td><td class="desc">Interface to run the horizontal pass of the integral image kernel </td></tr>
<tr id="row_0_228_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_integral_image_vert_kernel.xhtml" target="_self">CLIntegralImageVertKernel</a></td><td class="desc">Interface to run the vertical pass of the integral image kernel </td></tr>
<tr id="row_0_229_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_kernel_library.xhtml" target="_self">CLKernelLibrary</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_c_l_kernel_library.xhtml" title="CLKernelLibrary class.">CLKernelLibrary</a> class </td></tr>
<tr id="row_0_230_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_l2_normalize_layer.xhtml" target="_self">CLL2NormalizeLayer</a></td><td class="desc">Basic function to perform a L2 normalization on a given axis </td></tr>
<tr id="row_0_231_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_l2_normalize_layer_kernel.xhtml" target="_self">CLL2NormalizeLayerKernel</a></td><td class="desc">Interface for performing a L2 normalize on a given axis given the square sum of it in this axis </td></tr>
<tr id="row_0_232_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_laplacian_pyramid.xhtml" target="_self">CLLaplacianPyramid</a></td><td class="desc">Basic function to execute laplacian pyramid </td></tr>
<tr id="row_0_233_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_laplacian_reconstruct.xhtml" target="_self">CLLaplacianReconstruct</a></td><td class="desc">Basic function to execute laplacian reconstruction </td></tr>
<tr id="row_0_234_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1_c_l_l_k_internal_keypoint.xhtml" target="_self">CLLKInternalKeypoint</a></td><td class="desc">Internal keypoint structure for Lucas-Kanade Optical Flow </td></tr>
<tr id="row_0_235_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_l_k_tracker_finalize_kernel.xhtml" target="_self">CLLKTrackerFinalizeKernel</a></td><td class="desc">Interface to run the finalize step of LKTracker, where it truncates the coordinates stored in new_points array </td></tr>
<tr id="row_0_236_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_l_k_tracker_init_kernel.xhtml" target="_self">CLLKTrackerInitKernel</a></td><td class="desc">Interface to run the initialization step of LKTracker </td></tr>
<tr id="row_0_237_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_l_k_tracker_stage0_kernel.xhtml" target="_self">CLLKTrackerStage0Kernel</a></td><td class="desc">Interface to run the first stage of LKTracker, where A11, A12, A22, min_eig, ival, ixval and iyval are computed </td></tr>
<tr id="row_0_238_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_l_k_tracker_stage1_kernel.xhtml" target="_self">CLLKTrackerStage1Kernel</a></td><td class="desc">Interface to run the second stage of LKTracker, where the motion vectors of the given points are computed </td></tr>
<tr id="row_0_239_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_locally_connected_layer.xhtml" target="_self">CLLocallyConnectedLayer</a></td><td class="desc">Basic function to compute the locally connected layer </td></tr>
<tr id="row_0_240_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_locally_connected_matrix_multiply_kernel.xhtml" target="_self">CLLocallyConnectedMatrixMultiplyKernel</a></td><td class="desc">OpenCL kernel to multiply each row of first tensor with low 2 dimensions of second tensor </td></tr>
<tr id="row_0_241_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_logits1_d_max_kernel.xhtml" target="_self">CLLogits1DMaxKernel</a></td><td class="desc">Interface for the identifying the max value of 1D Logits </td></tr>
<tr id="row_0_242_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_logits1_d_max_shift_exp_sum_kernel.xhtml" target="_self">CLLogits1DMaxShiftExpSumKernel</a></td><td class="desc">Interface for max, shifting, exponentiating and summing the logits </td></tr>
<tr id="row_0_243_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_logits1_d_norm_kernel.xhtml" target="_self">CLLogits1DNormKernel</a></td><td class="desc">Interface for calculating the final step of the Softmax Layer where each logit value is multiplied by the inverse of the sum of the logits </td></tr>
<tr id="row_0_244_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_logits1_d_shift_exp_sum_kernel.xhtml" target="_self">CLLogits1DShiftExpSumKernel</a></td><td class="desc">Interface for shifting, exponentiating and summing the logits </td></tr>
<tr id="row_0_245_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_log_layer.xhtml" target="_self">CLLogLayer</a></td><td class="desc">Basic function to perform elementwise log on an input tensor </td></tr>
<tr id="row_0_246_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_l_s_t_m_layer.xhtml" target="_self">CLLSTMLayer</a></td><td class="desc">This function performs a single time step in a Long Short-Term <a class="el" href="classarm__compute_1_1_memory.xhtml" title="CPU implementation of memory object.">Memory</a> (LSTM) layer </td></tr>
<tr id="row_0_247_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_l_s_t_m_layer_quantized.xhtml" target="_self">CLLSTMLayerQuantized</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_l_s_t_m_layer_quantized.xhtml">CLLSTMLayerQuantized</a> </td></tr>
<tr id="row_0_248_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_lut.xhtml" target="_self">CLLut</a></td><td class="desc">Basic implementation of the OpenCL lut interface </td></tr>
<tr id="row_0_249_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_lut_allocator.xhtml" target="_self">CLLutAllocator</a></td><td class="desc">Basic implementation of a CL memory LUT allocator </td></tr>
<tr id="row_0_250_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_magnitude.xhtml" target="_self">CLMagnitude</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_magnitude_phase_kernel.xhtml">CLMagnitudePhaseKernel</a> </td></tr>
<tr id="row_0_251_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_magnitude_phase_kernel.xhtml" target="_self">CLMagnitudePhaseKernel</a></td><td class="desc">Template interface for the kernel to compute magnitude and phase </td></tr>
<tr id="row_0_252_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_mean_std_dev.xhtml" target="_self">CLMeanStdDev</a></td><td class="desc">Basic function to execute mean and standard deviation by calling <a class="el" href="classarm__compute_1_1_c_l_mean_std_dev_kernel.xhtml">CLMeanStdDevKernel</a> </td></tr>
<tr id="row_0_253_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_mean_std_dev_kernel.xhtml" target="_self">CLMeanStdDevKernel</a></td><td class="desc">Interface for the kernel to calculate mean and standard deviation of input image pixels </td></tr>
<tr id="row_0_254_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_mean_std_dev_normalization_kernel.xhtml" target="_self">CLMeanStdDevNormalizationKernel</a></td><td class="desc">Interface for the kernel to normalize the input 2D tensor across the first dimension with respect to mean and standard deviation of the same dimension </td></tr>
<tr id="row_0_255_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_mean_std_dev_normalization_layer.xhtml" target="_self">CLMeanStdDevNormalizationLayer</a></td><td class="desc">Basic function to execute mean and standard deviation normalization by calling <a class="el" href="classarm__compute_1_1_c_l_mean_std_dev_normalization_kernel.xhtml">CLMeanStdDevNormalizationKernel</a> </td></tr>
<tr id="row_0_256_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_median3x3.xhtml" target="_self">CLMedian3x3</a></td><td class="desc">Basic function to execute median filter </td></tr>
<tr id="row_0_257_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_median3x3_kernel.xhtml" target="_self">CLMedian3x3Kernel</a></td><td class="desc">Interface for the median 3x3 filter kernel </td></tr>
<tr id="row_0_258_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_memory.xhtml" target="_self">CLMemory</a></td><td class="desc">OpenCL implementation of memory object </td></tr>
<tr id="row_0_259_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_memset_kernel.xhtml" target="_self">CLMemsetKernel</a></td><td class="desc">Interface for filling the planes of a tensor </td></tr>
<tr id="row_0_260_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_min_max_kernel.xhtml" target="_self">CLMinMaxKernel</a></td><td class="desc">Interface for the kernel to perform min max search on an image </td></tr>
<tr id="row_0_261_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_min_max_layer_kernel.xhtml" target="_self">CLMinMaxLayerKernel</a></td><td class="desc">Interface for the kernel to perform min max search on a 3D tensor </td></tr>
<tr id="row_0_262_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_min_max_location.xhtml" target="_self">CLMinMaxLocation</a></td><td class="desc">Basic function to execute min and max location </td></tr>
<tr id="row_0_263_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_min_max_location_kernel.xhtml" target="_self">CLMinMaxLocationKernel</a></td><td class="desc">Interface for the kernel to find min max locations of an image </td></tr>
<tr id="row_0_264_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_multi_h_o_g.xhtml" target="_self">CLMultiHOG</a></td><td class="desc">Basic implementation of the CL multi <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object.">HOG</a> data-objects </td></tr>
<tr id="row_0_265_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_multi_image.xhtml" target="_self">CLMultiImage</a></td><td class="desc">Basic implementation of the CL multi-planar image interface </td></tr>
<tr id="row_0_266_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_neg_layer.xhtml" target="_self">CLNegLayer</a></td><td class="desc">Basic function to negate an input tensor </td></tr>
<tr id="row_0_267_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_non_linear_filter.xhtml" target="_self">CLNonLinearFilter</a></td><td class="desc">Basic function to execute non linear filter </td></tr>
<tr id="row_0_268_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_non_linear_filter_kernel.xhtml" target="_self">CLNonLinearFilterKernel</a></td><td class="desc">Interface for the kernel to apply a non-linear filter </td></tr>
<tr id="row_0_269_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_non_maxima_suppression3x3.xhtml" target="_self">CLNonMaximaSuppression3x3</a></td><td class="desc">Basic function to execute non-maxima suppression over a 3x3 window </td></tr>
<tr id="row_0_270_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_non_maxima_suppression3x3_kernel.xhtml" target="_self">CLNonMaximaSuppression3x3Kernel</a></td><td class="desc">Interface to perform Non-Maxima suppression over a 3x3 window using OpenCL </td></tr>
<tr id="row_0_271_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_normalization_layer.xhtml" target="_self">CLNormalizationLayer</a></td><td class="desc">Basic function to compute a normalization layer </td></tr>
<tr id="row_0_272_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_normalization_layer_kernel.xhtml" target="_self">CLNormalizationLayerKernel</a></td><td class="desc">Interface for the normalization layer kernel </td></tr>
<tr id="row_0_273_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_normalize_planar_y_u_v_layer.xhtml" target="_self">CLNormalizePlanarYUVLayer</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_normalize_planar_y_u_v_layer_kernel.xhtml">CLNormalizePlanarYUVLayerKernel</a> </td></tr>
<tr id="row_0_274_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_normalize_planar_y_u_v_layer_kernel.xhtml" target="_self">CLNormalizePlanarYUVLayerKernel</a></td><td class="desc">Interface for the NormalizePlanarYUV layer kernel </td></tr>
<tr id="row_0_275_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1_c_l_old_value.xhtml" target="_self">CLOldValue</a></td><td class="desc">Structure for storing ival, ixval and iyval for each point inside the window </td></tr>
<tr id="row_0_276_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_optical_flow.xhtml" target="_self">CLOpticalFlow</a></td><td class="desc">Basic function to execute optical flow </td></tr>
<tr id="row_0_277_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_pad_layer.xhtml" target="_self">CLPadLayer</a></td><td class="desc">Basic function to pad a tensor </td></tr>
<tr id="row_0_278_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_pad_layer_kernel.xhtml" target="_self">CLPadLayerKernel</a></td><td class="desc">Interface for the PadLayer function </td></tr>
<tr id="row_0_279_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_permute.xhtml" target="_self">CLPermute</a></td><td class="desc">Basic function to execute an <a class="el" href="classarm__compute_1_1_c_l_permute_kernel.xhtml">CLPermuteKernel</a> </td></tr>
<tr id="row_0_280_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_permute_kernel.xhtml" target="_self">CLPermuteKernel</a></td><td class="desc">OpenCL kernel to perform tensor permutation </td></tr>
<tr id="row_0_281_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_phase.xhtml" target="_self">CLPhase</a></td><td class="desc">Basic function to execute an <a class="el" href="classarm__compute_1_1_c_l_magnitude_phase_kernel.xhtml">CLMagnitudePhaseKernel</a> </td></tr>
<tr id="row_0_282_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_pixel_wise_multiplication.xhtml" target="_self">CLPixelWiseMultiplication</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_pixel_wise_multiplication_kernel.xhtml">CLPixelWiseMultiplicationKernel</a> </td></tr>
<tr id="row_0_283_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_pixel_wise_multiplication_kernel.xhtml" target="_self">CLPixelWiseMultiplicationKernel</a></td><td class="desc">Interface for the pixelwise multiplication kernel </td></tr>
<tr id="row_0_284_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_pooling_layer.xhtml" target="_self">CLPoolingLayer</a></td><td class="desc">Basic function to simulate a pooling layer with the specified pooling operation </td></tr>
<tr id="row_0_285_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_pooling_layer_kernel.xhtml" target="_self">CLPoolingLayerKernel</a></td><td class="desc">Interface for the pooling layer kernel </td></tr>
<tr id="row_0_286_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_p_relu_layer.xhtml" target="_self">CLPReluLayer</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_arithmetic_operation_kernel.xhtml">CLArithmeticOperationKernel</a> for PRELU </td></tr>
<tr id="row_0_287_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_prior_box_layer.xhtml" target="_self">CLPriorBoxLayer</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_prior_box_layer_kernel.xhtml">CLPriorBoxLayerKernel</a> </td></tr>
<tr id="row_0_288_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_prior_box_layer_kernel.xhtml" target="_self">CLPriorBoxLayerKernel</a></td><td class="desc">Interface for the PriorBox layer kernel </td></tr>
<tr id="row_0_289_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_pyramid.xhtml" target="_self">CLPyramid</a></td><td class="desc">Basic implementation of the OpenCL pyramid interface </td></tr>
<tr id="row_0_290_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1_c_l_quantization.xhtml" target="_self">CLQuantization</a></td><td class="desc">OpenCL quantization data </td></tr>
<tr id="row_0_291_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_quantization_layer.xhtml" target="_self">CLQuantizationLayer</a></td><td class="desc">Basic function to simulate a quantization layer </td></tr>
<tr id="row_0_292_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_quantization_layer_kernel.xhtml" target="_self">CLQuantizationLayerKernel</a></td><td class="desc">Interface for the quantization layer kernel </td></tr>
<tr id="row_0_293_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_range.xhtml" target="_self">CLRange</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_range_kernel.xhtml">CLRangeKernel</a> </td></tr>
<tr id="row_0_294_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_range_kernel.xhtml" target="_self">CLRangeKernel</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> class for Range </td></tr>
<tr id="row_0_295_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_reduce_mean.xhtml" target="_self">CLReduceMean</a></td><td class="desc">Basic function to perform reduce operation </td></tr>
<tr id="row_0_296_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_reduction_operation.xhtml" target="_self">CLReductionOperation</a></td><td class="desc">Perform reduction operation </td></tr>
<tr id="row_0_297_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_reduction_operation_kernel.xhtml" target="_self">CLReductionOperationKernel</a></td><td class="desc">Interface for the reduction operation kernel </td></tr>
<tr id="row_0_298_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_remap.xhtml" target="_self">CLRemap</a></td><td class="desc">Basic function to execute remap </td></tr>
<tr id="row_0_299_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_remap_kernel.xhtml" target="_self">CLRemapKernel</a></td><td class="desc">OpenCL kernel to perform a remap on a tensor </td></tr>
<tr id="row_0_300_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_reorg_layer.xhtml" target="_self">CLReorgLayer</a></td><td class="desc"></td></tr>
<tr id="row_0_301_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_reorg_layer_kernel.xhtml" target="_self">CLReorgLayerKernel</a></td><td class="desc">OpenCL kernel to perform a reorg layer </td></tr>
<tr id="row_0_302_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_reshape_layer.xhtml" target="_self">CLReshapeLayer</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_reshape_layer_kernel.xhtml">CLReshapeLayerKernel</a> </td></tr>
<tr id="row_0_303_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_reshape_layer_kernel.xhtml" target="_self">CLReshapeLayerKernel</a></td><td class="desc">Interface for the kernel to perform tensor reshaping </td></tr>
<tr id="row_0_304_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_reverse.xhtml" target="_self">CLReverse</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_reverse_kernel.xhtml">CLReverseKernel</a> </td></tr>
<tr id="row_0_305_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_reverse_kernel.xhtml" target="_self">CLReverseKernel</a></td><td class="desc">Interface for the reverse kernel </td></tr>
<tr id="row_0_306_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_r_n_n_layer.xhtml" target="_self">CLRNNLayer</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_r_n_n_layer.xhtml">CLRNNLayer</a> </td></tr>
<tr id="row_0_307_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_r_o_i_align_layer.xhtml" target="_self">CLROIAlignLayer</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_r_o_i_align_layer_kernel.xhtml">CLROIAlignLayerKernel</a> </td></tr>
<tr id="row_0_308_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_r_o_i_align_layer_kernel.xhtml" target="_self">CLROIAlignLayerKernel</a></td><td class="desc">Interface for the RoIAlign kernel </td></tr>
<tr id="row_0_309_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_r_o_i_pooling_layer.xhtml" target="_self">CLROIPoolingLayer</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_r_o_i_pooling_layer_kernel.xhtml">CLROIPoolingLayerKernel</a> </td></tr>
<tr id="row_0_310_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_r_o_i_pooling_layer_kernel.xhtml" target="_self">CLROIPoolingLayerKernel</a></td><td class="desc">Interface for the ROI pooling layer kernel </td></tr>
<tr id="row_0_311_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_round_layer.xhtml" target="_self">CLRoundLayer</a></td><td class="desc">Basic function to get the round (to the nearest even) value of an input tensor </td></tr>
<tr id="row_0_312_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_rsqrt_layer.xhtml" target="_self">CLRsqrtLayer</a></td><td class="desc">Basic function to perform inverse square root on an input tensor </td></tr>
<tr id="row_0_313_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_runtime_context.xhtml" target="_self">CLRuntimeContext</a></td><td class="desc">Runtime context </td></tr>
<tr id="row_0_314_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_saturated_arithmetic_operation_kernel.xhtml" target="_self">CLSaturatedArithmeticOperationKernel</a></td><td class="desc">Addition operation </td></tr>
<tr id="row_0_315_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_scale.xhtml" target="_self">CLScale</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_scale_kernel.xhtml">CLScaleKernel</a> </td></tr>
<tr id="row_0_316_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_scale_kernel.xhtml" target="_self">CLScaleKernel</a></td><td class="desc">Interface for the scale kernel </td></tr>
<tr id="row_0_317_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_scharr3x3.xhtml" target="_self">CLScharr3x3</a></td><td class="desc">Basic function to execute scharr 3x3 filter </td></tr>
<tr id="row_0_318_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_scharr3x3_kernel.xhtml" target="_self">CLScharr3x3Kernel</a></td><td class="desc">Interface for the kernel to run a 3x3 Scharr filter on a tensor </td></tr>
<tr id="row_0_319_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml" target="_self">CLScheduler</a></td><td class="desc">Provides global access to a CL context and command queue </td></tr>
<tr id="row_0_320_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_select.xhtml" target="_self">CLSelect</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_select.xhtml">CLSelect</a> </td></tr>
<tr id="row_0_321_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_select_kernel.xhtml" target="_self">CLSelectKernel</a></td><td class="desc">OpenCL interface for executing the select kernel </td></tr>
<tr id="row_0_322_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_separable_convolution_hor_kernel.xhtml" target="_self">CLSeparableConvolutionHorKernel</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> for the Horizontal pass of a Separable Convolution </td></tr>
<tr id="row_0_323_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_separable_convolution_vert_kernel.xhtml" target="_self">CLSeparableConvolutionVertKernel</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> for the Vertical pass of a Separable Convolution </td></tr>
<tr id="row_0_324_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_sin_layer.xhtml" target="_self">CLSinLayer</a></td><td class="desc">Basic function to calculate sine of an input tensor </td></tr>
<tr id="row_0_325_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_slice.xhtml" target="_self">CLSlice</a></td><td class="desc">Basic function to perform tensor slicing </td></tr>
<tr id="row_0_326_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_sobel3x3.xhtml" target="_self">CLSobel3x3</a></td><td class="desc">Basic function to execute sobel 3x3 filter </td></tr>
<tr id="row_0_327_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_sobel3x3_kernel.xhtml" target="_self">CLSobel3x3Kernel</a></td><td class="desc">Interface for the kernel to run a 3x3 Sobel filter on a tensor </td></tr>
<tr id="row_0_328_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_sobel5x5.xhtml" target="_self">CLSobel5x5</a></td><td class="desc">Basic function to execute sobel 5x5 filter </td></tr>
<tr id="row_0_329_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_sobel5x5_hor_kernel.xhtml" target="_self">CLSobel5x5HorKernel</a></td><td class="desc">Interface for the kernel to run the horizontal pass of 5x5 Sobel filter on a tensor </td></tr>
<tr id="row_0_330_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_sobel5x5_vert_kernel.xhtml" target="_self">CLSobel5x5VertKernel</a></td><td class="desc">Interface for the kernel to run the vertical pass of 5x5 Sobel filter on a tensor </td></tr>
<tr id="row_0_331_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_sobel7x7.xhtml" target="_self">CLSobel7x7</a></td><td class="desc">Basic function to execute sobel 7x7 filter </td></tr>
<tr id="row_0_332_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_sobel7x7_hor_kernel.xhtml" target="_self">CLSobel7x7HorKernel</a></td><td class="desc">Interface for the kernel to run the horizontal pass of 7x7 Sobel filter on a tensor </td></tr>
<tr id="row_0_333_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_sobel7x7_vert_kernel.xhtml" target="_self">CLSobel7x7VertKernel</a></td><td class="desc">Interface for the kernel to run the vertical pass of 7x7 Sobel filter on a tensor </td></tr>
<tr id="row_0_334_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_softmax_layer_generic.xhtml" target="_self">CLSoftmaxLayerGeneric</a></td><td class="desc">Basic function to compute a SoftmaxLayer </td></tr>
<tr id="row_0_335_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_space_to_batch_layer.xhtml" target="_self">CLSpaceToBatchLayer</a></td><td class="desc">Basic function to spatial divide a tensor </td></tr>
<tr id="row_0_336_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_space_to_batch_layer_kernel.xhtml" target="_self">CLSpaceToBatchLayerKernel</a></td><td class="desc">Interface for the space to batch kernel </td></tr>
<tr id="row_0_337_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_space_to_depth_layer.xhtml" target="_self">CLSpaceToDepthLayer</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_space_to_depth_layer_kernel.xhtml">CLSpaceToDepthLayerKernel</a> </td></tr>
<tr id="row_0_338_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_space_to_depth_layer_kernel.xhtml" target="_self">CLSpaceToDepthLayerKernel</a></td><td class="desc">Interface for the space to depth kernel </td></tr>
<tr id="row_0_339_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_split.xhtml" target="_self">CLSplit</a></td><td class="desc">Basic function to split a tensor along a given axis </td></tr>
<tr id="row_0_340_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_stack_layer.xhtml" target="_self">CLStackLayer</a></td><td class="desc">Basic function to stack tensors along an axis </td></tr>
<tr id="row_0_341_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_stack_layer_kernel.xhtml" target="_self">CLStackLayerKernel</a></td><td class="desc">OpenCL kernel to stacks a rank-R tensor into one with rank-(R+1) along the axis dimension </td></tr>
<tr id="row_0_342_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_strided_slice.xhtml" target="_self">CLStridedSlice</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_strided_slice_kernel.xhtml">CLStridedSliceKernel</a> </td></tr>
<tr id="row_0_343_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_strided_slice_kernel.xhtml" target="_self">CLStridedSliceKernel</a></td><td class="desc">Interface for the kernel to perform tensor strided slicing </td></tr>
<tr id="row_0_344_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_sub_tensor.xhtml" target="_self">CLSubTensor</a></td><td class="desc">Basic implementation of the OpenCL sub-tensor interface </td></tr>
<tr id="row_0_345_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_symbols.xhtml" target="_self">CLSymbols</a></td><td class="desc">Class for loading OpenCL symbols </td></tr>
<tr id="row_0_346_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_table_lookup.xhtml" target="_self">CLTableLookup</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_table_lookup_kernel.xhtml">CLTableLookupKernel</a> </td></tr>
<tr id="row_0_347_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_table_lookup_kernel.xhtml" target="_self">CLTableLookupKernel</a></td><td class="desc">Interface for the kernel to perform table lookup calculations </td></tr>
<tr id="row_0_348_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_tensor.xhtml" target="_self">CLTensor</a></td><td class="desc">Basic implementation of the OpenCL tensor interface </td></tr>
<tr id="row_0_349_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml" target="_self">CLTensorAllocator</a></td><td class="desc">Basic implementation of a CL memory tensor allocator </td></tr>
<tr id="row_0_350_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_threshold.xhtml" target="_self">CLThreshold</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_threshold_kernel.xhtml">CLThresholdKernel</a> </td></tr>
<tr id="row_0_351_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_threshold_kernel.xhtml" target="_self">CLThresholdKernel</a></td><td class="desc">Interface for the thresholding kernel </td></tr>
<tr id="row_0_352_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_tile.xhtml" target="_self">CLTile</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_tile_kernel.xhtml">CLTileKernel</a> </td></tr>
<tr id="row_0_353_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_tile_kernel.xhtml" target="_self">CLTileKernel</a></td><td class="desc">OpenCL kernel to perform a Tile operation </td></tr>
<tr id="row_0_354_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_transpose.xhtml" target="_self">CLTranspose</a></td><td class="desc">Basic function to transpose a matrix on OpenCL </td></tr>
<tr id="row_0_355_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_transpose_kernel.xhtml" target="_self">CLTransposeKernel</a></td><td class="desc">OpenCL kernel which transposes the elements of a matrix </td></tr>
<tr id="row_0_356_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_tuner.xhtml" target="_self">CLTuner</a></td><td class="desc">Basic implementation of the OpenCL tuner interface </td></tr>
<tr id="row_0_357_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_unstack.xhtml" target="_self">CLUnstack</a></td><td class="desc">Basic function to unpack a rank-R tensor into rank-(R-1) tensors </td></tr>
<tr id="row_0_358_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_upsample_layer.xhtml" target="_self">CLUpsampleLayer</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_upsample_layer_kernel.xhtml">CLUpsampleLayerKernel</a> </td></tr>
<tr id="row_0_359_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_upsample_layer_kernel.xhtml" target="_self">CLUpsampleLayerKernel</a></td><td class="desc">Interface for the UpsampleLayer kernel on OpenCL </td></tr>
<tr id="row_0_360_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_warp_affine.xhtml" target="_self">CLWarpAffine</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_warp_affine_kernel.xhtml">CLWarpAffineKernel</a> for AFFINE transformation </td></tr>
<tr id="row_0_361_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_warp_affine_kernel.xhtml" target="_self">CLWarpAffineKernel</a></td><td class="desc">Interface for the warp affine kernel </td></tr>
<tr id="row_0_362_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_warp_perspective.xhtml" target="_self">CLWarpPerspective</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_warp_perspective_kernel.xhtml">CLWarpPerspectiveKernel</a> for PERSPECTIVE transformation </td></tr>
<tr id="row_0_363_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_warp_perspective_kernel.xhtml" target="_self">CLWarpPerspectiveKernel</a></td><td class="desc">Interface for the warp perspective kernel </td></tr>
<tr id="row_0_364_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_weights_reshape_kernel.xhtml" target="_self">CLWeightsReshapeKernel</a></td><td class="desc">OpenCL kernel to perform reshaping on the weights used by convolution and locally connected layer </td></tr>
<tr id="row_0_365_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_width_concatenate2_tensors_kernel.xhtml" target="_self">CLWidthConcatenate2TensorsKernel</a></td><td class="desc">Interface for the width concatenate kernel of 2 tensors </td></tr>
<tr id="row_0_366_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_width_concatenate4_tensors_kernel.xhtml" target="_self">CLWidthConcatenate4TensorsKernel</a></td><td class="desc">Interface for the width concatenate kernel of 4 tensors </td></tr>
<tr id="row_0_367_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_width_concatenate_layer_kernel.xhtml" target="_self">CLWidthConcatenateLayerKernel</a></td><td class="desc">Interface for the width concatenate kernel </td></tr>
<tr id="row_0_368_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_winograd_convolution_layer.xhtml" target="_self">CLWinogradConvolutionLayer</a></td><td class="desc">Basic function to execute Winograd-based convolution on OpenCL </td></tr>
<tr id="row_0_369_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_winograd_filter_transform_kernel.xhtml" target="_self">CLWinogradFilterTransformKernel</a></td><td class="desc">Interface for the Winograd filter transform kernel </td></tr>
<tr id="row_0_370_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_winograd_input_transform.xhtml" target="_self">CLWinogradInputTransform</a></td><td class="desc">Basic function to execute a <a class="el" href="classarm__compute_1_1_c_l_winograd_input_transform_kernel.xhtml">CLWinogradInputTransformKernel</a> </td></tr>
<tr id="row_0_371_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_winograd_input_transform_kernel.xhtml" target="_self">CLWinogradInputTransformKernel</a></td><td class="desc">OpenCL kernel to perform Winograd input transform </td></tr>
<tr id="row_0_372_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_winograd_output_transform_kernel.xhtml" target="_self">CLWinogradOutputTransformKernel</a></td><td class="desc">Interface for the Winograd output transform kernel </td></tr>
<tr id="row_0_373_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_y_o_l_o_layer.xhtml" target="_self">CLYOLOLayer</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_y_o_l_o_layer_kernel.xhtml">CLYOLOLayerKernel</a> that performs a partial activation on the input </td></tr>
<tr id="row_0_374_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_y_o_l_o_layer_kernel.xhtml" target="_self">CLYOLOLayerKernel</a></td><td class="desc">Interface for the YOLO layer kernel that performs partial activation </td></tr>
<tr id="row_0_375_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_compute_anchors_info.xhtml" target="_self">ComputeAnchorsInfo</a></td><td class="desc">ComputeAnchors information class </td></tr>
<tr id="row_0_376_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_coordinates.xhtml" target="_self">Coordinates</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_coordinates.xhtml" title="Coordinates of an item.">Coordinates</a> of an item </td></tr>
<tr id="row_0_377_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1_coordinates2_d.xhtml" target="_self">Coordinates2D</a></td><td class="desc">Coordinate type </td></tr>
<tr id="row_0_378_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1_coordinates3_d.xhtml" target="_self">Coordinates3D</a></td><td class="desc">Coordinate type </td></tr>
<tr id="row_0_379_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_p_p_box_with_non_maxima_suppression_limit.xhtml" target="_self">CPPBoxWithNonMaximaSuppressionLimit</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_p_p_box_with_non_maxima_suppression_limit_kernel.xhtml">CPPBoxWithNonMaximaSuppressionLimitKernel</a> </td></tr>
<tr id="row_0_380_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_p_p_box_with_non_maxima_suppression_limit_kernel.xhtml" target="_self">CPPBoxWithNonMaximaSuppressionLimitKernel</a></td><td class="desc">CPP kernel to perform computation of BoxWithNonMaximaSuppressionLimit </td></tr>
<tr id="row_0_381_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_p_p_corner_candidates_kernel.xhtml" target="_self">CPPCornerCandidatesKernel</a></td><td class="desc">CPP kernel to perform corner candidates </td></tr>
<tr id="row_0_382_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_p_p_detection_output_layer.xhtml" target="_self">CPPDetectionOutputLayer</a></td><td class="desc">CPP Function to generate the detection output based on location and confidence predictions by doing non maximum suppression </td></tr>
<tr id="row_0_383_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_p_p_detection_post_process_layer.xhtml" target="_self">CPPDetectionPostProcessLayer</a></td><td class="desc">CPP Function to generate the detection output based on center size encoded boxes, class prediction and anchors by doing non maximum suppression </td></tr>
<tr id="row_0_384_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_p_p_detection_window_non_maxima_suppression_kernel.xhtml" target="_self">CPPDetectionWindowNonMaximaSuppressionKernel</a></td><td class="desc">CPP kernel to perform in-place computation of euclidean distance on IDetectionWindowArray </td></tr>
<tr id="row_0_385_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_p_p_flip_weights_kernel.xhtml" target="_self">CPPFlipWeightsKernel</a></td><td class="desc">CPP kernel to perform 180 degrees flipping on deconvolution weights </td></tr>
<tr id="row_0_386_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_p_p_non_maximum_suppression.xhtml" target="_self">CPPNonMaximumSuppression</a></td><td class="desc">CPP Function to perform non maximum suppression on the bounding boxes and scores </td></tr>
<tr id="row_0_387_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_p_p_non_maximum_suppression_kernel.xhtml" target="_self">CPPNonMaximumSuppressionKernel</a></td><td class="desc">CPP Function to perform non maximum suppression on the bounding boxes and scores </td></tr>
<tr id="row_0_388_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_p_p_permute.xhtml" target="_self">CPPPermute</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_p_p_permute_kernel.xhtml">CPPPermuteKernel</a> </td></tr>
<tr id="row_0_389_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_p_p_permute_kernel.xhtml" target="_self">CPPPermuteKernel</a></td><td class="desc">CPP kernel to perform tensor permutation </td></tr>
<tr id="row_0_390_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_p_p_scheduler.xhtml" target="_self">CPPScheduler</a></td><td class="desc">C++11 implementation of a pool of threads to automatically split a kernel's execution among several threads </td></tr>
<tr id="row_0_391_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_p_p_sort_euclidean_distance_kernel.xhtml" target="_self">CPPSortEuclideanDistanceKernel</a></td><td class="desc">CPP kernel to perform sorting and euclidean distance </td></tr>
<tr id="row_0_392_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_p_p_split.xhtml" target="_self">CPPSplit</a></td><td class="desc">Basic function to split a tensor along a given axis </td></tr>
<tr id="row_0_393_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_p_p_top_k_v.xhtml" target="_self">CPPTopKV</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_p_p_top_k_v_kernel.xhtml">CPPTopKVKernel</a> </td></tr>
<tr id="row_0_394_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_p_p_top_k_v_kernel.xhtml" target="_self">CPPTopKVKernel</a></td><td class="desc">CPP kernel to perform tensor TopKV operation </td></tr>
<tr id="row_0_395_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_p_p_upsample.xhtml" target="_self">CPPUpsample</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_p_p_upsample.xhtml">CPPUpsample</a> </td></tr>
<tr id="row_0_396_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_p_p_upsample_kernel.xhtml" target="_self">CPPUpsampleKernel</a></td><td class="desc">CPP kernel to perform tensor upsample </td></tr>
<tr id="row_0_397_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_p_u_info.xhtml" target="_self">CPUInfo</a></td><td class="desc"></td></tr>
<tr id="row_0_398_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1_depthwise_convolution_reshape_info.xhtml" target="_self">DepthwiseConvolutionReshapeInfo</a></td><td class="desc"></td></tr>
<tr id="row_0_399_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_detection_output_layer_info.xhtml" target="_self">DetectionOutputLayerInfo</a></td><td class="desc">Detection Output layer info </td></tr>
<tr id="row_0_400_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml" target="_self">DetectionPostProcessLayerInfo</a></td><td class="desc">Detection Output layer info </td></tr>
<tr id="row_0_401_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1_detection_window.xhtml" target="_self">DetectionWindow</a></td><td class="desc">Detection window used for the object detection </td></tr>
<tr id="row_0_402_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1_device_properties.xhtml" target="_self">DeviceProperties</a></td><td class="desc">Device properties </td></tr>
<tr id="row_0_403_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_dimensions.xhtml" target="_self">Dimensions</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_dimensions.xhtml" title="Dimensions with dimensionality.">Dimensions</a> with dimensionality </td></tr>
<tr id="row_0_404_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1_direct_convolution_layer_output_stage_kernel_info.xhtml" target="_self">DirectConvolutionLayerOutputStageKernelInfo</a></td><td class="desc">Descriptor used by the direct convolution layer output stage kernels </td></tr>
<tr id="row_0_405_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_distribution1_d.xhtml" target="_self">Distribution1D</a></td><td class="desc">Basic implementation of the 1D distribution interface </td></tr>
<tr id="row_0_406_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1_d_w_c_kernel_info.xhtml" target="_self">DWCKernelInfo</a></td><td class="desc">Descriptor used by the depthwise convolution kernels </td></tr>
<tr id="row_0_407_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1_d_w_c_weights_kernel_info.xhtml" target="_self">DWCWeightsKernelInfo</a></td><td class="desc">Descriptor used by the depthwise convolution kernels to retrieve the number of output elements processed by each thread </td></tr>
<tr id="row_0_408_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1enable__bitwise__ops.xhtml" target="_self">enable_bitwise_ops</a></td><td class="desc">Disable bitwise operations by default </td></tr>
<tr id="row_0_409_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1enable__bitwise__ops_3_01arm__compute_1_1_g_p_u_target_01_4.xhtml" target="_self">enable_bitwise_ops&lt; arm_compute::GPUTarget &gt;</a></td><td class="desc">Enable bitwise operations on GPUTarget enumerations </td></tr>
<tr id="row_0_410_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1_f_f_t1_d_info.xhtml" target="_self">FFT1DInfo</a></td><td class="desc">Descriptor used by the FFT1D function </td></tr>
<tr id="row_0_411_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1_f_f_t2_d_info.xhtml" target="_self">FFT2DInfo</a></td><td class="desc">Descriptor used by the FFT2D function </td></tr>
<tr id="row_0_412_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1_f_f_t_digit_reverse_kernel_info.xhtml" target="_self">FFTDigitReverseKernelInfo</a></td><td class="desc">Descriptor for FFT digit reverse kernels </td></tr>
<tr id="row_0_413_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1_f_f_t_radix_stage_kernel_info.xhtml" target="_self">FFTRadixStageKernelInfo</a></td><td class="desc">Descriptor used by the FFT core kernels </td></tr>
<tr id="row_0_414_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1_f_f_t_scale_kernel_info.xhtml" target="_self">FFTScaleKernelInfo</a></td><td class="desc">Descriptor for FFT scale kernels </td></tr>
<tr id="row_0_415_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1_fully_connected_layer_info.xhtml" target="_self">FullyConnectedLayerInfo</a></td><td class="desc">Fully connected layer info </td></tr>
<tr id="row_0_416_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_absolute_difference.xhtml" target="_self">GCAbsoluteDifference</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_g_c_absolute_difference_kernel.xhtml">GCAbsoluteDifferenceKernel</a> </td></tr>
<tr id="row_0_417_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_absolute_difference_kernel.xhtml" target="_self">GCAbsoluteDifferenceKernel</a></td><td class="desc">Interface for the absolute difference kernel </td></tr>
<tr id="row_0_418_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_activation_layer.xhtml" target="_self">GCActivationLayer</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_g_c_activation_layer_kernel.xhtml">GCActivationLayerKernel</a> </td></tr>
<tr id="row_0_419_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_activation_layer_kernel.xhtml" target="_self">GCActivationLayerKernel</a></td><td class="desc">Interface for the activation layer kernel </td></tr>
<tr id="row_0_420_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_arithmetic_addition.xhtml" target="_self">GCArithmeticAddition</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_g_c_arithmetic_addition_kernel.xhtml">GCArithmeticAdditionKernel</a> </td></tr>
<tr id="row_0_421_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_arithmetic_addition_kernel.xhtml" target="_self">GCArithmeticAdditionKernel</a></td><td class="desc">Interface for the arithmetic addition kernel </td></tr>
<tr id="row_0_422_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_batch_normalization_layer.xhtml" target="_self">GCBatchNormalizationLayer</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_g_c_batch_normalization_layer_kernel.xhtml">GCBatchNormalizationLayerKernel</a> and simulate a batch normalization layer </td></tr>
<tr id="row_0_423_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_batch_normalization_layer_kernel.xhtml" target="_self">GCBatchNormalizationLayerKernel</a></td><td class="desc">Interface for the BatchNormalization layer kernel </td></tr>
<tr id="row_0_424_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_buffer_allocator.xhtml" target="_self">GCBufferAllocator</a></td><td class="desc">Default GLES buffer allocator implementation </td></tr>
<tr id="row_0_425_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_buffer_memory_region.xhtml" target="_self">GCBufferMemoryRegion</a></td><td class="desc">GLES buffer memory region implementation </td></tr>
<tr id="row_0_426_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_col2_im_kernel.xhtml" target="_self">GCCol2ImKernel</a></td><td class="desc">Interface for the col2im reshaping kernel </td></tr>
<tr id="row_0_427_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_concatenate_layer.xhtml" target="_self">GCConcatenateLayer</a></td><td class="desc">Basic function to execute concatenate tensors along a given axis </td></tr>
<tr id="row_0_428_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_convolution_layer.xhtml" target="_self">GCConvolutionLayer</a></td><td class="desc">Basic function to compute the convolution layer </td></tr>
<tr id="row_0_429_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_convolution_layer_reshape_weights.xhtml" target="_self">GCConvolutionLayerReshapeWeights</a></td><td class="desc">Function to reshape and transpose the weights </td></tr>
<tr id="row_0_430_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_core_runtime_context.xhtml" target="_self">GCCoreRuntimeContext</a></td><td class="desc">Core runtime context for OpenGL ES </td></tr>
<tr id="row_0_431_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_depth_concatenate_layer_kernel.xhtml" target="_self">GCDepthConcatenateLayerKernel</a></td><td class="desc">Interface for the depth concatenate kernel </td></tr>
<tr id="row_0_432_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_depthwise_convolution_layer3x3.xhtml" target="_self">GCDepthwiseConvolutionLayer3x3</a></td><td class="desc">Basic function to execute a depthwise convolution for kernel size 3x3xC </td></tr>
<tr id="row_0_433_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_depthwise_convolution_layer3x3_kernel.xhtml" target="_self">GCDepthwiseConvolutionLayer3x3Kernel</a></td><td class="desc">Interface for the kernel to run a 3x3 depthwise convolution on a tensor </td></tr>
<tr id="row_0_434_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_direct_convolution_layer.xhtml" target="_self">GCDirectConvolutionLayer</a></td><td class="desc">Basic function to execute direct convolution function </td></tr>
<tr id="row_0_435_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_direct_convolution_layer_kernel.xhtml" target="_self">GCDirectConvolutionLayerKernel</a></td><td class="desc">Interface for the direct convolution kernel </td></tr>
<tr id="row_0_436_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_dropout_layer.xhtml" target="_self">GCDropoutLayer</a></td><td class="desc">Basic function to do dropout op </td></tr>
<tr id="row_0_437_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_dropout_layer_kernel.xhtml" target="_self">GCDropoutLayerKernel</a></td><td class="desc">Interface for the dropout layer kernel </td></tr>
<tr id="row_0_438_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_fill_border.xhtml" target="_self">GCFillBorder</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_g_c_fill_border_kernel.xhtml">GCFillBorderKernel</a> </td></tr>
<tr id="row_0_439_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_fill_border_kernel.xhtml" target="_self">GCFillBorderKernel</a></td><td class="desc">Interface for filling the border of a kernel </td></tr>
<tr id="row_0_440_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_fully_connected_layer.xhtml" target="_self">GCFullyConnectedLayer</a></td><td class="desc">Basic function to compute a Fully Connected layer on OpenGL ES </td></tr>
<tr id="row_0_441_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_fully_connected_layer_reshape_weights.xhtml" target="_self">GCFullyConnectedLayerReshapeWeights</a></td><td class="desc">Basic function to reshape the weights of Fully Connected layer with OpenGL ES </td></tr>
<tr id="row_0_442_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_g_e_m_m.xhtml" target="_self">GCGEMM</a></td><td class="desc">Basic function to execute GEMM on OpenGLES Compute </td></tr>
<tr id="row_0_443_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_g_e_m_m_interleave4x4.xhtml" target="_self">GCGEMMInterleave4x4</a></td><td class="desc">Basic function to execute <a class="el" href="classarm__compute_1_1_g_c_g_e_m_m_interleave4x4_kernel.xhtml" title="OpenGL ES kernel which interleaves the elements of a matrix A in chunk of 4x4.">GCGEMMInterleave4x4Kernel</a> </td></tr>
<tr id="row_0_444_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_g_e_m_m_interleave4x4_kernel.xhtml" target="_self">GCGEMMInterleave4x4Kernel</a></td><td class="desc">OpenGL ES kernel which interleaves the elements of a matrix A in chunk of 4x4 </td></tr>
<tr id="row_0_445_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_g_e_m_m_matrix_accumulate_biases_kernel.xhtml" target="_self">GCGEMMMatrixAccumulateBiasesKernel</a></td><td class="desc">Interface to add a bias to each row of the input tensor </td></tr>
<tr id="row_0_446_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_g_e_m_m_matrix_addition_kernel.xhtml" target="_self">GCGEMMMatrixAdditionKernel</a></td><td class="desc">OpenGL ES kernel to perform the in-place matrix addition between 2 matrices, taking into account that the second matrix might be weighted by a scalar value beta </td></tr>
<tr id="row_0_447_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_g_e_m_m_matrix_multiply_kernel.xhtml" target="_self">GCGEMMMatrixMultiplyKernel</a></td><td class="desc">GLES Compute kernel to multiply two input matrices "A" and "B" or to multiply a vector "A" by a matrix "B" </td></tr>
<tr id="row_0_448_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_g_e_m_m_transpose1x_w.xhtml" target="_self">GCGEMMTranspose1xW</a></td><td class="desc">Basic function to execute <a class="el" href="classarm__compute_1_1_g_c_g_e_m_m_transpose1x_w_kernel.xhtml" title="OpenGLES kernel which transposes the elements of a matrix in chunks of 1xW, where W is equal to (16 /...">GCGEMMTranspose1xWKernel</a> </td></tr>
<tr id="row_0_449_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_g_e_m_m_transpose1x_w_kernel.xhtml" target="_self">GCGEMMTranspose1xWKernel</a></td><td class="desc">OpenGLES kernel which transposes the elements of a matrix in chunks of 1xW, where W is equal to (16 / element size of the tensor) </td></tr>
<tr id="row_0_450_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_im2_col_kernel.xhtml" target="_self">GCIm2ColKernel</a></td><td class="desc">Interface for the im2col reshape kernel </td></tr>
<tr id="row_0_451_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_kernel.xhtml" target="_self">GCKernel</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_g_c_kernel.xhtml" title="GCKernel class.">GCKernel</a> class </td></tr>
<tr id="row_0_452_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_kernel_library.xhtml" target="_self">GCKernelLibrary</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_g_c_kernel_library.xhtml" title="GCKernelLibrary class.">GCKernelLibrary</a> class </td></tr>
<tr id="row_0_453_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_logits1_d_max_kernel.xhtml" target="_self">GCLogits1DMaxKernel</a></td><td class="desc">Interface for the identifying the max value of 1D Logits </td></tr>
<tr id="row_0_454_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_logits1_d_norm_kernel.xhtml" target="_self">GCLogits1DNormKernel</a></td><td class="desc">Interface for calculating the final step of the Softmax Layer where each logit value is multiplied by the inverse of the sum of the logits </td></tr>
<tr id="row_0_455_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_logits1_d_shift_exp_sum_kernel.xhtml" target="_self">GCLogits1DShiftExpSumKernel</a></td><td class="desc">Interface for shifting the logits values around the max value and exponentiating the result </td></tr>
<tr id="row_0_456_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_memory.xhtml" target="_self">GCMemory</a></td><td class="desc">GLES implementation of memory object </td></tr>
<tr id="row_0_457_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_normalization_layer.xhtml" target="_self">GCNormalizationLayer</a></td><td class="desc">Basic function to compute a normalization layer </td></tr>
<tr id="row_0_458_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_normalization_layer_kernel.xhtml" target="_self">GCNormalizationLayerKernel</a></td><td class="desc">Interface for the normalization layer kernel </td></tr>
<tr id="row_0_459_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_normalize_planar_y_u_v_layer.xhtml" target="_self">GCNormalizePlanarYUVLayer</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_g_c_normalize_planar_y_u_v_layer_kernel.xhtml">GCNormalizePlanarYUVLayerKernel</a> </td></tr>
<tr id="row_0_460_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_normalize_planar_y_u_v_layer_kernel.xhtml" target="_self">GCNormalizePlanarYUVLayerKernel</a></td><td class="desc">Interface for the NormalizePlanarYUV layer kernel </td></tr>
<tr id="row_0_461_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_pixel_wise_multiplication.xhtml" target="_self">GCPixelWiseMultiplication</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_g_c_pixel_wise_multiplication_kernel.xhtml">GCPixelWiseMultiplicationKernel</a> </td></tr>
<tr id="row_0_462_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_pixel_wise_multiplication_kernel.xhtml" target="_self">GCPixelWiseMultiplicationKernel</a></td><td class="desc">Interface for the pixelwise multiplication kernel </td></tr>
<tr id="row_0_463_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_pooling_layer.xhtml" target="_self">GCPoolingLayer</a></td><td class="desc">Basic function to simulate a pooling layer with the specified pooling operation </td></tr>
<tr id="row_0_464_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_pooling_layer_kernel.xhtml" target="_self">GCPoolingLayerKernel</a></td><td class="desc">Interface for the pooling layer kernel </td></tr>
<tr id="row_0_465_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_program.xhtml" target="_self">GCProgram</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_g_c_program.xhtml" title="GCProgram class.">GCProgram</a> class </td></tr>
<tr id="row_0_466_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_runtime_context.xhtml" target="_self">GCRuntimeContext</a></td><td class="desc">Runtime context </td></tr>
<tr id="row_0_467_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_scale.xhtml" target="_self">GCScale</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_g_c_scale_kernel.xhtml">GCScaleKernel</a> </td></tr>
<tr id="row_0_468_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_scale_kernel.xhtml" target="_self">GCScaleKernel</a></td><td class="desc">Interface for the scale kernel </td></tr>
<tr id="row_0_469_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_scheduler.xhtml" target="_self">GCScheduler</a></td><td class="desc">Provides global access to a OpenGL ES context and command queue </td></tr>
<tr id="row_0_470_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_softmax_layer.xhtml" target="_self">GCSoftmaxLayer</a></td><td class="desc">Basic function to compute a SoftmaxLayer </td></tr>
<tr id="row_0_471_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_tensor.xhtml" target="_self">GCTensor</a></td><td class="desc">Interface for OpenGL ES tensor </td></tr>
<tr id="row_0_472_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_tensor_allocator.xhtml" target="_self">GCTensorAllocator</a></td><td class="desc">Basic implementation of a GLES memory tensor allocator </td></tr>
<tr id="row_0_473_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_tensor_shift.xhtml" target="_self">GCTensorShift</a></td><td class="desc">Basic function to execute shift function for tensor </td></tr>
<tr id="row_0_474_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_tensor_shift_kernel.xhtml" target="_self">GCTensorShiftKernel</a></td><td class="desc">Interface for the kernel to shift valid data on a tensor </td></tr>
<tr id="row_0_475_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_transpose.xhtml" target="_self">GCTranspose</a></td><td class="desc">Basic function to transpose a matrix on OpenGL ES </td></tr>
<tr id="row_0_476_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_transpose_kernel.xhtml" target="_self">GCTransposeKernel</a></td><td class="desc">OpenGL ES kernel which transposes the elements of a matrix </td></tr>
<tr id="row_0_477_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_c_weights_reshape_kernel.xhtml" target="_self">GCWeightsReshapeKernel</a></td><td class="desc">GLES Compute kernel to perform reshaping on the weights used by convolution and locally connected layer </td></tr>
<tr id="row_0_478_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_e_m_m_info.xhtml" target="_self">GEMMInfo</a></td><td class="desc">GEMM information class </td></tr>
<tr id="row_0_479_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1_g_e_m_m_kernel_info.xhtml" target="_self">GEMMKernelInfo</a></td><td class="desc">Descriptor used by the GEMM kernels </td></tr>
<tr id="row_0_480_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1_g_e_m_m_l_h_s_matrix_info.xhtml" target="_self">GEMMLHSMatrixInfo</a></td><td class="desc">GEMM LHS (Left Hand Side) matrix information </td></tr>
<tr id="row_0_481_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1_g_e_m_m_lowp_output_stage_info.xhtml" target="_self">GEMMLowpOutputStageInfo</a></td><td class="desc">GEMMLowp output stage info </td></tr>
<tr id="row_0_482_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml" target="_self">GEMMReshapeInfo</a></td><td class="desc">GEMM reshape information class </td></tr>
<tr id="row_0_483_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1_g_e_m_m_r_h_s_matrix_info.xhtml" target="_self">GEMMRHSMatrixInfo</a></td><td class="desc">GEMM RHS (Right Hand Side) matrix information </td></tr>
<tr id="row_0_484_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_generate_proposals_info.xhtml" target="_self">GenerateProposalsInfo</a></td><td class="desc">Generate Proposals Information class </td></tr>
<tr id="row_0_485_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_h_o_g.xhtml" target="_self">HOG</a></td><td class="desc">CPU implementation of <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object.">HOG</a> data-object </td></tr>
<tr id="row_0_486_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_h_o_g_info.xhtml" target="_self">HOGInfo</a></td><td class="desc">Store the <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object.">HOG</a>'s metadata </td></tr>
<tr id="row_0_487_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_access_window.xhtml" target="_self">IAccessWindow</a></td><td class="desc">Interface describing methods to update access window and padding based on kernel parameters </td></tr>
<tr id="row_0_488_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_allocator.xhtml" target="_self">IAllocator</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_allocator.xhtml" title="Default malloc allocator implementation.">Allocator</a> interface </td></tr>
<tr id="row_0_489_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_array.xhtml" target="_self">IArray</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_array.xhtml" title="Basic implementation of the IArray interface which allocates a static number of T values.">Array</a> of type T </td></tr>
<tr id="row_0_490_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_asset_manager.xhtml" target="_self">IAssetManager</a></td><td class="desc">Asset manager interface </td></tr>
<tr id="row_0_491_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_c_l_array.xhtml" target="_self">ICLArray</a></td><td class="desc">Interface for OpenCL <a class="el" href="classarm__compute_1_1_array.xhtml" title="Basic implementation of the IArray interface which allocates a static number of T values.">Array</a> </td></tr>
<tr id="row_0_492_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_c_l_depthwise_convolution_layer3x3_kernel.xhtml" target="_self">ICLDepthwiseConvolutionLayer3x3Kernel</a></td><td class="desc">Interface for the kernel to run a 3x3 depthwise convolution on a tensor </td></tr>
<tr id="row_0_493_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_c_l_distribution1_d.xhtml" target="_self">ICLDistribution1D</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_i_c_l_distribution1_d.xhtml" title="ICLDistribution1D interface class.">ICLDistribution1D</a> interface class </td></tr>
<tr id="row_0_494_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_c_l_g_e_m_m_kernel_configuration.xhtml" target="_self">ICLGEMMKernelConfiguration</a></td><td class="desc">Basic interface for the GEMM kernel configuration </td></tr>
<tr id="row_0_495_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_c_l_g_e_m_m_lowp_reduction_kernel.xhtml" target="_self">ICLGEMMLowpReductionKernel</a></td><td class="desc">Common interface for all OpenCL reduction kernels </td></tr>
<tr id="row_0_496_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_c_l_h_o_g.xhtml" target="_self">ICLHOG</a></td><td class="desc">Interface for OpenCL <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object.">HOG</a> data-object </td></tr>
<tr id="row_0_497_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml" target="_self">ICLKernel</a></td><td class="desc">Common interface for all the OpenCL kernels </td></tr>
<tr id="row_0_498_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_c_l_lut.xhtml" target="_self">ICLLut</a></td><td class="desc">Interface for OpenCL LUT </td></tr>
<tr id="row_0_499_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_c_l_memory_region.xhtml" target="_self">ICLMemoryRegion</a></td><td class="desc">OpenCL memory region interface </td></tr>
<tr id="row_0_500_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_c_l_multi_h_o_g.xhtml" target="_self">ICLMultiHOG</a></td><td class="desc">Interface for storing multiple <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object.">HOG</a> data-objects </td></tr>
<tr id="row_0_501_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_c_l_multi_image.xhtml" target="_self">ICLMultiImage</a></td><td class="desc">Interface for OpenCL multi-planar images </td></tr>
<tr id="row_0_502_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_c_l_simple2_d_kernel.xhtml" target="_self">ICLSimple2DKernel</a></td><td class="desc">Interface for simple OpenCL kernels having 1 tensor input and 1 tensor output </td></tr>
<tr id="row_0_503_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_c_l_simple3_d_kernel.xhtml" target="_self">ICLSimple3DKernel</a></td><td class="desc">Interface for simple OpenCL kernels having 1 tensor input and 1 tensor output </td></tr>
<tr id="row_0_504_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_c_l_simple_function.xhtml" target="_self">ICLSimpleFunction</a></td><td class="desc">Basic interface for functions which have a single OpenCL kernel </td></tr>
<tr id="row_0_505_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_c_l_simple_kernel.xhtml" target="_self">ICLSimpleKernel</a></td><td class="desc">Interface for simple OpenCL kernels having 1 tensor input and 1 tensor output </td></tr>
<tr id="row_0_506_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_c_l_s_v_m_memory_region.xhtml" target="_self">ICLSVMMemoryRegion</a></td><td class="desc">OpenCL SVM memory region interface </td></tr>
<tr id="row_0_507_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml" target="_self">ICLTensor</a></td><td class="desc">Interface for OpenCL tensor </td></tr>
<tr id="row_0_508_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_c_l_tuner.xhtml" target="_self">ICLTuner</a></td><td class="desc">Basic interface for tuning the OpenCL kernels </td></tr>
<tr id="row_0_509_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_c_p_p_kernel.xhtml" target="_self">ICPPKernel</a></td><td class="desc">Common interface for all kernels implemented in C++ </td></tr>
<tr id="row_0_510_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_c_p_p_simple_function.xhtml" target="_self">ICPPSimpleFunction</a></td><td class="desc">Basic interface for functions which have a single CPP kernel </td></tr>
<tr id="row_0_511_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_c_p_p_simple_kernel.xhtml" target="_self">ICPPSimpleKernel</a></td><td class="desc">Interface for simple C++ kernels having 1 tensor input and 1 tensor output </td></tr>
<tr id="row_0_512_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_distribution.xhtml" target="_self">IDistribution</a></td><td class="desc">Interface for distribution objects </td></tr>
<tr id="row_0_513_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_distribution1_d.xhtml" target="_self">IDistribution1D</a></td><td class="desc">1D Distribution interface </td></tr>
<tr id="row_0_514_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_function.xhtml" target="_self">IFunction</a></td><td class="desc">Base class for all functions </td></tr>
<tr id="row_0_515_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_g_c_kernel.xhtml" target="_self">IGCKernel</a></td><td class="desc">Common interface for all the GLES kernels </td></tr>
<tr id="row_0_516_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_g_c_memory_region.xhtml" target="_self">IGCMemoryRegion</a></td><td class="desc">GLES memory region interface </td></tr>
<tr id="row_0_517_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_g_c_simple2_d_kernel.xhtml" target="_self">IGCSimple2DKernel</a></td><td class="desc">Interface for simple OpenGL ES kernels having 1 tensor input and 1 tensor output </td></tr>
<tr id="row_0_518_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_g_c_simple3_d_kernel.xhtml" target="_self">IGCSimple3DKernel</a></td><td class="desc">Interface for simple GLES kernels having 1 tensor input and 1 tensor output </td></tr>
<tr id="row_0_519_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_g_c_simple_function.xhtml" target="_self">IGCSimpleFunction</a></td><td class="desc">Basic interface for functions which have a single OpenGL ES kernel </td></tr>
<tr id="row_0_520_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_g_c_simple_kernel.xhtml" target="_self">IGCSimpleKernel</a></td><td class="desc">Interface for simple OpenGL ES kernels having 1 tensor input and 1 tensor output </td></tr>
<tr id="row_0_521_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_g_c_tensor.xhtml" target="_self">IGCTensor</a></td><td class="desc">Interface for GLES Compute tensor </td></tr>
<tr id="row_0_522_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_h_o_g.xhtml" target="_self">IHOG</a></td><td class="desc">Interface for <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object.">HOG</a> data-object </td></tr>
<tr id="row_0_523_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_kernel.xhtml" target="_self">IKernel</a></td><td class="desc">Common information for all the kernels </td></tr>
<tr id="row_0_524_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_lifetime_manager.xhtml" target="_self">ILifetimeManager</a></td><td class="desc">Interface for managing the lifetime of objects </td></tr>
<tr id="row_0_525_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_lut.xhtml" target="_self">ILut</a></td><td class="desc">Lookup Table object interface </td></tr>
<tr id="row_0_526_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_lut_allocator.xhtml" target="_self">ILutAllocator</a></td><td class="desc">Basic interface to allocate LUTs' </td></tr>
<tr id="row_0_527_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_memory.xhtml" target="_self">IMemory</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_memory.xhtml" title="CPU implementation of memory object.">Memory</a> interface </td></tr>
<tr id="row_0_528_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_memory_group.xhtml" target="_self">IMemoryGroup</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_memory.xhtml" title="CPU implementation of memory object.">Memory</a> group interface </td></tr>
<tr id="row_0_529_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_memory_manageable.xhtml" target="_self">IMemoryManageable</a></td><td class="desc">Interface of an object than can be memory managed </td></tr>
<tr id="row_0_530_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_memory_manager.xhtml" target="_self">IMemoryManager</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_memory.xhtml" title="CPU implementation of memory object.">Memory</a> manager interface to handle allocations of backing memory </td></tr>
<tr id="row_0_531_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_memory_pool.xhtml" target="_self">IMemoryPool</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_memory.xhtml" title="CPU implementation of memory object.">Memory</a> Pool Inteface </td></tr>
<tr id="row_0_532_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_memory_region.xhtml" target="_self">IMemoryRegion</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_memory.xhtml" title="CPU implementation of memory object.">Memory</a> region interface </td></tr>
<tr id="row_0_533_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_multi_h_o_g.xhtml" target="_self">IMultiHOG</a></td><td class="desc">Interface for storing multiple <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object.">HOG</a> data-objects </td></tr>
<tr id="row_0_534_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_multi_image.xhtml" target="_self">IMultiImage</a></td><td class="desc">Interface for multi-planar images </td></tr>
<tr id="row_0_535_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_n_e_g_e_m_m_lowp_reduction_kernel.xhtml" target="_self">INEGEMMLowpReductionKernel</a></td><td class="desc">Common interface for all NEON reduction kernels </td></tr>
<tr id="row_0_536_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_n_e_harris_score_kernel.xhtml" target="_self">INEHarrisScoreKernel</a></td><td class="desc">Common interface for all Harris Score kernels </td></tr>
<tr id="row_0_537_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_n_e_simple_function.xhtml" target="_self">INESimpleFunction</a></td><td class="desc">Basic interface for functions which have a single NEON kernel </td></tr>
<tr id="row_0_538_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_n_e_simple_function_no_border.xhtml" target="_self">INESimpleFunctionNoBorder</a></td><td class="desc">Basic interface for functions which have a single NEON kernel and no border </td></tr>
<tr id="row_0_539_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_n_e_warp_kernel.xhtml" target="_self">INEWarpKernel</a></td><td class="desc">Common interface for warp affine and warp perspective </td></tr>
<tr id="row_0_540_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_n_e_winograd_layer_transform_input_kernel.xhtml" target="_self">INEWinogradLayerTransformInputKernel</a></td><td class="desc">Interface for the NEON kernel to perform Winograd input transform </td></tr>
<tr id="row_0_541_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_n_e_winograd_layer_transform_output_kernel.xhtml" target="_self">INEWinogradLayerTransformOutputKernel</a></td><td class="desc">Interface for the NEON kernel to perform Winograd output transform </td></tr>
<tr id="row_0_542_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_n_e_winograd_layer_transform_weights_kernel.xhtml" target="_self">INEWinogradLayerTransformWeightsKernel</a></td><td class="desc">Interface for the NEON kernel to perform Winograd weights transform </td></tr>
<tr id="row_0_543_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1_instance_normalization_layer_kernel_info.xhtml" target="_self">InstanceNormalizationLayerKernelInfo</a></td><td class="desc"></td></tr>
<tr id="row_0_544_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1_internal_key_point.xhtml" target="_self">InternalKeyPoint</a></td><td class="desc">Internal keypoint class for Lucas-Kanade Optical Flow </td></tr>
<tr id="row_0_545_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1_i_o_format_info.xhtml" target="_self">IOFormatInfo</a></td><td class="desc">IO formatting information class </td></tr>
<tr id="row_0_546_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_pool_manager.xhtml" target="_self">IPoolManager</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_memory.xhtml" title="CPU implementation of memory object.">Memory</a> pool manager interface </td></tr>
<tr id="row_0_547_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_pyramid.xhtml" target="_self">IPyramid</a></td><td class="desc">Interface for pyramid data-object </td></tr>
<tr id="row_0_548_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_runtime_context.xhtml" target="_self">IRuntimeContext</a></td><td class="desc">Context interface </td></tr>
<tr id="row_0_549_" style="display:none;"><td class="entry"><span style="width:16px;display:inline-block;">&#160;</span><span id="arr_0_549_" class="arrow" onclick="toggleFolder('0_549_')">&#9658;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_scheduler.xhtml" target="_self">IScheduler</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_scheduler.xhtml" title="Configurable scheduler which supports multiple multithreading APIs and choosing between different sch...">Scheduler</a> interface to run kernels </td></tr>
<tr id="row_0_549_0_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_scheduler_1_1_hints.xhtml" target="_self">Hints</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_scheduler.xhtml" title="Configurable scheduler which supports multiple multithreading APIs and choosing between different sch...">Scheduler</a> hints </td></tr>
<tr id="row_0_550_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_simple_lifetime_manager.xhtml" target="_self">ISimpleLifetimeManager</a></td><td class="desc">Abstract class of the simple lifetime manager interface </td></tr>
<tr id="row_0_551_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_tensor.xhtml" target="_self">ITensor</a></td><td class="desc">Interface for NEON tensor </td></tr>
<tr id="row_0_552_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_tensor_allocator.xhtml" target="_self">ITensorAllocator</a></td><td class="desc">Interface to allocate tensors </td></tr>
<tr id="row_0_553_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml" target="_self">ITensorInfo</a></td><td class="desc">Store the tensor's metadata </td></tr>
<tr id="row_0_554_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_iterator.xhtml" target="_self">Iterator</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_iterator.xhtml" title="Iterator updated by execute_window_loop for each window element.">Iterator</a> updated by <a class="el" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a> for each window element </td></tr>
<tr id="row_0_555_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_transform_weights.xhtml" target="_self">ITransformWeights</a></td><td class="desc">Weights tensor transform interface In order to identify the different reshape functions, each reshape function has to generate a unique id </td></tr>
<tr id="row_0_556_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_weights_manager.xhtml" target="_self">IWeightsManager</a></td><td class="desc">Weights manager interface to handle weights transformations </td></tr>
<tr id="row_0_557_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_kernel.xhtml" target="_self">Kernel</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> class </td></tr>
<tr id="row_0_558_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1_key_point.xhtml" target="_self">KeyPoint</a></td><td class="desc"><a class="el" href="struct_keypoint.xhtml">Keypoint</a> type </td></tr>
<tr id="row_0_559_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_l_s_t_m_params.xhtml" target="_self">LSTMParams</a></td><td class="desc"></td></tr>
<tr id="row_0_560_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_lut.xhtml" target="_self">Lut</a></td><td class="desc">Basic implementation of the LUT interface </td></tr>
<tr id="row_0_561_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_lut_allocator.xhtml" target="_self">LutAllocator</a></td><td class="desc">Basic implementation of a CPU memory LUT allocator </td></tr>
<tr id="row_0_562_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_m_e_m_info.xhtml" target="_self">MEMInfo</a></td><td class="desc"></td></tr>
<tr id="row_0_563_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_memory.xhtml" target="_self">Memory</a></td><td class="desc">CPU implementation of memory object </td></tr>
<tr id="row_0_564_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_memory_group.xhtml" target="_self">MemoryGroup</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_memory.xhtml" title="CPU implementation of memory object.">Memory</a> group </td></tr>
<tr id="row_0_565_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_memory_group_resource_scope.xhtml" target="_self">MemoryGroupResourceScope</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_memory.xhtml" title="CPU implementation of memory object.">Memory</a> group resources scope handling class </td></tr>
<tr id="row_0_566_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_memory_manager_on_demand.xhtml" target="_self">MemoryManagerOnDemand</a></td><td class="desc">On-demand memory manager </td></tr>
<tr id="row_0_567_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_memory_region.xhtml" target="_self">MemoryRegion</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_memory.xhtml" title="CPU implementation of memory object.">Memory</a> region CPU implementation </td></tr>
<tr id="row_0_568_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1_min_max_location_values.xhtml" target="_self">MinMaxLocationValues</a></td><td class="desc">Min and max values and locations </td></tr>
<tr id="row_0_569_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_multi_h_o_g.xhtml" target="_self">MultiHOG</a></td><td class="desc">CPU implementation of multi <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object.">HOG</a> data-object </td></tr>
<tr id="row_0_570_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_multi_image.xhtml" target="_self">MultiImage</a></td><td class="desc">Basic implementation of the multi-planar image interface </td></tr>
<tr id="row_0_571_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_multi_image_info.xhtml" target="_self">MultiImageInfo</a></td><td class="desc">Store the multi-planar image's metadata </td></tr>
<tr id="row_0_572_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_abs_layer.xhtml" target="_self">NEAbsLayer</a></td><td class="desc">Basic function to compute the absolute value of an input tensor </td></tr>
<tr id="row_0_573_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_absolute_difference.xhtml" target="_self">NEAbsoluteDifference</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_absolute_difference_kernel.xhtml">NEAbsoluteDifferenceKernel</a> </td></tr>
<tr id="row_0_574_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_absolute_difference_kernel.xhtml" target="_self">NEAbsoluteDifferenceKernel</a></td><td class="desc">Interface for the absolute difference kernel </td></tr>
<tr id="row_0_575_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_accumulate.xhtml" target="_self">NEAccumulate</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_accumulate_kernel.xhtml">NEAccumulateKernel</a> </td></tr>
<tr id="row_0_576_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_accumulate_kernel.xhtml" target="_self">NEAccumulateKernel</a></td><td class="desc">Interface for the accumulate kernel </td></tr>
<tr id="row_0_577_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_accumulate_squared.xhtml" target="_self">NEAccumulateSquared</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_accumulate_squared_kernel.xhtml">NEAccumulateSquaredKernel</a> </td></tr>
<tr id="row_0_578_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_accumulate_squared_kernel.xhtml" target="_self">NEAccumulateSquaredKernel</a></td><td class="desc">Interface for the accumulate squared kernel </td></tr>
<tr id="row_0_579_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_accumulate_weighted.xhtml" target="_self">NEAccumulateWeighted</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_accumulate_weighted_kernel.xhtml">NEAccumulateWeightedKernel</a> </td></tr>
<tr id="row_0_580_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_accumulate_weighted_kernel.xhtml" target="_self">NEAccumulateWeightedKernel</a></td><td class="desc">Interface for the accumulate weighted kernel </td></tr>
<tr id="row_0_581_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_activation_layer.xhtml" target="_self">NEActivationLayer</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_activation_layer_kernel.xhtml">NEActivationLayerKernel</a> </td></tr>
<tr id="row_0_582_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_activation_layer_kernel.xhtml" target="_self">NEActivationLayerKernel</a></td><td class="desc">Interface for the activation layer kernel </td></tr>
<tr id="row_0_583_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_arg_min_max_layer.xhtml" target="_self">NEArgMinMaxLayer</a></td><td class="desc">Function to calculate the index of the minimum or maximum values in a tensor based on an axis </td></tr>
<tr id="row_0_584_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_arithmetic_addition.xhtml" target="_self">NEArithmeticAddition</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_arithmetic_addition_kernel.xhtml">NEArithmeticAdditionKernel</a> </td></tr>
<tr id="row_0_585_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_arithmetic_addition_kernel.xhtml" target="_self">NEArithmeticAdditionKernel</a></td><td class="desc">Interface for the kernel to perform addition between two tensors </td></tr>
<tr id="row_0_586_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_arithmetic_operation_kernel.xhtml" target="_self">NEArithmeticOperationKernel</a></td><td class="desc"></td></tr>
<tr id="row_0_587_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_arithmetic_subtraction.xhtml" target="_self">NEArithmeticSubtraction</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_arithmetic_subtraction_kernel.xhtml">NEArithmeticSubtractionKernel</a> </td></tr>
<tr id="row_0_588_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_arithmetic_subtraction_kernel.xhtml" target="_self">NEArithmeticSubtractionKernel</a></td><td class="desc">Interface for the kernel to perform subtraction between two tensors </td></tr>
<tr id="row_0_589_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_batch_concatenate_layer_kernel.xhtml" target="_self">NEBatchConcatenateLayerKernel</a></td><td class="desc">Interface for the batch concatenate kernel </td></tr>
<tr id="row_0_590_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_batch_normalization_layer.xhtml" target="_self">NEBatchNormalizationLayer</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_normalization_layer_kernel.xhtml">NENormalizationLayerKernel</a> and simulate a batch normalization layer </td></tr>
<tr id="row_0_591_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_batch_normalization_layer_kernel.xhtml" target="_self">NEBatchNormalizationLayerKernel</a></td><td class="desc">Interface for the batch normalization layer kernel </td></tr>
<tr id="row_0_592_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_batch_to_space_layer.xhtml" target="_self">NEBatchToSpaceLayer</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_batch_to_space_layer_kernel.xhtml">NEBatchToSpaceLayerKernel</a> </td></tr>
<tr id="row_0_593_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_batch_to_space_layer_kernel.xhtml" target="_self">NEBatchToSpaceLayerKernel</a></td><td class="desc">Interface for the batch to space kernel </td></tr>
<tr id="row_0_594_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_bitwise_and.xhtml" target="_self">NEBitwiseAnd</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_bitwise_and_kernel.xhtml">NEBitwiseAndKernel</a> </td></tr>
<tr id="row_0_595_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_bitwise_and_kernel.xhtml" target="_self">NEBitwiseAndKernel</a></td><td class="desc">Interface for the kernel to perform bitwise AND between XY-planes of two tensors </td></tr>
<tr id="row_0_596_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_bitwise_not.xhtml" target="_self">NEBitwiseNot</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_bitwise_not_kernel.xhtml">NEBitwiseNotKernel</a> </td></tr>
<tr id="row_0_597_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_bitwise_not_kernel.xhtml" target="_self">NEBitwiseNotKernel</a></td><td class="desc">Interface for the kernel to perform bitwise NOT operation </td></tr>
<tr id="row_0_598_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_bitwise_or.xhtml" target="_self">NEBitwiseOr</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_bitwise_or_kernel.xhtml">NEBitwiseOrKernel</a> </td></tr>
<tr id="row_0_599_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_bitwise_or_kernel.xhtml" target="_self">NEBitwiseOrKernel</a></td><td class="desc">Interface for the kernel to perform bitwise inclusive OR between two tensors </td></tr>
<tr id="row_0_600_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_bitwise_xor.xhtml" target="_self">NEBitwiseXor</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_bitwise_xor_kernel.xhtml">NEBitwiseXorKernel</a> </td></tr>
<tr id="row_0_601_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_bitwise_xor_kernel.xhtml" target="_self">NEBitwiseXorKernel</a></td><td class="desc">Interface for the kernel to perform bitwise exclusive OR (XOR) between two tensors </td></tr>
<tr id="row_0_602_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_bounding_box_transform.xhtml" target="_self">NEBoundingBoxTransform</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_bounding_box_transform_kernel.xhtml">NEBoundingBoxTransformKernel</a> </td></tr>
<tr id="row_0_603_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_bounding_box_transform_kernel.xhtml" target="_self">NEBoundingBoxTransformKernel</a></td><td class="desc">Interface for the bounding box kernel </td></tr>
<tr id="row_0_604_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_box3x3.xhtml" target="_self">NEBox3x3</a></td><td class="desc">Basic function to execute box filter 3x3 </td></tr>
<tr id="row_0_605_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_box3x3_kernel.xhtml" target="_self">NEBox3x3Kernel</a></td><td class="desc">NEON kernel to perform a Box 3x3 filter </td></tr>
<tr id="row_0_606_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_canny_edge.xhtml" target="_self">NECannyEdge</a></td><td class="desc">Basic function to execute canny edge on NEON </td></tr>
<tr id="row_0_607_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_cast.xhtml" target="_self">NECast</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_depth_convert_layer_kernel.xhtml">NEDepthConvertLayerKernel</a> </td></tr>
<tr id="row_0_608_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_channel_combine.xhtml" target="_self">NEChannelCombine</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_channel_combine_kernel.xhtml">NEChannelCombineKernel</a> to perform channel combination </td></tr>
<tr id="row_0_609_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_channel_combine_kernel.xhtml" target="_self">NEChannelCombineKernel</a></td><td class="desc">Interface for the channel combine kernel </td></tr>
<tr id="row_0_610_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_channel_extract.xhtml" target="_self">NEChannelExtract</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_channel_extract_kernel.xhtml">NEChannelExtractKernel</a> to perform channel extraction </td></tr>
<tr id="row_0_611_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_channel_extract_kernel.xhtml" target="_self">NEChannelExtractKernel</a></td><td class="desc">Interface for the channel extract kernel </td></tr>
<tr id="row_0_612_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_channel_shuffle_layer.xhtml" target="_self">NEChannelShuffleLayer</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_channel_shuffle_layer_kernel.xhtml">NEChannelShuffleLayerKernel</a> </td></tr>
<tr id="row_0_613_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_channel_shuffle_layer_kernel.xhtml" target="_self">NEChannelShuffleLayerKernel</a></td><td class="desc">Interface for the channel shuffle kernel </td></tr>
<tr id="row_0_614_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_col2_im.xhtml" target="_self">NECol2Im</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_col2_im.xhtml">NECol2Im</a> </td></tr>
<tr id="row_0_615_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_col2_im_kernel.xhtml" target="_self">NECol2ImKernel</a></td><td class="desc">NEON kernel to perform col2im reshaping </td></tr>
<tr id="row_0_616_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_color_convert.xhtml" target="_self">NEColorConvert</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_color_convert_kernel.xhtml">NEColorConvertKernel</a> to perform color conversion </td></tr>
<tr id="row_0_617_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_color_convert_kernel.xhtml" target="_self">NEColorConvertKernel</a></td><td class="desc">Interface for the color convert kernel </td></tr>
<tr id="row_0_618_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_comparison_operation_kernel.xhtml" target="_self">NEComparisonOperationKernel</a></td><td class="desc"></td></tr>
<tr id="row_0_619_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_complex_pixel_wise_multiplication.xhtml" target="_self">NEComplexPixelWiseMultiplication</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_complex_pixel_wise_multiplication_kernel.xhtml">NEComplexPixelWiseMultiplicationKernel</a> </td></tr>
<tr id="row_0_620_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_complex_pixel_wise_multiplication_kernel.xhtml" target="_self">NEComplexPixelWiseMultiplicationKernel</a></td><td class="desc">Interface for the complex pixelwise multiplication kernel </td></tr>
<tr id="row_0_621_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_compute_all_anchors.xhtml" target="_self">NEComputeAllAnchors</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_compute_all_anchors_kernel.xhtml">NEComputeAllAnchorsKernel</a> </td></tr>
<tr id="row_0_622_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_compute_all_anchors_kernel.xhtml" target="_self">NEComputeAllAnchorsKernel</a></td><td class="desc">Interface for Compute All Anchors kernel </td></tr>
<tr id="row_0_623_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_concatenate_layer.xhtml" target="_self">NEConcatenateLayer</a></td><td class="desc">Basic function to execute concatenate tensors along a given axis </td></tr>
<tr id="row_0_624_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_convert_fully_connected_weights.xhtml" target="_self">NEConvertFullyConnectedWeights</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_convert_fully_connected_weights_kernel.xhtml">NEConvertFullyConnectedWeightsKernel</a> </td></tr>
<tr id="row_0_625_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_convert_fully_connected_weights_kernel.xhtml" target="_self">NEConvertFullyConnectedWeightsKernel</a></td><td class="desc">Interface to convert the 2D Fully Connected weights from NCHW to NHWC or vice versa </td></tr>
<tr id="row_0_626_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_convert_quantized_signedness_kernel.xhtml" target="_self">NEConvertQuantizedSignednessKernel</a></td><td class="desc">NEON kernel to convert asymmetric signed to asymmetric signed and vice-versa </td></tr>
<tr id="row_0_627_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_convolution3x3.xhtml" target="_self">NEConvolution3x3</a></td><td class="desc">Basic function to execute convolution of size 3x3 </td></tr>
<tr id="row_0_628_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_convolution_kernel.xhtml" target="_self">NEConvolutionKernel</a></td><td class="desc">Interface for the kernel to run an arbitrary size convolution on a tensor </td></tr>
<tr id="row_0_629_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_convolution_layer.xhtml" target="_self">NEConvolutionLayer</a></td><td class="desc">Basic function to simulate a convolution layer </td></tr>
<tr id="row_0_630_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_convolution_layer_reshape_weights.xhtml" target="_self">NEConvolutionLayerReshapeWeights</a></td><td class="desc">Function to reshape the weights </td></tr>
<tr id="row_0_631_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_convolution_rectangle.xhtml" target="_self">NEConvolutionRectangle</a></td><td class="desc">Basic function to execute non-square convolution </td></tr>
<tr id="row_0_632_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_convolution_rectangle_kernel.xhtml" target="_self">NEConvolutionRectangleKernel</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> for the running convolution on a rectangle matrix </td></tr>
<tr id="row_0_633_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_convolution_square.xhtml" target="_self">NEConvolutionSquare</a></td><td class="desc">Basic function to execute convolution of size 5x5, 7x7, 9x9 </td></tr>
<tr id="row_0_634_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_copy.xhtml" target="_self">NECopy</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_copy_kernel.xhtml">NECopyKernel</a> </td></tr>
<tr id="row_0_635_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_copy_kernel.xhtml" target="_self">NECopyKernel</a></td><td class="desc">NEON kernel to perform a copy between two tensors </td></tr>
<tr id="row_0_636_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_crop_kernel.xhtml" target="_self">NECropKernel</a></td><td class="desc">Interface for the kernel to perform tensor cropping </td></tr>
<tr id="row_0_637_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_crop_resize.xhtml" target="_self">NECropResize</a></td><td class="desc">Function to perform cropping and resizing </td></tr>
<tr id="row_0_638_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_cumulative_distribution_kernel.xhtml" target="_self">NECumulativeDistributionKernel</a></td><td class="desc">Interface for the cumulative distribution (cummulative summmation) calculation kernel </td></tr>
<tr id="row_0_639_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_deconvolution_layer.xhtml" target="_self">NEDeconvolutionLayer</a></td><td class="desc">Function to run the deconvolution layer </td></tr>
<tr id="row_0_640_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_depth_concatenate_layer_kernel.xhtml" target="_self">NEDepthConcatenateLayerKernel</a></td><td class="desc">Interface for the depth concatenate kernel </td></tr>
<tr id="row_0_641_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_depth_convert_layer.xhtml" target="_self">NEDepthConvertLayer</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_depth_convert_layer_kernel.xhtml">NEDepthConvertLayerKernel</a> </td></tr>
<tr id="row_0_642_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_depth_convert_layer_kernel.xhtml" target="_self">NEDepthConvertLayerKernel</a></td><td class="desc">Depth conversion kernel This function ignores the scale and zeroPoint of quanized tensors, i.e </td></tr>
<tr id="row_0_643_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_depth_to_space_layer.xhtml" target="_self">NEDepthToSpaceLayer</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_depth_to_space_layer_kernel.xhtml">NEDepthToSpaceLayerKernel</a> </td></tr>
<tr id="row_0_644_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_depth_to_space_layer_kernel.xhtml" target="_self">NEDepthToSpaceLayerKernel</a></td><td class="desc">Interface for the depth to space kernel </td></tr>
<tr id="row_0_645_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_depthwise_convolution_assembly_dispatch.xhtml" target="_self">NEDepthwiseConvolutionAssemblyDispatch</a></td><td class="desc">Depthwise convolution assembly kernel glue </td></tr>
<tr id="row_0_646_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_depthwise_convolution_layer.xhtml" target="_self">NEDepthwiseConvolutionLayer</a></td><td class="desc">Function to execute a depthwise convolution </td></tr>
<tr id="row_0_647_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_depthwise_convolution_layer3x3_kernel.xhtml" target="_self">NEDepthwiseConvolutionLayer3x3Kernel</a></td><td class="desc">Interface for the kernel to run a 3x3 depthwise convolution on a tensor </td></tr>
<tr id="row_0_648_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_depthwise_convolution_layer_native_kernel.xhtml" target="_self">NEDepthwiseConvolutionLayerNativeKernel</a></td><td class="desc">Interface for the kernel to run a depthwise convolution native on a tensor </td></tr>
<tr id="row_0_649_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_depthwise_convolution_layer_optimized.xhtml" target="_self">NEDepthwiseConvolutionLayerOptimized</a></td><td class="desc">Basic function to execute optimized depthwise convolution routines </td></tr>
<tr id="row_0_650_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_dequantization_layer.xhtml" target="_self">NEDequantizationLayer</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_dequantization_layer_kernel.xhtml">NEDequantizationLayerKernel</a> that dequantizes an input tensor </td></tr>
<tr id="row_0_651_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_dequantization_layer_kernel.xhtml" target="_self">NEDequantizationLayerKernel</a></td><td class="desc">Interface for the dequantization layer kernel </td></tr>
<tr id="row_0_652_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_derivative.xhtml" target="_self">NEDerivative</a></td><td class="desc">Basic function to execute first order derivative operator </td></tr>
<tr id="row_0_653_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_derivative_kernel.xhtml" target="_self">NEDerivativeKernel</a></td><td class="desc">Interface for the kernel to run the derivative along the X/Y directions on a tensor </td></tr>
<tr id="row_0_654_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_detection_post_process_layer.xhtml" target="_self">NEDetectionPostProcessLayer</a></td><td class="desc">NE Function to generate the detection output based on center size encoded boxes, class prediction and anchors by doing non maximum suppression </td></tr>
<tr id="row_0_655_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_dilate.xhtml" target="_self">NEDilate</a></td><td class="desc">Basic function to execute dilate </td></tr>
<tr id="row_0_656_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_dilate_kernel.xhtml" target="_self">NEDilateKernel</a></td><td class="desc">Interface for the kernel to perform boolean image dilatation </td></tr>
<tr id="row_0_657_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_direct_convolution_layer.xhtml" target="_self">NEDirectConvolutionLayer</a></td><td class="desc">Function to run the direct convolution </td></tr>
<tr id="row_0_658_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_direct_convolution_layer_kernel.xhtml" target="_self">NEDirectConvolutionLayerKernel</a></td><td class="desc">NEON interface for Direct Convolution Layer kernel </td></tr>
<tr id="row_0_659_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_direct_convolution_layer_output_stage_kernel.xhtml" target="_self">NEDirectConvolutionLayerOutputStageKernel</a></td><td class="desc">NEON kernel to accumulate the biases, if provided, or downscale in case of quantized input </td></tr>
<tr id="row_0_660_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_division_operation_kernel.xhtml" target="_self">NEDivisionOperationKernel</a></td><td class="desc"></td></tr>
<tr id="row_0_661_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_edge_non_max_suppression_kernel.xhtml" target="_self">NEEdgeNonMaxSuppressionKernel</a></td><td class="desc">NEON kernel to perform Non-Maxima suppression for Canny Edge </td></tr>
<tr id="row_0_662_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_edge_trace_kernel.xhtml" target="_self">NEEdgeTraceKernel</a></td><td class="desc">NEON kernel to perform Edge tracing </td></tr>
<tr id="row_0_663_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_elementwise_comparison.xhtml" target="_self">NEElementwiseComparison</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_comparison_operation_kernel.xhtml">NEComparisonOperationKernel</a> </td></tr>
<tr id="row_0_664_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_elementwise_comparison_static.xhtml" target="_self">NEElementwiseComparisonStatic</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_comparison_operation_kernel.xhtml">NEComparisonOperationKernel</a> </td></tr>
<tr id="row_0_665_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_elementwise_division.xhtml" target="_self">NEElementwiseDivision</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_arithmetic_operation_kernel.xhtml">NEArithmeticOperationKernel</a> for division </td></tr>
<tr id="row_0_666_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_elementwise_max.xhtml" target="_self">NEElementwiseMax</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_arithmetic_operation_kernel.xhtml">NEArithmeticOperationKernel</a> for max </td></tr>
<tr id="row_0_667_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_elementwise_min.xhtml" target="_self">NEElementwiseMin</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_arithmetic_operation_kernel.xhtml">NEArithmeticOperationKernel</a> for min </td></tr>
<tr id="row_0_668_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_elementwise_operation_kernel.xhtml" target="_self">NEElementwiseOperationKernel</a></td><td class="desc">Interface for an element-wise operation kernel </td></tr>
<tr id="row_0_669_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_elementwise_power.xhtml" target="_self">NEElementwisePower</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_arithmetic_operation_kernel.xhtml">NEArithmeticOperationKernel</a> for power </td></tr>
<tr id="row_0_670_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_elementwise_squared_diff.xhtml" target="_self">NEElementwiseSquaredDiff</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_arithmetic_operation_kernel.xhtml">NEArithmeticOperationKernel</a> for squared difference </td></tr>
<tr id="row_0_671_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_elementwise_unary_kernel.xhtml" target="_self">NEElementwiseUnaryKernel</a></td><td class="desc">Interface for an element-wise unary operation kernel </td></tr>
<tr id="row_0_672_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_equalize_histogram.xhtml" target="_self">NEEqualizeHistogram</a></td><td class="desc">Basic function to execute histogram equalization </td></tr>
<tr id="row_0_673_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_erode.xhtml" target="_self">NEErode</a></td><td class="desc">Basic function to execute erode </td></tr>
<tr id="row_0_674_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_erode_kernel.xhtml" target="_self">NEErodeKernel</a></td><td class="desc">Interface for the kernel to perform boolean image erosion </td></tr>
<tr id="row_0_675_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_exp_layer.xhtml" target="_self">NEExpLayer</a></td><td class="desc">Basic function to perform exponential on an input tensor </td></tr>
<tr id="row_0_676_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_fast_corners.xhtml" target="_self">NEFastCorners</a></td><td class="desc">Basic function to execute fast corners </td></tr>
<tr id="row_0_677_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_fast_corners_kernel.xhtml" target="_self">NEFastCornersKernel</a></td><td class="desc">NEON kernel to perform fast corners </td></tr>
<tr id="row_0_678_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_f_f_t1_d.xhtml" target="_self">NEFFT1D</a></td><td class="desc">Basic function to execute one dimensional FFT </td></tr>
<tr id="row_0_679_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_f_f_t2_d.xhtml" target="_self">NEFFT2D</a></td><td class="desc">Basic function to execute two dimensional FFT </td></tr>
<tr id="row_0_680_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_f_f_t_convolution_layer.xhtml" target="_self">NEFFTConvolutionLayer</a></td><td class="desc">Basic function to execute FFT-based convolution on NEON </td></tr>
<tr id="row_0_681_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_f_f_t_digit_reverse_kernel.xhtml" target="_self">NEFFTDigitReverseKernel</a></td><td class="desc">Interface for the digit reverse operation kernel </td></tr>
<tr id="row_0_682_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_f_f_t_radix_stage_kernel.xhtml" target="_self">NEFFTRadixStageKernel</a></td><td class="desc">Interface for the FFT kernel </td></tr>
<tr id="row_0_683_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_f_f_t_scale_kernel.xhtml" target="_self">NEFFTScaleKernel</a></td><td class="desc">Interface for the inverse fft scale kernel </td></tr>
<tr id="row_0_684_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_fill.xhtml" target="_self">NEFill</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_memset_kernel.xhtml">NEMemsetKernel</a> </td></tr>
<tr id="row_0_685_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_fill_array_kernel.xhtml" target="_self">NEFillArrayKernel</a></td><td class="desc">This kernel adds all texels greater than or equal to the threshold value to the keypoint array </td></tr>
<tr id="row_0_686_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_fill_border.xhtml" target="_self">NEFillBorder</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_fill_border_kernel.xhtml">NEFillBorderKernel</a> </td></tr>
<tr id="row_0_687_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_fill_border_kernel.xhtml" target="_self">NEFillBorderKernel</a></td><td class="desc">Interface for the kernel to fill borders </td></tr>
<tr id="row_0_688_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_fill_inner_border_kernel.xhtml" target="_self">NEFillInnerBorderKernel</a></td><td class="desc">Interface for the kernel to fill the interior borders </td></tr>
<tr id="row_0_689_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_flatten_layer.xhtml" target="_self">NEFlattenLayer</a></td><td class="desc">Basic function to execute flatten layer kernel </td></tr>
<tr id="row_0_690_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_flatten_layer_kernel.xhtml" target="_self">NEFlattenLayerKernel</a></td><td class="desc">Interface for the flatten layer kernel </td></tr>
<tr id="row_0_691_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_floor.xhtml" target="_self">NEFloor</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_floor_kernel.xhtml">NEFloorKernel</a> </td></tr>
<tr id="row_0_692_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_floor_kernel.xhtml" target="_self">NEFloorKernel</a></td><td class="desc">NEON kernel to perform a floor operation </td></tr>
<tr id="row_0_693_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_fully_connected_layer.xhtml" target="_self">NEFullyConnectedLayer</a></td><td class="desc">Basic function to compute a Fully Connected layer on NEON </td></tr>
<tr id="row_0_694_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_fully_connected_layer_reshape_weights.xhtml" target="_self">NEFullyConnectedLayerReshapeWeights</a></td><td class="desc">Basic function to reshape the weights of Fully Connected layer with NEON </td></tr>
<tr id="row_0_695_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_fuse_batch_normalization.xhtml" target="_self">NEFuseBatchNormalization</a></td><td class="desc">Basic function to fuse the batch normalization node to a preceding convolution node </td></tr>
<tr id="row_0_696_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_fuse_batch_normalization_kernel.xhtml" target="_self">NEFuseBatchNormalizationKernel</a></td><td class="desc">OpenNE kernel to fuse the batch normalization node to a preceding convolution node </td></tr>
<tr id="row_0_697_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_gather.xhtml" target="_self">NEGather</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_gather_kernel.xhtml">NEGatherKernel</a> </td></tr>
<tr id="row_0_698_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_gather_kernel.xhtml" target="_self">NEGatherKernel</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> to perform other operation on NEON </td></tr>
<tr id="row_0_699_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_gaussian3x3.xhtml" target="_self">NEGaussian3x3</a></td><td class="desc">Basic function to execute gaussian filter 3x3 </td></tr>
<tr id="row_0_700_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_gaussian3x3_kernel.xhtml" target="_self">NEGaussian3x3Kernel</a></td><td class="desc">NEON kernel to perform a Gaussian 3x3 filter </td></tr>
<tr id="row_0_701_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_gaussian5x5.xhtml" target="_self">NEGaussian5x5</a></td><td class="desc">Basic function to execute gaussian filter 5x5 </td></tr>
<tr id="row_0_702_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_gaussian5x5_hor_kernel.xhtml" target="_self">NEGaussian5x5HorKernel</a></td><td class="desc">NEON kernel to perform a Gaussian 5x5 filter (horizontal pass) </td></tr>
<tr id="row_0_703_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_gaussian5x5_vert_kernel.xhtml" target="_self">NEGaussian5x5VertKernel</a></td><td class="desc">NEON kernel to perform a Gaussian 5x5 filter (vertical pass) </td></tr>
<tr id="row_0_704_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_gaussian_pyramid.xhtml" target="_self">NEGaussianPyramid</a></td><td class="desc">Common interface for all Gaussian pyramid functions </td></tr>
<tr id="row_0_705_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_gaussian_pyramid_half.xhtml" target="_self">NEGaussianPyramidHalf</a></td><td class="desc">Basic function to execute gaussian pyramid with HALF scale factor </td></tr>
<tr id="row_0_706_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_gaussian_pyramid_hor_kernel.xhtml" target="_self">NEGaussianPyramidHorKernel</a></td><td class="desc">NEON kernel to perform a GaussianPyramid (horizontal pass) </td></tr>
<tr id="row_0_707_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_gaussian_pyramid_orb.xhtml" target="_self">NEGaussianPyramidOrb</a></td><td class="desc">Basic function to execute gaussian pyramid with ORB scale factor </td></tr>
<tr id="row_0_708_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_gaussian_pyramid_vert_kernel.xhtml" target="_self">NEGaussianPyramidVertKernel</a></td><td class="desc">NEON kernel to perform a GaussianPyramid (vertical pass) </td></tr>
<tr id="row_0_709_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_g_e_m_m.xhtml" target="_self">NEGEMM</a></td><td class="desc">Basic function to execute GEMM on NEON </td></tr>
<tr id="row_0_710_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_assembly_base_kernel.xhtml" target="_self">NEGEMMAssemblyBaseKernel</a></td><td class="desc">Base class for GEMM NEON kernels implemented in Assembly </td></tr>
<tr id="row_0_711_" style="display:none;"><td class="entry"><span style="width:16px;display:inline-block;">&#160;</span><span id="arr_0_711_" class="arrow" onclick="toggleFolder('0_711_')">&#9658;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_assembly_dispatch.xhtml" target="_self">NEGEMMAssemblyDispatch</a></td><td class="desc">Assembly kernel glue </td></tr>
<tr id="row_0_711_0_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_assembly_dispatch_1_1_i_fallback.xhtml" target="_self">IFallback</a></td><td class="desc"></td></tr>
<tr id="row_0_712_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_convolution_layer.xhtml" target="_self">NEGEMMConvolutionLayer</a></td><td class="desc">Basic function to compute the convolution layer </td></tr>
<tr id="row_0_713_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_interleave4x4.xhtml" target="_self">NEGEMMInterleave4x4</a></td><td class="desc">Basic function to execute <a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_interleave4x4_kernel.xhtml" title="NEON kernel to interleave the elements of a matrix.">NEGEMMInterleave4x4Kernel</a> </td></tr>
<tr id="row_0_714_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_interleave4x4_kernel.xhtml" target="_self">NEGEMMInterleave4x4Kernel</a></td><td class="desc">NEON kernel to interleave the elements of a matrix </td></tr>
<tr id="row_0_715_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_lowp_assembly_matrix_multiply_core.xhtml" target="_self">NEGEMMLowpAssemblyMatrixMultiplyCore</a></td><td class="desc">Basic function to execute matrix multiply assembly kernels </td></tr>
<tr id="row_0_716_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_lowp_matrix_a_reduction_kernel.xhtml" target="_self">NEGEMMLowpMatrixAReductionKernel</a></td><td class="desc">NEON kernel used to compute the row-vectors of sums of all the entries in each row of Matrix A </td></tr>
<tr id="row_0_717_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_lowp_matrix_b_reduction_kernel.xhtml" target="_self">NEGEMMLowpMatrixBReductionKernel</a></td><td class="desc">NEON kernel used to compute the row-vectors of sums of all the entries in each column of Matrix B </td></tr>
<tr id="row_0_718_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_lowp_matrix_multiply_core.xhtml" target="_self">NEGEMMLowpMatrixMultiplyCore</a></td><td class="desc">Basic function to execute GEMMLowpMatrixMultiplyCore on NEON </td></tr>
<tr id="row_0_719_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_lowp_matrix_multiply_kernel.xhtml" target="_self">NEGEMMLowpMatrixMultiplyKernel</a></td><td class="desc">NEON kernel to multiply matrices </td></tr>
<tr id="row_0_720_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_lowp_offset_contribution_kernel.xhtml" target="_self">NEGEMMLowpOffsetContributionKernel</a></td><td class="desc">NEON kernel used to add the offset contribution after <a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_lowp_matrix_multiply_kernel.xhtml">NEGEMMLowpMatrixMultiplyKernel</a> </td></tr>
<tr id="row_0_721_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_lowp_offset_contribution_output_stage_kernel.xhtml" target="_self">NEGEMMLowpOffsetContributionOutputStageKernel</a></td><td class="desc">NEON kernel used to add the offset contribution and perform the output stage after <a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_lowp_matrix_multiply_kernel.xhtml">NEGEMMLowpMatrixMultiplyKernel</a> </td></tr>
<tr id="row_0_722_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_lowp_output_stage.xhtml" target="_self">NEGEMMLowpOutputStage</a></td><td class="desc">Basic function to execute GEMMLowpQuantizeDown kernels on NEON </td></tr>
<tr id="row_0_723_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_lowp_quantize_down_int32_to_int16_scale_by_fixed_point.xhtml" target="_self">NEGEMMLowpQuantizeDownInt32ToInt16ScaleByFixedPoint</a></td><td class="desc">Basic function to execute <a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_lowp_quantize_down_int32_to_int16_scale_by_fixed_point.xhtml" title="Basic function to execute NEGEMMLowpQuantizeDownInt32ToInt16ScaleByFixedPoint on NEON.">NEGEMMLowpQuantizeDownInt32ToInt16ScaleByFixedPoint</a> on NEON </td></tr>
<tr id="row_0_724_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_lowp_quantize_down_int32_to_int16_scale_by_fixed_point_kernel.xhtml" target="_self">NEGEMMLowpQuantizeDownInt32ToInt16ScaleByFixedPointKernel</a></td><td class="desc">NEON kernel used to quantize down the int32 accumulator values of GEMMLowp to QSYMM16 </td></tr>
<tr id="row_0_725_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_lowp_quantize_down_int32_to_int8_scale_by_fixed_point.xhtml" target="_self">NEGEMMLowpQuantizeDownInt32ToInt8ScaleByFixedPoint</a></td><td class="desc">Basic function to execute <a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_lowp_quantize_down_int32_to_int8_scale_by_fixed_point.xhtml" title="Basic function to execute NEGEMMLowpQuantizeDownInt32ToInt8ScaleByFixedPoint on NEON.">NEGEMMLowpQuantizeDownInt32ToInt8ScaleByFixedPoint</a> on NEON </td></tr>
<tr id="row_0_726_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_lowp_quantize_down_int32_to_int8_scale_by_fixed_point_kernel.xhtml" target="_self">NEGEMMLowpQuantizeDownInt32ToInt8ScaleByFixedPointKernel</a></td><td class="desc">NEON kernel used to quantize down the int32 accumulator values of GEMMLowp to QASYMM8_SIGNED </td></tr>
<tr id="row_0_727_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_lowp_quantize_down_int32_to_uint8_scale.xhtml" target="_self">NEGEMMLowpQuantizeDownInt32ToUint8Scale</a></td><td class="desc">Basic function to execute <a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_lowp_quantize_down_int32_to_uint8_scale.xhtml" title="Basic function to execute NEGEMMLowpQuantizeDownInt32ToUint8Scale on NEON.">NEGEMMLowpQuantizeDownInt32ToUint8Scale</a> on NEON </td></tr>
<tr id="row_0_728_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_lowp_quantize_down_int32_to_uint8_scale_by_fixed_point.xhtml" target="_self">NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPoint</a></td><td class="desc">Basic function to execute <a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_lowp_quantize_down_int32_to_uint8_scale_by_fixed_point.xhtml" title="Basic function to execute NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPoint on NEON.">NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPoint</a> on NEON </td></tr>
<tr id="row_0_729_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_lowp_quantize_down_int32_to_uint8_scale_by_fixed_point_kernel.xhtml" target="_self">NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel</a></td><td class="desc">NEON kernel used to quantize down the int32 accumulator values of GEMMLowp to QASYMM8 </td></tr>
<tr id="row_0_730_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_lowp_quantize_down_int32_to_uint8_scale_kernel.xhtml" target="_self">NEGEMMLowpQuantizeDownInt32ToUint8ScaleKernel</a></td><td class="desc">NEON kernel used to quantize down the int32 accumulator values of GEMMLowp to QASYMM8 </td></tr>
<tr id="row_0_731_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_matrix_accumulate_biases_kernel.xhtml" target="_self">NEGEMMMatrixAccumulateBiasesKernel</a></td><td class="desc">NEON kernel to add a bias to each row of the input tensor </td></tr>
<tr id="row_0_732_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_matrix_addition_kernel.xhtml" target="_self">NEGEMMMatrixAdditionKernel</a></td><td class="desc">NEON kernel to perform the in-place matrix addition between 2 matrices taking into account that the second matrix might be weighted by a scalar value beta: </td></tr>
<tr id="row_0_733_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_matrix_multiply_kernel.xhtml" target="_self">NEGEMMMatrixMultiplyKernel</a></td><td class="desc">NEON kernel to multiply two input matrices "A" and "B" </td></tr>
<tr id="row_0_734_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_matrix_vector_multiply_kernel.xhtml" target="_self">NEGEMMMatrixVectorMultiplyKernel</a></td><td class="desc">Interface for the GEMM matrix vector multiply kernel </td></tr>
<tr id="row_0_735_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_transpose1x_w.xhtml" target="_self">NEGEMMTranspose1xW</a></td><td class="desc">Basic function to execute <a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_transpose1x_w_kernel.xhtml" title="NEON kernel which transposes the elements of a matrix in chunks of 1xW, where W is equal to (16 / ele...">NEGEMMTranspose1xWKernel</a> </td></tr>
<tr id="row_0_736_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_transpose1x_w_kernel.xhtml" target="_self">NEGEMMTranspose1xWKernel</a></td><td class="desc">NEON kernel which transposes the elements of a matrix in chunks of 1xW, where W is equal to (16 / element size of the tensor) </td></tr>
<tr id="row_0_737_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_generate_proposals_layer.xhtml" target="_self">NEGenerateProposalsLayer</a></td><td class="desc">Basic function to generate proposals for a RPN (Region Proposal Network) </td></tr>
<tr id="row_0_738_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_gradient_kernel.xhtml" target="_self">NEGradientKernel</a></td><td class="desc">Computes magnitude and quantised phase from inputs gradients </td></tr>
<tr id="row_0_739_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_harris_corners.xhtml" target="_self">NEHarrisCorners</a></td><td class="desc">Basic function to execute harris corners detection </td></tr>
<tr id="row_0_740_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_harris_score_kernel.xhtml" target="_self">NEHarrisScoreKernel</a></td><td class="desc">Template NEON kernel to perform Harris Score </td></tr>
<tr id="row_0_741_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_height_concatenate_layer_kernel.xhtml" target="_self">NEHeightConcatenateLayerKernel</a></td><td class="desc">Interface for the height concatenate kernel </td></tr>
<tr id="row_0_742_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_histogram.xhtml" target="_self">NEHistogram</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_histogram_kernel.xhtml">NEHistogramKernel</a> </td></tr>
<tr id="row_0_743_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_histogram_kernel.xhtml" target="_self">NEHistogramKernel</a></td><td class="desc">Interface for the histogram kernel </td></tr>
<tr id="row_0_744_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_h_o_g_block_normalization_kernel.xhtml" target="_self">NEHOGBlockNormalizationKernel</a></td><td class="desc">NEON kernel to perform <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object.">HOG</a> block normalization </td></tr>
<tr id="row_0_745_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_h_o_g_descriptor.xhtml" target="_self">NEHOGDescriptor</a></td><td class="desc">Basic function to calculate <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object.">HOG</a> descriptor </td></tr>
<tr id="row_0_746_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_h_o_g_detector.xhtml" target="_self">NEHOGDetector</a></td><td class="desc">Basic function to execute <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object.">HOG</a> detector based on linear SVM </td></tr>
<tr id="row_0_747_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_h_o_g_detector_kernel.xhtml" target="_self">NEHOGDetectorKernel</a></td><td class="desc">NEON kernel to perform <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object.">HOG</a> detector kernel using linear SVM </td></tr>
<tr id="row_0_748_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_h_o_g_gradient.xhtml" target="_self">NEHOGGradient</a></td><td class="desc">Basic function to calculate the gradient for <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object.">HOG</a> </td></tr>
<tr id="row_0_749_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_h_o_g_multi_detection.xhtml" target="_self">NEHOGMultiDetection</a></td><td class="desc">Basic function to detect multiple objects (or the same object at different scales) on the same input image using <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object.">HOG</a> </td></tr>
<tr id="row_0_750_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_h_o_g_orientation_binning_kernel.xhtml" target="_self">NEHOGOrientationBinningKernel</a></td><td class="desc">NEON kernel to perform <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object.">HOG</a> Orientation Binning </td></tr>
<tr id="row_0_751_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_im2_col.xhtml" target="_self">NEIm2Col</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_im2_col_kernel.xhtml">NEIm2ColKernel</a> </td></tr>
<tr id="row_0_752_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_im2_col_kernel.xhtml" target="_self">NEIm2ColKernel</a></td><td class="desc">Interface for the im2col reshape kernel </td></tr>
<tr id="row_0_753_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_instance_normalization_layer.xhtml" target="_self">NEInstanceNormalizationLayer</a></td><td class="desc">Basic function to perform a Instance normalization </td></tr>
<tr id="row_0_754_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_instance_normalization_layer_kernel.xhtml" target="_self">NEInstanceNormalizationLayerKernel</a></td><td class="desc">Interface for performing an instance normalization </td></tr>
<tr id="row_0_755_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_integral_image.xhtml" target="_self">NEIntegralImage</a></td><td class="desc">Basic function to run a <a class="el" href="classarm__compute_1_1_n_e_integral_image_kernel.xhtml">NEIntegralImageKernel</a> </td></tr>
<tr id="row_0_756_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_integral_image_kernel.xhtml" target="_self">NEIntegralImageKernel</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> to perform an image integral on an image </td></tr>
<tr id="row_0_757_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_l2_normalize_layer.xhtml" target="_self">NEL2NormalizeLayer</a></td><td class="desc">Basic function to perform a L2 normalization on a given axis </td></tr>
<tr id="row_0_758_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_l2_normalize_layer_kernel.xhtml" target="_self">NEL2NormalizeLayerKernel</a></td><td class="desc">Interface for performing a L2 normalize on a given axis given the square sum of it in this axis </td></tr>
<tr id="row_0_759_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_laplacian_pyramid.xhtml" target="_self">NELaplacianPyramid</a></td><td class="desc">Basic function to execute laplacian pyramid </td></tr>
<tr id="row_0_760_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_laplacian_reconstruct.xhtml" target="_self">NELaplacianReconstruct</a></td><td class="desc">Basic function to execute laplacian reconstruction </td></tr>
<tr id="row_0_761_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1_n_e_l_k_internal_keypoint.xhtml" target="_self">NELKInternalKeypoint</a></td><td class="desc">Internal keypoint class for Lucas-Kanade Optical Flow </td></tr>
<tr id="row_0_762_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_l_k_tracker_kernel.xhtml" target="_self">NELKTrackerKernel</a></td><td class="desc">Interface for the Lucas-Kanade tracker kernel </td></tr>
<tr id="row_0_763_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_locally_connected_layer.xhtml" target="_self">NELocallyConnectedLayer</a></td><td class="desc">Basic function to compute the locally connected layer </td></tr>
<tr id="row_0_764_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_locally_connected_matrix_multiply_kernel.xhtml" target="_self">NELocallyConnectedMatrixMultiplyKernel</a></td><td class="desc">NEON kernel to multiply each row of first tensor with low 2 dimensions of second tensor </td></tr>
<tr id="row_0_765_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_logits1_d_max_kernel.xhtml" target="_self">NELogits1DMaxKernel</a></td><td class="desc">Interface for the identifying the max value of 1D Logits </td></tr>
<tr id="row_0_766_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_logits1_d_softmax_kernel.xhtml" target="_self">NELogits1DSoftmaxKernel</a></td><td class="desc">Interface for softmax computation for QASYMM8 with pre-computed max </td></tr>
<tr id="row_0_767_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_log_layer.xhtml" target="_self">NELogLayer</a></td><td class="desc">Basic function to compute the natural logarithm of an input tensor </td></tr>
<tr id="row_0_768_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_l_s_t_m_layer.xhtml" target="_self">NELSTMLayer</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_l_s_t_m_layer.xhtml">NELSTMLayer</a> </td></tr>
<tr id="row_0_769_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_l_s_t_m_layer_quantized.xhtml" target="_self">NELSTMLayerQuantized</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_l_s_t_m_layer_quantized.xhtml">NELSTMLayerQuantized</a> </td></tr>
<tr id="row_0_770_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_magnitude.xhtml" target="_self">NEMagnitude</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_magnitude_phase_kernel.xhtml">NEMagnitudePhaseKernel</a> </td></tr>
<tr id="row_0_771_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_magnitude_phase_kernel.xhtml" target="_self">NEMagnitudePhaseKernel</a></td><td class="desc">Template interface for the kernel to compute magnitude and phase </td></tr>
<tr id="row_0_772_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_mean_std_dev.xhtml" target="_self">NEMeanStdDev</a></td><td class="desc">Basic function to execute mean and std deviation </td></tr>
<tr id="row_0_773_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_mean_std_dev_kernel.xhtml" target="_self">NEMeanStdDevKernel</a></td><td class="desc">Interface for the kernel to calculate mean and standard deviation of input image pixels </td></tr>
<tr id="row_0_774_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_mean_std_dev_normalization_kernel.xhtml" target="_self">NEMeanStdDevNormalizationKernel</a></td><td class="desc">Interface for the kernel to normalize the input 2D tensor across the first dimension with respect to mean and standard deviation of the same dimension </td></tr>
<tr id="row_0_775_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_mean_std_dev_normalization_layer.xhtml" target="_self">NEMeanStdDevNormalizationLayer</a></td><td class="desc">Basic function to execute mean and standard deviation normalization by calling <a class="el" href="classarm__compute_1_1_n_e_mean_std_dev_normalization_kernel.xhtml">NEMeanStdDevNormalizationKernel</a> </td></tr>
<tr id="row_0_776_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_median3x3.xhtml" target="_self">NEMedian3x3</a></td><td class="desc">Basic function to execute median filter </td></tr>
<tr id="row_0_777_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_median3x3_kernel.xhtml" target="_self">NEMedian3x3Kernel</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> to perform a median filter on a tensor </td></tr>
<tr id="row_0_778_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_memset_kernel.xhtml" target="_self">NEMemsetKernel</a></td><td class="desc">Interface for filling the planes of a tensor </td></tr>
<tr id="row_0_779_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_min_max_kernel.xhtml" target="_self">NEMinMaxKernel</a></td><td class="desc">Interface for the kernel to perform min max search on an image </td></tr>
<tr id="row_0_780_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_min_max_layer_kernel.xhtml" target="_self">NEMinMaxLayerKernel</a></td><td class="desc">Interface for the kernel to perform min max search on a 3D tensor </td></tr>
<tr id="row_0_781_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_min_max_location.xhtml" target="_self">NEMinMaxLocation</a></td><td class="desc">Basic function to execute min and max location </td></tr>
<tr id="row_0_782_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_min_max_location_kernel.xhtml" target="_self">NEMinMaxLocationKernel</a></td><td class="desc">Interface for the kernel to find min max locations of an image </td></tr>
<tr id="row_0_783_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_neg_layer.xhtml" target="_self">NENegLayer</a></td><td class="desc">Basic function to negate an input tensor </td></tr>
<tr id="row_0_784_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_non_linear_filter.xhtml" target="_self">NENonLinearFilter</a></td><td class="desc">Basic function to execute non linear filter </td></tr>
<tr id="row_0_785_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_non_linear_filter_kernel.xhtml" target="_self">NENonLinearFilterKernel</a></td><td class="desc">Interface for the kernel to apply a non-linear filter </td></tr>
<tr id="row_0_786_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_non_maxima_suppression3x3.xhtml" target="_self">NENonMaximaSuppression3x3</a></td><td class="desc">Basic function to execute non-maxima suppression over a 3x3 window </td></tr>
<tr id="row_0_787_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_non_maxima_suppression3x3_kernel.xhtml" target="_self">NENonMaximaSuppression3x3Kernel</a></td><td class="desc">Interface to perform Non-Maxima suppression over a 3x3 window using NEON </td></tr>
<tr id="row_0_788_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_normalization_layer.xhtml" target="_self">NENormalizationLayer</a></td><td class="desc">Basic function to compute a normalization layer </td></tr>
<tr id="row_0_789_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_normalization_layer_kernel.xhtml" target="_self">NENormalizationLayerKernel</a></td><td class="desc">Interface for the normalization layer kernel </td></tr>
<tr id="row_0_790_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_optical_flow.xhtml" target="_self">NEOpticalFlow</a></td><td class="desc">Basic function to execute optical flow </td></tr>
<tr id="row_0_791_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_pad_layer.xhtml" target="_self">NEPadLayer</a></td><td class="desc">Basic function to pad a tensor </td></tr>
<tr id="row_0_792_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_pad_layer_kernel.xhtml" target="_self">NEPadLayerKernel</a></td><td class="desc">NEON kernel to add padding to a tensor </td></tr>
<tr id="row_0_793_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_permute.xhtml" target="_self">NEPermute</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_permute_kernel.xhtml">NEPermuteKernel</a> </td></tr>
<tr id="row_0_794_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_permute_kernel.xhtml" target="_self">NEPermuteKernel</a></td><td class="desc">NEON kernel to perform tensor permutation </td></tr>
<tr id="row_0_795_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_phase.xhtml" target="_self">NEPhase</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_magnitude_phase_kernel.xhtml">NEMagnitudePhaseKernel</a> </td></tr>
<tr id="row_0_796_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_pixel_wise_multiplication.xhtml" target="_self">NEPixelWiseMultiplication</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_pixel_wise_multiplication_kernel.xhtml">NEPixelWiseMultiplicationKernel</a> </td></tr>
<tr id="row_0_797_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_pixel_wise_multiplication_kernel.xhtml" target="_self">NEPixelWiseMultiplicationKernel</a></td><td class="desc">Interface for the kernel to perform addition between two tensors </td></tr>
<tr id="row_0_798_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_pooling_layer.xhtml" target="_self">NEPoolingLayer</a></td><td class="desc">Basic function to simulate a pooling layer with the specified pooling operation </td></tr>
<tr id="row_0_799_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_pooling_layer_kernel.xhtml" target="_self">NEPoolingLayerKernel</a></td><td class="desc">Interface for the pooling layer kernel </td></tr>
<tr id="row_0_800_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_power_operation_kernel.xhtml" target="_self">NEPowerOperationKernel</a></td><td class="desc"></td></tr>
<tr id="row_0_801_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_p_relu_layer.xhtml" target="_self">NEPReluLayer</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_arithmetic_operation_kernel.xhtml">NEArithmeticOperationKernel</a> for PRELU </td></tr>
<tr id="row_0_802_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_prior_box_layer.xhtml" target="_self">NEPriorBoxLayer</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_prior_box_layer_kernel.xhtml">NEPriorBoxLayerKernel</a> </td></tr>
<tr id="row_0_803_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_prior_box_layer_kernel.xhtml" target="_self">NEPriorBoxLayerKernel</a></td><td class="desc">Interface for the kernel to calculate prior boxes </td></tr>
<tr id="row_0_804_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_quantization_layer.xhtml" target="_self">NEQuantizationLayer</a></td><td class="desc">Basic function to simulate a quantization layer </td></tr>
<tr id="row_0_805_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_quantization_layer_kernel.xhtml" target="_self">NEQuantizationLayerKernel</a></td><td class="desc">Interface for the quantization layer kernel </td></tr>
<tr id="row_0_806_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_range.xhtml" target="_self">NERange</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_range_kernel.xhtml">NERangeKernel</a> </td></tr>
<tr id="row_0_807_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_range_kernel.xhtml" target="_self">NERangeKernel</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> class for Range </td></tr>
<tr id="row_0_808_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_reduce_mean.xhtml" target="_self">NEReduceMean</a></td><td class="desc">Basic function to perform reduce operation </td></tr>
<tr id="row_0_809_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_reduction_operation.xhtml" target="_self">NEReductionOperation</a></td><td class="desc">Basic function to simulate a reduction operation </td></tr>
<tr id="row_0_810_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_reduction_operation_kernel.xhtml" target="_self">NEReductionOperationKernel</a></td><td class="desc">NEON kernel to perform a reduction operation </td></tr>
<tr id="row_0_811_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_remap.xhtml" target="_self">NERemap</a></td><td class="desc">Basic function to execute remap </td></tr>
<tr id="row_0_812_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_remap_kernel.xhtml" target="_self">NERemapKernel</a></td><td class="desc">NEON kernel to perform a remap on a tensor </td></tr>
<tr id="row_0_813_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_reorg_layer.xhtml" target="_self">NEReorgLayer</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_reorg_layer_kernel.xhtml">NEReorgLayerKernel</a> </td></tr>
<tr id="row_0_814_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_reorg_layer_kernel.xhtml" target="_self">NEReorgLayerKernel</a></td><td class="desc">Interface for the kernel to perform tensor re-organization </td></tr>
<tr id="row_0_815_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_reshape_layer.xhtml" target="_self">NEReshapeLayer</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_reshape_layer_kernel.xhtml">NEReshapeLayerKernel</a> </td></tr>
<tr id="row_0_816_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_reshape_layer_kernel.xhtml" target="_self">NEReshapeLayerKernel</a></td><td class="desc">Interface for the kernel to perform tensor reshaping </td></tr>
<tr id="row_0_817_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_reverse.xhtml" target="_self">NEReverse</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_reverse_kernel.xhtml">NEReverseKernel</a> </td></tr>
<tr id="row_0_818_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_reverse_kernel.xhtml" target="_self">NEReverseKernel</a></td><td class="desc">Interface for the reverse layer kernel </td></tr>
<tr id="row_0_819_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_r_n_n_layer.xhtml" target="_self">NERNNLayer</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_r_n_n_layer.xhtml">NERNNLayer</a> </td></tr>
<tr id="row_0_820_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_r_o_i_align_layer.xhtml" target="_self">NEROIAlignLayer</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_r_o_i_align_layer_kernel.xhtml">NEROIAlignLayerKernel</a> </td></tr>
<tr id="row_0_821_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_r_o_i_align_layer_kernel.xhtml" target="_self">NEROIAlignLayerKernel</a></td><td class="desc">Interface for the RoIAlign kernel </td></tr>
<tr id="row_0_822_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_r_o_i_pooling_layer.xhtml" target="_self">NEROIPoolingLayer</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_r_o_i_pooling_layer_kernel.xhtml">NEROIPoolingLayerKernel</a> </td></tr>
<tr id="row_0_823_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_r_o_i_pooling_layer_kernel.xhtml" target="_self">NEROIPoolingLayerKernel</a></td><td class="desc">Interface for the ROI pooling layer kernel </td></tr>
<tr id="row_0_824_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_round_layer.xhtml" target="_self">NERoundLayer</a></td><td class="desc">Basic function to compute the round value elementwise of an input tensor </td></tr>
<tr id="row_0_825_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_rsqrt_layer.xhtml" target="_self">NERsqrtLayer</a></td><td class="desc">Basic function to perform inverse square root on an input tensor </td></tr>
<tr id="row_0_826_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_scale.xhtml" target="_self">NEScale</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_scale_kernel.xhtml">NEScaleKernel</a> </td></tr>
<tr id="row_0_827_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_scale_kernel.xhtml" target="_self">NEScaleKernel</a></td><td class="desc">NEON kernel to perform scaling on a tensor </td></tr>
<tr id="row_0_828_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_scharr3x3.xhtml" target="_self">NEScharr3x3</a></td><td class="desc">Basic function to execute scharr 3x3 filter </td></tr>
<tr id="row_0_829_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_scharr3x3_kernel.xhtml" target="_self">NEScharr3x3Kernel</a></td><td class="desc">Interface for the kernel to run a 3x3 Scharr filter on a tensor </td></tr>
<tr id="row_0_830_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_select.xhtml" target="_self">NESelect</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_select.xhtml">NESelect</a> </td></tr>
<tr id="row_0_831_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_select_kernel.xhtml" target="_self">NESelectKernel</a></td><td class="desc">Interface for the select kernel </td></tr>
<tr id="row_0_832_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_separable_convolution_hor_kernel.xhtml" target="_self">NESeparableConvolutionHorKernel</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> for the Horizontal pass of a Separable Convolution </td></tr>
<tr id="row_0_833_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_separable_convolution_vert_kernel.xhtml" target="_self">NESeparableConvolutionVertKernel</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> for the Vertical pass of a Separable Convolution </td></tr>
<tr id="row_0_834_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_simple_assembly_function.xhtml" target="_self">NESimpleAssemblyFunction</a></td><td class="desc">Basic interface for functions which have a single NEON GEMM wrapper kernel to run </td></tr>
<tr id="row_0_835_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_sin_layer.xhtml" target="_self">NESinLayer</a></td><td class="desc">Basic function to compute the sine of an input tensor </td></tr>
<tr id="row_0_836_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_slice.xhtml" target="_self">NESlice</a></td><td class="desc">Basic function to perform tensor slicing </td></tr>
<tr id="row_0_837_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_sobel3x3.xhtml" target="_self">NESobel3x3</a></td><td class="desc">Basic function to execute sobel 3x3 filter </td></tr>
<tr id="row_0_838_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_sobel3x3_kernel.xhtml" target="_self">NESobel3x3Kernel</a></td><td class="desc">Interface for the kernel to run a 3x3 Sobel X filter on a tensor </td></tr>
<tr id="row_0_839_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_sobel5x5.xhtml" target="_self">NESobel5x5</a></td><td class="desc">Basic function to execute sobel 5x5 filter </td></tr>
<tr id="row_0_840_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_sobel5x5_hor_kernel.xhtml" target="_self">NESobel5x5HorKernel</a></td><td class="desc">Interface for the kernel to run the horizontal pass of 5x5 Sobel filter on a tensor </td></tr>
<tr id="row_0_841_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_sobel5x5_vert_kernel.xhtml" target="_self">NESobel5x5VertKernel</a></td><td class="desc">Interface for the kernel to run the vertical pass of 5x5 Sobel Y filter on a tensor </td></tr>
<tr id="row_0_842_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_sobel7x7.xhtml" target="_self">NESobel7x7</a></td><td class="desc">Basic function to execute sobel 7x7 filter </td></tr>
<tr id="row_0_843_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_sobel7x7_hor_kernel.xhtml" target="_self">NESobel7x7HorKernel</a></td><td class="desc">Interface for the kernel to run the horizontal pass of 7x7 Sobel filter on a tensor </td></tr>
<tr id="row_0_844_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_sobel7x7_vert_kernel.xhtml" target="_self">NESobel7x7VertKernel</a></td><td class="desc">Interface for the kernel to run the vertical pass of 7x7 Sobel Y filter on a tensor </td></tr>
<tr id="row_0_845_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_softmax_layer_generic.xhtml" target="_self">NESoftmaxLayerGeneric</a></td><td class="desc">Basic function to compute a SoftmaxLayer and a Log SoftmaxLayer </td></tr>
<tr id="row_0_846_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_space_to_batch_layer.xhtml" target="_self">NESpaceToBatchLayer</a></td><td class="desc">Basic function to spatial divide a tensor </td></tr>
<tr id="row_0_847_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_space_to_batch_layer_kernel.xhtml" target="_self">NESpaceToBatchLayerKernel</a></td><td class="desc">Interface for the space to batch kernel </td></tr>
<tr id="row_0_848_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_space_to_depth_layer.xhtml" target="_self">NESpaceToDepthLayer</a></td><td class="desc">This function calls the following NEON kernels/functions: </td></tr>
<tr id="row_0_849_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_space_to_depth_layer_kernel.xhtml" target="_self">NESpaceToDepthLayerKernel</a></td><td class="desc">Interface for the space to depth kernel </td></tr>
<tr id="row_0_850_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_split.xhtml" target="_self">NESplit</a></td><td class="desc">Basic function to split a tensor along a given axis </td></tr>
<tr id="row_0_851_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_stack_layer.xhtml" target="_self">NEStackLayer</a></td><td class="desc">Basic function to stack tensors along an axis </td></tr>
<tr id="row_0_852_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_stack_layer_kernel.xhtml" target="_self">NEStackLayerKernel</a></td><td class="desc">NEON kernel to stacks a rank-R tensor into one with rank-(R+1) along the axis dimension </td></tr>
<tr id="row_0_853_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_strided_slice.xhtml" target="_self">NEStridedSlice</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_strided_slice_kernel.xhtml">NEStridedSliceKernel</a> </td></tr>
<tr id="row_0_854_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_strided_slice_kernel.xhtml" target="_self">NEStridedSliceKernel</a></td><td class="desc">Interface for the kernel to perform tensor strided slicing </td></tr>
<tr id="row_0_855_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_table_lookup.xhtml" target="_self">NETableLookup</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_table_lookup_kernel.xhtml">NETableLookupKernel</a> </td></tr>
<tr id="row_0_856_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_table_lookup_kernel.xhtml" target="_self">NETableLookupKernel</a></td><td class="desc">Interface for the kernel to perform table lookup calculations </td></tr>
<tr id="row_0_857_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_threshold.xhtml" target="_self">NEThreshold</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_threshold_kernel.xhtml">NEThresholdKernel</a> </td></tr>
<tr id="row_0_858_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_threshold_kernel.xhtml" target="_self">NEThresholdKernel</a></td><td class="desc">Interface for the thresholding kernel </td></tr>
<tr id="row_0_859_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_tile.xhtml" target="_self">NETile</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_tile_kernel.xhtml">NETileKernel</a> </td></tr>
<tr id="row_0_860_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_tile_kernel.xhtml" target="_self">NETileKernel</a></td><td class="desc">NEON kernel to perform a tile operation </td></tr>
<tr id="row_0_861_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_transpose.xhtml" target="_self">NETranspose</a></td><td class="desc">Basic function to transpose a matrix on NEON </td></tr>
<tr id="row_0_862_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_transpose_kernel.xhtml" target="_self">NETransposeKernel</a></td><td class="desc">NEON kernel which transposes the elements of a matrix </td></tr>
<tr id="row_0_863_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_unstack.xhtml" target="_self">NEUnstack</a></td><td class="desc">Basic function to unpack a rank-R tensor into rank-(R-1) tensors </td></tr>
<tr id="row_0_864_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_upsample_layer.xhtml" target="_self">NEUpsampleLayer</a></td><td class="desc">Function to run upsample layer </td></tr>
<tr id="row_0_865_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_upsample_layer_kernel.xhtml" target="_self">NEUpsampleLayerKernel</a></td><td class="desc">Interface for the Upsample layer kernel </td></tr>
<tr id="row_0_866_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_warp_affine.xhtml" target="_self">NEWarpAffine</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_warp_affine_kernel.xhtml">NEWarpAffineKernel</a> </td></tr>
<tr id="row_0_867_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_warp_affine_kernel.xhtml" target="_self">NEWarpAffineKernel</a></td><td class="desc">Template interface for the kernel to compute warp affine </td></tr>
<tr id="row_0_868_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_warp_perspective.xhtml" target="_self">NEWarpPerspective</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_warp_perspective_kernel.xhtml">NEWarpPerspectiveKernel</a> </td></tr>
<tr id="row_0_869_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_warp_perspective_kernel.xhtml" target="_self">NEWarpPerspectiveKernel</a></td><td class="desc">Template interface for the kernel to compute warp perspective </td></tr>
<tr id="row_0_870_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_weights_reshape_kernel.xhtml" target="_self">NEWeightsReshapeKernel</a></td><td class="desc">NEON kernel to perform reshaping on the weights used by convolution and locally connected layer </td></tr>
<tr id="row_0_871_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_width_concatenate_layer_kernel.xhtml" target="_self">NEWidthConcatenateLayerKernel</a></td><td class="desc">Interface for the width concatenate kernel </td></tr>
<tr id="row_0_872_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_winograd_convolution_layer.xhtml" target="_self">NEWinogradConvolutionLayer</a></td><td class="desc">Basic function to simulate a convolution layer </td></tr>
<tr id="row_0_873_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_winograd_layer_configuration.xhtml" target="_self">NEWinogradLayerConfiguration</a></td><td class="desc">NEON kernel to perform Winograd </td></tr>
<tr id="row_0_874_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_winograd_layer_transform_input_kernel.xhtml" target="_self">NEWinogradLayerTransformInputKernel</a></td><td class="desc">NEON kernel to perform Winograd input transform </td></tr>
<tr id="row_0_875_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_winograd_layer_transform_output_kernel.xhtml" target="_self">NEWinogradLayerTransformOutputKernel</a></td><td class="desc">NEON kernel to perform Winograd output transform </td></tr>
<tr id="row_0_876_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_winograd_layer_transform_weights_kernel.xhtml" target="_self">NEWinogradLayerTransformWeightsKernel</a></td><td class="desc">NEON kernel to perform Winograd weights transform </td></tr>
<tr id="row_0_877_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_y_o_l_o_layer.xhtml" target="_self">NEYOLOLayer</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_y_o_l_o_layer_kernel.xhtml">NEYOLOLayerKernel</a> </td></tr>
<tr id="row_0_878_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_y_o_l_o_layer_kernel.xhtml" target="_self">NEYOLOLayerKernel</a></td><td class="desc">Interface for the YOLO layer kernel </td></tr>
<tr id="row_0_879_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_normalization_layer_info.xhtml" target="_self">NormalizationLayerInfo</a></td><td class="desc">Normalization Layer Information class </td></tr>
<tr id="row_0_880_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_offset_lifetime_manager.xhtml" target="_self">OffsetLifetimeManager</a></td><td class="desc">Concrete class that tracks the lifetime of registered tensors and calculates the systems memory requirements in terms of a single blob and a list of offsets </td></tr>
<tr id="row_0_881_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_offset_memory_pool.xhtml" target="_self">OffsetMemoryPool</a></td><td class="desc">Offset based memory pool </td></tr>
<tr id="row_0_882_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_o_m_p_scheduler.xhtml" target="_self">OMPScheduler</a></td><td class="desc">Pool of threads to automatically split a kernel's execution among several threads </td></tr>
<tr id="row_0_883_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1_optical_flow_parameters.xhtml" target="_self">OpticalFlowParameters</a></td><td class="desc">Parameters of Optical Flow algorithm </td></tr>
<tr id="row_0_884_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml" target="_self">PadStrideInfo</a></td><td class="desc">Padding and stride information class </td></tr>
<tr id="row_0_885_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_pixel_value.xhtml" target="_self">PixelValue</a></td><td class="desc">Class describing the value of a pixel for any image format </td></tr>
<tr id="row_0_886_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1_pooling_layer_info.xhtml" target="_self">PoolingLayerInfo</a></td><td class="desc">Pooling Layer Information struct </td></tr>
<tr id="row_0_887_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_pool_manager.xhtml" target="_self">PoolManager</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_memory.xhtml" title="CPU implementation of memory object.">Memory</a> pool manager </td></tr>
<tr id="row_0_888_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_prior_box_layer_info.xhtml" target="_self">PriorBoxLayerInfo</a></td><td class="desc">PriorBox layer info </td></tr>
<tr id="row_0_889_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_program.xhtml" target="_self">Program</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_program.xhtml" title="Program class.">Program</a> class </td></tr>
<tr id="row_0_890_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_pyramid.xhtml" target="_self">Pyramid</a></td><td class="desc">Basic implementation of the pyramid interface </td></tr>
<tr id="row_0_891_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_pyramid_info.xhtml" target="_self">PyramidInfo</a></td><td class="desc">Store the <a class="el" href="classarm__compute_1_1_pyramid.xhtml" title="Basic implementation of the pyramid interface.">Pyramid</a>'s metadata </td></tr>
<tr id="row_0_892_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1_qasymm8_quantization_helper.xhtml" target="_self">Qasymm8QuantizationHelper</a></td><td class="desc"></td></tr>
<tr id="row_0_893_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_quantization_info.xhtml" target="_self">QuantizationInfo</a></td><td class="desc">Quantization information </td></tr>
<tr id="row_0_894_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1_rectangle.xhtml" target="_self">Rectangle</a></td><td class="desc"><a class="el" href="structarm__compute_1_1_rectangle.xhtml" title="Rectangle type.">Rectangle</a> type </td></tr>
<tr id="row_0_895_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml" target="_self">ROIPoolingLayerInfo</a></td><td class="desc">ROI Pooling Layer Information class </td></tr>
<tr id="row_0_896_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_runtime_context.xhtml" target="_self">RuntimeContext</a></td><td class="desc">Runtime context </td></tr>
<tr id="row_0_897_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_scheduler.xhtml" target="_self">Scheduler</a></td><td class="desc">Configurable scheduler which supports multiple multithreading APIs and choosing between different schedulers at runtime </td></tr>
<tr id="row_0_898_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_scheduler_factory.xhtml" target="_self">SchedulerFactory</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_scheduler.xhtml" title="Configurable scheduler which supports multiple multithreading APIs and choosing between different sch...">Scheduler</a> Factory </td></tr>
<tr id="row_0_899_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_semaphore.xhtml" target="_self">Semaphore</a></td><td class="desc">Semamphore class </td></tr>
<tr id="row_0_900_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_single_thread_scheduler.xhtml" target="_self">SingleThreadScheduler</a></td><td class="desc">Pool of threads to automatically split a kernel's execution among several threads </td></tr>
<tr id="row_0_901_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_size2_d.xhtml" target="_self">Size2D</a></td><td class="desc">Class for specifying the size of an image or rectangle </td></tr>
<tr id="row_0_902_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1_softmax_kernel_info.xhtml" target="_self">SoftmaxKernelInfo</a></td><td class="desc">Descriptor used by the softmax kernels </td></tr>
<tr id="row_0_903_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_status.xhtml" target="_self">Status</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> class </td></tr>
<tr id="row_0_904_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_steps.xhtml" target="_self">Steps</a></td><td class="desc">Class to describe a number of elements in each dimension </td></tr>
<tr id="row_0_905_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_strides.xhtml" target="_self">Strides</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_strides.xhtml" title="Strides of an item in bytes.">Strides</a> of an item in bytes </td></tr>
<tr id="row_0_906_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_sub_tensor.xhtml" target="_self">SubTensor</a></td><td class="desc">Basic implementation of the sub-tensor interface </td></tr>
<tr id="row_0_907_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml" target="_self">SubTensorInfo</a></td><td class="desc">Store the sub tensor's metadata </td></tr>
<tr id="row_0_908_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_tensor.xhtml" target="_self">Tensor</a></td><td class="desc">Basic implementation of the tensor interface </td></tr>
<tr id="row_0_909_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_tensor_accessor.xhtml" target="_self">TensorAccessor</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> accessors to make it easier to interface with <a class="el" href="namespacearm__gemm.xhtml">arm_gemm</a> </td></tr>
<tr id="row_0_910_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_tensor_allocator.xhtml" target="_self">TensorAllocator</a></td><td class="desc">Basic implementation of a CPU memory tensor allocator </td></tr>
<tr id="row_0_911_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_tensor_info.xhtml" target="_self">TensorInfo</a></td><td class="desc">Store the tensor's metadata </td></tr>
<tr id="row_0_912_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml" target="_self">TensorShape</a></td><td class="desc">Shape of a tensor </td></tr>
<tr id="row_0_913_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1_thread_info.xhtml" target="_self">ThreadInfo</a></td><td class="desc">Information about executing thread and CPU </td></tr>
<tr id="row_0_914_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml" target="_self">UniformQuantizationInfo</a></td><td class="desc">Quantization info when assuming per layer quantization </td></tr>
<tr id="row_0_915_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1_valid_region.xhtml" target="_self">ValidRegion</a></td><td class="desc">Container for valid region of a window </td></tr>
<tr id="row_0_916_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_weights_info.xhtml" target="_self">WeightsInfo</a></td><td class="desc">Convolution Layer Weights Information class </td></tr>
<tr id="row_0_917_" style="display:none;"><td class="entry"><span style="width:16px;display:inline-block;">&#160;</span><span id="arr_0_917_" class="arrow" onclick="toggleFolder('0_917_')">&#9658;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_window.xhtml" target="_self">Window</a></td><td class="desc">Describe a multidimensional execution window </td></tr>
<tr id="row_0_917_0_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_window_1_1_dimension.xhtml" target="_self">Dimension</a></td><td class="desc">Describe one of the image's dimensions with a start, end and step </td></tr>
<tr id="row_0_918_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_window_iterator.xhtml" target="_self">WindowIterator</a></td><td class="desc">Iterate over a portion of a <a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window.">Window</a> </td></tr>
<tr id="row_0_919_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1_winograd_info.xhtml" target="_self">WinogradInfo</a></td><td class="desc">Winograd information </td></tr>
<tr id="row_1_"><td class="entry"><span style="width:0px;display:inline-block;">&#160;</span><span id="arr_1_" class="arrow" onclick="toggleFolder('1_')">&#9658;</span><span class="icona"><span class="icon">N</span></span><a class="el" href="namespacearm__gemm.xhtml" target="_self">arm_gemm</a></td><td class="desc"></td></tr>
<tr id="row_1_0_" class="even" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__gemm_1_1barrier.xhtml" target="_self">barrier</a></td><td class="desc"></td></tr>
<tr id="row_1_1_" class="even" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__gemm_1_1_buffer.xhtml" target="_self">Buffer</a></td><td class="desc"></td></tr>
<tr id="row_1_2_" class="even" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__gemm_1_1_buffer_manager.xhtml" target="_self">BufferManager</a></td><td class="desc"></td></tr>
<tr id="row_1_3_" class="even" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__gemm_1_1_gemm_hybrid.xhtml" target="_self">GemmHybrid</a></td><td class="desc"></td></tr>
<tr id="row_1_4_" class="even" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__gemm_1_1_gemm_hybrid_quantized.xhtml" target="_self">GemmHybridQuantized</a></td><td class="desc"></td></tr>
<tr id="row_1_5_" class="even" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__gemm_1_1_gemm_implementation.xhtml" target="_self">GemmImplementation</a></td><td class="desc"></td></tr>
<tr id="row_1_6_" class="even" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__gemm_1_1_gemm_implementation_3_01_top_00_01_tret_00_01_nothing_01_4.xhtml" target="_self">GemmImplementation&lt; Top, Tret, Nothing &gt;</a></td><td class="desc"></td></tr>
<tr id="row_1_7_" class="even" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__gemm_1_1_gemm_interleaved.xhtml" target="_self">GemmInterleaved</a></td><td class="desc"></td></tr>
<tr id="row_1_8_" class="even" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__gemm_1_1_gemm_native.xhtml" target="_self">GemmNative</a></td><td class="desc"></td></tr>
<tr id="row_1_9_" class="even" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__gemm_1_1_gemv_batched.xhtml" target="_self">GemvBatched</a></td><td class="desc"></td></tr>
<tr id="row_1_10_" class="even" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__gemm_1_1_gemv_native_transposed.xhtml" target="_self">GemvNativeTransposed</a></td><td class="desc"></td></tr>
<tr id="row_1_11_" class="even" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__gemm_1_1_gemv_pretransposed.xhtml" target="_self">GemvPretransposed</a></td><td class="desc"></td></tr>
<tr id="row_1_12_" class="even" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__gemm_1_1_n_d_range.xhtml" target="_self">NDRange</a></td><td class="desc"></td></tr>
<tr id="row_1_13_" class="even" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__gemm_1_1_quantize_wrapper.xhtml" target="_self">QuantizeWrapper</a></td><td class="desc"></td></tr>
<tr id="row_1_14_" class="even" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__gemm_1_1_std_transforms_fixed.xhtml" target="_self">StdTransformsFixed</a></td><td class="desc"></td></tr>
<tr id="row_1_15_" class="even" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__gemm_1_1_std_transforms_s_v_e.xhtml" target="_self">StdTransformsSVE</a></td><td class="desc"></td></tr>
<tr id="row_2_" class="even"><td class="entry"><span style="width:0px;display:inline-block;">&#160;</span><span id="arr_2_" class="arrow" onclick="toggleFolder('2_')">&#9658;</span><span class="icona"><span class="icon">N</span></span><a class="el" href="namespacegemm__tuner.xhtml" target="_self">gemm_tuner</a></td><td class="desc"></td></tr>
<tr id="row_2_0_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classgemm__tuner_1_1_common_gemm_example_options.xhtml" target="_self">CommonGemmExampleOptions</a></td><td class="desc">Common command line options used to configure the gemm examples </td></tr>
<tr id="row_2_1_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structgemm__tuner_1_1_common_gemm_example_params.xhtml" target="_self">CommonGemmExampleParams</a></td><td class="desc">Structure holding all the common gemm example parameters </td></tr>
<tr id="row_3_"><td class="entry"><span style="width:0px;display:inline-block;">&#160;</span><span id="arr_3_" class="arrow" onclick="toggleFolder('3_')">&#9658;</span><span class="icona"><span class="icon">N</span></span><a class="el" href="namespace_gemm_tuner.xhtml" target="_self">GemmTuner</a></td><td class="desc"></td></tr>
<tr id="row_3_0_" class="even" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="class_gemm_tuner_1_1_benchmark_result.xhtml" target="_self">BenchmarkResult</a></td><td class="desc"></td></tr>
<tr id="row_3_1_" class="even" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder.xhtml" target="_self">GEMMBenchmarkResultRecorder</a></td><td class="desc"></td></tr>
<tr id="row_3_2_" class="even" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="class_gemm_tuner_1_1_g_e_m_m_config_distribution.xhtml" target="_self">GEMMConfigDistribution</a></td><td class="desc"></td></tr>
<tr id="row_3_3_" class="even" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="class_gemm_tuner_1_1_g_e_m_m_param.xhtml" target="_self">GEMMParam</a></td><td class="desc"></td></tr>
<tr id="row_3_4_" class="even" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="class_gemm_tuner_1_1_measurement.xhtml" target="_self">Measurement</a></td><td class="desc"></td></tr>
<tr id="row_3_5_" class="even" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="class_gemm_tuner_1_1_native_g_e_m_m_config.xhtml" target="_self">NativeGEMMConfig</a></td><td class="desc"></td></tr>
<tr id="row_3_6_" class="even" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="class_gemm_tuner_1_1_reshaped_g_e_m_m_config.xhtml" target="_self">ReshapedGEMMConfig</a></td><td class="desc"></td></tr>
<tr id="row_3_7_" class="even" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="class_gemm_tuner_1_1_reshaped_only_r_h_s_g_e_m_m_config.xhtml" target="_self">ReshapedOnlyRHSGEMMConfig</a></td><td class="desc"></td></tr>
<tr id="row_4_" class="even"><td class="entry"><span style="width:16px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="struct_coordinates2_d.xhtml" target="_self">Coordinates2D</a></td><td class="desc">2D Coordinates structure </td></tr>
<tr id="row_5_"><td class="entry"><span style="width:16px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="struct_detection_window.xhtml" target="_self">DetectionWindow</a></td><td class="desc">Detection window struct </td></tr>
<tr id="row_6_" class="even"><td class="entry"><span style="width:16px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="struct_image.xhtml" target="_self">Image</a></td><td class="desc">Structure to hold <a class="el" href="struct_image.xhtml" title="Structure to hold Image information.">Image</a> information </td></tr>
<tr id="row_7_"><td class="entry"><span style="width:16px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="struct_internal_keypoint.xhtml" target="_self">InternalKeypoint</a></td><td class="desc"></td></tr>
<tr id="row_8_" class="even"><td class="entry"><span style="width:16px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="struct_keypoint.xhtml" target="_self">Keypoint</a></td><td class="desc"></td></tr>
<tr id="row_9_"><td class="entry"><span style="width:16px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="struct_tensor3_d.xhtml" target="_self">Tensor3D</a></td><td class="desc">Structure to hold 3D tensor information </td></tr>
<tr id="row_10_" class="even"><td class="entry"><span style="width:16px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="struct_tensor4_d.xhtml" target="_self">Tensor4D</a></td><td class="desc">Structure to hold 4D tensor information </td></tr>
<tr id="row_11_"><td class="entry"><span style="width:16px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="struct_transpose_interleave_common.xhtml" target="_self">TransposeInterleaveCommon</a></td><td class="desc"></td></tr>
<tr id="row_12_" class="even"><td class="entry"><span style="width:16px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="struct_vector.xhtml" target="_self">Vector</a></td><td class="desc">Structure to hold <a class="el" href="struct_vector.xhtml" title="Structure to hold Vector information.">Vector</a> information </td></tr>
</table>
</div><!-- directory -->
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="footer">Generated on Thu Mar 5 2020 16:07:21 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
