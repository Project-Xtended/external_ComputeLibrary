<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/core/NEON/kernels/NEFastCornersKernel.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('_n_e_fast_corners_kernel_8cpp_source.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">NEFastCornersKernel.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_n_e_fast_corners_kernel_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2016-2019 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_n_e_fast_corners_kernel_8h.xhtml">arm_compute/core/NEON/kernels/NEFastCornersKernel.h</a>&quot;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_coordinates_8h.xhtml">arm_compute/core/Coordinates.h</a>&quot;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_error_8h.xhtml">arm_compute/core/Error.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_helpers_8h.xhtml">arm_compute/core/Helpers.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_validate_8h.xhtml">arm_compute/core/Validate.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &lt;arm_neon.h&gt;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &lt;cstddef&gt;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &lt;limits&gt;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a>;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_n_e_fast_corners_kernel.xhtml#ad7651a9d61e2bbc1debf8aeea2594ae4">   38</a></span>&#160;<a class="code" href="classarm__compute_1_1_n_e_fast_corners_kernel.xhtml#ad7651a9d61e2bbc1debf8aeea2594ae4">NEFastCornersKernel::NEFastCornersKernel</a>()</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    : <a class="code" href="classarm__compute_1_1_i_c_p_p_kernel.xhtml">INEKernel</a>(), _input(nullptr), _output(nullptr), _threshold(0), _non_max_suppression(false)</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;{</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;}</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="keyword">namespace</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;{</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;constexpr <span class="keywordtype">size_t</span> PERMUTATIONS = 16;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;constexpr <span class="keywordtype">size_t</span> PERM_SIZE    = 16;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="keyword">inline</span> uint8x8x2_t create_permutation_index(<span class="keywordtype">size_t</span> k)</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;{</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(k &gt;= PERMUTATIONS);</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> std::array&lt;std::array&lt;uint8_t, PERMUTATIONS&gt;, PERM_SIZE&gt; permutations_table{ { { 0, 1, 2, 3, 4, 5, 6, 7, 8, 255, 255, 255, 255, 255, 255, 255 },</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;            { 15, 0, 1, 2, 3, 4, 5, 6, 7, 255, 255, 255, 255, 255, 255, 255 },</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;            { 14, 15, 0, 1, 2, 3, 4, 5, 6, 255, 255, 255, 255, 255, 255, 255 },</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;            { 13, 14, 15, 0, 1, 2, 3, 4, 5, 255, 255, 255, 255, 255, 255, 255 },</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;            { 12, 13, 14, 15, 0, 1, 2, 3, 4, 255, 255, 255, 255, 255, 255, 255 },</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;            { 11, 12, 13, 14, 15, 0, 1, 2, 3, 255, 255, 255, 255, 255, 255, 255 },</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            { 10, 11, 12, 13, 14, 15, 0, 1, 2, 255, 255, 255, 255, 255, 255, 255 },</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;            { 9, 10, 11, 12, 13, 14, 15, 0, 1, 255, 255, 255, 255, 255, 255, 255 },</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;            { 8, 9, 10, 11, 12, 13, 14, 15, 0, 255, 255, 255, 255, 255, 255, 255 },</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;            { 7, 8, 9, 10, 11, 12, 13, 14, 15, 255, 255, 255, 255, 255, 255, 255 },</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            { 6, 7, 8, 9, 10, 11, 12, 13, 14, 255, 255, 255, 255, 255, 255, 255 },</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            { 5, 6, 7, 8, 9, 10, 11, 12, 13, 255, 255, 255, 255, 255, 255, 255 },</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            { 4, 5, 6, 7, 8, 9, 10, 11, 12, 255, 255, 255, 255, 255, 255, 255 },</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            { 3, 4, 5, 6, 7, 8, 9, 10, 11, 255, 255, 255, 255, 255, 255, 255 },</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            { 2, 3, 4, 5, 6, 7, 8, 9, 10, 255, 255, 255, 255, 255, 255, 255 },</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            { 1, 2, 3, 4, 5, 6, 7, 8, 9, 255, 255, 255, 255, 255, 255, 255 }</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        } };</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keyword">const</span> uint8x8x2_t index =</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    {</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        {</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            vld1_u8(permutations_table[k].data()),</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;            vld1_u8(permutations_table[k].data() + 8)</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        }</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    };</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keywordflow">return</span> index;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;}</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="keyword">inline</span> uint8x8x4_t create_circle_index_register()</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;{</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="comment">/*</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment">        This function creates the index registers to retrieve the 16 texels in the Bresenham circle of radius 3 with center in P.</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment">        . . F 0 1 . . .</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment">        . E . . . 2 . .</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment">        D . . . . . 3 .</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment">        C . . P . . 4 .</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment">        B . . . . . 5 .</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment">        . A . . . 6 . .</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment">        . . 9 8 7 . . .</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment">        Where . is an irrelevant texel value</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment">        We want to retrieve all texels [0,F]</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment">        The 4 registers in r will then be used to get these texels out of two tables in the function get_circle_texels()</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment">        The first table holds the top 4 rows of texels</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment">        . . F 0 1 . . .</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment">        . E . . . 2 . .</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment">        D . . . . . 3 .</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">        C . . P . . 4 .</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment">        The second table the bottom 3 rows of texels</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment">        B . . . . . 5 .</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment">        . A . . . 6 . .</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment">        . . 9 8 7 . . .</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment">    */</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> std::array&lt;uint8_t, 8&gt; top_right =</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    {</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <span class="comment">/* The register r.val[0] will be used to retrieve these texels:</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment">        . . . 0 1 . . .</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment">        . . . . . 2 . .</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment">        . . . . . . 3 .</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment">        . . . . . . 4 .</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment">        */</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        3 <span class="comment">/* top table, first row, elem 4, value 0 in the diagram above */</span>,</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        4 <span class="comment">/* top table, first row, elem 5, value 1 in the diagram above */</span>,</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        13 <span class="comment">/* top table, second row, elem 6, value 2 in the diagram above */</span>,</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        22 <span class="comment">/* top table, third row, elem 7, value 3 in the diagram above*/</span>,</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        30 <span class="comment">/* top table, fourth row, elem 7, value 4 in the diagram above*/</span>,</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        255,</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        255,</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        255</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    };</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> std::array&lt;uint8_t, 8&gt; bottom_right =</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    {</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        <span class="comment">/* The register r.val[1] will be used to retrieve these texels:</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment">        . . . . . . 5 .</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment">        . . . . . 6 . .</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment">        . . . . 7 . . .</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment">        */</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        255,</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        255,</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        255,</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        255,</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        255,</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        6 <span class="comment">/* low table, first row, elem 7, value 5 in the diagram above*/</span>,</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        13 <span class="comment">/* low table, second row, elem 6, value 6 in the diagram above*/</span>,</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        20 <span class="comment">/* low table, third row, elem 5, value 7 in the diagram above*/</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    };</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> std::array&lt;uint8_t, 8&gt; top_left =</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    {</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        <span class="comment">/* The register r.val[2] will be used to retrieve these texels:</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment">        . . F . . . . .</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment">        . E . . . . . .</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment">        D . . . . . . .</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment">        C . . . . . . .</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment">        */</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        255,</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        255,</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        255,</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        255,</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        24 <span class="comment">/* top table, fourth row, elem 1, value C in the diagram above */</span>,</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        16 <span class="comment">/* top table, third row, elem 1, value D in the diagram above*/</span>,</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        9 <span class="comment">/* top table, second row, elem 2, value E in the diagram above*/</span>,</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        2 <span class="comment">/* top table, first row, elem 3, value F in the diagram above*/</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    };</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> std::array&lt;uint8_t, 8&gt; bottom_left =</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    {</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        <span class="comment">/* The register r.val[3] will be used to retrieve these texels:</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment">        B . . . . . . .</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment">        . A . . . . . .</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment">        . . 9 8 . . . .</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="comment">        */</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        19 <span class="comment">/* low table, third row, elem 4, value 8 in the diagram above */</span>,</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        18 <span class="comment">/* low table, third row, elem 3, value 9 in the diagram above */</span>,</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        9 <span class="comment">/* low table, second row, elem 2, value A in the diagram above */</span>,</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        0 <span class="comment">/* low table, first row, elem 1, value B in the diagram above */</span>,</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        255,</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        255,</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        255,</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        255</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    };</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="keyword">const</span> uint8x8x4_t reg =</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    {</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        {</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            vld1_u8(top_right.data()),</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;            vld1_u8(bottom_right.data()),</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;            vld1_u8(top_left.data()),</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;            vld1_u8(bottom_left.data())</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        }</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    };</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <span class="keywordflow">return</span> reg;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;}</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="keyword">inline</span> uint8x16_t get_circle_texels(<span class="keyword">const</span> uint8x8x4_t &amp;index, <span class="keyword">const</span> uint8x8x4_t &amp;tbl_hi, <span class="keyword">const</span> uint8x8x3_t &amp;tbl_lo)</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;{</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="comment">/*</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="comment">        This function loads the 16 texels in the Bresenham circle of radius 3 into the register &#39;texels&#39;.</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="comment">        The parameter &#39;index&#39; is an array of indices which was previously setup in setup_circle_index_register().</span></div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="comment">        tbl_hi and tbl_lo are the two tables holding the texels in the window [(-3,-3),(+3,+3)] for a given texel P</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="comment">    */</span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="keywordflow">return</span> vcombine_u8(vtbx3_u8(vtbl4_u8(tbl_hi, index.val[0]), tbl_lo, index.val[1]),</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                       vtbx3_u8(vtbl4_u8(tbl_hi, index.val[2]), tbl_lo, index.val[3]));</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;}</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="keyword">inline</span> uint8x16_t get_permutation_texels(<span class="keyword">const</span> uint8x8x2_t &amp;permutation_index, <span class="keyword">const</span> uint8x8x2_t &amp;tbl_circle)</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;{</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="comment">/*</span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="comment">        This function stores the 9 texels of a give permutation X in the neon register &#39;texels&#39;</span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="comment">        &#39;tbl_circle&#39; is a LUT with the texels 0 to F</span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="comment">        . . F 0 1 . . .</span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="comment">        . E . . . 2 . .</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="comment">        D . . . . . 3 .</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="comment">        C . . P . . 4 .</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="comment">        B . . . . . 5 .</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="comment">        . A . . . 6 . .</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="comment">        . . 9 8 7 . . .</span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="comment">        &#39;permutation_index&#39; is one of the permutations below:</span></div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="comment">        { 0, 1, 2, 3, 4, 5, 6, 7, 8},</span></div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="comment">        { F, 0, 1, 2, 3, 4, 5, 6, 7},</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="comment">        { E, F, 0, 1, 2, 3, 4, 5, 6},</span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="comment">        { D, E, F, 0, 1, 2, 3, 4, 5},</span></div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="comment">        { C, D, E, F, 0, 1, 2, 3, 4},</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="comment">        { B, C, D, E, F, 0, 1, 2, 3},</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="comment">        { A, B, C, D, E, F, 0, 1, 2},</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="comment">        { 9, A, B, C, D, E, F, 0, 1},</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="comment">        { 8, 9, A, B, C, D, E, F, 0},</span></div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="comment">        { 7, 8, 9, A, B, C, D, E, F},</span></div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="comment">        { 6, 7, 8, 9, A, B, C, D, E},</span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="comment">        { 5, 6, 7, 8, 9, A, B, C, D},</span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="comment">        { 4, 5, 6, 7, 8, 9, A, B, C},</span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="comment">        { 3, 4, 5, 6, 7, 8, 9, A, B},</span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="comment">        { 2, 3, 4, 5, 6, 7, 8, 9, A},</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="comment">        { 1, 2, 3, 4, 5, 6, 7, 8, 9},</span></div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="comment">    */</span></div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> uint8x8_t perm_right = vdup_n_u8(255); <span class="comment">// init to 255 so that vtbx preserves the original values of the lanes</span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="keywordflow">return</span> vcombine_u8(vtbl2_u8(tbl_circle, permutation_index.val[0]),</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                       vtbx2_u8(perm_right, tbl_circle, permutation_index.val[1]));</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;}</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> is_permutation_brighter(<span class="keyword">const</span> uint8x16_t &amp;permutation, <span class="keyword">const</span> uint8x16_t &amp;pg)</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;{</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="keyword">const</span> uint8x16_t res_gt = vcgtq_u8(permutation, pg);</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="keywordflow">return</span> vget_lane_u64(vreinterpret_u64_u8(vand_u8(vget_high_u8(res_gt), vget_low_u8(res_gt))), 0) == std::numeric_limits&lt;uint64_t&gt;::max();</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;}</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> is_permutation_darker(<span class="keyword">const</span> uint8x16_t &amp;permutation, <span class="keyword">const</span> uint8x16_t &amp;pl)</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;{</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <span class="keyword">const</span> uint8x16_t res_lt    = vcltq_u8(permutation, pl);</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <span class="keyword">const</span> uint64x2_t u64res_lt = vreinterpretq_u64_u8(res_lt);</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="keyword">const</span> uint64_t   t3        = vgetq_lane_u64(u64res_lt, 0);</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="keyword">const</span> uint64_t   t4        = vgetq_lane_u64(u64res_lt, 1);</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <span class="keywordflow">return</span> std::numeric_limits&lt;uint64_t&gt;::max() == t3 &amp;&amp; 255 == t4;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;}</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> is_permutation_corner(<span class="keyword">const</span> uint8x16_t &amp;permutation, <span class="keyword">const</span> uint8x16_t &amp;pg, <span class="keyword">const</span> uint8x16_t &amp;pl)</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;{</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    <span class="keywordflow">return</span> is_permutation_brighter(permutation, pg) || is_permutation_darker(permutation, pl);</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;}</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> point_is_fast_corner(uint8_t p, uint8_t <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6cae310822a46019ba25a00ddb0f7e62">threshold</a>, <span class="keyword">const</span> uint8x8x2_t &amp;tbl_circle_texels, std::array&lt;uint8x8x2_t, PERMUTATIONS&gt; &amp;perm_indices)</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;{</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <span class="comment">/*</span></div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;<span class="comment">        This function determines whether the point &#39;p&#39; is a corner.</span></div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;<span class="comment">    */</span></div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    uint8x16_t pg = vqaddq_u8(vdupq_n_u8(p), vdupq_n_u8(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6cae310822a46019ba25a00ddb0f7e62">threshold</a>));</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    uint8x16_t pl = vqsubq_u8(vdupq_n_u8(p), vdupq_n_u8(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6cae310822a46019ba25a00ddb0f7e62">threshold</a>));</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <span class="keywordtype">bool</span> corner_detected = <span class="keyword">false</span>;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> j = 0; !corner_detected &amp;&amp; j &lt; PERMUTATIONS; ++j)</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    {</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        <span class="keyword">const</span> uint8x16_t pe_texels = get_permutation_texels(perm_indices[j], tbl_circle_texels);</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;        corner_detected            = is_permutation_corner(pe_texels, pg, pl);</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    }</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    <span class="keywordflow">return</span> corner_detected;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;}</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="keyword">inline</span> uint8x8x2_t create_circle_tbl(<span class="keyword">const</span> std::array&lt;uint8_t *const __restrict, 7&gt; &amp;buffer, <span class="keywordtype">size_t</span> in_offset, <span class="keyword">const</span> uint8x8x4_t &amp;circle_index_r)</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;{</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    <span class="comment">/*</span></div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="comment">        This function builds a LUT holding the 16 texels in the Brensenham circle radius 3.</span></div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;<span class="comment">        circle_index_r is a vector of 4 registers to retrieve the texels from the two tables mentioned above.</span></div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;<span class="comment">    */</span></div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <span class="comment">//Load the texels in the window [(x-3,y-3),(x+3,y+3)].</span></div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <span class="comment">//The top 4 rows are loaded in tbl_hi and the low 3 rows in tbl_lo.</span></div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    <span class="comment">//These two tables are then used to retrieve the texels in the Bresenham circle of radius 3.</span></div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    <span class="keyword">const</span> uint8x8x4_t tbl_window_hi =</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    {</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        {</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;            vld1_u8(buffer[0] + in_offset),</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;            vld1_u8(buffer[1] + in_offset),</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;            vld1_u8(buffer[2] + in_offset),</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;            vld1_u8(buffer[3] + in_offset)</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        }</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    };</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    <span class="keyword">const</span> uint8x8x3_t tbl_window_lo =</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    {</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;        {</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;            vld1_u8(buffer[4] + in_offset),</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;            vld1_u8(buffer[5] + in_offset),</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;            vld1_u8(buffer[6] + in_offset)</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;        }</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    };</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    <span class="keyword">const</span> uint8x16_t circle_texels = get_circle_texels(circle_index_r, tbl_window_hi, tbl_window_lo);</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    <span class="keyword">const</span> uint8x8x2_t tbl_circle_texels =</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    {</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;        {</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;            vget_low_u8(circle_texels),</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;            vget_high_u8(circle_texels)</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;        }</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    };</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    <span class="keywordflow">return</span> tbl_circle_texels;</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;}</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="keyword">inline</span> uint8_t get_point_score(uint8_t p, uint8_t tolerance, <span class="keyword">const</span> uint8x8x2_t &amp;tbl_circle, std::array&lt;uint8x8x2_t, PERMUTATIONS&gt; &amp;perm_indices)</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;{</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    uint8_t <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> = 255;</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    uint8_t a = tolerance;</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    <span class="keywordflow">while</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> - a &gt; 1)</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    {</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;        <span class="keyword">const</span> uint16_t ab = a + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>;</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;        <span class="keyword">const</span> uint8_t  c  = ab &gt;&gt; 1;</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;        <span class="keywordflow">if</span>(point_is_fast_corner(p, c, tbl_circle, perm_indices))</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;        {</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;            a = c;</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;        }</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;        {</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> = c;</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;        }</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    }</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    <span class="keywordflow">return</span> a;</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;}</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;} <span class="comment">// namespace</span></div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;</div><div class="line"><a name="l00354"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_n_e_fast_corners_kernel.xhtml#a423f9a45a52983b4de5e2b347f4369c7">  354</a></span>&#160;<a class="code" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a> <a class="code" href="classarm__compute_1_1_n_e_fast_corners_kernel.xhtml#a423f9a45a52983b4de5e2b347f4369c7">NEFastCornersKernel::border_size</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a>(3);</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;}</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;</div><div class="line"><a name="l00359"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_n_e_fast_corners_kernel.xhtml#a39d3a9d0c6485af41190686e323b77cc">  359</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_n_e_fast_corners_kernel.xhtml#a39d3a9d0c6485af41190686e323b77cc">NEFastCornersKernel::configure</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">IImage</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">IImage</a> *output, uint8_t <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6cae310822a46019ba25a00ddb0f7e62">threshold</a>, <span class="keywordtype">bool</span> <a class="code" href="nonmax_8cl.xhtml#a07874f4cb83d115b3c588835d17a8f93">non_max_suppression</a>, <span class="keywordtype">bool</span> border_undefined)</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;{</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    <a class="code" href="_validate_8h.xhtml#abbd63a8040ec1e44308da1d3be3732ae">ARM_COMPUTE_ERROR_ON_TENSOR_NOT_2D</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>);</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    <a class="code" href="_validate_8h.xhtml#abbd63a8040ec1e44308da1d3be3732ae">ARM_COMPUTE_ERROR_ON_TENSOR_NOT_2D</a>(output);</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    <a class="code" href="_validate_8h.xhtml#aadf5c9cff86327b96d88d04649d9715e">ARM_COMPUTE_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>);</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    <a class="code" href="_validate_8h.xhtml#aadf5c9cff86327b96d88d04649d9715e">ARM_COMPUTE_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(output, 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>);</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(border_undefined == <span class="keyword">false</span>, <span class="stringliteral">&quot;Not implemented&quot;</span>);</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    _input               = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>;</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    _output              = output;</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    _threshold           = <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6cae310822a46019ba25a00ddb0f7e62">threshold</a>;</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    _non_max_suppression = <a class="code" href="nonmax_8cl.xhtml#a07874f4cb83d115b3c588835d17a8f93">non_max_suppression</a>;</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="_c_l_im2_col_kernel_8cpp.xhtml#a4e45c1f5e4280813a78a77dda71d8799">num_elems_processed_per_iteration</a> = 1;</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_elems_read_per_iteration      = 8;</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_elems_written_per_iteration   = 1;</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_rows_read_per_iteration       = 7;</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    <span class="comment">// Configure kernel window</span></div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a>                 win = <a class="code" href="namespacearm__compute.xhtml#ab7980fa5ee693e3282a76da047a1c3b5">calculate_max_window</a>(*<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info(), <a class="code" href="classarm__compute_1_1_steps.xhtml">Steps</a>(<a class="code" href="_c_l_im2_col_kernel_8cpp.xhtml#a4e45c1f5e4280813a78a77dda71d8799">num_elems_processed_per_iteration</a>), border_undefined, <a class="code" href="classarm__compute_1_1_n_e_fast_corners_kernel.xhtml#a423f9a45a52983b4de5e2b347f4369c7">border_size</a>());</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    <a class="code" href="classarm__compute_1_1_access_window_horizontal.xhtml">AccessWindowHorizontal</a> output_access(output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), 0, num_elems_written_per_iteration);</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    <a class="code" href="classarm__compute_1_1_access_window_rectangle.xhtml">AccessWindowRectangle</a>  input_access(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info(), -<a class="code" href="classarm__compute_1_1_n_e_fast_corners_kernel.xhtml#a423f9a45a52983b4de5e2b347f4369c7">border_size</a>().<a class="code" href="structarm__compute_1_1_border_size.xhtml#a05374b750b0fc472c34ee61e6f028bba">left</a>, -<a class="code" href="classarm__compute_1_1_n_e_fast_corners_kernel.xhtml#a423f9a45a52983b4de5e2b347f4369c7">border_size</a>().<a class="code" href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">top</a>, num_elems_read_per_iteration, num_rows_read_per_iteration);</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#afc4bd8e872567d9c4c57d89eb0bb3da1">update_window_and_padding</a>(win, input_access, output_access);</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    output_access.set_valid_region(win, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;valid_region(), border_undefined, <a class="code" href="classarm__compute_1_1_n_e_fast_corners_kernel.xhtml#a423f9a45a52983b4de5e2b347f4369c7">border_size</a>());</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    INEKernel::configure(win);</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;}</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;</div><div class="line"><a name="l00389"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_n_e_fast_corners_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">  389</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_n_e_fast_corners_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">NEFastCornersKernel::run</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>)</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;{</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>);</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    <a class="code" href="_validate_8h.xhtml#a1b35b0d258183cf9ef36adf684d0b88c">ARM_COMPUTE_ERROR_ON_UNCONFIGURED_KERNEL</a>(<span class="keyword">this</span>);</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    <a class="code" href="_validate_8h.xhtml#a6eb9ce82815fe429250189da7592ba75">ARM_COMPUTE_ERROR_ON_INVALID_SUBWINDOW</a>(<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">INEKernel::window</a>(), <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>);</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    std::array&lt;uint8x8x2_t, PERMUTATIONS&gt; perm_index{ {} };</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    <span class="comment">/*</span></div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;<span class="comment">        We use a LUT loaded with 7 rows of uint8_t from the input image [-3,-3]...[+3,+3] to retrieve the texels in the Brensenham circle radius 3 and put them in one neon register uint8x16_t.</span></div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;<span class="comment">        The three lines below setup the neon index registers to get these texels out from the table</span></div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;<span class="comment">    */</span></div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    <span class="keyword">const</span> uint8x8x4_t circle_index_r = create_circle_index_register();</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    <span class="comment">/*</span></div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;<span class="comment">        We put the 16 texels (circle) in a LUT to easily generate all the permutations. The for block below setups the indices for each permutation.</span></div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;<span class="comment">    */</span></div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> k = 0; k &lt; PERMUTATIONS; ++k)</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    {</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;        perm_index[k] = create_permutation_index(k);</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    }</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> in(_input, <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>);</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> out(_output, <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>);</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    <span class="keyword">const</span> std::array&lt;uint8_t *const __restrict, 7&gt; in_row</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    {</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;        _input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#adbd73147d41e8a640bc299d12613c31e">ptr_to_element</a>(<a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>(-3, -3)),</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;        _input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#adbd73147d41e8a640bc299d12613c31e">ptr_to_element</a>(<a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>(-3, -2)),</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;        _input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#adbd73147d41e8a640bc299d12613c31e">ptr_to_element</a>(<a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>(-3, -1)),</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;        _input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#adbd73147d41e8a640bc299d12613c31e">ptr_to_element</a>(<a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>(-3, 0)),</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;        _input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#adbd73147d41e8a640bc299d12613c31e">ptr_to_element</a>(<a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>(-3, 1)),</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;        _input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#adbd73147d41e8a640bc299d12613c31e">ptr_to_element</a>(<a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>(-3, 2)),</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;        _input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#adbd73147d41e8a640bc299d12613c31e">ptr_to_element</a>(<a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>(-3, 3))</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    };</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    <span class="keyword">auto</span> is_rejected = [](uint8_t p, uint8_t q, uint8_t a, uint8_t <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>)</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    {</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span> p_is_in_ab = (a &lt;= p) &amp;&amp; (p &lt;= <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span> q_is_in_ab = (a &lt;= q) &amp;&amp; (q &lt;= <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;        <span class="keywordflow">return</span> p_is_in_ab &amp;&amp; q_is_in_ab;</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    };</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>, [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;)</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    {</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">size_t</span>  in_offset = in.<a class="code" href="classarm__compute_1_1_iterator.xhtml#a7d48061a9abb9959505f167fb02e53e1">offset</a>();</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;        <span class="keyword">const</span> uint8_t p0        = *in.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>();</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;        <span class="keyword">const</span> uint8_t <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>         = std::min(p0 + _threshold, 255);</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;        <span class="keyword">const</span> uint8_t a         = std::max(p0 - _threshold, 0);</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;        uint8_t       score     = 0;</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;        <span class="comment">/*</span></div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;<span class="comment">            Fast check to discard points which cannot be corners and avoid the expensive computation of the potential 16 permutations</span></div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;<span class="comment">            pixels 1 and 9 are examined, if both I1 and I9 are within [Ip - t, Ip + t], then candidate p is not a corner.</span></div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;<span class="comment">        */</span></div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;        <span class="keyword">const</span> uint8_t p1 = (in_offset + in_row[0])[3];</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;        <span class="keyword">const</span> uint8_t p9 = (in_offset + in_row[6])[3];</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;        <span class="keywordflow">if</span>(!is_rejected(p1, p9, a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>))</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;        {</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;            <span class="comment">/* pixels 5 and 13 are further examined to check whether three of them are brighter than Ip + t or darker than Ip - t */</span></div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;            <span class="keyword">const</span> uint8_t p5  = (in_offset + in_row[3])[6];</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;            <span class="keyword">const</span> uint8_t p13 = (in_offset + in_row[3])[0];</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;            <span class="keywordflow">if</span>(!is_rejected(p5, p13, a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>))</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;            {</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;                <span class="comment">/* at this stage we use the full test with the 16 permutations to classify the point as corner or not */</span></div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;                <span class="keyword">const</span> uint8x8x2_t tbl_circle_texel = create_circle_tbl(in_row, in_offset, circle_index_r);</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;                <span class="keywordflow">if</span>(point_is_fast_corner(p0, _threshold, tbl_circle_texel, perm_index))</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;                {</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;                    <span class="keywordflow">if</span>(_non_max_suppression)</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;                    {</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;                        score = get_point_score(p0, _threshold, tbl_circle_texel, perm_index);</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;                    }</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;                    <span class="keywordflow">else</span></div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;                    {</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;                        score = 1;</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;                    }</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;                }</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;            }</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;        }</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;        *out.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>() = score;</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    },</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    in, out);</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;}</div><div class="ttc" id="structarm__compute_1_1_border_size_xhtml_a3fdd42ea34070a54e696b3adc28c4be3"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">arm_compute::BorderSize::top</a></div><div class="ttdeci">unsigned int top</div><div class="ttdoc">top of the border</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00349">Types.h:349</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_kernel_xhtml_ad34a46f53686c12a5c5e717cc9617fb6"><div class="ttname"><a href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">arm_compute::IKernel::window</a></div><div class="ttdeci">const Window &amp; window() const</div><div class="ttdoc">The maximum window the kernel can be executed on.</div><div class="ttdef"><b>Definition:</b> <a href="_i_kernel_8cpp_source.xhtml#l00028">IKernel.cpp:28</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml_adbd73147d41e8a640bc299d12613c31e"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml#adbd73147d41e8a640bc299d12613c31e">arm_compute::ITensor::ptr_to_element</a></div><div class="ttdeci">uint8_t * ptr_to_element(const Coordinates &amp;id) const</div><div class="ttdoc">Return a pointer to the element at the passed coordinates.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_8h_source.xhtml#l00063">ITensor.h:63</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml">arm_compute::BorderSize</a></div><div class="ttdoc">Container for 2D border size.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00269">Types.h:269</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_p_p_kernel_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_c_p_p_kernel.xhtml">arm_compute::ICPPKernel</a></div><div class="ttdoc">Common interface for all kernels implemented in C++.</div><div class="ttdef"><b>Definition:</b> <a href="_i_c_p_p_kernel_8h_source.xhtml#l00035">ICPPKernel.h:35</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::Format::U8</a></div><div class="ttdoc">1 channel, 1 U8 per channel</div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml">arm_compute::ITensor</a></div><div class="ttdoc">Interface for NEON tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_8h_source.xhtml#l00036">ITensor.h:36</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab7980fa5ee693e3282a76da047a1c3b5"><div class="ttname"><a href="namespacearm__compute.xhtml#ab7980fa5ee693e3282a76da047a1c3b5">arm_compute::calculate_max_window</a></div><div class="ttdeci">Window calculate_max_window(const ValidRegion &amp;valid_region, const Steps &amp;steps=Steps(), bool skip_border=false, BorderSize border_size=BorderSize())</div><div class="ttdoc">Calculate the maximum window for a given tensor shape and border setting.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_helpers_8cpp_source.xhtml#l00028">Helpers.cpp:28</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2020 ARM Limited.</div><div class="ttdef"><b>Definition:</b> <a href="00__introduction_8dox_source.xhtml#l00024">00_introduction.dox:24</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
<div class="ttc" id="_validate_8h_xhtml_abbd63a8040ec1e44308da1d3be3732ae"><div class="ttname"><a href="_validate_8h.xhtml#abbd63a8040ec1e44308da1d3be3732ae">ARM_COMPUTE_ERROR_ON_TENSOR_NOT_2D</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_TENSOR_NOT_2D(t)</div><div class="ttdef"><b>Definition:</b> <a href="_validate_8h_source.xhtml#l00856">Validate.h:856</a></div></div>
<div class="ttc" id="classarm__compute_1_1_access_window_rectangle_xhtml"><div class="ttname"><a href="classarm__compute_1_1_access_window_rectangle.xhtml">arm_compute::AccessWindowRectangle</a></div><div class="ttdoc">Implementation of a rectangular access pattern.</div><div class="ttdef"><b>Definition:</b> <a href="_i_access_window_8h_source.xhtml#l00107">IAccessWindow.h:107</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_afc4bd8e872567d9c4c57d89eb0bb3da1"><div class="ttname"><a href="namespacearm__compute.xhtml#afc4bd8e872567d9c4c57d89eb0bb3da1">arm_compute::update_window_and_padding</a></div><div class="ttdeci">bool update_window_and_padding(Window &amp;win, Ts &amp;&amp;... patterns)</div><div class="ttdoc">Update window and padding size for each of the access patterns.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_helpers_8h_source.xhtml#l00402">Helpers.h:402</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
<div class="ttc" id="classarm__compute_1_1_iterator_xhtml_a7d48061a9abb9959505f167fb02e53e1"><div class="ttname"><a href="classarm__compute_1_1_iterator.xhtml#a7d48061a9abb9959505f167fb02e53e1">arm_compute::Iterator::offset</a></div><div class="ttdeci">constexpr int offset() const</div><div class="ttdoc">Return the offset in bytes from the first element to the current position of the iterator.</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00180">Helpers.inl:180</a></div></div>
<div class="ttc" id="classarm__compute_1_1_steps_xhtml"><div class="ttname"><a href="classarm__compute_1_1_steps.xhtml">arm_compute::Steps</a></div><div class="ttdoc">Class to describe a number of elements in each dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_steps_8h_source.xhtml#l00040">Steps.h:40</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a0b0eb3235749a2909dc5a101afe59a1b"><div class="ttname"><a href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond, msg)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00456">Error.h:456</a></div></div>
<div class="ttc" id="classarm__compute_1_1_coordinates_xhtml"><div class="ttname"><a href="classarm__compute_1_1_coordinates.xhtml">arm_compute::Coordinates</a></div><div class="ttdoc">Coordinates of an item.</div><div class="ttdef"><b>Definition:</b> <a href="_coordinates_8h_source.xhtml#l00037">Coordinates.h:37</a></div></div>
<div class="ttc" id="classarm__compute_1_1_access_window_horizontal_xhtml"><div class="ttname"><a href="classarm__compute_1_1_access_window_horizontal.xhtml">arm_compute::AccessWindowHorizontal</a></div><div class="ttdoc">Implementation of a row access pattern.</div><div class="ttdef"><b>Definition:</b> <a href="_i_access_window_8h_source.xhtml#l00232">IAccessWindow.h:232</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml_a0e95dc1e53c361348314873b168ae237"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">arm_compute::ITensor::info</a></div><div class="ttdeci">virtual ITensorInfo * info() const =0</div><div class="ttdoc">Interface to be implemented by the child class to return the tensor's metadata.</div></div>
<div class="ttc" id="classarm__compute_1_1_iterator_xhtml_ab260e292b1df3944bc1d55a9b2301e41"><div class="ttname"><a href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">arm_compute::Iterator::ptr</a></div><div class="ttdeci">constexpr uint8_t * ptr() const</div><div class="ttdoc">Return a pointer to the current pixel.</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00185">Helpers.inl:185</a></div></div>
<div class="ttc" id="_error_8h_xhtml"><div class="ttname"><a href="_error_8h.xhtml">Error.h</a></div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml_a05374b750b0fc472c34ee61e6f028bba"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a05374b750b0fc472c34ee61e6f028bba">arm_compute::BorderSize::left</a></div><div class="ttdeci">unsigned int left</div><div class="ttdoc">left of the border</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00352">Types.h:352</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_fast_corners_kernel_xhtml_a423f9a45a52983b4de5e2b347f4369c7"><div class="ttname"><a href="classarm__compute_1_1_n_e_fast_corners_kernel.xhtml#a423f9a45a52983b4de5e2b347f4369c7">arm_compute::NEFastCornersKernel::border_size</a></div><div class="ttdeci">BorderSize border_size() const override</div><div class="ttdoc">The size of the border for that kernel.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_fast_corners_kernel_8cpp_source.xhtml#l00354">NEFastCornersKernel.cpp:354</a></div></div>
<div class="ttc" id="_validate_8h_xhtml_aadf5c9cff86327b96d88d04649d9715e"><div class="ttname"><a href="_validate_8h.xhtml#aadf5c9cff86327b96d88d04649d9715e">ARM_COMPUTE_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN(t, c,...)</div><div class="ttdef"><b>Definition:</b> <a href="_validate_8h_source.xhtml#l00790">Validate.h:790</a></div></div>
<div class="ttc" id="structarm__compute_1_1_thread_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_thread_info.xhtml">arm_compute::ThreadInfo</a></div><div class="ttdoc">Information about executing thread and CPU.</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_types_8h_source.xhtml#l00225">CPPTypes.h:225</a></div></div>
<div class="ttc" id="_coordinates_8h_xhtml"><div class="ttname"><a href="_coordinates_8h.xhtml">Coordinates.h</a></div></div>
<div class="ttc" id="nonmax_8cl_xhtml_a07874f4cb83d115b3c588835d17a8f93"><div class="ttname"><a href="nonmax_8cl.xhtml#a07874f4cb83d115b3c588835d17a8f93">non_max_suppression</a></div><div class="ttdeci">__kernel void non_max_suppression(__global uchar *src_ptr, uint src_stride_x, uint src_step_x, uint src_stride_y, uint src_step_y, uint src_offset_first_element_in_bytes, __global uchar *dst_ptr, uint dst_stride_x, uint dst_step_x, uint dst_stride_y, uint dst_step_y, uint dst_offset_first_element_in_bytes)</div><div class="ttdoc">This function performs Non maxima suppression over a 3x3 window on a given image.</div><div class="ttdef"><b>Definition:</b> <a href="nonmax_8cl_source.xhtml#l00041">nonmax.cl:41</a></div></div>
<div class="ttc" id="_c_l_im2_col_kernel_8cpp_xhtml_a4e45c1f5e4280813a78a77dda71d8799"><div class="ttname"><a href="_c_l_im2_col_kernel_8cpp.xhtml#a4e45c1f5e4280813a78a77dda71d8799">num_elems_processed_per_iteration</a></div><div class="ttdeci">unsigned int num_elems_processed_per_iteration</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_im2_col_kernel_8cpp_source.xhtml#l00054">CLIm2ColKernel.cpp:54</a></div></div>
<div class="ttc" id="arm__compute_2core_2_helpers_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_helpers_8h.xhtml">Helpers.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5002bf7ec46d52971f9526e94172cfee"><div class="ttname"><a href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;... iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00123">Helpers.inl:123</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_fast_corners_kernel_xhtml_a39d3a9d0c6485af41190686e323b77cc"><div class="ttname"><a href="classarm__compute_1_1_n_e_fast_corners_kernel.xhtml#a39d3a9d0c6485af41190686e323b77cc">arm_compute::NEFastCornersKernel::configure</a></div><div class="ttdeci">void configure(const IImage *input, IImage *output, uint8_t threshold, bool non_max_suppression, bool border_undefined)</div><div class="ttdoc">Initialise the kernel.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_fast_corners_kernel_8cpp_source.xhtml#l00359">NEFastCornersKernel.cpp:359</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_fast_corners_kernel_xhtml_ad7651a9d61e2bbc1debf8aeea2594ae4"><div class="ttname"><a href="classarm__compute_1_1_n_e_fast_corners_kernel.xhtml#ad7651a9d61e2bbc1debf8aeea2594ae4">arm_compute::NEFastCornersKernel::NEFastCornersKernel</a></div><div class="ttdeci">NEFastCornersKernel()</div><div class="ttdoc">Constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_fast_corners_kernel_8cpp_source.xhtml#l00038">NEFastCornersKernel.cpp:38</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a4f4125dba5283887b34f889b1c615c0c"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">arm_compute::test::validation::info</a></div><div class="ttdeci">info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00182">ConvolutionLayer.cpp:182</a></div></div>
<div class="ttc" id="classarm__compute_1_1_iterator_xhtml"><div class="ttname"><a href="classarm__compute_1_1_iterator.xhtml">arm_compute::Iterator</a></div><div class="ttdoc">Iterator updated by execute_window_loop for each window element.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_helpers_8h_source.xhtml#l00318">Helpers.h:318</a></div></div>
<div class="ttc" id="_validate_8h_xhtml_a6eb9ce82815fe429250189da7592ba75"><div class="ttname"><a href="_validate_8h.xhtml#a6eb9ce82815fe429250189da7592ba75">ARM_COMPUTE_ERROR_ON_INVALID_SUBWINDOW</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_INVALID_SUBWINDOW(f, s)</div><div class="ttdef"><b>Definition:</b> <a href="_validate_8h_source.xhtml#l00205">Validate.h:205</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_fast_corners_kernel_xhtml_a112b35dd205c62ea6ed1447ef226da82"><div class="ttname"><a href="classarm__compute_1_1_n_e_fast_corners_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">arm_compute::NEFastCornersKernel::run</a></div><div class="ttdeci">void run(const Window &amp;window, const ThreadInfo &amp;info) override</div><div class="ttdoc">Execute the kernel on the passed window.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_fast_corners_kernel_8cpp_source.xhtml#l00389">NEFastCornersKernel.cpp:389</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_a6cae310822a46019ba25a00ddb0f7e62"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6cae310822a46019ba25a00ddb0f7e62">arm_compute::test::validation::reference::threshold</a></div><div class="ttdeci">SimpleTensor&lt; T &gt; threshold(const SimpleTensor&lt; T &gt; &amp;src, T threshold, T false_value, T true_value, ThresholdType type, T upper)</div><div class="ttdef"><b>Definition:</b> <a href="reference_2_threshold_8cpp_source.xhtml#l00035">Threshold.cpp:35</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml">arm_compute::Window</a></div><div class="ttdoc">Describe a multidimensional execution window.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00039">Window.h:39</a></div></div>
<div class="ttc" id="_n_e_fast_corners_kernel_8h_xhtml"><div class="ttname"><a href="_n_e_fast_corners_kernel_8h.xhtml">NEFastCornersKernel.h</a></div></div>
<div class="ttc" id="_validate_8h_xhtml_a1b35b0d258183cf9ef36adf684d0b88c"><div class="ttname"><a href="_validate_8h.xhtml#a1b35b0d258183cf9ef36adf684d0b88c">ARM_COMPUTE_ERROR_ON_UNCONFIGURED_KERNEL</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_UNCONFIGURED_KERNEL(k)</div><div class="ttdef"><b>Definition:</b> <a href="_validate_8h_source.xhtml#l00941">Validate.h:941</a></div></div>
<div class="ttc" id="_validate_8h_xhtml"><div class="ttname"><a href="_validate_8h.xhtml">Validate.h</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aebb8dcc11953d78e620bbef0b9e2183.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_d91e1966cc57df4f49d1e07be7697713.xhtml">NEON</a></li><li class="navelem"><a class="el" href="dir_1ce938f580a6f304b99685e2c1dd19db.xhtml">kernels</a></li><li class="navelem"><a class="el" href="_n_e_fast_corners_kernel_8cpp.xhtml">NEFastCornersKernel.cpp</a></li>
    <li class="footer">Generated on Fri Feb 21 2020 11:10:15 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
