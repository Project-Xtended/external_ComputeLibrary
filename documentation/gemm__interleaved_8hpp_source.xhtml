<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/core/NEON/kernels/arm_gemm/gemm_interleaved.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('gemm__interleaved_8hpp_source.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">gemm_interleaved.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="gemm__interleaved_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017-2019 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &lt;stdio.h&gt;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;assert.h&gt;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;arm_gemm.hpp&quot;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="utils_8hpp.xhtml">utils.hpp</a>&quot;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="buffer__manager_8hpp.xhtml">buffer_manager.hpp</a>&quot;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="mergeresults_8hpp.xhtml">mergeresults.hpp</a>&quot;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="transform_8hpp.xhtml">transform.hpp</a>&quot;</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#ifdef CYCLE_PROFILING</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#include &quot;profiler.hpp&quot;</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment">// Some macros used to decide how much working space to allocate.</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment">// Round allocations up to the next cache line.</span></div><div class="line"><a name="l00044"></a><span class="lineno"><a class="line" href="gemm__interleaved_8hpp.xhtml#abd1ded15e3688096ead983e87f83fbd1">   44</a></span>&#160;<span class="preprocessor">#define ALLOC_ROUND 64</span></div><div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="gemm__interleaved_8hpp.xhtml#a5560b3c73e2e50a0b1bda1fa70ec58af">   45</a></span>&#160;<span class="preprocessor">#define ROUND_UP(x) ((((x) + ALLOC_ROUND-1) / ALLOC_ROUND) * ALLOC_ROUND)</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment">// Implementation of the GemmCommon abstract class.</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment">// This implementation interleaves the source matrices in blocks - good for</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment">// larger matrices.</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__gemm.xhtml">arm_gemm</a> {</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> strategy, <span class="keyword">typename</span> To, <span class="keyword">typename</span> Tr&gt;</div><div class="line"><a name="l00054"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_interleaved.xhtml">   54</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml">GemmInterleaved</a> : <span class="keyword">public</span> GemmCommon&lt;To, Tr&gt; {</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keyword">typedef</span> <span class="keyword">typename</span> strategy::operand_type Toi;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">typedef</span> <span class="keyword">typename</span> strategy::result_type Tri;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="comment">/* const properties set by constructor */</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keyword">const</span> CPUInfo * <span class="keyword">const</span> _ci;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _Msize;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _Nsize;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _Ksize;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _nbatches;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _nmulti;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> _trA;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> _trB;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a5f9016ea3e28a033b7cc216bdda912be">Activation</a> _act;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> _maxthreads;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keywordtype">int</span> _nthreads;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> _pretransposed;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="comment">/* Blocking info */</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _k_block=0;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _x_block=0;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _Mround=0;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="comment">/* Working space, pretransposed buffer, buffer manager */</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keyword">const</span> Toi *_B_transposed=<span class="keyword">nullptr</span>;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <a class="code" href="classarm__gemm_1_1_buffer_manager.xhtml">BufferManager</a> *_bm=<span class="keyword">nullptr</span>;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keywordtype">void</span> *_working_space=<span class="keyword">nullptr</span>;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="comment">/* We will need to walk through the blocks of B in a few contexts, so</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment">     * factor that out.  */</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keyword">class </span>blockwalker {</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keyword">private</span>:</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        <span class="comment">/* Size loops, etc. based on our parent&#39;s configuration */</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml">GemmInterleaved&lt;strategy, To, Tr&gt;</a> &amp;_parent;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        <span class="comment">/* K, X and multi parameters for current iteration. */</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _k0=0, _x0=0, _multi=0;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _index=0;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        <span class="keywordtype">bool</span> _done=<span class="keyword">false</span>;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        <span class="keywordtype">bool</span> _newkblock=<span class="keyword">true</span>;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        <span class="keywordtype">bool</span> _newmulti=<span class="keyword">true</span>;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keyword">public</span>:</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        blockwalker(<span class="keyword">const</span> <a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml">GemmInterleaved&lt;strategy, To, Tr&gt;</a> &amp;parent) : _parent(parent) { }</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> xmax() {</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            <span class="keywordflow">return</span> std::min(_x0 + _parent._x_block, _parent._Nsize);</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        }</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kmax() {</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            <span class="keywordflow">return</span> std::min(_k0 + _parent._k_block, _parent._Ksize);</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        }</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <span class="comment">/* Advance to the next block, return false at the end. */</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        <span class="keywordtype">bool</span> advance(<span class="keywordtype">void</span>) {</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            <span class="keywordflow">if</span> (_done) {</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            }</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            _newkblock=<span class="keyword">false</span>;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            _x0 += _parent._x_block;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            <span class="keywordflow">if</span> (_x0 &gt;= _parent._Nsize) {</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                _x0=0;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                _k0 += _parent._k_block;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                <span class="keywordflow">if</span> (_k0 &gt;= _parent._Ksize) {</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                    _k0=0;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                    _multi++;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                    <span class="keywordflow">if</span> (_multi &gt;= _parent._nmulti) {</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                        _done=<span class="keyword">true</span>;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                    }</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                    _newmulti=<span class="keyword">true</span>;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                }</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                _newkblock=<span class="keyword">true</span>;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            }</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            _index++;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        }</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k0(<span class="keywordtype">void</span>) { <span class="keywordflow">return</span> _k0; }</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> x0(<span class="keywordtype">void</span>) { <span class="keywordflow">return</span> _x0; }</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> multi(<span class="keywordtype">void</span>) { <span class="keywordflow">return</span> _multi; }</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> index(<span class="keywordtype">void</span>) { <span class="keywordflow">return</span> _index; }</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        <span class="keywordtype">bool</span> done(<span class="keywordtype">void</span>) { <span class="keywordflow">return</span> _done; }</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        <span class="keywordtype">bool</span> newkblock(<span class="keywordtype">void</span>) { <span class="keywordflow">return</span> _newkblock; }</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    };</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="comment">// A working size: One of these needed, regardless of thread count.  Divided according to window.</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keywordtype">size_t</span> get_a_working_size()<span class="keyword"> const </span>{</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a5560b3c73e2e50a0b1bda1fa70ec58af">ROUND_UP</a>(<span class="keyword">sizeof</span>(Toi) * _k_block * _Mround * _nbatches);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    }</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="comment">// B working size: 0, 1 or 3 of these needed depending on pretransposed and threading settings.</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="keywordtype">size_t</span> get_b_working_size()<span class="keyword"> const </span>{</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a5560b3c73e2e50a0b1bda1fa70ec58af">ROUND_UP</a>(<span class="keyword">sizeof</span>(Toi) * _x_block * _k_block);</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    }</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="comment">// C working size: One needed per thread.</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="keywordtype">size_t</span> get_c_working_size()<span class="keyword"> const </span>{</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a5560b3c73e2e50a0b1bda1fa70ec58af">ROUND_UP</a>(<span class="keyword">sizeof</span>(Tri) * _x_block * strategy::out_height());</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    }</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="comment">// Internal execute function.</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="comment">// This supports both the &quot;pretransposed&quot; and &quot;standard&quot; interfaces via the template parameter.</span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keyword">template</span>&lt;<span class="keywordtype">bool</span> pretransposed&gt;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="keywordtype">void</span> execute_internal(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> start, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> end, <span class="keywordtype">int</span> threadid) {</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="preprocessor">#ifdef CYCLE_PROFILING</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        profiler prof;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        strategy strat(_ci);</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        blockwalker current(*<span class="keyword">this</span>);</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        blockwalker next=current;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        <span class="comment">/* Translate &#39;start&#39; and &#39;end&#39; into a position within the batches and rows. */</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> window_per_batch = _Mround / strategy::out_height();</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batch_0   = start / window_per_batch;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batch_end = end   / window_per_batch;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        <span class="comment">/* Compute the M values to operate on */</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m_0   = (start - (batch_0 * window_per_batch)) * strategy::out_height();</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m_max = (end - (batch_end * window_per_batch)) * strategy::out_height();</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        <span class="comment">/* Make sure we&#39;ve been set up correctly. */</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        <span class="keywordflow">if</span> (pretransposed) {</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            assert(_B_transposed);</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;            assert(_bm);</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        }</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        assert(_working_space);</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        int8_t *working_space_bytes = reinterpret_cast&lt;int8_t *&gt;(_working_space);</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        <span class="comment">// Private buffers.  Treat working_space as an array of C buffers</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        <span class="comment">// (one per thread) first, followed by the (window-divided) A</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        <span class="comment">// buffer.</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        <span class="comment">// Set a_panel to the base of the A buffers - compute offsets into it based on M/batches later.</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        Toi * <span class="keyword">const</span> a_panel = reinterpret_cast&lt;Toi *&gt;(working_space_bytes + (_maxthreads * get_c_working_size()));</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        Tri * <span class="keyword">const</span> c_panel = reinterpret_cast&lt;Tri *&gt;(working_space_bytes + (threadid * get_c_working_size()));</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        <span class="comment">// Shared buffers - these come either from BufferManager or _B_transposed.</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        <span class="keyword">const</span> Toi *b_panel;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        <span class="keywordflow">if</span> (pretransposed) {</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;            b_panel = _B_transposed;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        }</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        <span class="comment">//printf(&quot;Starting GEMM loop, x_block=%d, k_block=%d\n&quot;, _x_block, _k_block);</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        <span class="comment">// newkblock() is always true on the first iteration, so this will be set properly on the first loop.</span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        <span class="keywordtype">int</span> kern_k = 0;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        <span class="keywordflow">for</span> (;!current.done();current.advance()) {</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            <span class="keywordflow">if</span> (current.newkblock()) {</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="preprocessor">#ifdef CYCLE_PROFILING</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                <span class="keyword">auto</span> p=prof.ScopedProfiler(PROFILE_PREPA, (end - start) * strategy::out_height() * (current.kmax()-current.k0()) * <span class="keyword">sizeof</span>(Toi));</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batch = batch_0; batch &lt;= batch_end; batch++) {</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> first_m = (batch == batch_0)   ? m_0   : 0;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> last_m  = (batch == batch_end) ? m_max : _Msize;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                    <span class="keywordflow">if</span> (first_m &gt;= last_m)</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                        <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                    strat.transforms.PrepareA(a_panel + ((batch * _Mround + first_m) * _k_block),</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                                              this-&gt;_Aptr + (batch * this-&gt;_A_batch_stride) + (current.multi() * this-&gt;_A_multi_stride),</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                                              this-&gt;_lda, first_m, last_m, current.k0(), current.kmax(), _trA);</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                }</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                <span class="comment">// Figure out how many &quot;K&quot; the kernel will actually process.</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                kern_k = <a class="code" href="utils_8hpp.xhtml#aa4508679e1d089c2bdcf000f72357683">iceildiv</a>(current.kmax() - current.k0(), strategy::k_unroll());</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                kern_k *= strat.k_unroll();</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;            }</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;            <span class="keywordtype">int</span> bblocks = <a class="code" href="utils_8hpp.xhtml#aa4508679e1d089c2bdcf000f72357683">iceildiv</a>(current.xmax() - current.x0(), strategy::out_width());</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;            <span class="keywordflow">if</span> (!pretransposed) {</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                <span class="comment">/* Look ahead to the next block and populate it if necessary.</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="comment">                 * This avoids the populate operation becoming a bottleneck, and</span></div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="comment">                 * helps keep the threads synchronized (the first thread to get</span></div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="comment">                 * here will populate while the rest will advance).</span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="comment">                 *</span></div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="comment">                 * If we are running single threaded, bm-&gt;try_populate() will do</span></div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="comment">                 * nothing.</span></div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="comment">                 */</span></div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                <span class="keywordflow">if</span> (next.advance()) {</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                    _bm-&gt;<a class="code" href="classarm__gemm_1_1_buffer_manager.xhtml#a97814ef98fcd29d1fb5df1e877f8eabc">try_populate</a>(next.index(), [&amp;](<span class="keywordtype">void</span> *buffer) {</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="preprocessor">#ifdef CYCLE_PROFILING</span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                        <span class="keyword">auto</span> p=prof.ScopedProfiler(PROFILE_PREPB, (next.xmax()-next.x0()) * (next.kmax()-next.k0()) * <span class="keyword">sizeof</span>(Toi));</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                        Toi *b_panel = reinterpret_cast&lt;Toi *&gt;(buffer);</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                        strat.transforms.PrepareB(b_panel, this-&gt;_Bptr + (next.multi() * this-&gt;_B_multi_stride), this-&gt;_ldb,</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                                                  next.x0(), next.xmax(), next.k0(), next.kmax(), _trB);</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                    });</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                }</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                <span class="comment">/* Get the buffer for this iteration from the BufferManager. */</span></div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                b_panel = reinterpret_cast&lt;Toi *&gt;(_bm-&gt;<a class="code" href="classarm__gemm_1_1_buffer_manager.xhtml#a427705bf76071f12aa29992bd5cffa73">get</a>(current.index(), [&amp;](<span class="keywordtype">void</span> *bpv) {</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="preprocessor">#ifdef CYCLE_PROFILING</span></div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                    <span class="keyword">auto</span> p=prof.ScopedProfiler(PROFILE_PREPB, (current.xmax()-current.x0()) * (current.kmax()-current.k0()) * <span class="keyword">sizeof</span>(Toi));</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                    Toi *b_panel = reinterpret_cast&lt;Toi *&gt;(bpv);</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                    strat.transforms.PrepareB(b_panel, this-&gt;_Bptr + (current.multi() * this-&gt;_B_multi_stride), this-&gt;_ldb,</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                                              current.x0(), current.xmax(), current.k0(), current.kmax(), _trB);</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                }));</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;            }</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;            <span class="comment">/* Do the actual work. */</span></div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batch = batch_0; batch &lt;= batch_end; batch++) {</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> first_m = (batch == batch_0)   ? m_0   : 0;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> last_m  = (batch == batch_end) ? m_max : _Msize;</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                <span class="keyword">const</span> Toi *a_ptr = a_panel + (batch * _Mround + first_m) * _k_block;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;                <span class="keywordflow">if</span> (first_m &gt;= last_m)</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;                    <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> y=first_m; y&lt;last_m; y+=strategy::out_height()) {</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ymax = std::min(_Msize, y + strategy::out_height());</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                    {</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="preprocessor">#ifdef CYCLE_PROFILING</span></div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                        <span class="keyword">auto</span> p=prof.ScopedProfiler(PROFILE_KERNEL, (strategy::out_height() * bblocks * strategy::out_width() * kern_k));</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                        strat.kernel(a_ptr, b_panel, c_panel, 1, bblocks, kern_k);</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                        a_ptr += (strategy::out_height() * kern_k);</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                    }</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                    {</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;<span class="preprocessor">#ifdef CYCLE_PROFILING</span></div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;                        <span class="keyword">auto</span> p=prof.ScopedProfiler(PROFILE_MERGE, (strategy::out_height() * bblocks * strategy::out_width() * <span class="keyword">sizeof</span>(Tr)));</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                        <span class="comment">/* Only activate on last pass, only add bias on first pass, ask for accumulation on any non-first pass */</span></div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                        <span class="keyword">const</span> <span class="keywordtype">bool</span> first_pass = current.k0()==0;</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                        <span class="keyword">const</span> <span class="keywordtype">bool</span> last_pass  = current.kmax()==_Ksize;</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                        strat.transforms.Merge(this-&gt;_Cptr + (batch * this-&gt;_C_batch_stride) + (current.multi() * this-&gt;_C_multi_stride),</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                                               c_panel, this-&gt;_ldc, y, ymax, current.x0(), current.xmax(),</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                                               ((first_pass &amp;&amp; this-&gt;_bias) ? this-&gt;_bias + (current.multi() * this-&gt;_bias_multi_stride) : <span class="keyword">nullptr</span>),</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                                               (last_pass ? _act : <a class="code" href="namespacearm__compute_1_1graph.xhtml#a5f9016ea3e28a033b7cc216bdda912be">Activation</a>()), !first_pass);</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                    }</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                }</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;            }</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;            <span class="keywordflow">if</span> (pretransposed) {</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                b_panel += (bblocks * strat.out_width() * kern_k);</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;            } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                _bm-&gt;<a class="code" href="classarm__gemm_1_1_buffer_manager.xhtml#a29a2894a4403bc4cc19aacc35cb91d54">release</a>(current.index());</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;            }</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        }</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    }</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    <a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml#add13963d432a1937370721fa61755b9c">GemmInterleaved</a>(<a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml">GemmInterleaved</a> &amp;) = <span class="keyword">delete</span>;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    <a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml">GemmInterleaved</a> &amp; <a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml#af03b8e4289fa0e112d315dd7e25ec696">operator= </a>(<a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml">GemmInterleaved</a> &amp;) = <span class="keyword">delete</span>;</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    <span class="comment">/* Constructor */</span></div><div class="line"><a name="l00324"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_interleaved.xhtml#a62d3274bfacd0e46e112520266f8d68f">  324</a></span>&#160;    <a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml#a62d3274bfacd0e46e112520266f8d68f">GemmInterleaved</a>(<span class="keyword">const</span> GemmArgs &amp;<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>)</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                    : _ci(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._ci), _Msize(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Msize), _Nsize(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Nsize), _Ksize(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Ksize),</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;                      _nbatches(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._nbatches), _nmulti(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._nmulti), _trA(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._trA), _trB(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._trB),</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;                      _act(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._act), _maxthreads(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._maxthreads), _nthreads(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._maxthreads),</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;                      _pretransposed(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._pretransposed_hint) {</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> L1_size = _ci-&gt;get_L1_cache_size();</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> L2_size = _ci-&gt;get_L2_cache_size();</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;        assert(_maxthreads &gt; 0);</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;        <span class="comment">// Work out blocking parameters, or override from provided GemmConfig</span></div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._cfg &amp;&amp; <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._cfg-&gt;inner_block_size) {</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;            _k_block = <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._cfg-&gt;inner_block_size;</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;        } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;            <span class="comment">// k_block: Find out how much of the larger array can be loaded into half the cache.</span></div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;            <span class="comment">// This should account for associative caches.</span></div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;            _k_block = (L1_size / 2) / (<span class="keyword">sizeof</span>(Toi) * (std::max(strategy::out_width(), strategy::out_height())));</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;            <span class="comment">// Needs to be (at least a single) multiple of the K unroll level.</span></div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;            _k_block /= strategy::k_unroll();</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;            _k_block = std::max(_k_block, 1U) * strategy::k_unroll();</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;            <span class="comment">// Now tune to presented problem size; this is how many blocks we need.</span></div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_k_blocks = <a class="code" href="utils_8hpp.xhtml#aa4508679e1d089c2bdcf000f72357683">iceildiv</a>(_Ksize, _k_block);</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;            <span class="comment">// So divide the space equally into that many blocks.</span></div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;            _k_block = <a class="code" href="utils_8hpp.xhtml#aa4508679e1d089c2bdcf000f72357683">iceildiv</a>(_Ksize, num_k_blocks);</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;            <span class="comment">// And round UP to the K unroll level required.</span></div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;            _k_block = <a class="code" href="utils_8hpp.xhtml#aa4508679e1d089c2bdcf000f72357683">iceildiv</a>(_k_block, strategy::k_unroll());</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;            _k_block *= strategy::k_unroll();</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;        }</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._cfg &amp;&amp; <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._cfg-&gt;outer_block_size) {</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;            _x_block = <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._cfg-&gt;outer_block_size;</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;        } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;            <span class="comment">// x_block: Work out how many rows (of length k_block) will fit in the L2</span></div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;            <span class="comment">// Don&#39;t allocate more than 90% of the L2 to allow for overheads, and subtract off the L1 contents.</span></div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;            _x_block = (((L2_size * 9) / 10) - (_k_block * <span class="keyword">sizeof</span>(Toi) * (strategy::out_width() + strategy::out_height()))) /</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                      (<span class="keyword">sizeof</span>(Toi) * _k_block);</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;            <span class="comment">// Needs to be (at least a single) multiple of the kernel output width.</span></div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;            _x_block /= strategy::out_width();</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;            _x_block = std::max(_x_block, 1U) * strategy::out_width();</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;            <span class="comment">// And tune to the presented problem size.</span></div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_x_blocks = <a class="code" href="utils_8hpp.xhtml#aa4508679e1d089c2bdcf000f72357683">iceildiv</a>(_Nsize, _x_block);</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;            _x_block = <a class="code" href="utils_8hpp.xhtml#aa4508679e1d089c2bdcf000f72357683">iceildiv</a>(_Nsize, num_x_blocks);</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;            _x_block = <a class="code" href="utils_8hpp.xhtml#aa4508679e1d089c2bdcf000f72357683">iceildiv</a>(_x_block, strategy::out_width());</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;            _x_block *= strategy::out_width();</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;        }</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;        <span class="comment">// Work out the rounded size of M - needed for some buffers.</span></div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;        _Mround = <a class="code" href="utils_8hpp.xhtml#aa4508679e1d089c2bdcf000f72357683">iceildiv</a>(_Msize, strategy::out_height());</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;        _Mround *= strategy::out_height();</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    }</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    <span class="comment">// Interface implementation - Compulsory functions</span></div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    <span class="comment">// Window size: Only the last thread should do a ragged block, so dole</span></div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    <span class="comment">// out work in units of out_height.  Factor batches into the window, but</span></div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    <span class="comment">// not multi for now (as this would cause problems with the buffer</span></div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    <span class="comment">// manager).</span></div><div class="line"><a name="l00388"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_interleaved.xhtml#a9fe814165d032363ea4f9cfdd36dd5e2">  388</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml#a9fe814165d032363ea4f9cfdd36dd5e2">get_window_size</a>()<span class="keyword"> const override </span>{</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;        <span class="comment">// _Mround is a multiple of out_height by definition.</span></div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;        <span class="keywordflow">return</span> (_Mround / strategy::out_height()) * _nbatches;</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    }</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    <span class="comment">// set_nthreads: pass on to buffer manager to avoid it waiting for non-existant threads.</span></div><div class="line"><a name="l00394"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_interleaved.xhtml#a468e9c50d4decc2ba86f9bd393ba27d6">  394</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml#a468e9c50d4decc2ba86f9bd393ba27d6">set_nthreads</a>(<span class="keywordtype">int</span> nthreads)<span class="keyword"> override </span>{</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;        _nthreads = std::min(nthreads, _maxthreads);</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;        <span class="keywordflow">if</span> (_bm) {</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;            _bm-&gt;<a class="code" href="classarm__gemm_1_1_buffer_manager.xhtml#abe8297b7d4cf647e06eff027982cbb8e">set_nthreads</a>(_nthreads);</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;        }</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    }</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    <span class="comment">// Execute</span></div><div class="line"><a name="l00402"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_interleaved.xhtml#a0b21ce5febc3f7eed9c7b37c0b9a3560">  402</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml#a0b21ce5febc3f7eed9c7b37c0b9a3560">execute</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> start, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> end, <span class="keywordtype">int</span> threadid)<span class="keyword"> override </span>{</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;        <span class="keywordflow">if</span> (_pretransposed) {</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;            execute_internal&lt;true&gt;(start, end, threadid);</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;        } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;            execute_internal&lt;false&gt;(start, end, threadid);</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;        }</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    }</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    <span class="comment">// Interface implementation - working space</span></div><div class="line"><a name="l00411"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_interleaved.xhtml#abf5a58f6feffeae31f48b750cba9303d">  411</a></span>&#160;    <span class="keywordtype">size_t</span> <a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml#abf5a58f6feffeae31f48b750cba9303d">get_working_size</a>()<span class="keyword"> const override </span>{</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;        <span class="comment">// In all cases, we need one A buffer plus a C buffer per thread.</span></div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;        <span class="keywordtype">size_t</span> size = get_a_working_size() + (get_c_working_size() * _maxthreads);</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;        <span class="comment">// For pretransposed case, there is no working space needed for B.</span></div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;        <span class="comment">// Otherwise, we need a BufferManager.</span></div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;        <span class="keywordflow">if</span> (!_pretransposed) {</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;            size += <a class="code" href="classarm__gemm_1_1_buffer_manager.xhtml#ad94ec2bb5758590521fe20ae781ca0b5">BufferManager::get_storage_requirement</a>(_maxthreads, get_b_working_size());</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;        }</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;        size += 64; <span class="comment">// Add on a cache line extra for alignment.</span></div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;        <span class="keywordflow">return</span> size;</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    }</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;</div><div class="line"><a name="l00426"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_interleaved.xhtml#aee006b8384820aa25720e84b91b32a27">  426</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml#aee006b8384820aa25720e84b91b32a27">set_working_space</a>(<span class="keywordtype">void</span> *working_space)<span class="keyword"> override </span>{</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;        <span class="comment">// Make sure everything ends up cache line aligned</span></div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;        int8_t *working_space_bytes = reinterpret_cast&lt;int8_t *&gt;(working_space);</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;        intptr_t working_space_int = reinterpret_cast&lt;intptr_t&gt;(working_space);</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;        <span class="keywordtype">size_t</span> diff=0;</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;        <span class="keywordflow">if</span> (working_space_int &amp; 0x3F) {</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;            diff = 0x40 - (working_space_int &amp; 0x3F);</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;        }</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;        working_space_bytes += diff;</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;        <span class="keywordflow">if</span> (_pretransposed) {</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;            <span class="comment">// Pretransposed case: just set internal pointer to parameter value.</span></div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;            _working_space = reinterpret_cast&lt;void *&gt;(working_space_bytes);</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;        } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;            <span class="comment">// Otherwise, use the first part of the working space for the buffer manager.</span></div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;            <span class="comment">// It&#39;s legal to call this again so don&#39;t leak a buffer manager if it already existed.</span></div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;            <span class="keyword">delete</span> _bm;</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;            _bm = <span class="keyword">new</span> <a class="code" href="classarm__gemm_1_1_buffer_manager.xhtml">BufferManager</a>(_nthreads, get_b_working_size(), reinterpret_cast&lt;void *&gt;(working_space_bytes));</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;            working_space_bytes += <a class="code" href="classarm__gemm_1_1_buffer_manager.xhtml#ad94ec2bb5758590521fe20ae781ca0b5">BufferManager::get_storage_requirement</a>(_maxthreads, get_b_working_size());</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;            _working_space = reinterpret_cast&lt;void *&gt;(working_space_bytes);</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;        }</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    }</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    <span class="comment">// Interface implementation - pretransposed</span></div><div class="line"><a name="l00456"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_interleaved.xhtml#ac5dec5063a75604fdc60555f15577b94">  456</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml#ac5dec5063a75604fdc60555f15577b94">B_is_pretransposed</a>()<span class="keyword"> const override </span>{</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;        <span class="keywordflow">return</span> _pretransposed;</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    }</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;</div><div class="line"><a name="l00460"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_interleaved.xhtml#aa7cfff39cbb2be65cd40042a75e5ae1c">  460</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml#aa7cfff39cbb2be65cd40042a75e5ae1c">B_pretranspose_required</a>()<span class="keyword"> const override </span>{</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;        <span class="keywordflow">return</span> _pretransposed &amp;&amp; (_B_transposed==<span class="keyword">nullptr</span>);</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;    }</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;    <span class="comment">// TODO: this could almost certainly be considerably simpler.</span></div><div class="line"><a name="l00465"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_interleaved.xhtml#ae9fc7380e533c43a1d91e48a7578e412">  465</a></span>&#160;    <span class="keywordtype">size_t</span> <a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml#ae9fc7380e533c43a1d91e48a7578e412">get_B_pretransposed_array_size</a>()<span class="keyword"> const override </span>{</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;        <span class="keywordtype">size_t</span> total=0;</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;        blockwalker current(*<span class="keyword">this</span>);</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;        <span class="keywordflow">do</span> {</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;            <span class="comment">/* Figure out the size of each block. */</span></div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> x_size = (current.xmax() - current.x0());</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k_size = (current.kmax() - current.k0());</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;            <span class="comment">/* Round sizes up as needed. */</span></div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;            x_size = <a class="code" href="utils_8hpp.xhtml#aa4508679e1d089c2bdcf000f72357683">iceildiv</a>(x_size, strategy::out_width());</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;            x_size *= strategy::out_width();</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;            k_size = <a class="code" href="utils_8hpp.xhtml#aa4508679e1d089c2bdcf000f72357683">iceildiv</a>(k_size, strategy::k_unroll());</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;            k_size *= strategy::k_unroll();</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;            total += x_size * k_size * <span class="keyword">sizeof</span>(Toi);</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;        } <span class="keywordflow">while</span> (current.advance());</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;        <span class="keywordflow">return</span> total;</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;    }</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;</div><div class="line"><a name="l00487"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_interleaved.xhtml#ae385dce1a98e03f0a3ca311f031e5110">  487</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml#ae385dce1a98e03f0a3ca311f031e5110">pretranspose_B_array</a>(<span class="keywordtype">void</span> *in_buffer, <span class="keyword">const</span> To *B, <span class="keyword">const</span> <span class="keywordtype">int</span> ldb, <span class="keyword">const</span> <span class="keywordtype">int</span> B_multi_stride)<span class="keyword"> override </span>{</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;        blockwalker current(*<span class="keyword">this</span>);</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;        Toi *buffer = reinterpret_cast&lt;Toi *&gt;(in_buffer);</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;        _B_transposed = buffer;</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;        strategy strat(_ci);</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;        <span class="keywordflow">do</span> {</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;            <span class="comment">/* Figure out the size of each block. */</span></div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> x_size = (current.xmax() - current.x0());</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k_size = (current.kmax() - current.k0());</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;            <span class="comment">/* Round sizes up as needed. */</span></div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;            x_size = <a class="code" href="utils_8hpp.xhtml#aa4508679e1d089c2bdcf000f72357683">iceildiv</a>(x_size, strategy::out_width());</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;            x_size *= strategy::out_width();</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;            k_size = <a class="code" href="utils_8hpp.xhtml#aa4508679e1d089c2bdcf000f72357683">iceildiv</a>(k_size, strategy::k_unroll());</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;            k_size *= strategy::k_unroll();</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;            strat.transforms.PrepareB(buffer, B + (current.multi() * B_multi_stride), ldb,</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;                                      current.x0(), current.xmax(), current.k0(), current.kmax(), _trB);</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;            buffer += (x_size * k_size);</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;        } <span class="keywordflow">while</span> (current.advance());</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    }</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;</div><div class="line"><a name="l00512"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_interleaved.xhtml#a6e76d099f51fc0ef7f48dbd7d00214ac">  512</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml#a6e76d099f51fc0ef7f48dbd7d00214ac">set_pretransposed_B_data</a>(<span class="keywordtype">void</span> *in_buffer)<span class="keyword"> override </span>{</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;        _B_transposed = reinterpret_cast&lt;Toi *&gt;(in_buffer);</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;    }</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;</div><div class="line"><a name="l00516"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_interleaved.xhtml#a0ca149c067af4f39661ecce72734e0c5">  516</a></span>&#160;    <a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml#a0ca149c067af4f39661ecce72734e0c5">~GemmInterleaved</a>()<span class="keyword"> override </span>{</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;        <span class="keyword">delete</span> _bm;</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;    }</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;};</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;} <span class="comment">// namespace arm_gemm</span></div><div class="ttc" id="utils_8hpp_xhtml_aa4508679e1d089c2bdcf000f72357683"><div class="ttname"><a href="utils_8hpp.xhtml#aa4508679e1d089c2bdcf000f72357683">iceildiv</a></div><div class="ttdeci">T iceildiv(const T a, const T b)</div><div class="ttdef"><b>Definition:</b> <a href="utils_8hpp_source.xhtml#l00038">utils.hpp:38</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_buffer_manager_xhtml_ad94ec2bb5758590521fe20ae781ca0b5"><div class="ttname"><a href="classarm__gemm_1_1_buffer_manager.xhtml#ad94ec2bb5758590521fe20ae781ca0b5">arm_gemm::BufferManager::get_storage_requirement</a></div><div class="ttdeci">static size_t get_storage_requirement(const int maxthreads, const size_t buffersize)</div><div class="ttdef"><b>Definition:</b> <a href="buffer__manager_8hpp_source.xhtml#l00218">buffer_manager.hpp:218</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_interleaved_xhtml"><div class="ttname"><a href="classarm__gemm_1_1_gemm_interleaved.xhtml">arm_gemm::GemmInterleaved</a></div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00054">gemm_interleaved.hpp:54</a></div></div>
<div class="ttc" id="namespace_gemm_tuner_xhtml_a8187411843a6284ffb964ef3fb9fcab3"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">GemmTuner.args</a></div><div class="ttdeci">args</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00555">GemmTuner.py:555</a></div></div>
<div class="ttc" id="mergeresults_8hpp_xhtml"><div class="ttname"><a href="mergeresults_8hpp.xhtml">mergeresults.hpp</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a5f9016ea3e28a033b7cc216bdda912be"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a5f9016ea3e28a033b7cc216bdda912be">arm_compute::graph::Activation</a></div><div class="ttdeci">arm_compute::ActivationLayerInfo::ActivationFunction Activation</div><div class="ttdoc">Constant TensorID specifying an equivalent of null tensor.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00068">Types.h:68</a></div></div>
<div class="ttc" id="namespacearm__gemm_xhtml"><div class="ttname"><a href="namespacearm__gemm.xhtml">arm_gemm</a></div><div class="ttdef"><b>Definition:</b> <a href="barrier_8hpp_source.xhtml#l00030">barrier.hpp:30</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_interleaved_xhtml_af03b8e4289fa0e112d315dd7e25ec696"><div class="ttname"><a href="classarm__gemm_1_1_gemm_interleaved.xhtml#af03b8e4289fa0e112d315dd7e25ec696">arm_gemm::GemmInterleaved::operator=</a></div><div class="ttdeci">GemmInterleaved &amp; operator=(GemmInterleaved &amp;)=delete</div></div>
<div class="ttc" id="buffer__manager_8hpp_xhtml"><div class="ttname"><a href="buffer__manager_8hpp.xhtml">buffer_manager.hpp</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_buffer_manager_xhtml_a29a2894a4403bc4cc19aacc35cb91d54"><div class="ttname"><a href="classarm__gemm_1_1_buffer_manager.xhtml#a29a2894a4403bc4cc19aacc35cb91d54">arm_gemm::BufferManager::release</a></div><div class="ttdeci">void release(const int index)</div><div class="ttdef"><b>Definition:</b> <a href="buffer__manager_8hpp_source.xhtml#l00269">buffer_manager.hpp:269</a></div></div>
<div class="ttc" id="utils_8hpp_xhtml"><div class="ttname"><a href="utils_8hpp.xhtml">utils.hpp</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_interleaved_xhtml_ae9fc7380e533c43a1d91e48a7578e412"><div class="ttname"><a href="classarm__gemm_1_1_gemm_interleaved.xhtml#ae9fc7380e533c43a1d91e48a7578e412">arm_gemm::GemmInterleaved::get_B_pretransposed_array_size</a></div><div class="ttdeci">size_t get_B_pretransposed_array_size() const override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00465">gemm_interleaved.hpp:465</a></div></div>
<div class="ttc" id="transform_8hpp_xhtml"><div class="ttname"><a href="transform_8hpp.xhtml">transform.hpp</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_interleaved_xhtml_a62d3274bfacd0e46e112520266f8d68f"><div class="ttname"><a href="classarm__gemm_1_1_gemm_interleaved.xhtml#a62d3274bfacd0e46e112520266f8d68f">arm_gemm::GemmInterleaved::GemmInterleaved</a></div><div class="ttdeci">GemmInterleaved(const GemmArgs &amp;args)</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00324">gemm_interleaved.hpp:324</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_interleaved_xhtml_abf5a58f6feffeae31f48b750cba9303d"><div class="ttname"><a href="classarm__gemm_1_1_gemm_interleaved.xhtml#abf5a58f6feffeae31f48b750cba9303d">arm_gemm::GemmInterleaved::get_working_size</a></div><div class="ttdeci">size_t get_working_size() const override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00411">gemm_interleaved.hpp:411</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_interleaved_xhtml_ae385dce1a98e03f0a3ca311f031e5110"><div class="ttname"><a href="classarm__gemm_1_1_gemm_interleaved.xhtml#ae385dce1a98e03f0a3ca311f031e5110">arm_gemm::GemmInterleaved::pretranspose_B_array</a></div><div class="ttdeci">void pretranspose_B_array(void *in_buffer, const To *B, const int ldb, const int B_multi_stride) override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00487">gemm_interleaved.hpp:487</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_interleaved_xhtml_a6e76d099f51fc0ef7f48dbd7d00214ac"><div class="ttname"><a href="classarm__gemm_1_1_gemm_interleaved.xhtml#a6e76d099f51fc0ef7f48dbd7d00214ac">arm_gemm::GemmInterleaved::set_pretransposed_B_data</a></div><div class="ttdeci">void set_pretransposed_B_data(void *in_buffer) override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00512">gemm_interleaved.hpp:512</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_buffer_manager_xhtml_a97814ef98fcd29d1fb5df1e877f8eabc"><div class="ttname"><a href="classarm__gemm_1_1_buffer_manager.xhtml#a97814ef98fcd29d1fb5df1e877f8eabc">arm_gemm::BufferManager::try_populate</a></div><div class="ttdeci">void try_populate(const int index, T func)</div><div class="ttdef"><b>Definition:</b> <a href="buffer__manager_8hpp_source.xhtml#l00260">buffer_manager.hpp:260</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_interleaved_xhtml_a9fe814165d032363ea4f9cfdd36dd5e2"><div class="ttname"><a href="classarm__gemm_1_1_gemm_interleaved.xhtml#a9fe814165d032363ea4f9cfdd36dd5e2">arm_gemm::GemmInterleaved::get_window_size</a></div><div class="ttdeci">unsigned int get_window_size() const override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00388">gemm_interleaved.hpp:388</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_buffer_manager_xhtml_a427705bf76071f12aa29992bd5cffa73"><div class="ttname"><a href="classarm__gemm_1_1_buffer_manager.xhtml#a427705bf76071f12aa29992bd5cffa73">arm_gemm::BufferManager::get</a></div><div class="ttdeci">void * get(const int index, T func)</div><div class="ttdef"><b>Definition:</b> <a href="buffer__manager_8hpp_source.xhtml#l00247">buffer_manager.hpp:247</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_interleaved_xhtml_a0b21ce5febc3f7eed9c7b37c0b9a3560"><div class="ttname"><a href="classarm__gemm_1_1_gemm_interleaved.xhtml#a0b21ce5febc3f7eed9c7b37c0b9a3560">arm_gemm::GemmInterleaved::execute</a></div><div class="ttdeci">void execute(unsigned int start, unsigned int end, int threadid) override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00402">gemm_interleaved.hpp:402</a></div></div>
<div class="ttc" id="gemm__interleaved_8hpp_xhtml_a5560b3c73e2e50a0b1bda1fa70ec58af"><div class="ttname"><a href="gemm__interleaved_8hpp.xhtml#a5560b3c73e2e50a0b1bda1fa70ec58af">ROUND_UP</a></div><div class="ttdeci">#define ROUND_UP(x)</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00045">gemm_interleaved.hpp:45</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_buffer_manager_xhtml_abe8297b7d4cf647e06eff027982cbb8e"><div class="ttname"><a href="classarm__gemm_1_1_buffer_manager.xhtml#abe8297b7d4cf647e06eff027982cbb8e">arm_gemm::BufferManager::set_nthreads</a></div><div class="ttdeci">void set_nthreads(int threads)</div><div class="ttdef"><b>Definition:</b> <a href="buffer__manager_8hpp_source.xhtml#l00278">buffer_manager.hpp:278</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_interleaved_xhtml_aa7cfff39cbb2be65cd40042a75e5ae1c"><div class="ttname"><a href="classarm__gemm_1_1_gemm_interleaved.xhtml#aa7cfff39cbb2be65cd40042a75e5ae1c">arm_gemm::GemmInterleaved::B_pretranspose_required</a></div><div class="ttdeci">bool B_pretranspose_required() const override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00460">gemm_interleaved.hpp:460</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_interleaved_xhtml_add13963d432a1937370721fa61755b9c"><div class="ttname"><a href="classarm__gemm_1_1_gemm_interleaved.xhtml#add13963d432a1937370721fa61755b9c">arm_gemm::GemmInterleaved::GemmInterleaved</a></div><div class="ttdeci">GemmInterleaved(GemmInterleaved &amp;)=delete</div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_interleaved_xhtml_a468e9c50d4decc2ba86f9bd393ba27d6"><div class="ttname"><a href="classarm__gemm_1_1_gemm_interleaved.xhtml#a468e9c50d4decc2ba86f9bd393ba27d6">arm_gemm::GemmInterleaved::set_nthreads</a></div><div class="ttdeci">void set_nthreads(int nthreads) override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00394">gemm_interleaved.hpp:394</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_interleaved_xhtml_aee006b8384820aa25720e84b91b32a27"><div class="ttname"><a href="classarm__gemm_1_1_gemm_interleaved.xhtml#aee006b8384820aa25720e84b91b32a27">arm_gemm::GemmInterleaved::set_working_space</a></div><div class="ttdeci">void set_working_space(void *working_space) override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00426">gemm_interleaved.hpp:426</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_buffer_manager_xhtml"><div class="ttname"><a href="classarm__gemm_1_1_buffer_manager.xhtml">arm_gemm::BufferManager</a></div><div class="ttdef"><b>Definition:</b> <a href="buffer__manager_8hpp_source.xhtml#l00205">buffer_manager.hpp:205</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_interleaved_xhtml_a0ca149c067af4f39661ecce72734e0c5"><div class="ttname"><a href="classarm__gemm_1_1_gemm_interleaved.xhtml#a0ca149c067af4f39661ecce72734e0c5">arm_gemm::GemmInterleaved::~GemmInterleaved</a></div><div class="ttdeci">~GemmInterleaved() override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00516">gemm_interleaved.hpp:516</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_interleaved_xhtml_ac5dec5063a75604fdc60555f15577b94"><div class="ttname"><a href="classarm__gemm_1_1_gemm_interleaved.xhtml#ac5dec5063a75604fdc60555f15577b94">arm_gemm::GemmInterleaved::B_is_pretransposed</a></div><div class="ttdeci">bool B_is_pretransposed() const override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00456">gemm_interleaved.hpp:456</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aebb8dcc11953d78e620bbef0b9e2183.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_d91e1966cc57df4f49d1e07be7697713.xhtml">NEON</a></li><li class="navelem"><a class="el" href="dir_1ce938f580a6f304b99685e2c1dd19db.xhtml">kernels</a></li><li class="navelem"><a class="el" href="dir_9847dd9cb7a28e46201717fa7336cf62.xhtml">arm_gemm</a></li><li class="navelem"><a class="el" href="gemm__interleaved_8hpp.xhtml">gemm_interleaved.hpp</a></li>
    <li class="footer">Generated on Fri Feb 21 2020 11:10:13 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
