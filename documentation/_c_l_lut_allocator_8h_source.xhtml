<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute/runtime/CL/CLLutAllocator.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.02.1</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('_c_l_lut_allocator_8h_source.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">CLLutAllocator.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_c_l_lut_allocator_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2016-2019 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_CLLUTALLOCATOR_H</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define ARM_COMPUTE_CLLUTALLOCATOR_H</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_lut_allocator_8h.xhtml">arm_compute/runtime/ILutAllocator.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_open_c_l_8h.xhtml">arm_compute/core/CL/OpenCL.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &lt;cstdint&gt;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{<span class="comment"></span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment">/** Basic implementation of a CL memory LUT allocator. */</span></div><div class="line"><a name="l00036"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_lut_allocator.xhtml">   36</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1_c_l_lut_allocator.xhtml">CLLutAllocator</a> : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1_i_lut_allocator.xhtml">ILutAllocator</a></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">    /** Default constructor. */</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_lut_allocator.xhtml#aa1e425aebd0805be1916fddde364aaa1">CLLutAllocator</a>();<span class="comment"></span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment">    /** Default destructor. */</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_lut_allocator.xhtml#a864b976ba255c0cd2e1e2a848c89f4a3">~CLLutAllocator</a>() = <span class="keywordflow">default</span>;<span class="comment"></span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment">    /** Prevent instances of this class from being copied (As this class contains pointers) */</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_lut_allocator.xhtml#aa1e425aebd0805be1916fddde364aaa1">CLLutAllocator</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_c_l_lut_allocator.xhtml">CLLutAllocator</a> &amp;) = <span class="keyword">delete</span>;<span class="comment"></span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment">    /** Prevent instances of this class from being copy assigned (As this class contains pointers) */</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_c_l_lut_allocator.xhtml">CLLutAllocator</a> &amp;<a class="code" href="classarm__compute_1_1_c_l_lut_allocator.xhtml#a2de13c6fbd9dd5506f12627b87415a51">operator=</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_c_l_lut_allocator.xhtml">CLLutAllocator</a> &amp;) = <span class="keyword">delete</span>;<span class="comment"></span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment">    /** Interface to be implemented by the child class to return the pointer to the mapped data.</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment">     * @return pointer to the mapped data.</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    uint8_t *<a class="code" href="classarm__compute_1_1_c_l_lut_allocator.xhtml#a99c07c946023f413991a249db8b99ab0">data</a>();<span class="comment"></span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment">    /** Interface to be implemented by the child class to return the pointer to the CL data.</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment">     * @return pointer to the CL data.</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">const</span> cl::Buffer &amp;<a class="code" href="classarm__compute_1_1_c_l_lut_allocator.xhtml#ac7e247b94ceae35db2a172961ab83df9">cl_data</a>() <span class="keyword">const</span>;<span class="comment"></span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment">    /** Enqueue a map operation of the allocated buffer on the given queue.</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment">     * @param[in,out] q        The CL command queue to use for the mapping operation.</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment">     * @param[in]     blocking If true, then the mapping will be ready to use by the time</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment">     *                         this method returns, else it is the caller&#39;s responsibility</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment">     *                         to flush the queue and wait for the mapping operation to have completed before using the returned mapping pointer.</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment">     * @return The mapping address.</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    uint8_t *<a class="code" href="classarm__compute_1_1_c_l_lut_allocator.xhtml#a15eaecea13a8a49c8d259fddefcbd7ac">map</a>(cl::CommandQueue &amp;q, <span class="keywordtype">bool</span> blocking);<span class="comment"></span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment">    /** Enqueue an unmap operation of the allocated buffer on the given queue.</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment">     * @note This method simply enqueue the unmap operation, it is the caller&#39;s responsibility to flush the queue and make sure the unmap is finished before</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment">     *       the memory is accessed by the device.</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment">     * @param[in,out] q       The CL command queue to use for the mapping operation.</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment">     * @param[in]     mapping The cpu mapping to unmap.</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_lut_allocator.xhtml#a34b854d640d247bd7422f60ca2f3a05c">unmap</a>(cl::CommandQueue &amp;q, uint8_t *mapping);</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="keyword">protected</span>:<span class="comment"></span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment">    /** Allocate num_elements() * sizeof(type()) of OpenCL memory. */</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keywordtype">void</span> allocate() <span class="keyword">override</span>;<span class="comment"></span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment">    /** Call map() on the OpenCL buffer.</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment">     * @return A pointer to the beginning of the LUT&#39;s allocation.</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    uint8_t *lock() <span class="keyword">override</span>;<span class="comment"></span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment">    /** Call unmap() on the OpenCL buffer. */</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keywordtype">void</span> unlock() <span class="keyword">override</span>;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    cl::Buffer _buffer;  <span class="comment">/**&lt; OpenCL buffer containing the LUT data. */</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    uint8_t   *_mapping; <span class="comment">/**&lt; Pointer to the CPU mapping of the OpenCL buffer. */</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;};</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;}</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_CLLUTALLOCATOR_H */</span><span class="preprocessor"></span></div><div class="ttc" id="classarm__compute_1_1_c_l_lut_allocator_xhtml_a2de13c6fbd9dd5506f12627b87415a51"><div class="ttname"><a href="classarm__compute_1_1_c_l_lut_allocator.xhtml#a2de13c6fbd9dd5506f12627b87415a51">arm_compute::CLLutAllocator::operator=</a></div><div class="ttdeci">const CLLutAllocator &amp; operator=(const CLLutAllocator &amp;)=delete</div><div class="ttdoc">Prevent instances of this class from being copy assigned (As this class contains pointers)</div></div>
<div class="ttc" id="classarm__compute_1_1_i_lut_allocator_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_lut_allocator.xhtml">arm_compute::ILutAllocator</a></div><div class="ttdoc">Basic interface to allocate LUTs'.</div><div class="ttdef"><b>Definition:</b> <a href="_i_lut_allocator_8h_source.xhtml#l00035">ILutAllocator.h:35</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_lut_allocator_xhtml_a864b976ba255c0cd2e1e2a848c89f4a3"><div class="ttname"><a href="classarm__compute_1_1_c_l_lut_allocator.xhtml#a864b976ba255c0cd2e1e2a848c89f4a3">arm_compute::CLLutAllocator::~CLLutAllocator</a></div><div class="ttdeci">~CLLutAllocator()=default</div><div class="ttdoc">Default destructor.</div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_lut_allocator_xhtml_ac7e247b94ceae35db2a172961ab83df9"><div class="ttname"><a href="classarm__compute_1_1_c_l_lut_allocator.xhtml#ac7e247b94ceae35db2a172961ab83df9">arm_compute::CLLutAllocator::cl_data</a></div><div class="ttdeci">const cl::Buffer &amp; cl_data() const</div><div class="ttdoc">Interface to be implemented by the child class to return the pointer to the CL data.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_lut_allocator_8cpp_source.xhtml#l00041">CLLutAllocator.cpp:41</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2020 ARM Limited.</div><div class="ttdef"><b>Definition:</b> <a href="00__introduction_8dox_source.xhtml#l00024">00_introduction.dox:24</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_lut_allocator_xhtml_aa1e425aebd0805be1916fddde364aaa1"><div class="ttname"><a href="classarm__compute_1_1_c_l_lut_allocator.xhtml#aa1e425aebd0805be1916fddde364aaa1">arm_compute::CLLutAllocator::CLLutAllocator</a></div><div class="ttdeci">CLLutAllocator()</div><div class="ttdoc">Default constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_lut_allocator_8cpp_source.xhtml#l00031">CLLutAllocator.cpp:31</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_lut_allocator_xhtml_a99c07c946023f413991a249db8b99ab0"><div class="ttname"><a href="classarm__compute_1_1_c_l_lut_allocator.xhtml#a99c07c946023f413991a249db8b99ab0">arm_compute::CLLutAllocator::data</a></div><div class="ttdeci">uint8_t * data()</div><div class="ttdoc">Interface to be implemented by the child class to return the pointer to the mapped data.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_lut_allocator_8cpp_source.xhtml#l00036">CLLutAllocator.cpp:36</a></div></div>
<div class="ttc" id="_i_lut_allocator_8h_xhtml"><div class="ttname"><a href="_i_lut_allocator_8h.xhtml">ILutAllocator.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_lut_allocator_xhtml_a15eaecea13a8a49c8d259fddefcbd7ac"><div class="ttname"><a href="classarm__compute_1_1_c_l_lut_allocator.xhtml#a15eaecea13a8a49c8d259fddefcbd7ac">arm_compute::CLLutAllocator::map</a></div><div class="ttdeci">uint8_t * map(cl::CommandQueue &amp;q, bool blocking)</div><div class="ttdoc">Enqueue a map operation of the allocated buffer on the given queue.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_lut_allocator_8cpp_source.xhtml#l00046">CLLutAllocator.cpp:46</a></div></div>
<div class="ttc" id="_open_c_l_8h_xhtml"><div class="ttname"><a href="_open_c_l_8h.xhtml">OpenCL.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_lut_allocator_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_lut_allocator.xhtml">arm_compute::CLLutAllocator</a></div><div class="ttdoc">Basic implementation of a CL memory LUT allocator.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_lut_allocator_8h_source.xhtml#l00036">CLLutAllocator.h:36</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_lut_allocator_xhtml_a34b854d640d247bd7422f60ca2f3a05c"><div class="ttname"><a href="classarm__compute_1_1_c_l_lut_allocator.xhtml#a34b854d640d247bd7422f60ca2f3a05c">arm_compute::CLLutAllocator::unmap</a></div><div class="ttdeci">void unmap(cl::CommandQueue &amp;q, uint8_t *mapping)</div><div class="ttdoc">Enqueue an unmap operation of the allocated buffer on the given queue.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_lut_allocator_8cpp_source.xhtml#l00052">CLLutAllocator.cpp:52</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_214608ef36d61442cb2b0c1c4e9a7def.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="dir_8bc26130589aa16388b5a02f17abf2c2.xhtml">runtime</a></li><li class="navelem"><a class="el" href="dir_b986aa98f9b6490bb4fc7918500346fb.xhtml">CL</a></li><li class="navelem"><a class="el" href="_c_l_lut_allocator_8h.xhtml">CLLutAllocator.h</a></li>
    <li class="footer">Generated on Thu Mar 5 2020 16:06:56 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
