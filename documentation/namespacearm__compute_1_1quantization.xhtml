<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute::quantization Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('namespacearm__compute_1_1quantization.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">arm_compute::quantization Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a63fdf412c27b0151bd4495c64cc112da"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1quantization.xhtml#a63fdf412c27b0151bd4495c64cc112da">calculate_quantized_multiplier</a> (float multiplier, int32_t *quant_multiplier, int32_t *shift)</td></tr>
<tr class="memdesc:a63fdf412c27b0151bd4495c64cc112da"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate quantized representation of multiplier.  <a href="#a63fdf412c27b0151bd4495c64cc112da">More...</a><br /></td></tr>
<tr class="separator:a63fdf412c27b0151bd4495c64cc112da"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd91a85bed01075d0b9384f065f94039"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1quantization.xhtml#acd91a85bed01075d0b9384f065f94039">calculate_quantized_multiplier_less_than_one</a> (float multiplier, int32_t *quant_multiplier, int32_t *right_shift)</td></tr>
<tr class="memdesc:acd91a85bed01075d0b9384f065f94039"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate quantized representation of multiplier with value less than one.  <a href="#acd91a85bed01075d0b9384f065f94039">More...</a><br /></td></tr>
<tr class="separator:acd91a85bed01075d0b9384f065f94039"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a34f24bcb4a4017178a0fcfb2f6e2c954"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1quantization.xhtml#a34f24bcb4a4017178a0fcfb2f6e2c954">calculate_quantized_multiplier_greater_than_one</a> (float multiplier, int32_t *quantized_multiplier, int32_t *left_shift)</td></tr>
<tr class="memdesc:a34f24bcb4a4017178a0fcfb2f6e2c954"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate quantized representation of multiplier having value greater than one.  <a href="#a34f24bcb4a4017178a0fcfb2f6e2c954">More...</a><br /></td></tr>
<tr class="separator:a34f24bcb4a4017178a0fcfb2f6e2c954"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7c9cea57b791676637d2fda3637d340e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1quantization.xhtml#a7c9cea57b791676637d2fda3637d340e">calculate_quantized_multipliers</a> (const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;iq_info, const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;wq_info, const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;oq_info, <a class="el" href="structarm__compute_1_1_g_e_m_m_lowp_output_stage_info.xhtml">GEMMLowpOutputStageInfo</a> &amp;stage_info)</td></tr>
<tr class="memdesc:a7c9cea57b791676637d2fda3637d340e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate quantized representation of per-channel multipliers.  <a href="#a7c9cea57b791676637d2fda3637d340e">More...</a><br /></td></tr>
<tr class="separator:a7c9cea57b791676637d2fda3637d340e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab8860c9932b57a5066c460ea310e1bc4"><td class="memItemLeft" align="right" valign="top">std::pair&lt; int, int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1quantization.xhtml#ab8860c9932b57a5066c460ea310e1bc4">get_min_max_values_from_quantized_data_type</a> (<a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> data_type)</td></tr>
<tr class="memdesc:ab8860c9932b57a5066c460ea310e1bc4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get minimum and maximum values for the input quantized data type.  <a href="#ab8860c9932b57a5066c460ea310e1bc4">More...</a><br /></td></tr>
<tr class="separator:ab8860c9932b57a5066c460ea310e1bc4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e8fecf2dd5d28f1f277d8636be144a5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1quantization.xhtml#a9e8fecf2dd5d28f1f277d8636be144a5">compute_quantized_multipliers_and_shifts</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *weights, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *output, unsigned int idx_ofms, int32_t *output_multipliers_ptr, int32_t *output_shifts_ptr)</td></tr>
<tr class="memdesc:a9e8fecf2dd5d28f1f277d8636be144a5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute quantized per-channel multipliers and shifts.  <a href="#a9e8fecf2dd5d28f1f277d8636be144a5">More...</a><br /></td></tr>
<tr class="separator:a9e8fecf2dd5d28f1f277d8636be144a5"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="var-members"></a>
Variables</h2></td></tr>
<tr class="memitem:ab153bd5bebd2a695c5d2c79801d0abec"><td class="memItemLeft" align="right" valign="top">constexpr int64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1quantization.xhtml#ab153bd5bebd2a695c5d2c79801d0abec">fixed_point_one_Q0</a> = (1LL &lt;&lt; 31)</td></tr>
<tr class="separator:ab153bd5bebd2a695c5d2c79801d0abec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a552dc3787d7ea1675f3e4e8993501d58"><td class="memItemLeft" align="right" valign="top">constexpr float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a> = 0.00001f</td></tr>
<tr class="separator:a552dc3787d7ea1675f3e4e8993501d58"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="a63fdf412c27b0151bd4495c64cc112da"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a63fdf412c27b0151bd4495c64cc112da">&#9670;&nbsp;</a></span>calculate_quantized_multiplier()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> calculate_quantized_multiplier </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>multiplier</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t *&#160;</td>
          <td class="paramname"><em>quant_multiplier</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t *&#160;</td>
          <td class="paramname"><em>shift</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculate quantized representation of multiplier. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">multiplier</td><td>Real multiplier. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">quant_multiplier</td><td>Integer multiplier. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">shift</td><td>bit shift. A negative value indicates a left shift, while a positive value indicates a right shift</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a status </dd></dl>

<p class="definition">Definition at line <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00038">38</a> of file <a class="el" href="_asymm_helpers_8cpp_source.xhtml">AsymmHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keywordflow">if</span>(multiplier &gt;= 1.f)</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    {</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        Status status = <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a34f24bcb4a4017178a0fcfb2f6e2c954">calculate_quantized_multiplier_greater_than_one</a>(multiplier, quant_multiplier, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a979a54caef6e77ce0259e427136847e8">shift</a>);</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a979a54caef6e77ce0259e427136847e8">shift</a> *= -1;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        <span class="keywordflow">return</span> status;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    }</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    {</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1quantization.xhtml#acd91a85bed01075d0b9384f065f94039">calculate_quantized_multiplier_less_than_one</a>(multiplier, quant_multiplier, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a979a54caef6e77ce0259e427136847e8">shift</a>);</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    }</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a979a54caef6e77ce0259e427136847e8"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a979a54caef6e77ce0259e427136847e8">arm_compute::test::validation::shift</a></div><div class="ttdeci">shift</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_depth_convert_layer_8cpp_source.xhtml#l00155">DepthConvertLayer.cpp:155</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1quantization_xhtml_a34f24bcb4a4017178a0fcfb2f6e2c954"><div class="ttname"><a href="namespacearm__compute_1_1quantization.xhtml#a34f24bcb4a4017178a0fcfb2f6e2c954">arm_compute::quantization::calculate_quantized_multiplier_greater_than_one</a></div><div class="ttdeci">Status calculate_quantized_multiplier_greater_than_one(float multiplier, int32_t *quantized_multiplier, int32_t *left_shift)</div><div class="ttdoc">Calculate quantized representation of multiplier having value greater than one.</div><div class="ttdef"><b>Definition:</b> <a href="_asymm_helpers_8cpp_source.xhtml#l00084">AsymmHelpers.cpp:84</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1quantization_xhtml_acd91a85bed01075d0b9384f065f94039"><div class="ttname"><a href="namespacearm__compute_1_1quantization.xhtml#acd91a85bed01075d0b9384f065f94039">arm_compute::quantization::calculate_quantized_multiplier_less_than_one</a></div><div class="ttdeci">Status calculate_quantized_multiplier_less_than_one(float multiplier, int32_t *quant_multiplier, int32_t *right_shift)</div><div class="ttdoc">Calculate quantized representation of multiplier with value less than one.</div><div class="ttdef"><b>Definition:</b> <a href="_asymm_helpers_8cpp_source.xhtml#l00052">AsymmHelpers.cpp:52</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00084">calculate_quantized_multiplier_greater_than_one()</a>, <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00052">calculate_quantized_multiplier_less_than_one()</a>, and <a class="el" href="_c_l_2_depth_convert_layer_8cpp_source.xhtml#l00155">arm_compute::test::validation::shift</a>.</p>

<p class="reference">Referenced by <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00109">calculate_quantized_multipliers()</a>, <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00174">compute_quantized_multipliers_and_shifts()</a>, <a class="el" href="_c_l_depthwise_convolution_layer3x3_n_c_h_w_kernel_8cpp_source.xhtml#l00244">CLDepthwiseConvolutionLayer3x3NCHWKernel::configure()</a>, <a class="el" href="_c_l_depthwise_convolution_layer3x3_n_h_w_c_kernel_8cpp_source.xhtml#l00197">CLDepthwiseConvolutionLayer3x3NHWCKernel::configure()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_native_kernel_8cpp_source.xhtml#l00194">CLDepthwiseConvolutionLayerNativeKernel::configure()</a>, <a class="el" href="_c_l_direct_convolution_layer_kernel_8cpp_source.xhtml#l00424">CLDirectConvolutionLayerKernel::configure()</a>, <a class="el" href="_n_e_depthwise_convolution_layer_native_kernel_8cpp_source.xhtml#l00508">NEDepthwiseConvolutionLayerNativeKernel::configure()</a>, <a class="el" href="_c_l_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00058">CLLSTMLayerQuantized::configure()</a>, <a class="el" href="_n_e_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00057">NELSTMLayerQuantized::configure()</a>, <a class="el" href="_c_l_g_e_m_m_deconvolution_layer_8cpp_source.xhtml#l00195">CLGEMMDeconvolutionLayer::configure()</a>, <a class="el" href="_n_e_fully_connected_layer_8cpp_source.xhtml#l00141">NEFullyConnectedLayer::configure()</a>, <a class="el" href="_c_l_g_e_m_m_deconvolution_layer_8cpp_source.xhtml#l00093">CLGEMMDeconvolutionLayer::validate()</a>, <a class="el" href="_c_l_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00256">CLLSTMLayerQuantized::validate()</a>, <a class="el" href="_n_e_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00235">NELSTMLayerQuantized::validate()</a>, and <a class="el" href="_n_e_fully_connected_layer_8cpp_source.xhtml#l00275">NEFullyConnectedLayer::validate()</a>.</p>

</div>
</div>
<a id="a34f24bcb4a4017178a0fcfb2f6e2c954"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a34f24bcb4a4017178a0fcfb2f6e2c954">&#9670;&nbsp;</a></span>calculate_quantized_multiplier_greater_than_one()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> calculate_quantized_multiplier_greater_than_one </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>multiplier</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t *&#160;</td>
          <td class="paramname"><em>quantized_multiplier</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t *&#160;</td>
          <td class="paramname"><em>left_shift</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculate quantized representation of multiplier having value greater than one. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">multiplier</td><td>Real multiplier. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">quantized_multiplier</td><td>Integer multiplier. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">left_shift</td><td>Left bit shift.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a status </dd></dl>

<p class="definition">Definition at line <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00084">84</a> of file <a class="el" href="_asymm_helpers_8cpp_source.xhtml">AsymmHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;{</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(quantized_multiplier == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(left_shift == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(multiplier &lt; 1.f);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keywordtype">int</span>          shift_exp = 0;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">double</span> q         = std::frexp(multiplier, &amp;shift_exp);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    *left_shift            = shift_exp;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keyword">auto</span> q_fixed           = static_cast&lt;int64_t&gt;(<a class="code" href="namespacearm__compute.xhtml#aaae2b6b1c3f4404121346a4c27b22647">support::cpp11::round</a>(q * <a class="code" href="namespacearm__compute_1_1quantization.xhtml#ab153bd5bebd2a695c5d2c79801d0abec">fixed_point_one_Q0</a>));</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(q_fixed &gt; <a class="code" href="namespacearm__compute_1_1quantization.xhtml#ab153bd5bebd2a695c5d2c79801d0abec">fixed_point_one_Q0</a>);</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keywordflow">if</span>(q_fixed == <a class="code" href="namespacearm__compute_1_1quantization.xhtml#ab153bd5bebd2a695c5d2c79801d0abec">fixed_point_one_Q0</a>)</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    {</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        q_fixed /= 2;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        ++*left_shift;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    }</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(*left_shift &lt; 0);</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(q_fixed &gt; std::numeric_limits&lt;int32_t&gt;::max());</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    *quantized_multiplier = static_cast&lt;int32_t&gt;(q_fixed);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keywordflow">return</span> Status{};</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a206d6e247e0957ac3dee45d27756fc25"><div class="ttname"><a href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true, an error is returned.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00296">Error.h:296</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_aaae2b6b1c3f4404121346a4c27b22647"><div class="ttname"><a href="namespacearm__compute.xhtml#aaae2b6b1c3f4404121346a4c27b22647">arm_compute::round</a></div><div class="ttdeci">int round(float x, RoundingPolicy rounding_policy)</div><div class="ttdoc">Return a rounded value of x.</div><div class="ttdef"><b>Definition:</b> <a href="_rounding_8cpp_source.xhtml#l00035">Rounding.cpp:35</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1quantization_xhtml_ab153bd5bebd2a695c5d2c79801d0abec"><div class="ttname"><a href="namespacearm__compute_1_1quantization.xhtml#ab153bd5bebd2a695c5d2c79801d0abec">arm_compute::quantization::fixed_point_one_Q0</a></div><div class="ttdeci">constexpr int64_t fixed_point_one_Q0</div><div class="ttdef"><b>Definition:</b> <a href="_asymm_helpers_8cpp_source.xhtml#l00035">AsymmHelpers.cpp:35</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00296">ARM_COMPUTE_RETURN_ERROR_ON</a>, <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00035">fixed_point_one_Q0</a>, and <a class="el" href="_toolchain_support_8h_source.xhtml#l00317">arm_compute::support::cpp11::round()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00038">calculate_quantized_multiplier()</a>.</p>

</div>
</div>
<a id="acd91a85bed01075d0b9384f065f94039"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acd91a85bed01075d0b9384f065f94039">&#9670;&nbsp;</a></span>calculate_quantized_multiplier_less_than_one()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> calculate_quantized_multiplier_less_than_one </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>multiplier</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t *&#160;</td>
          <td class="paramname"><em>quant_multiplier</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t *&#160;</td>
          <td class="paramname"><em>right_shift</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculate quantized representation of multiplier with value less than one. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">multiplier</td><td>Real multiplier. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">quant_multiplier</td><td>Integer multiplier. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">right_shift</td><td>Right bit shift.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a status </dd></dl>

<p class="definition">Definition at line <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00052">52</a> of file <a class="el" href="_asymm_helpers_8cpp_source.xhtml">AsymmHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;{</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(quant_multiplier == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(right_shift == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(multiplier &lt; -<a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>);</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(multiplier &gt; 1.0f + <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>);</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordflow">if</span>(std::fabs(0.0f - multiplier) &lt; <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>)</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    {</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        *quant_multiplier = 0;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        *right_shift      = 0;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="keywordflow">return</span> Status{};</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    }</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keywordtype">int</span>          shift_exp = 0;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">double</span> q         = std::frexp(multiplier, &amp;shift_exp);</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    *right_shift           = -1 * shift_exp;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keyword">auto</span> q_fixed           = static_cast&lt;int64_t&gt;(<a class="code" href="namespacearm__compute.xhtml#aaae2b6b1c3f4404121346a4c27b22647">support::cpp11::round</a>(q * <a class="code" href="namespacearm__compute_1_1quantization.xhtml#ab153bd5bebd2a695c5d2c79801d0abec">fixed_point_one_Q0</a>));</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(q_fixed &gt; <a class="code" href="namespacearm__compute_1_1quantization.xhtml#ab153bd5bebd2a695c5d2c79801d0abec">fixed_point_one_Q0</a>);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keywordflow">if</span>(q_fixed == <a class="code" href="namespacearm__compute_1_1quantization.xhtml#ab153bd5bebd2a695c5d2c79801d0abec">fixed_point_one_Q0</a>)</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    {</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        q_fixed /= 2;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        --*right_shift;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    }</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(*right_shift &lt; 0);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(q_fixed &gt; std::numeric_limits&lt;int32_t&gt;::max());</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    *quant_multiplier = static_cast&lt;int32_t&gt;(q_fixed);</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keywordflow">return</span> Status{};</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a206d6e247e0957ac3dee45d27756fc25"><div class="ttname"><a href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true, an error is returned.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00296">Error.h:296</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_aaae2b6b1c3f4404121346a4c27b22647"><div class="ttname"><a href="namespacearm__compute.xhtml#aaae2b6b1c3f4404121346a4c27b22647">arm_compute::round</a></div><div class="ttdeci">int round(float x, RoundingPolicy rounding_policy)</div><div class="ttdoc">Return a rounded value of x.</div><div class="ttdef"><b>Definition:</b> <a href="_rounding_8cpp_source.xhtml#l00035">Rounding.cpp:35</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1quantization_xhtml_ab153bd5bebd2a695c5d2c79801d0abec"><div class="ttname"><a href="namespacearm__compute_1_1quantization.xhtml#ab153bd5bebd2a695c5d2c79801d0abec">arm_compute::quantization::fixed_point_one_Q0</a></div><div class="ttdeci">constexpr int64_t fixed_point_one_Q0</div><div class="ttdef"><b>Definition:</b> <a href="_asymm_helpers_8cpp_source.xhtml#l00035">AsymmHelpers.cpp:35</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1quantization_xhtml_a552dc3787d7ea1675f3e4e8993501d58"><div class="ttname"><a href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">arm_compute::quantization::epsilon</a></div><div class="ttdeci">constexpr float epsilon</div><div class="ttdef"><b>Definition:</b> <a href="_asymm_helpers_8cpp_source.xhtml#l00036">AsymmHelpers.cpp:36</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00296">ARM_COMPUTE_RETURN_ERROR_ON</a>, <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00036">epsilon</a>, <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00035">fixed_point_one_Q0</a>, and <a class="el" href="_toolchain_support_8h_source.xhtml#l00317">arm_compute::support::cpp11::round()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00038">calculate_quantized_multiplier()</a>.</p>

</div>
</div>
<a id="a7c9cea57b791676637d2fda3637d340e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7c9cea57b791676637d2fda3637d340e">&#9670;&nbsp;</a></span>calculate_quantized_multipliers()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a> calculate_quantized_multipliers </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>iq_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>wq_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>oq_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1_g_e_m_m_lowp_output_stage_info.xhtml">GEMMLowpOutputStageInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>stage_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculate quantized representation of per-channel multipliers. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">iq_info</td><td>Input quantization info. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">wq_info</td><td>Weights quantization info. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">oq_info</td><td>Output quantization info. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">stage_info</td><td>GemmLowp output stage info</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a status </dd></dl>

<p class="definition">Definition at line <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00109">109</a> of file <a class="el" href="_asymm_helpers_8cpp_source.xhtml">AsymmHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;{</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(iq_info.scale().empty());</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(wq_info.scale().empty());</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(oq_info.scale().empty());</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> size = wq_info.scale().size();</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keyword">auto</span> &amp;quant_multipliers = stage_info.gemmlowp_multipliers;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="keyword">auto</span> &amp;quant_shifts      = stage_info.gemmlowp_shifts;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    quant_multipliers.resize(size);</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    quant_shifts.resize(size);</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> &amp;w_scales = wq_info.scale();</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> i_scale  = iq_info.scale().at(0);</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> o_scale  = oq_info.scale().at(0);</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; size; ++i)</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    {</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span> multiplier       = i_scale * w_scales[i] / o_scale;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        int32_t     quant_multiplier = 0;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        int32_t     quant_shift      = 0;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="namespacearm__compute_1_1quantization.xhtml#a63fdf412c27b0151bd4495c64cc112da">calculate_quantized_multiplier</a>(multiplier, &amp;quant_multiplier, &amp;quant_shift));</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        quant_multipliers[i] = quant_multiplier;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        quant_shifts[i]      = quant_shift;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    }</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="comment">// Legacy part</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    stage_info.gemmlowp_shift      = quant_shifts[0];</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    stage_info.gemmlowp_multiplier = quant_multipliers[0];</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keywordflow">return</span> Status{};</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a8a1e1c105f0bdaf37db408c7cfcb77a4"><div class="ttname"><a href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ON_ERROR(status)</div><div class="ttdoc">Checks if a status contains an error and returns it.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00204">Error.h:204</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a206d6e247e0957ac3dee45d27756fc25"><div class="ttname"><a href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true, an error is returned.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00296">Error.h:296</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1quantization_xhtml_a63fdf412c27b0151bd4495c64cc112da"><div class="ttname"><a href="namespacearm__compute_1_1quantization.xhtml#a63fdf412c27b0151bd4495c64cc112da">arm_compute::quantization::calculate_quantized_multiplier</a></div><div class="ttdeci">Status calculate_quantized_multiplier(float multiplier, int32_t *quant_multiplier, int32_t *shift)</div><div class="ttdoc">Calculate quantized representation of multiplier.</div><div class="ttdef"><b>Definition:</b> <a href="_asymm_helpers_8cpp_source.xhtml#l00038">AsymmHelpers.cpp:38</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00296">ARM_COMPUTE_RETURN_ERROR_ON</a>, <a class="el" href="_error_8h_source.xhtml#l00204">ARM_COMPUTE_RETURN_ON_ERROR</a>, <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00038">calculate_quantized_multiplier()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01948">GEMMLowpOutputStageInfo::gemmlowp_multiplier</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01952">GEMMLowpOutputStageInfo::gemmlowp_multipliers</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01949">GEMMLowpOutputStageInfo::gemmlowp_shift</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01953">GEMMLowpOutputStageInfo::gemmlowp_shifts</a>, and <a class="el" href="_quantization_info_8h_source.xhtml#l00124">QuantizationInfo::scale()</a>.</p>

</div>
</div>
<a id="a9e8fecf2dd5d28f1f277d8636be144a5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9e8fecf2dd5d28f1f277d8636be144a5">&#9670;&nbsp;</a></span>compute_quantized_multipliers_and_shifts()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void compute_quantized_multipliers_and_shifts </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>idx_ofms</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t *&#160;</td>
          <td class="paramname"><em>output_multipliers_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t *&#160;</td>
          <td class="paramname"><em>output_shifts_ptr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Compute quantized per-channel multipliers and shifts. </p>
<p>As many multipliers and shifts as output channels are computed. If weights are not quantized per-channel, multipliers and shifts will end up being the same for each channel.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input tensor info. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">weights</td><td>Weights tensor info. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output</td><td>Output tensor info. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">idx_ofms</td><td>Dimension index to get OFMs from the weights tensor. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">output_multipliers_ptr</td><td>Pointer to the buffer where to store per-channel multipliers. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">output_shifts_ptr</td><td>Pointer to the buffer where to store per-channel shifts.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>min and max values for the quantized data type </dd></dl>

<p class="definition">Definition at line <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00174">174</a> of file <a class="el" href="_asymm_helpers_8cpp_source.xhtml">AsymmHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;{</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_filters = <a class="code" href="namespacearm__compute.xhtml#a84437d80241f6a31e1a07c231ee8e3ac">is_data_type_quantized_per_channel</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;data_type()) ? <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;dimension(idx_ofms) : 1;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo iq_info = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;quantization_info().uniform();</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <span class="keyword">const</span> QuantizationInfo        wq_info = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;quantization_info();</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo oq_info = output-&gt;quantization_info().uniform();</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; num_filters; ++i)</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    {</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        int32_t     output_multiplier = 0;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        int32_t     output_shift      = 0;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span> multiplier        = iq_info.scale * wq_info.scale()[i] / oq_info.scale;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a63fdf412c27b0151bd4495c64cc112da">calculate_quantized_multiplier</a>(multiplier, &amp;output_multiplier, &amp;output_shift);</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        output_multipliers_ptr[i] = output_multiplier;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        output_shifts_ptr[i]      = output_shift;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    }</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a84437d80241f6a31e1a07c231ee8e3ac"><div class="ttname"><a href="namespacearm__compute.xhtml#a84437d80241f6a31e1a07c231ee8e3ac">arm_compute::is_data_type_quantized_per_channel</a></div><div class="ttdeci">bool is_data_type_quantized_per_channel(DataType dt)</div><div class="ttdoc">Check if a given data type is of per channel type.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_utils_8h_source.xhtml#l01194">Utils.h:1194</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1quantization_xhtml_a63fdf412c27b0151bd4495c64cc112da"><div class="ttname"><a href="namespacearm__compute_1_1quantization.xhtml#a63fdf412c27b0151bd4495c64cc112da">arm_compute::quantization::calculate_quantized_multiplier</a></div><div class="ttdeci">Status calculate_quantized_multiplier(float multiplier, int32_t *quant_multiplier, int32_t *shift)</div><div class="ttdoc">Calculate quantized representation of multiplier.</div><div class="ttdef"><b>Definition:</b> <a href="_asymm_helpers_8cpp_source.xhtml#l00038">AsymmHelpers.cpp:38</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a64a08a9fec5aeee8650e7182b6d171d0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">arm_compute::test::validation::weights</a></div><div class="ttdeci">CLTensor weights</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00188">ConvolutionLayer.cpp:188</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00038">calculate_quantized_multiplier()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">arm_compute::test::validation::input</a>, <a class="el" href="arm__compute_2core_2_utils_8h_source.xhtml#l01194">arm_compute::is_data_type_quantized_per_channel()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">ITensorInfo::quantization_info()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00064">UniformQuantizationInfo::scale</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00124">QuantizationInfo::scale()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00148">QuantizationInfo::uniform()</a>, and <a class="el" href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00188">arm_compute::test::validation::weights</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_g_e_m_m_convolution_layer_8cpp_source.xhtml#l00181">CLGEMMConvolutionLayer::configure()</a>, and <a class="el" href="_c_l_g_e_m_m_convolution_layer_8cpp_source.xhtml#l00396">CLGEMMConvolutionLayer::validate()</a>.</p>

</div>
</div>
<a id="ab8860c9932b57a5066c460ea310e1bc4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab8860c9932b57a5066c460ea310e1bc4">&#9670;&nbsp;</a></span>get_min_max_values_from_quantized_data_type()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::pair&lt; int, int &gt; get_min_max_values_from_quantized_data_type </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>data_type</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get minimum and maximum values for the input quantized data type. </p>
<dl class="section return"><dt>Returns</dt><dd>min and max values for the quantized data type </dd></dl>

<p class="definition">Definition at line <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00146">146</a> of file <a class="el" href="_asymm_helpers_8cpp_source.xhtml">AsymmHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;{</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keywordtype">int</span> min_quant_val = 0;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keywordtype">int</span> max_quant_val = 0;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keywordflow">switch</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>)</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    {</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM8:</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;            min_quant_val = std::numeric_limits&lt;uint8_t&gt;::min();</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            max_quant_val = std::numeric_limits&lt;uint8_t&gt;::max();</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        <span class="keywordflow">case</span> DataType::QSYMM8:</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM8_SIGNED:</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            min_quant_val = std::numeric_limits&lt;int8_t&gt;::min();</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;            max_quant_val = std::numeric_limits&lt;int8_t&gt;::max();</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM16:</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;            min_quant_val = std::numeric_limits&lt;uint16_t&gt;::min();</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            max_quant_val = std::numeric_limits&lt;uint16_t&gt;::max();</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        <span class="keywordflow">case</span> DataType::QSYMM16:</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            min_quant_val = std::numeric_limits&lt;int16_t&gt;::min();</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;            max_quant_val = std::numeric_limits&lt;int16_t&gt;::max();</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported data type&quot;</span>);</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    }</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="keywordflow">return</span> std::make_pair(min_quant_val, max_quant_val);</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00352">Error.h:352</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a5f5b6c4337eac9e2e0046ca2304d80dc"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">arm_compute::test::validation::data_type</a></div><div class="ttdeci">data_type</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_arithmetic_addition_8cpp_source.xhtml#l00138">ArithmeticAddition.cpp:138</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00352">ARM_COMPUTE_ERROR</a>, <a class="el" href="_c_l_2_arithmetic_addition_8cpp_source.xhtml#l00138">arm_compute::test::validation::data_type</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3b989c6b5398b3b9538ad103a324205e">arm_compute::QASYMM16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">arm_compute::QASYMM8</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">arm_compute::QASYMM8_SIGNED</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">arm_compute::QSYMM16</a>, and <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a5f007421a4becd11c0666c2058b0b36c">arm_compute::QSYMM8</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_quantization_layer_kernel_8cpp_source.xhtml#l00081">CLQuantizationLayerKernel::configure()</a>.</p>

</div>
</div>
<h2 class="groupheader">Variable Documentation</h2>
<a id="a552dc3787d7ea1675f3e4e8993501d58"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a552dc3787d7ea1675f3e4e8993501d58">&#9670;&nbsp;</a></span>epsilon</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">constexpr float epsilon = 0.00001f</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00036">36</a> of file <a class="el" href="_asymm_helpers_8cpp_source.xhtml">AsymmHelpers.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_builder_8cpp_source.xhtml#l00142">GraphBuilder::add_batch_normalization_node()</a>, <a class="el" href="reference_2_batch_normalization_layer_8cpp_source.xhtml#l00040">arm_compute::test::validation::reference::batch_normalization_layer()</a>, <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00052">calculate_quantized_multiplier_less_than_one()</a>, <a class="el" href="_c_l_mean_std_dev_normalization_layer_8cpp_source.xhtml#l00032">CLMeanStdDevNormalizationLayer::configure()</a>, <a class="el" href="_n_e_mean_std_dev_normalization_layer_8cpp_source.xhtml#l00031">NEMeanStdDevNormalizationLayer::configure()</a>, <a class="el" href="_c_l_instance_normalization_layer_8cpp_source.xhtml#l00035">CLInstanceNormalizationLayer::configure()</a>, <a class="el" href="_c_l_mean_std_dev_normalization_kernel_8cpp_source.xhtml#l00085">CLMeanStdDevNormalizationKernel::configure()</a>, <a class="el" href="_n_e_l2_normalize_layer_8cpp_source.xhtml#l00041">NEL2NormalizeLayer::configure()</a>, <a class="el" href="_g_c_batch_normalization_layer_8cpp_source.xhtml#l00040">GCBatchNormalizationLayer::configure()</a>, <a class="el" href="_n_e_instance_normalization_layer_8cpp_source.xhtml#l00036">NEInstanceNormalizationLayer::configure()</a>, <a class="el" href="_c_l_l2_normalize_layer_kernel_8cpp_source.xhtml#l00098">CLL2NormalizeLayerKernel::configure()</a>, <a class="el" href="_c_l_l2_normalize_layer_8cpp_source.xhtml#l00047">CLL2NormalizeLayer::configure()</a>, <a class="el" href="_c_l_batch_normalization_layer_8cpp_source.xhtml#l00040">CLBatchNormalizationLayer::configure()</a>, <a class="el" href="_n_e_instance_normalization_layer_kernel_8cpp_source.xhtml#l00182">NEInstanceNormalizationLayerKernel::configure()</a>, <a class="el" href="_n_e_batch_normalization_layer_8cpp_source.xhtml#l00040">NEBatchNormalizationLayer::configure()</a>, <a class="el" href="_g_c_batch_normalization_layer_kernel_8cpp_source.xhtml#l00139">GCBatchNormalizationLayerKernel::configure()</a>, <a class="el" href="_c_l_fuse_batch_normalization_kernel_8cpp_source.xhtml#l00107">CLFuseBatchNormalizationKernel::configure()</a>, <a class="el" href="_c_l_batch_normalization_layer_kernel_8cpp_source.xhtml#l00139">CLBatchNormalizationLayerKernel::configure()</a>, <a class="el" href="_n_e_mean_std_dev_normalization_kernel_8cpp_source.xhtml#l00154">NEMeanStdDevNormalizationKernel::configure()</a>, <a class="el" href="_c_l_fuse_batch_normalization_8cpp_source.xhtml#l00039">CLFuseBatchNormalization::configure()</a>, <a class="el" href="_n_e_fuse_batch_normalization_8cpp_source.xhtml#l00039">NEFuseBatchNormalization::configure()</a>, <a class="el" href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00411">NEBatchNormalizationLayerKernel::configure()</a>, <a class="el" href="_n_e_fuse_batch_normalization_kernel_8cpp_source.xhtml#l00422">NEFuseBatchNormalizationKernel::configure()</a>, <a class="el" href="_fused_depthwise_convolution_batch_normalization_function_8h_source.xhtml#l00070">FusedDepthwiseConvolutionBatchNormalizationFunction&lt; TargetInfo, FusedLayerTypes &gt;::configure()</a>, <a class="el" href="_fused_convolution_batch_normalization_function_8h_source.xhtml#l00072">FusedConvolutionBatchNormalizationFunction&lt; TargetInfo, FusedLayerTypes &gt;::configure()</a>, <a class="el" href="_n_e_optical_flow_8cpp_source.xhtml#l00055">NEOpticalFlow::configure()</a>, <a class="el" href="_c_l_optical_flow_8cpp_source.xhtml#l00060">CLOpticalFlow::configure()</a>, <a class="el" href="_c_l_l_k_tracker_kernel_8cpp_source.xhtml#l00213">CLLKTrackerStage1Kernel::configure()</a>, <a class="el" href="_function_helpers_8h_source.xhtml#l00137">arm_compute::graph::backends::detail::create_batch_normalization_layer()</a>, <a class="el" href="_function_helpers_8h_source.xhtml#l00182">arm_compute::graph::backends::detail::create_fused_convolution_batch_normalization_layer()</a>, <a class="el" href="_function_helpers_8h_source.xhtml#l00239">arm_compute::graph::backends::detail::create_fused_depthwise_convolution_batch_normalization_layer()</a>, <a class="el" href="_assets_library_8h_source.xhtml#l00504">AssetsLibrary::fill_boxes()</a>, <a class="el" href="reference_2_fuse_batch_normalization_8cpp_source.xhtml#l00067">arm_compute::test::validation::reference::fuse_batch_normalization_conv_layer()</a>, <a class="el" href="reference_2_fuse_batch_normalization_8cpp_source.xhtml#l00035">arm_compute::test::validation::reference::fuse_batch_normalization_dwc_layer()</a>, <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00043">arm_compute::graph::detail::fuse_convolution_with_batch_normalization()</a>, <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00136">arm_compute::graph::detail::fuse_depthwise_convolution_with_batch_normalization()</a>, <a class="el" href="reference_2_instance_normalization_layer_8cpp_source.xhtml#l00040">arm_compute::test::validation::reference::instance_normalization()</a>, <a class="el" href="float__ops_8h_source.xhtml#l00097">arm_compute::helpers::float_ops::is_one()</a>, <a class="el" href="float__ops_8h_source.xhtml#l00109">arm_compute::helpers::float_ops::is_zero()</a>, <a class="el" href="reference_2_l2_normalize_layer_8cpp_source.xhtml#l00051">arm_compute::test::validation::reference::l2_normalize()</a>, <a class="el" href="l2__normalize_8cl_source.xhtml#l00051">l2_normalize_x()</a>, <a class="el" href="l2__normalize_8cl_source.xhtml#l00094">l2_normalize_y()</a>, <a class="el" href="l2__normalize_8cl_source.xhtml#l00145">l2_normalize_z()</a>, <a class="el" href="optical__flow__pyramid__lk_8cl_source.xhtml#l00361">lktracker_stage1()</a>, <a class="el" href="_validation_8h_source.xhtml#l00335">compare&lt; RelativeTolerance&lt; U &gt; &gt;::operator bool()</a>, <a class="el" href="_random_8h_source.xhtml#l00059">RangedUniformDistribution&lt; T &gt;::RangedUniformDistribution()</a>, <a class="el" href="_c_l_mean_std_dev_normalization_layer_8cpp_source.xhtml#l00039">CLMeanStdDevNormalizationLayer::validate()</a>, <a class="el" href="_n_e_mean_std_dev_normalization_layer_8cpp_source.xhtml#l00038">NEMeanStdDevNormalizationLayer::validate()</a>, <a class="el" href="_c_l_instance_normalization_layer_8cpp_source.xhtml#l00042">CLInstanceNormalizationLayer::validate()</a>, <a class="el" href="_c_l_mean_std_dev_normalization_kernel_8cpp_source.xhtml#l00123">CLMeanStdDevNormalizationKernel::validate()</a>, <a class="el" href="_n_e_l2_normalize_layer_8cpp_source.xhtml#l00055">NEL2NormalizeLayer::validate()</a>, <a class="el" href="_n_e_instance_normalization_layer_8cpp_source.xhtml#l00065">NEInstanceNormalizationLayer::validate()</a>, <a class="el" href="_c_l_l2_normalize_layer_8cpp_source.xhtml#l00064">CLL2NormalizeLayer::validate()</a>, <a class="el" href="_n_e_instance_normalization_layer_kernel_8cpp_source.xhtml#l00216">NEInstanceNormalizationLayerKernel::validate()</a>, <a class="el" href="_c_l_l2_normalize_layer_kernel_8cpp_source.xhtml#l00153">CLL2NormalizeLayerKernel::validate()</a>, <a class="el" href="_n_e_mean_std_dev_normalization_kernel_8cpp_source.xhtml#l00187">NEMeanStdDevNormalizationKernel::validate()</a>, <a class="el" href="_c_l_batch_normalization_layer_8cpp_source.xhtml#l00046">CLBatchNormalizationLayer::validate()</a>, <a class="el" href="_n_e_batch_normalization_layer_8cpp_source.xhtml#l00047">NEBatchNormalizationLayer::validate()</a>, <a class="el" href="_g_c_batch_normalization_layer_kernel_8cpp_source.xhtml#l00191">GCBatchNormalizationLayerKernel::validate()</a>, <a class="el" href="_c_l_batch_normalization_layer_kernel_8cpp_source.xhtml#l00207">CLBatchNormalizationLayerKernel::validate()</a>, <a class="el" href="_c_l_fuse_batch_normalization_kernel_8cpp_source.xhtml#l00168">CLFuseBatchNormalizationKernel::validate()</a>, <a class="el" href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00456">NEBatchNormalizationLayerKernel::validate()</a>, <a class="el" href="_c_l_fuse_batch_normalization_8cpp_source.xhtml#l00047">CLFuseBatchNormalization::validate()</a>, <a class="el" href="_n_e_fuse_batch_normalization_8cpp_source.xhtml#l00047">NEFuseBatchNormalization::validate()</a>, and <a class="el" href="_n_e_fuse_batch_normalization_kernel_8cpp_source.xhtml#l00498">NEFuseBatchNormalizationKernel::validate()</a>.</p>

</div>
</div>
<a id="ab153bd5bebd2a695c5d2c79801d0abec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab153bd5bebd2a695c5d2c79801d0abec">&#9670;&nbsp;</a></span>fixed_point_one_Q0</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">constexpr int64_t fixed_point_one_Q0 = (1LL &lt;&lt; 31)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00035">35</a> of file <a class="el" href="_asymm_helpers_8cpp_source.xhtml">AsymmHelpers.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00084">calculate_quantized_multiplier_greater_than_one()</a>, and <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00052">calculate_quantized_multiplier_less_than_one()</a>.</p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1quantization.xhtml">quantization</a></li>
    <li class="footer">Generated on Fri Feb 21 2020 11:10:32 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
