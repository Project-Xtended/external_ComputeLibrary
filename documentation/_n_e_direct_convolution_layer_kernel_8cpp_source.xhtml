<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('_n_e_direct_convolution_layer_kernel_8cpp_source.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">NEDirectConvolutionLayerKernel.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_n_e_direct_convolution_layer_kernel_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017-2020 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_n_e_direct_convolution_layer_kernel_8h.xhtml">arm_compute/core/NEON/kernels/NEDirectConvolutionLayerKernel.h</a>&quot;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_n_e_direct_convolution_detail_8h.xhtml">arm_compute/core/NEON/kernels/detail/NEDirectConvolutionDetail.h</a>&quot;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_access_window_static_8h.xhtml">arm_compute/core/AccessWindowStatic.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_c_p_p_2_validate_8h.xhtml">arm_compute/core/CPP/Validate.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_error_8h.xhtml">arm_compute/core/Error.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_helpers_8h.xhtml">arm_compute/core/Helpers.h</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_access_window_8h.xhtml">arm_compute/core/IAccessWindow.h</a>&quot;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_tensor_8h.xhtml">arm_compute/core/ITensor.h</a>&quot;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_n_e_fixed_point_8h.xhtml">arm_compute/core/NEON/NEFixedPoint.h</a>&quot;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_types_8h.xhtml">arm_compute/core/Types.h</a>&quot;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_utils_8h.xhtml">arm_compute/core/Utils.h</a>&quot;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_validate_8h.xhtml">arm_compute/core/Validate.h</a>&quot;</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_shape_calculator_8h.xhtml">arm_compute/core/utils/misc/ShapeCalculator.h</a>&quot;</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="wrapper_8h.xhtml">arm_compute/core/NEON/wrapper/wrapper.h</a>&quot;</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor">#include &lt;arm_neon.h&gt;</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a>;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacearm__compute_1_1detail.xhtml">arm_compute::detail</a>;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="keyword">namespace</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;{</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="preprocessor">#ifdef __ARM_FEATURE_FP16_VECTOR_ARITHMETIC</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> str<span class="keywordtype">id</span>ex&gt;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;float16x8_t internal_vld1q(<span class="keyword">const</span> float16_t *in);</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;float16x8_t internal_vld1q&lt;1&gt;(<span class="keyword">const</span> float16_t *in)</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;{</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keywordflow">return</span> vld1q_f16(in);</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;}</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;float16x8_t internal_vld1q&lt;2&gt;(<span class="keyword">const</span> float16_t *in)</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;{</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keyword">const</span> float16x8x2_t tmp = vld2q_f16(in);</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keywordflow">return</span> tmp.val[0];</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;}</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;float16x8_t internal_vld1q&lt;3&gt;(<span class="keyword">const</span> float16_t *in)</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;{</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keyword">const</span> float16x8x3_t tmp = vld3q_f16(in);</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keywordflow">return</span> tmp.val[0];</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;}</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="keyword">inline</span> float16x8_t internal_vdupq_n(float16_t v)</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;{</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keywordflow">return</span> vdupq_n_f16(v);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;}</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> internal_vst1q(float16_t *p, <span class="keyword">const</span> float16x8_t &amp;v)</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;{</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    vst1q_f16(p, v);</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;}</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;float16x8_t internal_vmull(<span class="keyword">const</span> float16x8_t &amp;x, <span class="keyword">const</span> float16x8_t &amp;y)</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;{</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keywordflow">return</span> vmulq_f16(x, y);</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;}</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="keyword">inline</span> float16x8_t internal_vmlal(<span class="keyword">const</span> float16x8_t &amp;x, <span class="keyword">const</span> float16x8_t &amp;y, <span class="keyword">const</span> float16x8_t &amp;z)</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;{</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keywordflow">return</span> vaddq_f16(x, vmulq_f16(y, z));</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;}</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* __ARM_FEATURE_FP16_VECTOR_ARITHMETIC */</span><span class="preprocessor"></span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> str<span class="keywordtype">id</span>ex&gt;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;float32x4_t internal_vld1q(<span class="keyword">const</span> <span class="keywordtype">float</span> *in);</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;float32x4_t internal_vld1q&lt;1&gt;(<span class="keyword">const</span> <span class="keywordtype">float</span> *in)</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;{</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keywordflow">return</span> vld1q_f32(in);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;}</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;float32x4_t internal_vld1q&lt;2&gt;(<span class="keyword">const</span> <span class="keywordtype">float</span> *in)</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;{</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keyword">const</span> float32x4x2_t tmp = vld2q_f32(in);</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keywordflow">return</span> tmp.val[0];</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;}</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;float32x4_t internal_vld1q&lt;3&gt;(<span class="keyword">const</span> <span class="keywordtype">float</span> *in)</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;{</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keyword">const</span> float32x4x3_t tmp = vld3q_f32(in);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keywordflow">return</span> tmp.val[0];</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;}</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="keyword">inline</span> float32x4_t internal_vdupq_n(<span class="keywordtype">float</span> v)</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;{</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="keywordflow">return</span> vdupq_n_f32(v);</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;}</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> internal_vst1q(<span class="keywordtype">float</span> *p, <span class="keyword">const</span> float32x4_t &amp;v)</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;{</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    vst1q_f32(p, v);</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;}</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;float32x4_t internal_vmull(<span class="keyword">const</span> float32x4_t &amp;x, <span class="keyword">const</span> float32x4_t &amp;y)</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;{</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keywordflow">return</span> vmulq_f32(x, y);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;}</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="keyword">inline</span> float32x4_t internal_vmlal(<span class="keyword">const</span> float32x4_t &amp;x, <span class="keyword">const</span> float32x4_t &amp;y, <span class="keyword">const</span> float32x4_t &amp;z)</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;{</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="keywordflow">return</span> vmlaq_f32(x, y, z);</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;}</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;constexpr <span class="keywordtype">int</span> small_tensor_size_optim = 8;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> run_optim_small_tensor_info(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *t)</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;{</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="keywordflow">return</span> t-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>) &lt;= small_tensor_size_optim &amp;&amp; t-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>) &lt;= small_tensor_size_optim;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;}</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> run_optim_small_tensor(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *t)</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;{</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keywordflow">return</span> run_optim_small_tensor_info(t-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>());</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;}</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment">// Optimized convolver for 1x1 kernels used only where input width and height are both &lt;= 8</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment">// For big Z as in Input=7x7x832, this implementation is faster than the general code becuase it doesn&#39;t need to</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="comment">// store intermidiate results in memory. Temporary results are stored in NEON registers directly and then written to the output buffer.</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> str<span class="keywordtype">id</span>ex&gt;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="keyword">class </span>convolver_w1x1_i8x8_f32</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;{</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">void</span> convolve(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>)</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    {</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;dimension(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>) &gt; small_tensor_size_optim);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;dimension(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>) &gt; small_tensor_size_optim);</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          input_stride_x  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;strides_in_bytes().x();</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          input_stride_y  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;strides_in_bytes().y();</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          input_stride_z  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;strides_in_bytes().z();</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          output_stride_y = output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">strides_in_bytes</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#ac4a1050be02b20b3f791b9a483f3abe2">y</a>();</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          output_stride_z = output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">strides_in_bytes</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#abb29a685080e999c2a0cb874d2f7bb5a">z</a>();</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          kernel_stride_z = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a5f1ca9d674346287cae57a6c5b5c24ec">strides_in_bytes</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#abb29a685080e999c2a0cb874d2f7bb5a">z</a>();</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          kernel_stride_w = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a5f1ca9d674346287cae57a6c5b5c24ec">strides_in_bytes</a>()[3];</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          output_h        = output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(1);</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          range_z         = window.<a class="code" href="classarm__compute_1_1_window.xhtml#a51a8c7a9d2fa20943c213e85eb8d9caf">z</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">end</a>() - window.<a class="code" href="classarm__compute_1_1_window.xhtml#a51a8c7a9d2fa20943c213e85eb8d9caf">z</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>();</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          kernel_depth    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a8813441b655b97c00139c6a5a6390e97">dimension</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>);</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> conv_stride_y   = std::get&lt;1&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.stride());</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> conv_pad_left   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.pad_left();</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> conv_pad_top    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.pad_top();</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        <span class="comment">// setup output window for the iterator</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> window_out = window;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        window_out.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>), output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>)));</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        window_out.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>), output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>)));</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        window_out.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(window.<a class="code" href="classarm__compute_1_1_window.xhtml#a51a8c7a9d2fa20943c213e85eb8d9caf">z</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>(), window.<a class="code" href="classarm__compute_1_1_window.xhtml#a51a8c7a9d2fa20943c213e85eb8d9caf">z</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">end</a>(), range_z));</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <span class="comment">// setup input window for the iterator</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> window_in = window;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        <span class="comment">// we just want execute_window_loop to iterate over the higher dimensions (&gt;3), so we set the first 3 dimensions to 0</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        window_in.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 0, 0));</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        window_in.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 0, 0));</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        window_in.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 0, 0));</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a>   window_k = <a class="code" href="namespacearm__compute.xhtml#ab7980fa5ee693e3282a76da047a1c3b5">calculate_max_window</a>(*<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>(), <a class="code" href="classarm__compute_1_1_steps.xhtml">Steps</a>(1u));</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> out(output, window_out);</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> in(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, window_in);</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> k(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, window_k);</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        <span class="keyword">const</span> uint8_t *k_ptr = k.ptr();</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(window_out, [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp; <span class="keywordtype">id</span>)</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        {</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;            <span class="keyword">const</span> uint8_t *input_ptr = in.ptr() - conv_pad_left * input_stride_x - conv_pad_top * input_stride_y;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            uint8_t       *out_ptr   = out.ptr();</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            <span class="keywordtype">int</span>            ih        = 0;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            <span class="keywordtype">int</span>            oh        = 0;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;            std::array&lt;float32x4_t, 8&gt; accum0 = { vdupq_n_f32(0), vdupq_n_f32(0), vdupq_n_f32(0), vdupq_n_f32(0), vdupq_n_f32(0), vdupq_n_f32(0), vdupq_n_f32(0), vdupq_n_f32(0) };</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;            std::array&lt;float32x4_t, 8&gt; accum1 = { vdupq_n_f32(0), vdupq_n_f32(0), vdupq_n_f32(0), vdupq_n_f32(0), vdupq_n_f32(0), vdupq_n_f32(0), vdupq_n_f32(0), vdupq_n_f32(0) };</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> oz = 0; oz &lt; range_z; ++oz)</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;            {</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                accum0[0] = accum0[1] = accum0[2] = accum0[3] = accum0[4] = accum0[5] = accum0[6] = accum0[7] = vdupq_n_f32(0.f);</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                accum1[0] = accum1[1] = accum1[2] = accum1[3] = accum1[4] = accum1[5] = accum1[6] = accum1[7] = vdupq_n_f32(0.f);</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                <span class="keyword">auto</span> p_out_base                                                                               = out_ptr + oz * output_stride_z;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                <span class="keywordflow">for</span>(<span class="keywordtype">int</span> p = 0; p &lt; kernel_depth; ++p)</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                {</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> k_val = reinterpret_cast&lt;const float *&gt;(k_ptr + p * kernel_stride_z + (<span class="keywordtype">id</span>.z() + oz) * kernel_stride_w);</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vk0   = internal_vdupq_n(*k_val);</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                    <span class="keywordflow">for</span>(ih = 0, oh = 0; oh &lt; output_h; ++oh, ih += conv_stride_y)</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                    {</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                        <span class="keyword">const</span> <span class="keywordtype">int</span> offset_xy = ih * input_stride_y;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                        <span class="keyword">auto</span>      in_val    = reinterpret_cast&lt;const float *&gt;(input_ptr + p * input_stride_z + offset_xy);</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                        <span class="keyword">auto</span>      v_in0     = internal_vld1q&lt;stridex&gt;(in_val);</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                        <span class="keyword">auto</span>      v_in1     = internal_vld1q&lt;stridex&gt;(in_val + 4);</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                        accum0[oh]          = vmlaq_f32(accum0[oh], vk0, v_in0);</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                        accum1[oh]          = vmlaq_f32(accum1[oh], vk0, v_in1);</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                    }</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                }</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                <span class="keywordflow">for</span>(oh = 0; oh &lt; output_h; ++oh)</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                {</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                    <span class="keyword">auto</span> p_out = reinterpret_cast&lt;float *&gt;(p_out_base + oh * output_stride_y);</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                    vst1q_f32(p_out, accum0[oh]);</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                    vst1q_f32(p_out + 4, accum1[oh]);</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                }</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;            }</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        },</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        in, out);</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    }</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;};</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> str<span class="keywordtype">id</span>ex&gt;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="keyword">class </span>convolver_1x1</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;{</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">void</span> convolve(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_elems_read_per_iteration, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_elems_written_per_iteration,</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                         <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>)</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    {</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          input_stride_x  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;strides_in_bytes().x();</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          input_stride_y  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;strides_in_bytes().y();</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          input_stride_z  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;strides_in_bytes().z();</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          output_stride_y = output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">strides_in_bytes</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#ac4a1050be02b20b3f791b9a483f3abe2">y</a>();</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          output_stride_z = output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">strides_in_bytes</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#abb29a685080e999c2a0cb874d2f7bb5a">z</a>();</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          kernel_stride_z = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a5f1ca9d674346287cae57a6c5b5c24ec">strides_in_bytes</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#abb29a685080e999c2a0cb874d2f7bb5a">z</a>();</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          kernel_stride_w = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a5f1ca9d674346287cae57a6c5b5c24ec">strides_in_bytes</a>()[3];</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          output_w        = output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(0);</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          output_h        = output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(1);</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          range_z         = window.<a class="code" href="classarm__compute_1_1_window.xhtml#a51a8c7a9d2fa20943c213e85eb8d9caf">z</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">end</a>() - window.<a class="code" href="classarm__compute_1_1_window.xhtml#a51a8c7a9d2fa20943c213e85eb8d9caf">z</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>();</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          kernel_depth    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a8813441b655b97c00139c6a5a6390e97">dimension</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>);</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> conv_stride_y   = std::get&lt;1&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.stride());</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> conv_pad_left   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.pad_left();</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> conv_pad_top    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.pad_top();</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        <span class="comment">// setup output window for the iterator</span></div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> window_out = window;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        window_out.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>), output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>)));</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        window_out.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>), output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>)));</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        window_out.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(window.<a class="code" href="classarm__compute_1_1_window.xhtml#a51a8c7a9d2fa20943c213e85eb8d9caf">z</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>(), window.<a class="code" href="classarm__compute_1_1_window.xhtml#a51a8c7a9d2fa20943c213e85eb8d9caf">z</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">end</a>(), range_z));</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        <span class="comment">// setup input window for the iterator</span></div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> window_in = window;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        <span class="comment">// we just want execute_window_loop to iterate over the higher dimensions (&gt;3), so we set the first 3 dimensions to 0</span></div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        window_in.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 0, 0));</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        window_in.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 0, 0));</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        window_in.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 0, 0));</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a>   window_k = <a class="code" href="namespacearm__compute.xhtml#ab7980fa5ee693e3282a76da047a1c3b5">calculate_max_window</a>(*<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>(), <a class="code" href="classarm__compute_1_1_steps.xhtml">Steps</a>(1u));</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> out(output, window_out);</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> in(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, window_in);</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> k(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, window_k);</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        <span class="keyword">const</span> uint8_t *k_ptr = k.ptr();</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(window_out, [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp; <span class="keywordtype">id</span>)</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        {</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;            <span class="comment">/*</span></div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;<span class="comment">                For a detailed explanation on how the algorithm works refer to template &lt;&gt; class convolver_3x3&lt;1&gt;</span></div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="comment">            */</span></div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;            <span class="keyword">const</span> uint8_t *input_ptr = in.ptr() - conv_pad_left * input_stride_x - conv_pad_top * input_stride_y;</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;            uint8_t       *out_ptr   = out.ptr();</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;            <span class="keywordtype">int</span>            ih        = 0;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;            <span class="keywordtype">int</span>            oh        = 0;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> oz = 0; oz &lt; range_z; ++oz)</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;            {</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                <span class="keyword">auto</span> p_out_base = out_ptr + oz * output_stride_z;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;                <span class="comment">// Step 1</span></div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                {</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> k_val = reinterpret_cast&lt;const T1 *&gt;(k_ptr + 0 * kernel_stride_z + (<span class="keywordtype">id</span>.z() + oz) * kernel_stride_w);</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vk    = internal_vdupq_n(*k_val);</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                    <span class="keywordflow">for</span>(ih = 0, oh = 0; oh &lt; output_h; ++oh, ih += conv_stride_y)</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                    {</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                        <span class="keyword">const</span> <span class="keywordtype">int</span> offset_xy = ih * input_stride_y;</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                        <span class="keyword">auto</span>      in_val    = reinterpret_cast&lt;const T1 *&gt;(input_ptr + (0 * input_stride_z + offset_xy));</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                        <span class="keyword">auto</span>      p_out     = reinterpret_cast&lt;T2 *&gt;(p_out_base + oh * output_stride_y);</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> ow = 0; ow &lt; output_w; ow += num_elems_written_per_iteration, in_val += num_elems_read_per_iteration, p_out += num_elems_written_per_iteration)</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                        {</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;                            internal_vst1q(p_out, internal_vmull(vk, internal_vld1q&lt;stridex&gt;(in_val)));</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;                        }</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                    }</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                }</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                <span class="comment">// Step 2</span></div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                <span class="keywordflow">for</span>(<span class="keywordtype">int</span> p = 1; p &lt; kernel_depth; ++p)</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                {</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> k_val = reinterpret_cast&lt;const T1 *&gt;(k_ptr + p * kernel_stride_z + (<span class="keywordtype">id</span>.z() + oz) * kernel_stride_w);</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vk    = internal_vdupq_n(*k_val);</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                    <span class="keywordflow">for</span>(ih = 0, oh = 0; oh &lt; output_h; ++oh, ih += conv_stride_y)</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                    {</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                        <span class="keyword">const</span> <span class="keywordtype">int</span> offset_xy = ih * input_stride_y;</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                        <span class="keyword">auto</span>      in_val    = reinterpret_cast&lt;const T1 *&gt;(input_ptr + p * input_stride_z + offset_xy);</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;                        <span class="keyword">auto</span>      p_out     = reinterpret_cast&lt;T2 *&gt;(p_out_base + oh * output_stride_y);</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> ow = 0; ow &lt; output_w; ow += num_elems_written_per_iteration, in_val += num_elems_read_per_iteration, p_out += num_elems_written_per_iteration)</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                        {</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                            internal_vst1q(p_out, internal_vmlal(internal_vld1q&lt;1&gt;(p_out), vk, internal_vld1q&lt;stridex&gt;(in_val)));</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                        }</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;                    }</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;                }</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;            }</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;        },</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;        in, out);</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    }</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;};</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;<span class="preprocessor">#ifdef __ARM_FEATURE_FP16_VECTOR_ARITHMETIC</span></div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> str<span class="keywordtype">id</span>ex&gt;</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;<span class="keywordtype">void</span> accumulate_results(float16_t *buffer, <span class="keyword">const</span> float16x8x2_t &amp;values);</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="keywordtype">void</span> accumulate_results&lt;1&gt;(float16_t *buffer, <span class="keyword">const</span> float16x8x2_t &amp;values)</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;{</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    vst1q_f16(buffer, vaddq_f16(vld1q_f16(buffer), values.val[0]));</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    vst1q_f16(buffer + 8, vaddq_f16(vld1q_f16(buffer + 8), values.val[1]));</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;}</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;<span class="keywordtype">void</span> accumulate_results&lt;2&gt;(float16_t *buffer, <span class="keyword">const</span> float16x8x2_t &amp;values)</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;{</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    vst1q_f16(buffer, vaddq_f16(vld1q_f16(buffer), values.val[0]));</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;}</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;<span class="keywordtype">void</span> accumulate_results&lt;3&gt;(float16_t *buffer, <span class="keyword">const</span> float16x8x2_t &amp;values)</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;{</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    vst1_f16(buffer, vadd_f16(vld1_f16(buffer), vget_low_f16(values.val[0])));</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;}</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* __ARM_FEATURE_FP16_VECTOR_ARITHMETIC */</span><span class="preprocessor"></span></div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> str<span class="keywordtype">id</span>ex&gt;</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;float32x4x2_t convolve_5x5(<span class="keyword">const</span> <span class="keywordtype">float</span> *in_0, <span class="keyword">const</span> <span class="keywordtype">float</span> *in_1, <span class="keyword">const</span> <span class="keywordtype">float</span> *in_2, <span class="keyword">const</span> <span class="keywordtype">float</span> *in_3, <span class="keyword">const</span> <span class="keywordtype">float</span> *in_4,</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                           <span class="keyword">const</span> <span class="keywordtype">float</span> *m0, <span class="keyword">const</span> <span class="keywordtype">float</span> *m1, <span class="keyword">const</span> <span class="keywordtype">float</span> *m2, <span class="keyword">const</span> <span class="keywordtype">float</span> *m3, <span class="keyword">const</span> <span class="keywordtype">float</span> *m4);</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;<span class="keyword">inline</span> float32x4x3_t load_matrix_hi(<span class="keyword">const</span> <span class="keywordtype">float</span> *<span class="keyword">const</span> m0, <span class="keyword">const</span> <span class="keywordtype">float</span> *<span class="keyword">const</span> m1, <span class="keyword">const</span> <span class="keywordtype">float</span> *<span class="keyword">const</span> m2)</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;{</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    <span class="keyword">const</span> float32x4x3_t m00 =</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    {</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;        {</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;            vld1q_dup_f32(m0),</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;            vld1q_dup_f32(m1),</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;            vld1q_dup_f32(m2)</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;        }</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    };</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    <span class="keywordflow">return</span> m00;</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;}</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;<span class="keyword">inline</span> float32x4x2_t load_matrix_lo(<span class="keyword">const</span> <span class="keywordtype">float</span> *<span class="keyword">const</span> m3, <span class="keyword">const</span> <span class="keywordtype">float</span> *<span class="keyword">const</span> m4)</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;{</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    <span class="keyword">const</span> float32x4x2_t m00 =</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    {</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;        {</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;            vld1q_dup_f32(m3),</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;            vld1q_dup_f32(m4)</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;        }</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    };</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    <span class="keywordflow">return</span> m00;</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;}</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;<span class="keyword">inline</span> float32x4x3_t load_input(<span class="keyword">const</span> <span class="keywordtype">float</span> *<span class="keyword">const</span> in)</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;{</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    <span class="keyword">const</span> float32x4x3_t vin =</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    {</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;        {</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;            vld1q_f32(in),</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;            vld1q_f32(in + 4),</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;            vld1q_f32(in + 8)</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;        }</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    };</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    <span class="keywordflow">return</span> vin;</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;}</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;<span class="keyword">inline</span> float32x4x2_t convolve_5x5&lt;1&gt;(<span class="keyword">const</span> <span class="keywordtype">float</span> *in_0, <span class="keyword">const</span> <span class="keywordtype">float</span> *in_1, <span class="keyword">const</span> <span class="keywordtype">float</span> *in_2, <span class="keyword">const</span> <span class="keywordtype">float</span> *in_3, <span class="keyword">const</span> <span class="keywordtype">float</span> *in_4,</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                                     <span class="keyword">const</span> <span class="keywordtype">float</span> *m0, <span class="keyword">const</span> <span class="keywordtype">float</span> *m1, <span class="keyword">const</span> <span class="keywordtype">float</span> *m2, <span class="keyword">const</span> <span class="keywordtype">float</span> *m3, <span class="keyword">const</span> <span class="keywordtype">float</span> *m4)</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;{</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    <span class="keyword">const</span> float32x4x3_t vin0 = load_input(in_0);</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    <span class="keyword">const</span> float32x4x3_t vin1 = load_input(in_1);</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    <span class="keyword">const</span> float32x4x3_t vin2 = load_input(in_2);</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    <span class="keyword">const</span> float32x4x3_t vin3 = load_input(in_3);</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    <span class="keyword">const</span> float32x4x3_t vin4 = load_input(in_4);</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    <span class="keyword">const</span> float32x4x3_t m00  = load_matrix_hi(m0, 1 + m0, 2 + m0);</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    <span class="keyword">const</span> float32x4x2_t m01  = load_matrix_lo(3 + m0, 4 + m0);</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    <span class="keyword">const</span> float32x4x3_t m10  = load_matrix_hi(m1, 1 + m1, 2 + m1);</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;    <span class="keyword">const</span> float32x4x2_t m11  = load_matrix_lo(3 + m1, 4 + m1);</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    <span class="keyword">const</span> float32x4x3_t m20  = load_matrix_hi(m2, 1 + m2, 2 + m2);</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    <span class="keyword">const</span> float32x4x2_t m21  = load_matrix_lo(3 + m2, 4 + m2);</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    <span class="keyword">const</span> float32x4x3_t m30  = load_matrix_hi(m3, 1 + m3, 2 + m3);</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    <span class="keyword">const</span> float32x4x2_t m31  = load_matrix_lo(3 + m3, 4 + m3);</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    <span class="keyword">const</span> float32x4x3_t m40  = load_matrix_hi(m4, 1 + m4, 2 + m4);</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    <span class="keyword">const</span> float32x4x2_t m41  = load_matrix_lo(3 + m4, 4 + m4);</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    float32x4x2_t out =</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    {</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;        {</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;            vmulq_f32(vin0.val[0], m00.val[0]),</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;            vmulq_f32(vin0.val[1], m00.val[0])</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;        }</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    };</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vextq_f32(vin0.val[0], vin0.val[1], 1), m00.val[1]);</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vextq_f32(vin0.val[0], vin0.val[1], 2), m00.val[2]);</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vextq_f32(vin0.val[0], vin0.val[1], 3), m01.val[0]);</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vin0.val[1], m01.val[1]);</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vin1.val[0], m10.val[0]);</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vextq_f32(vin1.val[0], vin1.val[1], 1), m10.val[1]);</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vextq_f32(vin1.val[0], vin1.val[1], 2), m10.val[2]);</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vextq_f32(vin1.val[0], vin1.val[1], 3), m11.val[0]);</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vin1.val[1], m11.val[1]);</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vin2.val[0], m20.val[0]);</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vextq_f32(vin2.val[0], vin2.val[1], 1), m20.val[1]);</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vextq_f32(vin2.val[0], vin2.val[1], 2), m20.val[2]);</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vextq_f32(vin2.val[0], vin2.val[1], 3), m21.val[0]);</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vin2.val[1], m21.val[1]);</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vin3.val[0], m30.val[0]);</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vextq_f32(vin3.val[0], vin3.val[1], 1), m30.val[1]);</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vextq_f32(vin3.val[0], vin3.val[1], 2), m30.val[2]);</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vextq_f32(vin3.val[0], vin3.val[1], 3), m31.val[0]);</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vin3.val[1], m31.val[1]);</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vin4.val[0], m40.val[0]);</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vextq_f32(vin4.val[0], vin4.val[1], 1), m40.val[1]);</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vextq_f32(vin4.val[0], vin4.val[1], 2), m40.val[2]);</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vextq_f32(vin4.val[0], vin4.val[1], 3), m41.val[0]);</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vin4.val[1], m41.val[1]);</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    out.val[1] = vmlaq_f32(out.val[1], vextq_f32(vin0.val[1], vin0.val[2], 1), m00.val[1]);</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    out.val[1] = vmlaq_f32(out.val[1], vextq_f32(vin0.val[1], vin0.val[2], 2), m00.val[2]);</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;    out.val[1] = vmlaq_f32(out.val[1], vextq_f32(vin0.val[1], vin0.val[2], 3), m01.val[0]);</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    out.val[1] = vmlaq_f32(out.val[1], vin0.val[2], m01.val[1]);</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    out.val[1] = vmlaq_f32(out.val[1], vin1.val[1], m10.val[0]);</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    out.val[1] = vmlaq_f32(out.val[1], vextq_f32(vin1.val[1], vin1.val[2], 1), m10.val[1]);</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    out.val[1] = vmlaq_f32(out.val[1], vextq_f32(vin1.val[1], vin1.val[2], 2), m10.val[2]);</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    out.val[1] = vmlaq_f32(out.val[1], vextq_f32(vin1.val[1], vin1.val[2], 3), m11.val[0]);</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    out.val[1] = vmlaq_f32(out.val[1], vin1.val[2], m11.val[1]);</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;    out.val[1] = vmlaq_f32(out.val[1], vin2.val[1], m20.val[0]);</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;    out.val[1] = vmlaq_f32(out.val[1], vextq_f32(vin2.val[1], vin2.val[2], 1), m20.val[1]);</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;    out.val[1] = vmlaq_f32(out.val[1], vextq_f32(vin2.val[1], vin2.val[2], 2), m20.val[2]);</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    out.val[1] = vmlaq_f32(out.val[1], vextq_f32(vin2.val[1], vin2.val[2], 3), m21.val[0]);</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;    out.val[1] = vmlaq_f32(out.val[1], vin2.val[2], m21.val[1]);</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    out.val[1] = vmlaq_f32(out.val[1], vin3.val[1], m30.val[0]);</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    out.val[1] = vmlaq_f32(out.val[1], vextq_f32(vin3.val[1], vin3.val[2], 1), m30.val[1]);</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    out.val[1] = vmlaq_f32(out.val[1], vextq_f32(vin3.val[1], vin3.val[2], 2), m30.val[2]);</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    out.val[1] = vmlaq_f32(out.val[1], vextq_f32(vin3.val[1], vin3.val[2], 3), m31.val[0]);</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    out.val[1] = vmlaq_f32(out.val[1], vin3.val[2], m31.val[1]);</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    out.val[1] = vmlaq_f32(out.val[1], vin4.val[1], m40.val[0]);</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;    out.val[1] = vmlaq_f32(out.val[1], vextq_f32(vin4.val[1], vin4.val[2], 1), m40.val[1]);</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    out.val[1] = vmlaq_f32(out.val[1], vextq_f32(vin4.val[1], vin4.val[2], 2), m40.val[2]);</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;    out.val[1] = vmlaq_f32(out.val[1], vextq_f32(vin4.val[1], vin4.val[2], 3), m41.val[0]);</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;    out.val[1] = vmlaq_f32(out.val[1], vin4.val[2], m41.val[1]);</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;    <span class="keywordflow">return</span> out;</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;}</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;<span class="keyword">inline</span> float32x4x2_t convolve_5x5&lt;2&gt;(<span class="keyword">const</span> <span class="keywordtype">float</span> *in_0, <span class="keyword">const</span> <span class="keywordtype">float</span> *in_1, <span class="keyword">const</span> <span class="keywordtype">float</span> *in_2, <span class="keyword">const</span> <span class="keywordtype">float</span> *in_3, <span class="keyword">const</span> <span class="keywordtype">float</span> *in_4,</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;                                     <span class="keyword">const</span> <span class="keywordtype">float</span> *m0, <span class="keyword">const</span> <span class="keywordtype">float</span> *m1, <span class="keyword">const</span> <span class="keywordtype">float</span> *m2, <span class="keyword">const</span> <span class="keywordtype">float</span> *m3, <span class="keyword">const</span> <span class="keywordtype">float</span> *m4)</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;{</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;    float32x4x2_t out = convolve_5x5&lt;1&gt;(in_0, in_1, in_2, in_3, in_4, m0, m1, m2, m3, m4);</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;    out.val[0]        = vsetq_lane_f32(vgetq_lane_f32(out.val[0], 2), out.val[0], 1);</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;    out.val[0]        = vsetq_lane_f32(vgetq_lane_f32(out.val[1], 0), out.val[0], 2);</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;    out.val[0]        = vsetq_lane_f32(vgetq_lane_f32(out.val[1], 2), out.val[0], 3);</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    <span class="keywordflow">return</span> out;</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;}</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;<span class="keyword">inline</span> float32x4x2_t convolve_5x5&lt;3&gt;(<span class="keyword">const</span> <span class="keywordtype">float</span> *in_0, <span class="keyword">const</span> <span class="keywordtype">float</span> *in_1, <span class="keyword">const</span> <span class="keywordtype">float</span> *in_2, <span class="keyword">const</span> <span class="keywordtype">float</span> *in_3, <span class="keyword">const</span> <span class="keywordtype">float</span> *in_4,</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;                                     <span class="keyword">const</span> <span class="keywordtype">float</span> *m0, <span class="keyword">const</span> <span class="keywordtype">float</span> *m1, <span class="keyword">const</span> <span class="keywordtype">float</span> *m2, <span class="keyword">const</span> <span class="keywordtype">float</span> *m3, <span class="keyword">const</span> <span class="keywordtype">float</span> *m4)</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;{</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;    float32x4x2_t out = convolve_5x5&lt;1&gt;(in_0, in_1, in_2, in_3, in_4, m0, m1, m2, m3, m4);</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;    out.val[0]        = vsetq_lane_f32(vgetq_lane_f32(out.val[0], 3), out.val[0], 1);</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    <span class="keywordflow">return</span> out;</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;}</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> str<span class="keywordtype">id</span>ex&gt;</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;<span class="keywordtype">void</span> accumulate_results(<span class="keywordtype">float</span> *buffer, <span class="keyword">const</span> float32x4x2_t &amp;values);</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;<span class="keywordtype">void</span> accumulate_results&lt;1&gt;(<span class="keywordtype">float</span> *buffer, <span class="keyword">const</span> float32x4x2_t &amp;values)</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;{</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;    vst1q_f32(buffer, vaddq_f32(vld1q_f32(buffer), values.val[0]));</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    vst1q_f32(buffer + 4, vaddq_f32(vld1q_f32(buffer + 4), values.val[1]));</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;}</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;<span class="keywordtype">void</span> accumulate_results&lt;2&gt;(<span class="keywordtype">float</span> *buffer, <span class="keyword">const</span> float32x4x2_t &amp;values)</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;{</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;    vst1q_f32(buffer, vaddq_f32(vld1q_f32(buffer), values.val[0]));</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;}</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;<span class="keywordtype">void</span> accumulate_results&lt;3&gt;(<span class="keywordtype">float</span> *buffer, <span class="keyword">const</span> float32x4x2_t &amp;values)</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;{</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;    vst1_f32(buffer, vadd_f32(vld1_f32(buffer), vget_low_f32(values.val[0])));</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;}</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1&gt;</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;<span class="keyword">class </span>convolver_nhwc</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;{</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">void</span> convolve(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, uint32_t kernel_size, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_elems_read_per_iteration,</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;                         <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>)</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    {</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          input_width     = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;dimension(0);</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          input_depth     = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;dimension(2);</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          input_stride_x  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;strides_in_bytes().x();</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          input_stride_y  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;strides_in_bytes().y();</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          input_stride_z  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;strides_in_bytes().z();</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          output_stride_x = output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">strides_in_bytes</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">x</a>();</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          kernel_stride_x = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a5f1ca9d674346287cae57a6c5b5c24ec">strides_in_bytes</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">x</a>();</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          kernel_stride_y = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a5f1ca9d674346287cae57a6c5b5c24ec">strides_in_bytes</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#ac4a1050be02b20b3f791b9a483f3abe2">y</a>();</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          kernel_stride_z = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a5f1ca9d674346287cae57a6c5b5c24ec">strides_in_bytes</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#abb29a685080e999c2a0cb874d2f7bb5a">z</a>();</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          conv_pad_top    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.pad_top();</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> conv_stride_x   = std::get&lt;0&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.stride());</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> conv_stride_y   = std::get&lt;1&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.stride());</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;        <span class="keyword">const</span> T1           zero            = 0;</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;        <span class="comment">// Setup input window for the input iterator</span></div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;        <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> window_in = window;</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;        window_in.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 0, 0));</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;        window_in.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 0, 0));</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;        window_in.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 0, 0));</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;        <span class="comment">// Setup input window for the output iterator</span></div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;        <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> window_out = window;</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;        window_out.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 1, 1));</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;        <span class="comment">// Setup input window for the weights iterator</span></div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;        <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> window_k = <a class="code" href="namespacearm__compute.xhtml#ab7980fa5ee693e3282a76da047a1c3b5">calculate_max_window</a>(*<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>(), <a class="code" href="classarm__compute_1_1_steps.xhtml">Steps</a>());</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;        window_k.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 1, 1));</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;        window_k.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 1, 1));</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;        window_k.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 1, 1));</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;        window_k.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(3, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a8813441b655b97c00139c6a5a6390e97">dimension</a>(3), 1));</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> in(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, window_in);</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> out(output, window_out);</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> k(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, window_k);</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(window_k, [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp; id_k)</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;        {</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;            <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(window_out, [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp; <span class="keywordtype">id</span>)</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;            {</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> in_y = static_cast&lt;int&gt;(<span class="keywordtype">id</span>.y() * conv_stride_x - <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.pad_left());</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> in_z = static_cast&lt;int&gt;(<span class="keywordtype">id</span>.z() * conv_stride_y - conv_pad_top);</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;                <span class="keyword">const</span> uint8_t *in_ptr  = in.ptr() + in_y * input_stride_y + in_z * input_stride_z;</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;                uint8_t       *out_ptr = out.ptr() + id_k[3] * output_stride_x;</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;                T1 out_val = 0;</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;                <span class="keyword">auto</span> in_addr_base0 = in_ptr;</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;                <span class="keyword">auto</span> we_addr_base0 = k.ptr();</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;                <span class="keywordflow">for</span>(uint32_t z = 0; z &lt; kernel_size; ++z, in_addr_base0 += input_stride_z, we_addr_base0 += kernel_stride_z)</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;                {</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">int</span> in_z = <span class="keywordtype">id</span>.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#abb29a685080e999c2a0cb874d2f7bb5a">z</a>() * conv_stride_y + z - conv_pad_top;</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;                    <span class="keywordflow">if</span>(in_z &gt;= 0 &amp;&amp; in_z &lt; input_depth) <span class="comment">// If false, pad top/bottom</span></div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;                    {</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;                        <span class="keyword">auto</span> in_addr_base1 = in_addr_base0;</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;                        <span class="keyword">auto</span> we_addr_base1 = we_addr_base0;</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;                        <span class="keywordflow">for</span>(uint32_t y = 0; y &lt; kernel_size; ++y, in_addr_base1 += input_stride_y, we_addr_base1 += kernel_stride_y)</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;                        {</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;                            <span class="keyword">auto</span> out_values = internal_vdupq_n(zero);</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;                            <span class="keywordtype">int</span> x           = 0;</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;                            <span class="keywordtype">int</span> no_leftover = input_width - num_elems_read_per_iteration;</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;                            <span class="keywordflow">for</span>(; x &lt; no_leftover; x += num_elems_read_per_iteration)</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;                            {</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;                                <span class="keyword">const</span> <span class="keyword">auto</span> in_addr   = reinterpret_cast&lt;const T1 *&gt;(in_addr_base1 + x * input_stride_x);</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;                                <span class="keyword">const</span> <span class="keyword">auto</span> in_values = internal_vld1q&lt;1&gt;(in_addr);</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;                                <span class="keyword">const</span> <span class="keyword">auto</span> we_addr   = reinterpret_cast&lt;const T1 *&gt;(we_addr_base1 + x * kernel_stride_x);</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;                                <span class="keyword">const</span> <span class="keyword">auto</span> we_values = internal_vld1q&lt;1&gt;(we_addr);</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;                                out_values = internal_vmlal(out_values, in_values, we_values);</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;                            }</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;                            <span class="keyword">auto</span> carry_addition = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a475ee3c8ef70a2e4f18effd1d527a63a">wrapper::vpadd</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(out_values), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(out_values));</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;                            carry_addition      = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a475ee3c8ef70a2e4f18effd1d527a63a">wrapper::vpadd</a>(carry_addition, carry_addition);</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;                            out_val += <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">wrapper::vgetlane</a>(carry_addition, 0);</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;                            <span class="comment">// Leftover</span></div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;                            <span class="keywordflow">for</span>(; x &lt; input_width; ++x)</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;                            {</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;                                <span class="keyword">const</span> <span class="keyword">auto</span> in_addr  = reinterpret_cast&lt;const T1 *&gt;(in_addr_base1 + x * input_stride_x);</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;                                <span class="keyword">const</span> <span class="keyword">auto</span> in_value = *(in_addr);</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;                                <span class="keyword">const</span> <span class="keyword">auto</span> we_addr  = reinterpret_cast&lt;const T1 *&gt;(we_addr_base1 + x * kernel_stride_x);</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;                                <span class="keyword">const</span> <span class="keyword">auto</span> we_value = *(we_addr);</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;                                out_val += in_value * we_value;</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;                            }</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;                        }</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;                    }</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;                }</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;                *(reinterpret_cast&lt;T1 *&gt;(out_ptr)) = out_val;</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;            },</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;            in, out);</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;        },</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;        k);</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;    }</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;};</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> str<span class="keywordtype">id</span>ex&gt;</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;<span class="keyword">class </span>convolver_3x3</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;{</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">void</span> convolve(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_elems_read_per_iteration, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_elems_written_per_iteration,</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;                         <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>)</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;    {</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;        <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(num_elems_read_per_iteration);</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          input_stride_x  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;strides_in_bytes().x();</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          input_stride_y  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;strides_in_bytes().y();</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          input_stride_z  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;strides_in_bytes().z();</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          output_stride_y = output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">strides_in_bytes</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#ac4a1050be02b20b3f791b9a483f3abe2">y</a>();</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          output_stride_z = output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">strides_in_bytes</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#abb29a685080e999c2a0cb874d2f7bb5a">z</a>();</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          kernel_stride_x = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a5f1ca9d674346287cae57a6c5b5c24ec">strides_in_bytes</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">x</a>();</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          kernel_stride_y = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a5f1ca9d674346287cae57a6c5b5c24ec">strides_in_bytes</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#ac4a1050be02b20b3f791b9a483f3abe2">y</a>();</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          kernel_stride_z = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a5f1ca9d674346287cae57a6c5b5c24ec">strides_in_bytes</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#abb29a685080e999c2a0cb874d2f7bb5a">z</a>();</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          kernel_stride_w = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a5f1ca9d674346287cae57a6c5b5c24ec">strides_in_bytes</a>()[3];</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          output_w        = output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(0);</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          output_h        = output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(1);</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          num_planes_z    = window.<a class="code" href="classarm__compute_1_1_window.xhtml#a51a8c7a9d2fa20943c213e85eb8d9caf">z</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">end</a>() - window.<a class="code" href="classarm__compute_1_1_window.xhtml#a51a8c7a9d2fa20943c213e85eb8d9caf">z</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>();</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          delta_input     = <a class="code" href="namespacearm__compute_1_1detail.xhtml#ab8ad28c706dc842c9d532e04ed697f0d">get_input_num_elems_processed</a>(num_elems_written_per_iteration, stridex);</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          kernel_depth    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a8813441b655b97c00139c6a5a6390e97">dimension</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>);</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> conv_stride_y   = std::get&lt;1&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.stride());</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> conv_pad_left   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.pad_left();</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> conv_pad_top    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.pad_top();</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;        <span class="comment">// setup output window for the iterator</span></div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;        <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> window_out = window;</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;        window_out.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>), output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>)));</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;        window_out.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>), output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>)));</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;        window_out.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(window.<a class="code" href="classarm__compute_1_1_window.xhtml#a51a8c7a9d2fa20943c213e85eb8d9caf">z</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>(), window.<a class="code" href="classarm__compute_1_1_window.xhtml#a51a8c7a9d2fa20943c213e85eb8d9caf">z</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">end</a>(), num_planes_z));</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;        <span class="comment">// setup input window for the iterator</span></div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;        <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> window_in = window;</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;        <span class="comment">// we just want execute_window_loop to iterate over the higher dimensions (&gt;3), so we set the first 3 dimensions to 0</span></div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;        window_in.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 0, 0));</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;        window_in.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 0, 0));</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;        window_in.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 0, 0));</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;        <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> window_k = <a class="code" href="namespacearm__compute.xhtml#ab7980fa5ee693e3282a76da047a1c3b5">calculate_max_window</a>(*<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>(), <a class="code" href="classarm__compute_1_1_steps.xhtml">Steps</a>(1u));</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> out(output, window_out);</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> in(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, window_in);</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> k(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, window_k);</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;        <span class="keyword">const</span> uint8_t *k_ptr = k.ptr();</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(window_out, [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp; <span class="keywordtype">id</span>)</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;        {</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;            <span class="keyword">const</span> uint8_t *input_ptr = in.ptr() - conv_pad_left * input_stride_x - conv_pad_top * input_stride_y;</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;            uint8_t       *out_ptr   = out.ptr();</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;            <span class="keywordtype">int</span>            ih        = 0;</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;            <span class="keywordtype">int</span>            oh        = 0;</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;            <span class="comment">/*</span></div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;<span class="comment">                    Each thread executing this kernel computes one or more output&#39;s volume planes.</span></div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;<span class="comment">                    Let&#39;s say the 3rd dimension of the output volume is 32, the first thread will compute the output for Z = [0,7], the second thread will compute the output for Z = [8,15],</span></div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;<span class="comment">                    the third thread [16,24] and the fourth thread [25,31].</span></div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;<span class="comment">                    The algorithm outer loop iterates over Z, P, Y, X where P is the depth/3rd dimension of each kernel. This order is not arbitrary, the main benefit of this</span></div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;<span class="comment">                    is that we setup the neon registers containing the kernel&#39;s values only once and then compute each XY using the preloaded registers as opposed as doing this for every XY value.</span></div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;<span class="comment">                    The algorithm does not require allocating any additional memory amd computes the results directly in-place in two stages:</span></div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;<span class="comment">                        1) Convolve plane 0 with kernel 0 and initialize the corresponding output plane with these values.</span></div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;<span class="comment">                        2) Convolve the remaining planes and accumulate the results in the output&#39;s plane which has been initialized in step 1.</span></div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;<span class="comment">            */</span></div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> oz = 0; oz &lt; num_planes_z; ++oz)</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;            {</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> zoffset    = <span class="keywordtype">id</span>.z() + oz;</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;                uint8_t *p_out_base = out_ptr + oz * output_stride_z;</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;                <span class="comment">// Step 1</span></div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;                {</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> ptr_k_r0 = reinterpret_cast&lt;const T1 *&gt;(k_ptr + 0 * kernel_stride_z + zoffset * kernel_stride_w + 0 * kernel_stride_y + 0 * kernel_stride_x);</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> ptr_k_r1 = reinterpret_cast&lt;const T1 *&gt;(k_ptr + 0 * kernel_stride_z + zoffset * kernel_stride_w + 1 * kernel_stride_y + 0 * kernel_stride_x);</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> ptr_k_r2 = reinterpret_cast&lt;const T1 *&gt;(k_ptr + 0 * kernel_stride_z + zoffset * kernel_stride_w + 2 * kernel_stride_y + 0 * kernel_stride_x);</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vk_r0    = <a class="code" href="namespacearm__compute_1_1detail.xhtml#afaba543670e99c2483e0bd1996201ba3">load_matrix_row</a>(ptr_k_r0);</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vk_r1    = <a class="code" href="namespacearm__compute_1_1detail.xhtml#afaba543670e99c2483e0bd1996201ba3">load_matrix_row</a>(ptr_k_r1);</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vk_r2    = <a class="code" href="namespacearm__compute_1_1detail.xhtml#afaba543670e99c2483e0bd1996201ba3">load_matrix_row</a>(ptr_k_r2);</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;                    <span class="keywordflow">for</span>(ih = 0, oh = 0; oh &lt; output_h; ++oh, ih += conv_stride_y)</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;                    {</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;                        <span class="keyword">auto</span> in_top = reinterpret_cast&lt;const T1 *&gt;(input_ptr + 0 * input_stride_z + (ih + 0) * input_stride_y);</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;                        <span class="keyword">auto</span> in_mid = reinterpret_cast&lt;const T1 *&gt;(input_ptr + 0 * input_stride_z + (ih + 1) * input_stride_y);</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;                        <span class="keyword">auto</span> in_low = reinterpret_cast&lt;const T1 *&gt;(input_ptr + 0 * input_stride_z + (ih + 2) * input_stride_y);</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;                        <span class="keyword">auto</span> p_out  = reinterpret_cast&lt;T2 *&gt;(p_out_base + oh * output_stride_y);</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;                        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> ow = 0; ow &lt; output_w; ow += num_elems_written_per_iteration,</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;                            in_top += delta_input, in_mid += delta_input, in_low += delta_input, p_out += num_elems_written_per_iteration)</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;                        {</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;                            <span class="keyword">auto</span> vres = <a class="code" href="namespacearm__compute_1_1detail.xhtml#a87f8e27c52a10ec90100fd5b0fcf663d">convolve_3x3</a>(in_top, in_mid, in_low, vk_r0, vk_r1, vk_r2, stridex);</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;                            store_results&lt;stridex&gt;(p_out, vres);</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;                        }</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;                    }</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;                }</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;                <span class="comment">// Step 2</span></div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;                <span class="keywordflow">for</span>(<span class="keywordtype">int</span> p = 1; p &lt; kernel_depth; ++p)</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;                {</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;                    <span class="keyword">const</span> uint8_t *ptr_k_base = k_ptr + p * kernel_stride_z + zoffset * kernel_stride_w;</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;                    <span class="keyword">const</span> uint8_t *input_base = input_ptr + p * input_stride_z;</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span>     ptr_k_r0   = reinterpret_cast&lt;const T1 *&gt;(ptr_k_base);</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span>     ptr_k_r1   = reinterpret_cast&lt;const T1 *&gt;(ptr_k_base + kernel_stride_y);</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span>     ptr_k_r2   = reinterpret_cast&lt;const T1 *&gt;(ptr_k_base + kernel_stride_y * 2);</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span>     vk_r0      = <a class="code" href="namespacearm__compute_1_1detail.xhtml#afaba543670e99c2483e0bd1996201ba3">load_matrix_row</a>(ptr_k_r0);</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span>     vk_r1      = <a class="code" href="namespacearm__compute_1_1detail.xhtml#afaba543670e99c2483e0bd1996201ba3">load_matrix_row</a>(ptr_k_r1);</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span>     vk_r2      = <a class="code" href="namespacearm__compute_1_1detail.xhtml#afaba543670e99c2483e0bd1996201ba3">load_matrix_row</a>(ptr_k_r2);</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;                    <span class="keywordflow">for</span>(ih = 0, oh = 0; oh &lt; output_h; ++oh, ih += conv_stride_y)</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;                    {</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;                        <span class="keyword">auto</span> in_top = reinterpret_cast&lt;const T1 *&gt;(input_base + (ih + 0) * input_stride_y);</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;                        <span class="keyword">auto</span> in_mid = reinterpret_cast&lt;const T1 *&gt;(input_base + (ih + 1) * input_stride_y);</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;                        <span class="keyword">auto</span> in_low = reinterpret_cast&lt;const T1 *&gt;(input_base + (ih + 2) * input_stride_y);</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;                        <span class="keyword">auto</span> p_out  = reinterpret_cast&lt;T2 *&gt;(p_out_base + oh * output_stride_y);</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;                        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> ow = 0; ow &lt; output_w; ow += num_elems_written_per_iteration,</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;                            in_top += delta_input, in_mid += delta_input, in_low += delta_input, p_out += num_elems_written_per_iteration)</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;                        {</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;                            <span class="keyword">auto</span> vres = <a class="code" href="namespacearm__compute_1_1detail.xhtml#a87f8e27c52a10ec90100fd5b0fcf663d">convolve_3x3</a>(in_top, in_mid, in_low, vk_r0, vk_r1, vk_r2, stridex);</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;                            accumulate_results&lt;stridex&gt;(p_out, vres);</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;                        }</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;                    }</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;                }</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;            }</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;        },</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;        in, out);</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;    }</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;};</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> str<span class="keywordtype">id</span>ex&gt;</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;<span class="keyword">class </span>convolver_5x5</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;{</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">void</span> convolve(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_elems_read_per_iteration, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_elems_written_per_iteration,</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;                         <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>)</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;    {</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;        <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(num_elems_read_per_iteration);</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          input_stride_x  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;strides_in_bytes().x();</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          input_stride_y  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;strides_in_bytes().y();</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          input_stride_z  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;strides_in_bytes().z();</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          output_stride_y = output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">strides_in_bytes</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#ac4a1050be02b20b3f791b9a483f3abe2">y</a>();</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          output_stride_z = output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">strides_in_bytes</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#abb29a685080e999c2a0cb874d2f7bb5a">z</a>();</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          kernel_stride_x = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a5f1ca9d674346287cae57a6c5b5c24ec">strides_in_bytes</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">x</a>();</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          kernel_stride_y = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a5f1ca9d674346287cae57a6c5b5c24ec">strides_in_bytes</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#ac4a1050be02b20b3f791b9a483f3abe2">y</a>();</div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          kernel_stride_z = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a5f1ca9d674346287cae57a6c5b5c24ec">strides_in_bytes</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#abb29a685080e999c2a0cb874d2f7bb5a">z</a>();</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          kernel_stride_w = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a5f1ca9d674346287cae57a6c5b5c24ec">strides_in_bytes</a>()[3];</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          output_w        = output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(0);</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          output_h        = output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(1);</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          num_planes_z    = window.<a class="code" href="classarm__compute_1_1_window.xhtml#a51a8c7a9d2fa20943c213e85eb8d9caf">z</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">end</a>() - window.<a class="code" href="classarm__compute_1_1_window.xhtml#a51a8c7a9d2fa20943c213e85eb8d9caf">z</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>();</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          delta_input     = <a class="code" href="namespacearm__compute_1_1detail.xhtml#ab8ad28c706dc842c9d532e04ed697f0d">get_input_num_elems_processed</a>(num_elems_written_per_iteration, stridex);</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          kernel_depth    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a8813441b655b97c00139c6a5a6390e97">dimension</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>);</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> conv_stride_y   = std::get&lt;1&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.stride());</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> conv_pad_left   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.pad_left();</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> conv_pad_top    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.pad_top();</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;        <span class="comment">// setup output window for the iterator</span></div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;        <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> window_out = window;</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;        window_out.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>), output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>)));</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;        window_out.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>), output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>)));</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;        window_out.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(window.<a class="code" href="classarm__compute_1_1_window.xhtml#a51a8c7a9d2fa20943c213e85eb8d9caf">z</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>(), window.<a class="code" href="classarm__compute_1_1_window.xhtml#a51a8c7a9d2fa20943c213e85eb8d9caf">z</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">end</a>(), num_planes_z));</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;        <span class="comment">// setup input window for the iterator</span></div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;        <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> window_in = window;</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;        <span class="comment">// we just want execute_window_loop to iterate over the higher dimensions (&gt;3), so we set the first 3 dimensions to 0</span></div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;        window_in.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 0, 0));</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;        window_in.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 0, 0));</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;        window_in.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 0, 0));</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;        <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> window_k = <a class="code" href="namespacearm__compute.xhtml#ab7980fa5ee693e3282a76da047a1c3b5">calculate_max_window</a>(*<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>(), <a class="code" href="classarm__compute_1_1_steps.xhtml">Steps</a>(1u));</div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> out(output, window_out);</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> in(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, window_in);</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> k(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, window_k);</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;</div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;        <span class="keyword">const</span> uint8_t *k_ptr = k.ptr();</div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;</div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(window_out, [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp; <span class="keywordtype">id</span>)</div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;        {</div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;            <span class="keyword">const</span> uint8_t *input_ptr = in.ptr() - conv_pad_left * input_stride_x - conv_pad_top * input_stride_y;</div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;            uint8_t       *out_ptr   = out.ptr();</div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;            <span class="keywordtype">int</span>            ih        = 0;</div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;            <span class="keywordtype">int</span>            oh        = 0;</div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> oz = 0; oz &lt; num_planes_z; ++oz)</div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;            {</div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> zoffset    = <span class="keywordtype">id</span>.z() + oz;</div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;                uint8_t *p_out_base = out_ptr + oz * output_stride_z;</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;                <span class="comment">// Step 1</span></div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;                {</div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> ptr_k_r0 = reinterpret_cast&lt;const T1 *&gt;(k_ptr + 0 * kernel_stride_z + zoffset * kernel_stride_w + 0 * kernel_stride_y + 0 * kernel_stride_x);</div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> ptr_k_r1 = reinterpret_cast&lt;const T1 *&gt;(k_ptr + 0 * kernel_stride_z + zoffset * kernel_stride_w + 1 * kernel_stride_y + 0 * kernel_stride_x);</div><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> ptr_k_r2 = reinterpret_cast&lt;const T1 *&gt;(k_ptr + 0 * kernel_stride_z + zoffset * kernel_stride_w + 2 * kernel_stride_y + 0 * kernel_stride_x);</div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> ptr_k_r3 = reinterpret_cast&lt;const T1 *&gt;(k_ptr + 0 * kernel_stride_z + zoffset * kernel_stride_w + 3 * kernel_stride_y + 0 * kernel_stride_x);</div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> ptr_k_r4 = reinterpret_cast&lt;const T1 *&gt;(k_ptr + 0 * kernel_stride_z + zoffset * kernel_stride_w + 4 * kernel_stride_y + 0 * kernel_stride_x);</div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;                    <span class="keywordflow">for</span>(ih = 0, oh = 0; oh &lt; output_h; ++oh, ih += conv_stride_y)</div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;                    {</div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;                        <span class="keyword">auto</span> in_0  = reinterpret_cast&lt;const T1 *&gt;(input_ptr + 0 * input_stride_z + (ih + 0) * input_stride_y);</div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;                        <span class="keyword">auto</span> in_1  = reinterpret_cast&lt;const T1 *&gt;(input_ptr + 0 * input_stride_z + (ih + 1) * input_stride_y);</div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;                        <span class="keyword">auto</span> in_2  = reinterpret_cast&lt;const T1 *&gt;(input_ptr + 0 * input_stride_z + (ih + 2) * input_stride_y);</div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;                        <span class="keyword">auto</span> in_3  = reinterpret_cast&lt;const T1 *&gt;(input_ptr + 0 * input_stride_z + (ih + 3) * input_stride_y);</div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;                        <span class="keyword">auto</span> in_4  = reinterpret_cast&lt;const T1 *&gt;(input_ptr + 0 * input_stride_z + (ih + 4) * input_stride_y);</div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;                        <span class="keyword">auto</span> p_out = reinterpret_cast&lt;T2 *&gt;(p_out_base + oh * output_stride_y);</div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;                        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> ow = 0; ow &lt; output_w; ow += num_elems_written_per_iteration,</div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;                            in_0 += delta_input, in_1 += delta_input, in_2 += delta_input, in_3 += delta_input, in_4 += delta_input, p_out += num_elems_written_per_iteration)</div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;                        {</div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;                            <span class="keyword">auto</span> vres = convolve_5x5&lt;stridex&gt;(in_0, in_1, in_2, in_3, in_4, ptr_k_r0, ptr_k_r1, ptr_k_r2, ptr_k_r3, ptr_k_r4);</div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;                            store_results&lt;stridex&gt;(p_out, vres);</div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;                        }</div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;                    }</div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;                }</div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;                <span class="comment">// Step 2</span></div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;                <span class="keywordflow">for</span>(<span class="keywordtype">int</span> p = 1; p &lt; kernel_depth; ++p)</div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;                {</div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> ptr_k_r0 = reinterpret_cast&lt;const T1 *&gt;(k_ptr + p * kernel_stride_z + zoffset * kernel_stride_w + 0 * kernel_stride_y + 0 * kernel_stride_x);</div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> ptr_k_r1 = reinterpret_cast&lt;const T1 *&gt;(k_ptr + p * kernel_stride_z + zoffset * kernel_stride_w + 1 * kernel_stride_y + 0 * kernel_stride_x);</div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> ptr_k_r2 = reinterpret_cast&lt;const T1 *&gt;(k_ptr + p * kernel_stride_z + zoffset * kernel_stride_w + 2 * kernel_stride_y + 0 * kernel_stride_x);</div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> ptr_k_r3 = reinterpret_cast&lt;const T1 *&gt;(k_ptr + p * kernel_stride_z + zoffset * kernel_stride_w + 3 * kernel_stride_y + 0 * kernel_stride_x);</div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> ptr_k_r4 = reinterpret_cast&lt;const T1 *&gt;(k_ptr + p * kernel_stride_z + zoffset * kernel_stride_w + 4 * kernel_stride_y + 0 * kernel_stride_x);</div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;</div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;                    <span class="keywordflow">for</span>(ih = 0, oh = 0; oh &lt; output_h; ++oh, ih += conv_stride_y)</div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;                    {</div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;                        <span class="keyword">auto</span> in_0  = reinterpret_cast&lt;const T1 *&gt;(input_ptr + p * input_stride_z + (ih + 0) * input_stride_y);</div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;                        <span class="keyword">auto</span> in_1  = reinterpret_cast&lt;const T1 *&gt;(input_ptr + p * input_stride_z + (ih + 1) * input_stride_y);</div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;                        <span class="keyword">auto</span> in_2  = reinterpret_cast&lt;const T1 *&gt;(input_ptr + p * input_stride_z + (ih + 2) * input_stride_y);</div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;                        <span class="keyword">auto</span> in_3  = reinterpret_cast&lt;const T1 *&gt;(input_ptr + p * input_stride_z + (ih + 3) * input_stride_y);</div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;                        <span class="keyword">auto</span> in_4  = reinterpret_cast&lt;const T1 *&gt;(input_ptr + p * input_stride_z + (ih + 4) * input_stride_y);</div><div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;                        <span class="keyword">auto</span> p_out = reinterpret_cast&lt;T2 *&gt;(p_out_base + oh * output_stride_y);</div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;                        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> ow = 0; ow &lt; output_w; ow += num_elems_written_per_iteration,</div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;                            in_0 += delta_input, in_1 += delta_input, in_2 += delta_input, in_3 += delta_input, in_4 += delta_input, p_out += num_elems_written_per_iteration)</div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;                        {</div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;                            <span class="keyword">auto</span> vres = convolve_5x5&lt;stridex&gt;(in_0, in_1, in_2, in_3, in_4, ptr_k_r0, ptr_k_r1, ptr_k_r2, ptr_k_r3, ptr_k_r4);</div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;                            accumulate_results&lt;stridex&gt;(p_out, vres);</div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;                        }</div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;                    }</div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;                }</div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;            }</div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;        },</div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;        in, out);</div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;    }</div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;};</div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;</div><div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> convolve_row1x9_nhwc(<span class="keyword">const</span> <span class="keywordtype">float</span> *row_ptr, <span class="keyword">const</span> <span class="keywordtype">float</span> *weights_ptr, <span class="keywordtype">size_t</span> src_stride_y, <span class="keywordtype">size_t</span> weights_stride_y,</div><div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;                                 float32x4_t &amp;acc0, float32x4_t &amp;acc1, float32x4_t &amp;acc2, float32x4_t &amp;acc3)</div><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;{</div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;    <span class="comment">// Load 4 channels for each of the 12 inputs values along the same X spatial dimension</span></div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;    <span class="keyword">const</span> float32x4_t src0  = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(row_ptr);</div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;    <span class="keyword">const</span> float32x4_t src1  = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(row_ptr + 1 * src_stride_y);</div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;    <span class="keyword">const</span> float32x4_t src2  = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(row_ptr + 2 * src_stride_y);</div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;    <span class="keyword">const</span> float32x4_t src3  = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(row_ptr + 3 * src_stride_y);</div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;    <span class="keyword">const</span> float32x4_t src4  = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(row_ptr + 4 * src_stride_y);</div><div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;    <span class="keyword">const</span> float32x4_t src5  = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(row_ptr + 5 * src_stride_y);</div><div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;    <span class="keyword">const</span> float32x4_t src6  = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(row_ptr + 6 * src_stride_y);</div><div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;    <span class="keyword">const</span> float32x4_t src7  = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(row_ptr + 7 * src_stride_y);</div><div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;    <span class="keyword">const</span> float32x4_t src8  = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(row_ptr + 8 * src_stride_y);</div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;    <span class="keyword">const</span> float32x4_t src9  = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(row_ptr + 9 * src_stride_y);</div><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;    <span class="keyword">const</span> float32x4_t src10 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(row_ptr + 10 * src_stride_y);</div><div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;    <span class="keyword">const</span> float32x4_t src11 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(row_ptr + 11 * src_stride_y);</div><div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;</div><div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;    <span class="comment">// Load 4 channels for each of the 9 weights values along the same X spatial dimension</span></div><div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;    <span class="keyword">const</span> float32x4_t w0 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(weights_ptr);</div><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;    <span class="keyword">const</span> float32x4_t w1 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(weights_ptr + 1 * weights_stride_y);</div><div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;    <span class="keyword">const</span> float32x4_t w2 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(weights_ptr + 2 * weights_stride_y);</div><div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;    <span class="keyword">const</span> float32x4_t w3 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(weights_ptr + 3 * weights_stride_y);</div><div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;    <span class="keyword">const</span> float32x4_t w4 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(weights_ptr + 4 * weights_stride_y);</div><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;    <span class="keyword">const</span> float32x4_t w5 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(weights_ptr + 5 * weights_stride_y);</div><div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;    <span class="keyword">const</span> float32x4_t w6 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(weights_ptr + 6 * weights_stride_y);</div><div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;    <span class="keyword">const</span> float32x4_t w7 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(weights_ptr + 7 * weights_stride_y);</div><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;    <span class="keyword">const</span> float32x4_t w8 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(weights_ptr + 8 * weights_stride_y);</div><div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;</div><div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;    <span class="comment">// Store 4 channels for each of the 4 output values along the same X spatial dimension</span></div><div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;    acc0 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(acc0, w0, src0);</div><div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;    acc0 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(acc0, w1, src1);</div><div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;    acc0 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(acc0, w2, src2);</div><div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;    acc0 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(acc0, w3, src3);</div><div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;    acc0 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(acc0, w4, src4);</div><div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;    acc0 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(acc0, w5, src5);</div><div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;    acc0 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(acc0, w6, src6);</div><div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;    acc0 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(acc0, w7, src7);</div><div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;    acc0 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(acc0, w8, src8);</div><div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;</div><div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;    acc1 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(acc1, w0, src1);</div><div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;    acc1 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(acc1, w1, src2);</div><div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;    acc1 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(acc1, w2, src3);</div><div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;    acc1 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(acc1, w3, src4);</div><div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;    acc1 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(acc1, w4, src5);</div><div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;    acc1 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(acc1, w5, src6);</div><div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;    acc1 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(acc1, w6, src7);</div><div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;    acc1 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(acc1, w7, src8);</div><div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;    acc1 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(acc1, w8, src9);</div><div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;</div><div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;    acc2 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(acc2, w0, src2);</div><div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;    acc2 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(acc2, w1, src3);</div><div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;    acc2 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(acc2, w2, src4);</div><div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;    acc2 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(acc2, w3, src5);</div><div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;    acc2 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(acc2, w4, src6);</div><div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;    acc2 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(acc2, w5, src7);</div><div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;    acc2 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(acc2, w6, src8);</div><div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;    acc2 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(acc2, w7, src9);</div><div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;    acc2 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(acc2, w8, src10);</div><div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;</div><div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;    acc3 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(acc3, w0, src3);</div><div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;    acc3 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(acc3, w1, src4);</div><div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;    acc3 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(acc3, w2, src5);</div><div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;    acc3 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(acc3, w3, src6);</div><div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;    acc3 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(acc3, w4, src7);</div><div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;    acc3 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(acc3, w5, src8);</div><div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;    acc3 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(acc3, w6, src9);</div><div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;    acc3 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(acc3, w7, src10);</div><div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;    acc3 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(acc3, w8, src11);</div><div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;}</div><div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;</div><div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;<span class="keywordtype">float</span> vreduce(<span class="keyword">const</span> float32x4_t &amp;v)</div><div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;{</div><div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;    <span class="keyword">auto</span> v0    = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(v);</div><div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;    <span class="keyword">auto</span> v1    = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(v);</div><div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;    <span class="keyword">auto</span> v_out = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(v0, v1);</div><div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;</div><div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;    <span class="keywordtype">float</span> a = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">wrapper::vgetlane</a>(v_out, 0);</div><div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;    <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">wrapper::vgetlane</a>(v_out, 1);</div><div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;    <span class="keywordflow">return</span> a + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>;</div><div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;}</div><div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;</div><div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> V&gt;</div><div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;<span class="keyword">class </span>convolver_9x9_nhwc</div><div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;{</div><div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">void</span> convolve(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_elems_read_per_iteration,</div><div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;                         <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>)</div><div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;    {</div><div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;        <span class="comment">// Declare useful types</span></div><div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;        <span class="keyword">using</span> vector_type = <span class="keyword">typename</span> <a class="code" href="namespace_gemm_tuner.xhtml#a7aead736a07eaf25623ad7bfa1f0ee2d">V::type</a>;</div><div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;        <span class="keyword">using</span> scalar_type = <span class="keyword">typename</span> V::scalar_type;</div><div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;        <span class="keyword">using</span> tag_type    = <span class="keyword">typename</span> V::tag_type;</div><div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;</div><div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;        <span class="comment">// Scalar quantities</span></div><div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          element_size    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;element_size();</div><div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          input_width     = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;dimension(0);</div><div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          input_depth     = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;dimension(2);</div><div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          input_stride_y  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;strides_in_bytes().y() / element_size;</div><div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          input_stride_z  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;strides_in_bytes().z() / element_size;</div><div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          input_stride_w  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;strides_in_bytes()[3];</div><div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          output_stride_x = output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">strides_in_bytes</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">x</a>();</div><div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          output_stride_y = output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">strides_in_bytes</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#ac4a1050be02b20b3f791b9a483f3abe2">y</a>();</div><div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          kernel_stride_y = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a5f1ca9d674346287cae57a6c5b5c24ec">strides_in_bytes</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#ac4a1050be02b20b3f791b9a483f3abe2">y</a>() / element_size;</div><div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>          kernel_stride_z = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a5f1ca9d674346287cae57a6c5b5c24ec">strides_in_bytes</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#abb29a685080e999c2a0cb874d2f7bb5a">z</a>() / element_size;</div><div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> conv_stride_y   = std::get&lt;1&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.stride());</div><div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> conv_pad_top    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.pad_top();</div><div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> conv_pad_left   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.pad_left();</div><div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;</div><div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;        <span class="comment">// Setup input window for the input iterator</span></div><div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;        <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> window_in = window;</div><div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;        window_in.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 0, 0));</div><div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;        window_in.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 0, 0));</div><div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;        window_in.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 0, 0));</div><div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;</div><div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;        <span class="comment">// Setup input window for the output iterator</span></div><div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;        <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> window_out = window;</div><div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;        window_out.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 1, 1));</div><div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;</div><div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;        <span class="comment">// Setup input window for the weights iterator</span></div><div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;        <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> window_k = <a class="code" href="namespacearm__compute.xhtml#ab7980fa5ee693e3282a76da047a1c3b5">calculate_max_window</a>(*<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>(), <a class="code" href="classarm__compute_1_1_steps.xhtml">Steps</a>());</div><div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;        window_k.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 1, 1));</div><div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;        window_k.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 1, 1));</div><div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;        window_k.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 1, 1));</div><div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;        window_k.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(3, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a8813441b655b97c00139c6a5a6390e97">dimension</a>(3), 1));</div><div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;</div><div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> in(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, window_in);</div><div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> out(output, window_out);</div><div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> k(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, window_k);</div><div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;</div><div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;        <span class="comment">// Calculate the max_offset.</span></div><div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;        <span class="comment">// max_offset is the offset for the last NOT valid value in the Z dimension (spatial dimension Y for NHWC)</span></div><div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;        <span class="comment">//  |******************|</span></div><div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;        <span class="comment">//  |     pad_top      |</span></div><div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;        <span class="comment">//  |******************|</span></div><div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;        <span class="comment">//  |                  |</span></div><div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;        <span class="comment">//  |      plane0      |</span></div><div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;        <span class="comment">//  |      batch0      |</span></div><div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;        <span class="comment">//  |__________________|</span></div><div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;        <span class="comment">//  |******************|       Batch 0</span></div><div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;        <span class="comment">//  |    pad_bottom    |</span></div><div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;        <span class="comment">//  |     pad_top      |</span></div><div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;        <span class="comment">//  |******************|</span></div><div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;        <span class="comment">//  |                  |</span></div><div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;        <span class="comment">//  |      plane1      |</span></div><div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;        <span class="comment">//  |      batch0      |</span></div><div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;        <span class="comment">//  |__________________|-----&gt; max_offset</span></div><div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;        <span class="comment">//  |******************|</span></div><div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;        <span class="comment">//  |    pad_bottom    |</span></div><div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;        <span class="comment">//  |     pad_top      |</span></div><div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;        <span class="comment">//  |******************|</span></div><div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;        <span class="comment">//  |                  |</span></div><div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;        <span class="comment">//  |      plane0      |</span></div><div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;        <span class="comment">//  |      batch1      |</span></div><div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;        <span class="comment">//  |__________________|</span></div><div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;        <span class="comment">//  |******************|       Batch 1</span></div><div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;        <span class="comment">//  |    pad_bottom    |</span></div><div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;        <span class="comment">//  |     pad_top      |</span></div><div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;        <span class="comment">//  |******************|</span></div><div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;        <span class="comment">//  |                  |</span></div><div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;        <span class="comment">//  |      plane1      |</span></div><div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;        <span class="comment">//  |      batch1      |</span></div><div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;        <span class="comment">//  |__________________|</span></div><div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;        <span class="comment">//  |     pad_bottom   |</span></div><div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;        <span class="comment">//  |******************|</span></div><div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> max_offset = input_stride_z * input_depth - (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;padding().bottom + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;padding().top) * input_stride_y;</div><div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(window_k, [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp; id_k) <span class="comment">// loop on the batch size</span></div><div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;        {</div><div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;</div><div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;            <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(window_out, [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp; <span class="keywordtype">id</span>)</div><div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;            {</div><div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> y_offset = int(<span class="keywordtype">id</span>.y() - conv_pad_left) * input_stride_y;</div><div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;</div><div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;                <span class="comment">// Buffer pointers</span></div><div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;                <span class="keyword">const</span> scalar_type *in_ptr      = reinterpret_cast&lt;scalar_type *&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;buffer() + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;offset_first_element_in_bytes() + <span class="keywordtype">id</span>[3] * input_stride_w);</div><div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;                <span class="keyword">const</span> scalar_type *weights_ptr = reinterpret_cast&lt;scalar_type *&gt;(k.ptr());</div><div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;                uint8_t           *out_ptr     = out.ptr() + id_k[3] * output_stride_x;</div><div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;</div><div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;                <span class="comment">// Output elements</span></div><div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;                vector_type out0 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(scalar_type(0), tag_type());</div><div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;                vector_type out1 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(scalar_type(0), tag_type());</div><div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;                vector_type out2 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(scalar_type(0), tag_type());</div><div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;                vector_type out3 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(scalar_type(0), tag_type());</div><div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;</div><div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;                <span class="comment">// Reduce along the feature maps</span></div><div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;                <span class="keywordflow">for</span>(<span class="keywordtype">int</span> x = 0; x &lt; input_width; x += num_elems_read_per_iteration)</div><div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;                {</div><div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;                    <span class="comment">// z == 0</span></div><div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;                    <span class="keyword">auto</span> in_z   = static_cast&lt;int&gt;(<span class="keywordtype">id</span>.z() * conv_stride_y - conv_pad_top);</div><div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;                    in_z        = std::min(static_cast&lt;unsigned int&gt;(in_z), static_cast&lt;unsigned int&gt;(input_depth));</div><div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;                    <span class="keyword">auto</span> <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> = y_offset + in_z * input_stride_z;</div><div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;                    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>      = std::min(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, max_offset);</div><div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;                    convolve_row1x9_nhwc(in_ptr + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> + x, weights_ptr + 0 * kernel_stride_z + x, input_stride_y, kernel_stride_y, out0, out1, out2, out3);</div><div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;</div><div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;                    <span class="comment">// z == 1</span></div><div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;                    in_z   = static_cast&lt;int&gt;(<span class="keywordtype">id</span>.z() * conv_stride_y - conv_pad_top + 1);</div><div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;                    in_z   = std::min(static_cast&lt;unsigned int&gt;(in_z), static_cast&lt;unsigned int&gt;(input_depth));</div><div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;                    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> = y_offset + in_z * input_stride_z;</div><div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;                    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> = std::min(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, max_offset);</div><div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;                    convolve_row1x9_nhwc(in_ptr + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> + x, weights_ptr + 1 * kernel_stride_z + x, input_stride_y, kernel_stride_y, out0, out1, out2, out3);</div><div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;</div><div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;                    <span class="comment">// z == 2</span></div><div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;                    in_z   = static_cast&lt;int&gt;(<span class="keywordtype">id</span>.z() * conv_stride_y - conv_pad_top + 2);</div><div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;                    in_z   = std::min(static_cast&lt;unsigned int&gt;(in_z), static_cast&lt;unsigned int&gt;(input_depth));</div><div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;                    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> = y_offset + in_z * input_stride_z;</div><div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;                    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> = std::min(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, max_offset);</div><div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;                    convolve_row1x9_nhwc(in_ptr + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> + x, weights_ptr + 2 * kernel_stride_z + x, input_stride_y, kernel_stride_y, out0, out1, out2, out3);</div><div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;</div><div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;                    <span class="comment">// z == 3</span></div><div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;                    in_z   = static_cast&lt;int&gt;(<span class="keywordtype">id</span>.z() * conv_stride_y - conv_pad_top + 3);</div><div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;                    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> = y_offset + in_z * input_stride_z;</div><div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;                    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> = std::min(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, max_offset);</div><div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160;                    convolve_row1x9_nhwc(in_ptr + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> + x, weights_ptr + 3 * kernel_stride_z + x, input_stride_y, kernel_stride_y, out0, out1, out2, out3);</div><div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160;</div><div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;                    <span class="comment">// z == 4</span></div><div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;                    in_z   = static_cast&lt;int&gt;(<span class="keywordtype">id</span>.z() * conv_stride_y - conv_pad_top + 4);</div><div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;                    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> = y_offset + in_z * input_stride_z;</div><div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;                    convolve_row1x9_nhwc(in_ptr + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> + x, weights_ptr + 4 * kernel_stride_z + x, input_stride_y, kernel_stride_y, out0, out1, out2, out3);</div><div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;</div><div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;                    <span class="comment">// z == 5</span></div><div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;                    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> += input_stride_z;</div><div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;                    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> = std::min(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, max_offset);</div><div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;                    convolve_row1x9_nhwc(in_ptr + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> + x, weights_ptr + 5 * kernel_stride_z + x, input_stride_y, kernel_stride_y, out0, out1, out2, out3);</div><div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;</div><div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;                    <span class="comment">// z == 6</span></div><div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;                    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> += input_stride_z;</div><div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;                    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> = std::min(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, max_offset);</div><div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;                    convolve_row1x9_nhwc(in_ptr + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> + x, weights_ptr + 6 * kernel_stride_z + x, input_stride_y, kernel_stride_y, out0, out1, out2, out3);</div><div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;</div><div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;                    <span class="comment">// z == 7</span></div><div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;                    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> += input_stride_z;</div><div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;                    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> = std::min(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, max_offset);</div><div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;                    convolve_row1x9_nhwc(in_ptr + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> + x, weights_ptr + 7 * kernel_stride_z + x, input_stride_y, kernel_stride_y, out0, out1, out2, out3);</div><div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;</div><div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;                    <span class="comment">// z == 8</span></div><div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;                    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> += input_stride_z;</div><div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;                    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> = std::min(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, max_offset);</div><div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;                    convolve_row1x9_nhwc(in_ptr + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> + x, weights_ptr + 8 * kernel_stride_z + x, input_stride_y, kernel_stride_y, out0, out1, out2, out3);</div><div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;                }</div><div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;</div><div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;                *(reinterpret_cast&lt;scalar_type *&gt;(out_ptr + 0 * output_stride_y)) = vreduce(out0);</div><div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;                *(reinterpret_cast&lt;scalar_type *&gt;(out_ptr + 1 * output_stride_y)) = vreduce(out1);</div><div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;                *(reinterpret_cast&lt;scalar_type *&gt;(out_ptr + 2 * output_stride_y)) = vreduce(out2);</div><div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;                *(reinterpret_cast&lt;scalar_type *&gt;(out_ptr + 3 * output_stride_y)) = vreduce(out3);</div><div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;            },</div><div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;            in, out);</div><div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;        },</div><div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;        k);</div><div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;    }</div><div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;};</div><div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;</div><div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;</div><div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> convolve_1x1(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_elems_read_per_iteration, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_elems_written_per_iteration,</div><div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;                         <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>)</div><div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;{</div><div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> conv_stride_x = std::get&lt;0&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.stride());</div><div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;    <span class="keywordflow">switch</span>(conv_stride_x)</div><div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;    {</div><div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160;        <span class="keywordflow">case</span> 1:</div><div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;            convolver_1x1&lt;T1, T2, 1&gt;::convolve(window, num_elems_read_per_iteration, num_elems_written_per_iteration, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>);</div><div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;        <span class="keywordflow">case</span> 2:</div><div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;            convolver_1x1&lt;T1, T2, 2&gt;::convolve(window, num_elems_read_per_iteration, num_elems_written_per_iteration, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>);</div><div class="line"><a name="l01130"></a><span class="lineno"> 1130</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;        <span class="keywordflow">case</span> 3:</div><div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;            convolver_1x1&lt;T1, T2, 3&gt;::convolve(window, num_elems_read_per_iteration, num_elems_written_per_iteration, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>);</div><div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l01135"></a><span class="lineno"> 1135</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Not implemented&quot;</span>);</div><div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;    }</div><div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;}</div><div class="line"><a name="l01138"></a><span class="lineno"> 1138</span>&#160;</div><div class="line"><a name="l01139"></a><span class="lineno"> 1139</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l01140"></a><span class="lineno"> 1140</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> convolve_1x1&lt;float, float&gt;(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_elems_read_per_iteration, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_elems_written_per_iteration,</div><div class="line"><a name="l01141"></a><span class="lineno"> 1141</span>&#160;                                       <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>)</div><div class="line"><a name="l01142"></a><span class="lineno"> 1142</span>&#160;{</div><div class="line"><a name="l01143"></a><span class="lineno"> 1143</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> conv_stride_x = std::get&lt;0&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.stride());</div><div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160;    <span class="keywordflow">if</span>(run_optim_small_tensor(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>))</div><div class="line"><a name="l01145"></a><span class="lineno"> 1145</span>&#160;    {</div><div class="line"><a name="l01146"></a><span class="lineno"> 1146</span>&#160;        <span class="keywordflow">switch</span>(conv_stride_x)</div><div class="line"><a name="l01147"></a><span class="lineno"> 1147</span>&#160;        {</div><div class="line"><a name="l01148"></a><span class="lineno"> 1148</span>&#160;            <span class="keywordflow">case</span> 1:</div><div class="line"><a name="l01149"></a><span class="lineno"> 1149</span>&#160;                convolver_w1x1_i8x8_f32&lt;1&gt;::convolve(window, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>);</div><div class="line"><a name="l01150"></a><span class="lineno"> 1150</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l01151"></a><span class="lineno"> 1151</span>&#160;            <span class="keywordflow">case</span> 2:</div><div class="line"><a name="l01152"></a><span class="lineno"> 1152</span>&#160;                convolver_w1x1_i8x8_f32&lt;2&gt;::convolve(window, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>);</div><div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l01154"></a><span class="lineno"> 1154</span>&#160;            <span class="keywordflow">case</span> 3:</div><div class="line"><a name="l01155"></a><span class="lineno"> 1155</span>&#160;                convolver_w1x1_i8x8_f32&lt;3&gt;::convolve(window, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>);</div><div class="line"><a name="l01156"></a><span class="lineno"> 1156</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l01157"></a><span class="lineno"> 1157</span>&#160;            <span class="keywordflow">default</span>:</div><div class="line"><a name="l01158"></a><span class="lineno"> 1158</span>&#160;                <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Not implemented&quot;</span>);</div><div class="line"><a name="l01159"></a><span class="lineno"> 1159</span>&#160;        }</div><div class="line"><a name="l01160"></a><span class="lineno"> 1160</span>&#160;    }</div><div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l01162"></a><span class="lineno"> 1162</span>&#160;    {</div><div class="line"><a name="l01163"></a><span class="lineno"> 1163</span>&#160;        <span class="keywordflow">switch</span>(conv_stride_x)</div><div class="line"><a name="l01164"></a><span class="lineno"> 1164</span>&#160;        {</div><div class="line"><a name="l01165"></a><span class="lineno"> 1165</span>&#160;            <span class="keywordflow">case</span> 1:</div><div class="line"><a name="l01166"></a><span class="lineno"> 1166</span>&#160;                convolver_1x1&lt;float, float, 1&gt;::convolve(window, num_elems_read_per_iteration, num_elems_written_per_iteration, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>);</div><div class="line"><a name="l01167"></a><span class="lineno"> 1167</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l01168"></a><span class="lineno"> 1168</span>&#160;            <span class="keywordflow">case</span> 2:</div><div class="line"><a name="l01169"></a><span class="lineno"> 1169</span>&#160;                convolver_1x1&lt;float, float, 2&gt;::convolve(window, num_elems_read_per_iteration, num_elems_written_per_iteration, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>);</div><div class="line"><a name="l01170"></a><span class="lineno"> 1170</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;            <span class="keywordflow">case</span> 3:</div><div class="line"><a name="l01172"></a><span class="lineno"> 1172</span>&#160;                convolver_1x1&lt;float, float, 3&gt;::convolve(window, num_elems_read_per_iteration, num_elems_written_per_iteration, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>);</div><div class="line"><a name="l01173"></a><span class="lineno"> 1173</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l01174"></a><span class="lineno"> 1174</span>&#160;            <span class="keywordflow">default</span>:</div><div class="line"><a name="l01175"></a><span class="lineno"> 1175</span>&#160;                <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Not implemented&quot;</span>);</div><div class="line"><a name="l01176"></a><span class="lineno"> 1176</span>&#160;        }</div><div class="line"><a name="l01177"></a><span class="lineno"> 1177</span>&#160;    }</div><div class="line"><a name="l01178"></a><span class="lineno"> 1178</span>&#160;}</div><div class="line"><a name="l01179"></a><span class="lineno"> 1179</span>&#160;</div><div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;</div><div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#a87f8e27c52a10ec90100fd5b0fcf663d">convolve_3x3</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_elems_read_per_iteration, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_elems_written_per_iteration,</div><div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;                         <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>)</div><div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;{</div><div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> conv_stride_x = std::get&lt;0&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.stride());</div><div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;    <span class="keywordflow">switch</span>(conv_stride_x)</div><div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;    {</div><div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;        <span class="keywordflow">case</span> 1:</div><div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160;            convolver_3x3&lt;T1, T2, 1&gt;::convolve(window, num_elems_read_per_iteration, num_elems_written_per_iteration, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>);</div><div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;        <span class="keywordflow">case</span> 2:</div><div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160;            convolver_3x3&lt;T1, T2, 2&gt;::convolve(window, num_elems_read_per_iteration, num_elems_written_per_iteration, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>);</div><div class="line"><a name="l01192"></a><span class="lineno"> 1192</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160;        <span class="keywordflow">case</span> 3:</div><div class="line"><a name="l01194"></a><span class="lineno"> 1194</span>&#160;            convolver_3x3&lt;T1, T2, 3&gt;::convolve(window, num_elems_read_per_iteration, num_elems_written_per_iteration, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>);</div><div class="line"><a name="l01195"></a><span class="lineno"> 1195</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01196"></a><span class="lineno"> 1196</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l01197"></a><span class="lineno"> 1197</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Not implemented&quot;</span>);</div><div class="line"><a name="l01198"></a><span class="lineno"> 1198</span>&#160;    }</div><div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160;}</div><div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;</div><div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;</div><div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> convolve_5x5(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_elems_read_per_iteration, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_elems_written_per_iteration,</div><div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160;                         <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>)</div><div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160;{</div><div class="line"><a name="l01205"></a><span class="lineno"> 1205</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> conv_stride_x = std::get&lt;0&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.stride());</div><div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160;    <span class="keywordflow">switch</span>(conv_stride_x)</div><div class="line"><a name="l01207"></a><span class="lineno"> 1207</span>&#160;    {</div><div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;        <span class="keywordflow">case</span> 1:</div><div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;            convolver_5x5&lt;T1, T2, 1&gt;::convolve(window, num_elems_read_per_iteration, num_elems_written_per_iteration, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>);</div><div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;        <span class="keywordflow">case</span> 2:</div><div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160;            convolver_5x5&lt;T1, T2, 2&gt;::convolve(window, num_elems_read_per_iteration, num_elems_written_per_iteration, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>);</div><div class="line"><a name="l01213"></a><span class="lineno"> 1213</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01214"></a><span class="lineno"> 1214</span>&#160;        <span class="keywordflow">case</span> 3:</div><div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160;            convolver_5x5&lt;T1, T2, 3&gt;::convolve(window, num_elems_read_per_iteration, num_elems_written_per_iteration, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>);</div><div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Not implemented&quot;</span>);</div><div class="line"><a name="l01219"></a><span class="lineno"> 1219</span>&#160;    }</div><div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160;}</div><div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;</div><div class="line"><a name="l01222"></a><span class="lineno"> 1222</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> V&gt;</div><div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> convolve_9x9_nhwc(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_elems_read_per_iteration,</div><div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160;                              <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>)</div><div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160;{</div><div class="line"><a name="l01226"></a><span class="lineno"> 1226</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> conv_stride_x = std::get&lt;0&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.stride());</div><div class="line"><a name="l01227"></a><span class="lineno"> 1227</span>&#160;    <span class="keywordflow">switch</span>(conv_stride_x)</div><div class="line"><a name="l01228"></a><span class="lineno"> 1228</span>&#160;    {</div><div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;        <span class="keywordflow">case</span> 1:</div><div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;            convolver_9x9_nhwc&lt;V&gt;::convolve(window, num_elems_read_per_iteration, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>);</div><div class="line"><a name="l01231"></a><span class="lineno"> 1231</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Not implemented&quot;</span>);</div><div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160;    }</div><div class="line"><a name="l01235"></a><span class="lineno"> 1235</span>&#160;}</div><div class="line"><a name="l01236"></a><span class="lineno"> 1236</span>&#160;</div><div class="line"><a name="l01237"></a><span class="lineno"> 1237</span>&#160;<a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> validate_arguments(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *output, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>)</div><div class="line"><a name="l01238"></a><span class="lineno"> 1238</span>&#160;{</div><div class="line"><a name="l01239"></a><span class="lineno"> 1239</span>&#160;    <a class="code" href="_validate_8h.xhtml#aff911654521523937ff24372a870b89f">ARM_COMPUTE_RETURN_ERROR_ON_NULLPTR</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, output);</div><div class="line"><a name="l01240"></a><span class="lineno"> 1240</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;data_layout() == <a class="code" href="namespacearm__compute.xhtml#a3a440b3893fa10608d4428958be1c52ea696b031073e74bf2cb98e5ef201d4aa3">DataLayout::UNKNOWN</a>);</div><div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;    <a class="code" href="_c_p_p_2_validate_8h.xhtml#ad2633f3560322e1f8d926949dec1b730">ARM_COMPUTE_RETURN_ERROR_ON_CPU_F16_UNSUPPORTED</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>);</div><div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;    <a class="code" href="_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">DataType::F16</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>);</div><div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160;    <a class="code" href="_validate_8h.xhtml#a8f3ff7da485ff7e75dab07baadf5b4bd">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_TYPES</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>);</div><div class="line"><a name="l01244"></a><span class="lineno"> 1244</span>&#160;</div><div class="line"><a name="l01245"></a><span class="lineno"> 1245</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a> = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;data_layout();</div><div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        width_idx   = <a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a>, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">DataLayoutDimension::WIDTH</a>);</div><div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        height_idx  = <a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a>, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">DataLayoutDimension::HEIGHT</a>);</div><div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        channel_idx = <a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a>, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">DataLayoutDimension::CHANNEL</a>);</div><div class="line"><a name="l01249"></a><span class="lineno"> 1249</span>&#160;</div><div class="line"><a name="l01250"></a><span class="lineno"> 1250</span>&#160;    <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(std::get&lt;0&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.stride()) &gt; 3, <span class="stringliteral">&quot;Strides larger than 3 not supported.&quot;</span>);</div><div class="line"><a name="l01251"></a><span class="lineno"> 1251</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;dimension(channel_idx) != <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;dimension(channel_idx));</div><div class="line"><a name="l01252"></a><span class="lineno"> 1252</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;dimension(width_idx) != <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;dimension(height_idx));</div><div class="line"><a name="l01253"></a><span class="lineno"> 1253</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;num_dimensions() &gt; 4);</div><div class="line"><a name="l01254"></a><span class="lineno"> 1254</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a> == <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a> &amp;&amp; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;data_type() != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>);</div><div class="line"><a name="l01255"></a><span class="lineno"> 1255</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>((<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;dimension(width_idx) &gt; 3) &amp;&amp; (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;data_type() == <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">DataType::F16</a>));</div><div class="line"><a name="l01256"></a><span class="lineno"> 1256</span>&#160;</div><div class="line"><a name="l01257"></a><span class="lineno"> 1257</span>&#160;    <span class="comment">// Checks performed when output is configured</span></div><div class="line"><a name="l01258"></a><span class="lineno"> 1258</span>&#160;    <span class="keywordflow">if</span>(output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a18064e0011c3869d884653e9e7c47b66">total_size</a>() != 0)</div><div class="line"><a name="l01259"></a><span class="lineno"> 1259</span>&#160;    {</div><div class="line"><a name="l01260"></a><span class="lineno"> 1260</span>&#160;        <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab1806bf0c5a41f674fb9d2dc6af644f5">output_shape</a> = <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a5d320d308c16b8ddda3c9d3f60fad79c">misc::shape_calculator::compute_deep_convolution_shape</a>(*<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>);</div><div class="line"><a name="l01261"></a><span class="lineno"> 1261</span>&#160;</div><div class="line"><a name="l01262"></a><span class="lineno"> 1262</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a> = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;data_type();</div><div class="line"><a name="l01263"></a><span class="lineno"> 1263</span>&#160;</div><div class="line"><a name="l01264"></a><span class="lineno"> 1264</span>&#160;        <a class="code" href="_validate_8h.xhtml#a1da797d2762c1cdbb73bfc83136c3a38">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DIMENSIONS</a>(output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab1806bf0c5a41f674fb9d2dc6af644f5">output_shape</a>);</div><div class="line"><a name="l01265"></a><span class="lineno"> 1265</span>&#160;        <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>() != <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>);</div><div class="line"><a name="l01266"></a><span class="lineno"> 1266</span>&#160;    }</div><div class="line"><a name="l01267"></a><span class="lineno"> 1267</span>&#160;</div><div class="line"><a name="l01268"></a><span class="lineno"> 1268</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a>{};</div><div class="line"><a name="l01269"></a><span class="lineno"> 1269</span>&#160;}</div><div class="line"><a name="l01270"></a><span class="lineno"> 1270</span>&#160;</div><div class="line"><a name="l01271"></a><span class="lineno"> 1271</span>&#160;std::pair&lt;Status, Window&gt; validate_and_configure_window(<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *output, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> &amp;num_weight_elems_read_per_row,</div><div class="line"><a name="l01272"></a><span class="lineno"> 1272</span>&#160;                                                        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> &amp;num_elems_read_per_iteration, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> &amp;num_elems_written_per_iteration, <a class="code" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a> &amp;border_size)</div><div class="line"><a name="l01273"></a><span class="lineno"> 1273</span>&#160;{</div><div class="line"><a name="l01274"></a><span class="lineno"> 1274</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;data_layout() == <a class="code" href="namespacearm__compute.xhtml#a3a440b3893fa10608d4428958be1c52ea696b031073e74bf2cb98e5ef201d4aa3">DataLayout::UNKNOWN</a>);</div><div class="line"><a name="l01275"></a><span class="lineno"> 1275</span>&#160;</div><div class="line"><a name="l01276"></a><span class="lineno"> 1276</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a> = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;data_layout();</div><div class="line"><a name="l01277"></a><span class="lineno"> 1277</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        width_idx   = <a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a>, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">DataLayoutDimension::WIDTH</a>);</div><div class="line"><a name="l01278"></a><span class="lineno"> 1278</span>&#160;</div><div class="line"><a name="l01279"></a><span class="lineno"> 1279</span>&#160;    <span class="comment">// Calculate right and bottom border</span></div><div class="line"><a name="l01280"></a><span class="lineno"> 1280</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kernel_size   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;dimension(width_idx);</div><div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>    conv_stride_x = std::get&lt;0&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.stride());</div><div class="line"><a name="l01282"></a><span class="lineno"> 1282</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>    conv_stride_y = std::get&lt;1&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.stride());</div><div class="line"><a name="l01283"></a><span class="lineno"> 1283</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>    input_width   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;dimension(width_idx);</div><div class="line"><a name="l01284"></a><span class="lineno"> 1284</span>&#160;</div><div class="line"><a name="l01285"></a><span class="lineno"> 1285</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> win{};</div><div class="line"><a name="l01286"></a><span class="lineno"> 1286</span>&#160;    <span class="keywordtype">bool</span>   window_changed = <span class="keyword">false</span>;</div><div class="line"><a name="l01287"></a><span class="lineno"> 1287</span>&#160;</div><div class="line"><a name="l01288"></a><span class="lineno"> 1288</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a> == <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>)</div><div class="line"><a name="l01289"></a><span class="lineno"> 1289</span>&#160;    {</div><div class="line"><a name="l01290"></a><span class="lineno"> 1290</span>&#160;        <span class="keywordflow">switch</span>(kernel_size)</div><div class="line"><a name="l01291"></a><span class="lineno"> 1291</span>&#160;        {</div><div class="line"><a name="l01292"></a><span class="lineno"> 1292</span>&#160;            <span class="keywordflow">case</span> 1:</div><div class="line"><a name="l01293"></a><span class="lineno"> 1293</span>&#160;            {</div><div class="line"><a name="l01294"></a><span class="lineno"> 1294</span>&#160;                <span class="keywordflow">switch</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;data_type())</div><div class="line"><a name="l01295"></a><span class="lineno"> 1295</span>&#160;                {</div><div class="line"><a name="l01296"></a><span class="lineno"> 1296</span>&#160;<span class="preprocessor">#ifdef __ARM_FEATURE_FP16_VECTOR_ARITHMETIC</span></div><div class="line"><a name="l01297"></a><span class="lineno"> 1297</span>&#160;                    <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">DataType::F16</a>:</div><div class="line"><a name="l01298"></a><span class="lineno"> 1298</span>&#160;                        num_elems_written_per_iteration = 8;</div><div class="line"><a name="l01299"></a><span class="lineno"> 1299</span>&#160;                        <span class="keywordflow">break</span>;</div><div class="line"><a name="l01300"></a><span class="lineno"> 1300</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* __ARM_FEATURE_FP16_VECTOR_ARITHMETIC */</span><span class="preprocessor"></span></div><div class="line"><a name="l01301"></a><span class="lineno"> 1301</span>&#160;                    <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>:</div><div class="line"><a name="l01302"></a><span class="lineno"> 1302</span>&#160;                        <span class="keywordflow">if</span>(run_optim_small_tensor_info(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>))</div><div class="line"><a name="l01303"></a><span class="lineno"> 1303</span>&#160;                        {</div><div class="line"><a name="l01304"></a><span class="lineno"> 1304</span>&#160;                            num_elems_written_per_iteration = 8;</div><div class="line"><a name="l01305"></a><span class="lineno"> 1305</span>&#160;                        }</div><div class="line"><a name="l01306"></a><span class="lineno"> 1306</span>&#160;                        <span class="keywordflow">else</span></div><div class="line"><a name="l01307"></a><span class="lineno"> 1307</span>&#160;                        {</div><div class="line"><a name="l01308"></a><span class="lineno"> 1308</span>&#160;                            num_elems_written_per_iteration = 4;</div><div class="line"><a name="l01309"></a><span class="lineno"> 1309</span>&#160;                        }</div><div class="line"><a name="l01310"></a><span class="lineno"> 1310</span>&#160;                        <span class="keywordflow">break</span>;</div><div class="line"><a name="l01311"></a><span class="lineno"> 1311</span>&#160;                    <span class="keywordflow">default</span>:</div><div class="line"><a name="l01312"></a><span class="lineno"> 1312</span>&#160;                        <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Data type not supported.&quot;</span>);</div><div class="line"><a name="l01313"></a><span class="lineno"> 1313</span>&#160;                        <span class="keywordflow">break</span>;</div><div class="line"><a name="l01314"></a><span class="lineno"> 1314</span>&#160;                }</div><div class="line"><a name="l01315"></a><span class="lineno"> 1315</span>&#160;                num_weight_elems_read_per_row = kernel_size;</div><div class="line"><a name="l01316"></a><span class="lineno"> 1316</span>&#160;                num_elems_read_per_iteration  = conv_stride_x * num_elems_written_per_iteration;</div><div class="line"><a name="l01317"></a><span class="lineno"> 1317</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l01318"></a><span class="lineno"> 1318</span>&#160;            }</div><div class="line"><a name="l01319"></a><span class="lineno"> 1319</span>&#160;            <span class="keywordflow">case</span> 3:</div><div class="line"><a name="l01320"></a><span class="lineno"> 1320</span>&#160;                <span class="keywordflow">switch</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;data_type())</div><div class="line"><a name="l01321"></a><span class="lineno"> 1321</span>&#160;                {</div><div class="line"><a name="l01322"></a><span class="lineno"> 1322</span>&#160;                    <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>:</div><div class="line"><a name="l01323"></a><span class="lineno"> 1323</span>&#160;                        num_weight_elems_read_per_row   = 4 + kernel_size - 1;</div><div class="line"><a name="l01324"></a><span class="lineno"> 1324</span>&#160;                        num_elems_read_per_iteration    = 12;</div><div class="line"><a name="l01325"></a><span class="lineno"> 1325</span>&#160;                        num_elems_written_per_iteration = 16 &gt;&gt; conv_stride_x;</div><div class="line"><a name="l01326"></a><span class="lineno"> 1326</span>&#160;                        <span class="keywordflow">break</span>;</div><div class="line"><a name="l01327"></a><span class="lineno"> 1327</span>&#160;<span class="preprocessor">#ifdef __ARM_FEATURE_FP16_VECTOR_ARITHMETIC</span></div><div class="line"><a name="l01328"></a><span class="lineno"> 1328</span>&#160;                    <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">DataType::F16</a>:</div><div class="line"><a name="l01329"></a><span class="lineno"> 1329</span>&#160;                        num_weight_elems_read_per_row   = 8 + kernel_size - 1;</div><div class="line"><a name="l01330"></a><span class="lineno"> 1330</span>&#160;                        num_elems_read_per_iteration    = 24;</div><div class="line"><a name="l01331"></a><span class="lineno"> 1331</span>&#160;                        num_elems_written_per_iteration = 32 &gt;&gt; conv_stride_x;</div><div class="line"><a name="l01332"></a><span class="lineno"> 1332</span>&#160;                        <span class="keywordflow">break</span>;</div><div class="line"><a name="l01333"></a><span class="lineno"> 1333</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* __ARM_FEATURE_FP16_VECTOR_ARITHMETIC */</span><span class="preprocessor"></span></div><div class="line"><a name="l01334"></a><span class="lineno"> 1334</span>&#160;                    <span class="keywordflow">default</span>:</div><div class="line"><a name="l01335"></a><span class="lineno"> 1335</span>&#160;                        <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Data type not supported.&quot;</span>);</div><div class="line"><a name="l01336"></a><span class="lineno"> 1336</span>&#160;                        <span class="keywordflow">break</span>;</div><div class="line"><a name="l01337"></a><span class="lineno"> 1337</span>&#160;                }</div><div class="line"><a name="l01338"></a><span class="lineno"> 1338</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l01339"></a><span class="lineno"> 1339</span>&#160;            <span class="keywordflow">case</span> 5:</div><div class="line"><a name="l01340"></a><span class="lineno"> 1340</span>&#160;            {</div><div class="line"><a name="l01341"></a><span class="lineno"> 1341</span>&#160;                <span class="keywordflow">switch</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;data_type())</div><div class="line"><a name="l01342"></a><span class="lineno"> 1342</span>&#160;                {</div><div class="line"><a name="l01343"></a><span class="lineno"> 1343</span>&#160;                    <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>:</div><div class="line"><a name="l01344"></a><span class="lineno"> 1344</span>&#160;                        num_weight_elems_read_per_row   = 4 + kernel_size - 1;</div><div class="line"><a name="l01345"></a><span class="lineno"> 1345</span>&#160;                        num_elems_read_per_iteration    = 12;</div><div class="line"><a name="l01346"></a><span class="lineno"> 1346</span>&#160;                        num_elems_written_per_iteration = 16 &gt;&gt; conv_stride_x;</div><div class="line"><a name="l01347"></a><span class="lineno"> 1347</span>&#160;                        <span class="keywordflow">break</span>;</div><div class="line"><a name="l01348"></a><span class="lineno"> 1348</span>&#160;                    <span class="keywordflow">default</span>:</div><div class="line"><a name="l01349"></a><span class="lineno"> 1349</span>&#160;                        <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Data type not supported.&quot;</span>);</div><div class="line"><a name="l01350"></a><span class="lineno"> 1350</span>&#160;                        <span class="keywordflow">break</span>;</div><div class="line"><a name="l01351"></a><span class="lineno"> 1351</span>&#160;                }</div><div class="line"><a name="l01352"></a><span class="lineno"> 1352</span>&#160;            }</div><div class="line"><a name="l01353"></a><span class="lineno"> 1353</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01354"></a><span class="lineno"> 1354</span>&#160;            <span class="keywordflow">default</span>:</div><div class="line"><a name="l01355"></a><span class="lineno"> 1355</span>&#160;            {</div><div class="line"><a name="l01356"></a><span class="lineno"> 1356</span>&#160;                <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Not implemented&quot;</span>);</div><div class="line"><a name="l01357"></a><span class="lineno"> 1357</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l01358"></a><span class="lineno"> 1358</span>&#160;            }</div><div class="line"><a name="l01359"></a><span class="lineno"> 1359</span>&#160;        }</div><div class="line"><a name="l01360"></a><span class="lineno"> 1360</span>&#160;</div><div class="line"><a name="l01361"></a><span class="lineno"> 1361</span>&#160;        <span class="comment">// Calculate right pad</span></div><div class="line"><a name="l01362"></a><span class="lineno"> 1362</span>&#160;        <span class="keywordtype">int</span> start_x       = kernel_size / 2 - static_cast&lt;int&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.pad_left());</div><div class="line"><a name="l01363"></a><span class="lineno"> 1363</span>&#160;        <span class="keywordtype">int</span> end_x         = <a class="code" href="namespacearm__compute.xhtml#ab237a0a375cf382d52b61653248d3d4a">ceil_to_multiple</a>(static_cast&lt;int&gt;(output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(0)), num_elems_written_per_iteration) * conv_stride_x;</div><div class="line"><a name="l01364"></a><span class="lineno"> 1364</span>&#160;        <span class="keywordtype">int</span> upper_bound_w = <a class="code" href="namespacearm__compute.xhtml#ab237a0a375cf382d52b61653248d3d4a">ceil_to_multiple</a>(start_x + end_x, num_elems_read_per_iteration) - input_width;</div><div class="line"><a name="l01365"></a><span class="lineno"> 1365</span>&#160;</div><div class="line"><a name="l01366"></a><span class="lineno"> 1366</span>&#160;        <span class="comment">// Calculate border</span></div><div class="line"><a name="l01367"></a><span class="lineno"> 1367</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> conv_pad_left   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.pad_left();</div><div class="line"><a name="l01368"></a><span class="lineno"> 1368</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> conv_pad_top    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.pad_top();</div><div class="line"><a name="l01369"></a><span class="lineno"> 1369</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> conv_pad_right  = std::max(upper_bound_w, 0);</div><div class="line"><a name="l01370"></a><span class="lineno"> 1370</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> conv_pad_bottom = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.pad_bottom();</div><div class="line"><a name="l01371"></a><span class="lineno"> 1371</span>&#160;</div><div class="line"><a name="l01372"></a><span class="lineno"> 1372</span>&#160;        border_size.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a05374b750b0fc472c34ee61e6f028bba">left</a>   = conv_pad_left;</div><div class="line"><a name="l01373"></a><span class="lineno"> 1373</span>&#160;        border_size.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">top</a>    = conv_pad_top;</div><div class="line"><a name="l01374"></a><span class="lineno"> 1374</span>&#160;        border_size.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a78b0fed184c642b78f32fd34b228a5f9">right</a>  = conv_pad_right;</div><div class="line"><a name="l01375"></a><span class="lineno"> 1375</span>&#160;        border_size.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a802ffcf1b49237efe5be8a314d3f3869">bottom</a> = conv_pad_bottom;</div><div class="line"><a name="l01376"></a><span class="lineno"> 1376</span>&#160;</div><div class="line"><a name="l01377"></a><span class="lineno"> 1377</span>&#160;        <span class="comment">// Configure window</span></div><div class="line"><a name="l01378"></a><span class="lineno"> 1378</span>&#160;        win = <a class="code" href="namespacearm__compute.xhtml#ab7980fa5ee693e3282a76da047a1c3b5">calculate_max_window</a>(*output, <a class="code" href="classarm__compute_1_1_steps.xhtml">Steps</a>(num_elems_written_per_iteration));</div><div class="line"><a name="l01379"></a><span class="lineno"> 1379</span>&#160;</div><div class="line"><a name="l01380"></a><span class="lineno"> 1380</span>&#160;        <a class="code" href="classarm__compute_1_1_access_window_rectangle.xhtml">AccessWindowRectangle</a> input_access(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, -conv_pad_left, -conv_pad_top,</div><div class="line"><a name="l01381"></a><span class="lineno"> 1381</span>&#160;                                           num_elems_read_per_iteration, kernel_size,</div><div class="line"><a name="l01382"></a><span class="lineno"> 1382</span>&#160;                                           conv_stride_x, conv_stride_y);</div><div class="line"><a name="l01383"></a><span class="lineno"> 1383</span>&#160;        <a class="code" href="classarm__compute_1_1_access_window_static.xhtml">AccessWindowStatic</a>     weights_access(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, 0, 0, num_weight_elems_read_per_row, kernel_size);</div><div class="line"><a name="l01384"></a><span class="lineno"> 1384</span>&#160;        <a class="code" href="classarm__compute_1_1_access_window_horizontal.xhtml">AccessWindowHorizontal</a> output_access(output, 0, num_elems_written_per_iteration);</div><div class="line"><a name="l01385"></a><span class="lineno"> 1385</span>&#160;        window_changed = <a class="code" href="namespacearm__compute.xhtml#afc4bd8e872567d9c4c57d89eb0bb3da1">update_window_and_padding</a>(win, input_access, weights_access, output_access);</div><div class="line"><a name="l01386"></a><span class="lineno"> 1386</span>&#160;        output_access.set_valid_region(win, <a class="code" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a>(<a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>(), output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>()));</div><div class="line"><a name="l01387"></a><span class="lineno"> 1387</span>&#160;    }</div><div class="line"><a name="l01388"></a><span class="lineno"> 1388</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l01389"></a><span class="lineno"> 1389</span>&#160;    {</div><div class="line"><a name="l01390"></a><span class="lineno"> 1390</span>&#160;        <span class="keywordflow">if</span>(kernel_size == 9)</div><div class="line"><a name="l01391"></a><span class="lineno"> 1391</span>&#160;        {</div><div class="line"><a name="l01392"></a><span class="lineno"> 1392</span>&#160;            border_size.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a05374b750b0fc472c34ee61e6f028bba">left</a> = 0;</div><div class="line"><a name="l01393"></a><span class="lineno"> 1393</span>&#160;            border_size.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">top</a>  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.pad_left();</div><div class="line"><a name="l01394"></a><span class="lineno"> 1394</span>&#160;</div><div class="line"><a name="l01395"></a><span class="lineno"> 1395</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> num_elems_read_per_iteration_x    = 4;</div><div class="line"><a name="l01396"></a><span class="lineno"> 1396</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> num_elems_written_per_iteration_x = 1;</div><div class="line"><a name="l01397"></a><span class="lineno"> 1397</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> num_elems_read_per_iteration_y    = 12;</div><div class="line"><a name="l01398"></a><span class="lineno"> 1398</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> num_elems_written_per_iteration_y = 4;</div><div class="line"><a name="l01399"></a><span class="lineno"> 1399</span>&#160;</div><div class="line"><a name="l01400"></a><span class="lineno"> 1400</span>&#160;            num_elems_read_per_iteration    = num_elems_read_per_iteration_x;</div><div class="line"><a name="l01401"></a><span class="lineno"> 1401</span>&#160;            num_elems_written_per_iteration = num_elems_written_per_iteration_x;</div><div class="line"><a name="l01402"></a><span class="lineno"> 1402</span>&#160;</div><div class="line"><a name="l01403"></a><span class="lineno"> 1403</span>&#160;            border_size.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a78b0fed184c642b78f32fd34b228a5f9">right</a> = num_elems_read_per_iteration_x;</div><div class="line"><a name="l01404"></a><span class="lineno"> 1404</span>&#160;            <span class="keywordflow">if</span>((<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.pad_bottom() != 0) || (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.pad_top() != 0))</div><div class="line"><a name="l01405"></a><span class="lineno"> 1405</span>&#160;            {</div><div class="line"><a name="l01406"></a><span class="lineno"> 1406</span>&#160;                <span class="comment">// If bottom or top padding are set, we need to read num_elems_read_per_iteration_y rows to zero.</span></div><div class="line"><a name="l01407"></a><span class="lineno"> 1407</span>&#160;                <span class="comment">// Since num_elems_read_per_iteration_y is always greater than conv_info.pad_right() we can set</span></div><div class="line"><a name="l01408"></a><span class="lineno"> 1408</span>&#160;                <span class="comment">// the bottom padding to num_elems_read_per_iteration_y</span></div><div class="line"><a name="l01409"></a><span class="lineno"> 1409</span>&#160;                border_size.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a802ffcf1b49237efe5be8a314d3f3869">bottom</a> = num_elems_read_per_iteration_y;</div><div class="line"><a name="l01410"></a><span class="lineno"> 1410</span>&#160;            }</div><div class="line"><a name="l01411"></a><span class="lineno"> 1411</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.pad_right() != 0)</div><div class="line"><a name="l01412"></a><span class="lineno"> 1412</span>&#160;            {</div><div class="line"><a name="l01413"></a><span class="lineno"> 1413</span>&#160;                <span class="comment">// Convetional border padding. Fill the bottom paddings so that we can read in batch of num_elems_read_per_iteration_y</span></div><div class="line"><a name="l01414"></a><span class="lineno"> 1414</span>&#160;                border_size.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a802ffcf1b49237efe5be8a314d3f3869">bottom</a> = <a class="code" href="namespacearm__compute.xhtml#ab237a0a375cf382d52b61653248d3d4a">ceil_to_multiple</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;dimension(1) + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.pad_right(), num_elems_read_per_iteration_y) - <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;dimension(1);</div><div class="line"><a name="l01415"></a><span class="lineno"> 1415</span>&#160;            }</div><div class="line"><a name="l01416"></a><span class="lineno"> 1416</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l01417"></a><span class="lineno"> 1417</span>&#160;            {</div><div class="line"><a name="l01418"></a><span class="lineno"> 1418</span>&#160;                <span class="comment">// No padding</span></div><div class="line"><a name="l01419"></a><span class="lineno"> 1419</span>&#160;                border_size.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a802ffcf1b49237efe5be8a314d3f3869">bottom</a> = 0;</div><div class="line"><a name="l01420"></a><span class="lineno"> 1420</span>&#160;            }</div><div class="line"><a name="l01421"></a><span class="lineno"> 1421</span>&#160;</div><div class="line"><a name="l01422"></a><span class="lineno"> 1422</span>&#160;            win = <a class="code" href="namespacearm__compute.xhtml#ab7980fa5ee693e3282a76da047a1c3b5">calculate_max_window</a>(*output, <a class="code" href="classarm__compute_1_1_steps.xhtml">Steps</a>(num_elems_written_per_iteration_x, num_elems_written_per_iteration_y));</div><div class="line"><a name="l01423"></a><span class="lineno"> 1423</span>&#160;</div><div class="line"><a name="l01424"></a><span class="lineno"> 1424</span>&#160;            <a class="code" href="classarm__compute_1_1_access_window_static.xhtml">AccessWindowStatic</a> input_access(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, 0, -border_size.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">top</a>,</div><div class="line"><a name="l01425"></a><span class="lineno"> 1425</span>&#160;                                            <a class="code" href="namespacearm__compute.xhtml#ab237a0a375cf382d52b61653248d3d4a">ceil_to_multiple</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;dimension(0), num_elems_read_per_iteration_x),</div><div class="line"><a name="l01426"></a><span class="lineno"> 1426</span>&#160;                                            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;dimension(1) + border_size.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a802ffcf1b49237efe5be8a314d3f3869">bottom</a>);</div><div class="line"><a name="l01427"></a><span class="lineno"> 1427</span>&#160;</div><div class="line"><a name="l01428"></a><span class="lineno"> 1428</span>&#160;            <a class="code" href="classarm__compute_1_1_access_window_static.xhtml">AccessWindowStatic</a>    weights_access(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, 0, 0, <a class="code" href="namespacearm__compute.xhtml#ab237a0a375cf382d52b61653248d3d4a">ceil_to_multiple</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;dimension(0), num_elems_read_per_iteration_x), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;dimension(1));</div><div class="line"><a name="l01429"></a><span class="lineno"> 1429</span>&#160;            <a class="code" href="classarm__compute_1_1_access_window_rectangle.xhtml">AccessWindowRectangle</a> output_access(output, 0, 0, num_elems_written_per_iteration_x, num_elems_written_per_iteration_y);</div><div class="line"><a name="l01430"></a><span class="lineno"> 1430</span>&#160;            window_changed = <a class="code" href="namespacearm__compute.xhtml#afc4bd8e872567d9c4c57d89eb0bb3da1">update_window_and_padding</a>(win, input_access, weights_access, output_access);</div><div class="line"><a name="l01431"></a><span class="lineno"> 1431</span>&#160;            output_access.set_valid_region(win, <a class="code" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a>(<a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>(), output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>()));</div><div class="line"><a name="l01432"></a><span class="lineno"> 1432</span>&#160;        }</div><div class="line"><a name="l01433"></a><span class="lineno"> 1433</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l01434"></a><span class="lineno"> 1434</span>&#160;        {</div><div class="line"><a name="l01435"></a><span class="lineno"> 1435</span>&#160;            border_size.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a05374b750b0fc472c34ee61e6f028bba">left</a>             = 0;</div><div class="line"><a name="l01436"></a><span class="lineno"> 1436</span>&#160;            border_size.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">top</a>              = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.pad_left();</div><div class="line"><a name="l01437"></a><span class="lineno"> 1437</span>&#160;            border_size.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a78b0fed184c642b78f32fd34b228a5f9">right</a>            = 0;</div><div class="line"><a name="l01438"></a><span class="lineno"> 1438</span>&#160;            border_size.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a802ffcf1b49237efe5be8a314d3f3869">bottom</a>           = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.pad_right();</div><div class="line"><a name="l01439"></a><span class="lineno"> 1439</span>&#160;            num_elems_read_per_iteration = 16 / <a class="code" href="namespacearm__compute.xhtml#a34b06c0cd94808a77b697e79880b84b0">element_size_from_data_type</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;data_type());</div><div class="line"><a name="l01440"></a><span class="lineno"> 1440</span>&#160;            win                          = <a class="code" href="namespacearm__compute.xhtml#ab7980fa5ee693e3282a76da047a1c3b5">calculate_max_window</a>(*output, <a class="code" href="classarm__compute_1_1_steps.xhtml">Steps</a>());</div><div class="line"><a name="l01441"></a><span class="lineno"> 1441</span>&#160;</div><div class="line"><a name="l01442"></a><span class="lineno"> 1442</span>&#160;            <a class="code" href="classarm__compute_1_1_access_window_rectangle.xhtml">AccessWindowRectangle</a> input_access(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, 0, -border_size.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">top</a>, num_elems_read_per_iteration, kernel_size, 1.f, conv_stride_x);</div><div class="line"><a name="l01443"></a><span class="lineno"> 1443</span>&#160;            <a class="code" href="classarm__compute_1_1_access_window_rectangle.xhtml">AccessWindowRectangle</a> weights_access(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, 0, 0, num_elems_read_per_iteration, kernel_size);</div><div class="line"><a name="l01444"></a><span class="lineno"> 1444</span>&#160;            window_changed = <a class="code" href="namespacearm__compute.xhtml#afc4bd8e872567d9c4c57d89eb0bb3da1">update_window_and_padding</a>(win, input_access, weights_access);</div><div class="line"><a name="l01445"></a><span class="lineno"> 1445</span>&#160;        }</div><div class="line"><a name="l01446"></a><span class="lineno"> 1446</span>&#160;    }</div><div class="line"><a name="l01447"></a><span class="lineno"> 1447</span>&#160;</div><div class="line"><a name="l01448"></a><span class="lineno"> 1448</span>&#160;    <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> err = (window_changed) ? <a class="code" href="_error_8h.xhtml#af1b8ff8eb557a2ad11272f1505f45d34">ARM_COMPUTE_CREATE_ERROR</a>(<a class="code" href="namespacearm__compute.xhtml#a59e56af19e754a6aa26a612ebf91d05fa62be47fdd89da032cf78dfce82239579">ErrorCode::RUNTIME_ERROR</a>, <span class="stringliteral">&quot;Insufficient Padding!&quot;</span>) : <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a>{};</div><div class="line"><a name="l01449"></a><span class="lineno"> 1449</span>&#160;    <span class="keywordflow">return</span> std::make_pair(err, win);</div><div class="line"><a name="l01450"></a><span class="lineno"> 1450</span>&#160;}</div><div class="line"><a name="l01451"></a><span class="lineno"> 1451</span>&#160;} <span class="comment">// namespace</span></div><div class="line"><a name="l01452"></a><span class="lineno"> 1452</span>&#160;</div><div class="line"><a name="l01453"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_n_e_direct_convolution_layer_kernel.xhtml#ac0cdf0dbaff299b1359714a7f70d6072"> 1453</a></span>&#160;<a class="code" href="classarm__compute_1_1_n_e_direct_convolution_layer_kernel.xhtml#ac0cdf0dbaff299b1359714a7f70d6072">NEDirectConvolutionLayerKernel::NEDirectConvolutionLayerKernel</a>()</div><div class="line"><a name="l01454"></a><span class="lineno"> 1454</span>&#160;    : _input(nullptr), _weights(nullptr), _output(nullptr), _conv_info(), _border_size(0), _kernel_size(0), _num_weight_elems_read_per_row(0), _num_elems_read_per_iteration(0),</div><div class="line"><a name="l01455"></a><span class="lineno"> 1455</span>&#160;      _num_elems_written_per_iteration(0)</div><div class="line"><a name="l01456"></a><span class="lineno"> 1456</span>&#160;{</div><div class="line"><a name="l01457"></a><span class="lineno"> 1457</span>&#160;}</div><div class="line"><a name="l01458"></a><span class="lineno"> 1458</span>&#160;</div><div class="line"><a name="l01459"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_n_e_direct_convolution_layer_kernel.xhtml#a423f9a45a52983b4de5e2b347f4369c7"> 1459</a></span>&#160;<a class="code" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a> <a class="code" href="classarm__compute_1_1_n_e_direct_convolution_layer_kernel.xhtml#a423f9a45a52983b4de5e2b347f4369c7">NEDirectConvolutionLayerKernel::border_size</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01460"></a><span class="lineno"> 1460</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l01461"></a><span class="lineno"> 1461</span>&#160;    <span class="keywordflow">return</span> _border_size;</div><div class="line"><a name="l01462"></a><span class="lineno"> 1462</span>&#160;}</div><div class="line"><a name="l01463"></a><span class="lineno"> 1463</span>&#160;</div><div class="line"><a name="l01464"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_n_e_direct_convolution_layer_kernel.xhtml#a537ba0d35bcc8d5488da55d1a27c89a3"> 1464</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_n_e_direct_convolution_layer_kernel.xhtml#a537ba0d35bcc8d5488da55d1a27c89a3">NEDirectConvolutionLayerKernel::configure</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>)</div><div class="line"><a name="l01465"></a><span class="lineno"> 1465</span>&#160;{</div><div class="line"><a name="l01466"></a><span class="lineno"> 1466</span>&#160;    <a class="code" href="_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, output);</div><div class="line"><a name="l01467"></a><span class="lineno"> 1467</span>&#160;</div><div class="line"><a name="l01468"></a><span class="lineno"> 1468</span>&#160;    _input       = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>;</div><div class="line"><a name="l01469"></a><span class="lineno"> 1469</span>&#160;    _weights     = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>;</div><div class="line"><a name="l01470"></a><span class="lineno"> 1470</span>&#160;    _output      = output;</div><div class="line"><a name="l01471"></a><span class="lineno"> 1471</span>&#160;    _conv_info   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>;</div><div class="line"><a name="l01472"></a><span class="lineno"> 1472</span>&#160;    _kernel_size = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a8813441b655b97c00139c6a5a6390e97">dimension</a>(<a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a5f63b63606dbbbe54474e6e970a6738c">data_layout</a>(), <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">DataLayoutDimension::WIDTH</a>));</div><div class="line"><a name="l01473"></a><span class="lineno"> 1473</span>&#160;</div><div class="line"><a name="l01474"></a><span class="lineno"> 1474</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> conv_pad_left   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.pad_left();</div><div class="line"><a name="l01475"></a><span class="lineno"> 1475</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> conv_pad_top    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.pad_top();</div><div class="line"><a name="l01476"></a><span class="lineno"> 1476</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> conv_pad_right  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.pad_right();</div><div class="line"><a name="l01477"></a><span class="lineno"> 1477</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> conv_pad_bottom = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.pad_bottom();</div><div class="line"><a name="l01478"></a><span class="lineno"> 1478</span>&#160;    _border_size                       = <a class="code" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a>(conv_pad_top, conv_pad_right, conv_pad_bottom, conv_pad_left);</div><div class="line"><a name="l01479"></a><span class="lineno"> 1479</span>&#160;</div><div class="line"><a name="l01480"></a><span class="lineno"> 1480</span>&#160;    <span class="comment">// Get convolved dimensions</span></div><div class="line"><a name="l01481"></a><span class="lineno"> 1481</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab1806bf0c5a41f674fb9d2dc6af644f5">output_shape</a> = <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a5d320d308c16b8ddda3c9d3f60fad79c">misc::shape_calculator::compute_deep_convolution_shape</a>(*<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info(), *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>);</div><div class="line"><a name="l01482"></a><span class="lineno"> 1482</span>&#160;</div><div class="line"><a name="l01483"></a><span class="lineno"> 1483</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a> = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type();</div><div class="line"><a name="l01484"></a><span class="lineno"> 1484</span>&#160;</div><div class="line"><a name="l01485"></a><span class="lineno"> 1485</span>&#160;    <span class="comment">// Output auto inizialitation if not yet initialized</span></div><div class="line"><a name="l01486"></a><span class="lineno"> 1486</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a47be6fa38308d0003c25b60b7dbc45ce">auto_init_if_empty</a>(*output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab1806bf0c5a41f674fb9d2dc6af644f5">output_shape</a>, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>);</div><div class="line"><a name="l01487"></a><span class="lineno"> 1487</span>&#160;</div><div class="line"><a name="l01488"></a><span class="lineno"> 1488</span>&#160;    <span class="comment">// Perform validation step</span></div><div class="line"><a name="l01489"></a><span class="lineno"> 1489</span>&#160;    <a class="code" href="_error_8h.xhtml#a938dcd406ce611ef5345ad2531cdb948">ARM_COMPUTE_ERROR_THROW_ON</a>(validate_arguments(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>(), output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>));</div><div class="line"><a name="l01490"></a><span class="lineno"> 1490</span>&#160;</div><div class="line"><a name="l01491"></a><span class="lineno"> 1491</span>&#160;    <span class="comment">// Configure kernel window</span></div><div class="line"><a name="l01492"></a><span class="lineno"> 1492</span>&#160;    <span class="keyword">auto</span> win_config = validate_and_configure_window(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>(), output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, _num_weight_elems_read_per_row,</div><div class="line"><a name="l01493"></a><span class="lineno"> 1493</span>&#160;                                                    _num_elems_read_per_iteration, _num_elems_written_per_iteration, _border_size);</div><div class="line"><a name="l01494"></a><span class="lineno"> 1494</span>&#160;    <a class="code" href="_error_8h.xhtml#a938dcd406ce611ef5345ad2531cdb948">ARM_COMPUTE_ERROR_THROW_ON</a>(win_config.first);</div><div class="line"><a name="l01495"></a><span class="lineno"> 1495</span>&#160;    INEKernel::configure(win_config.second);</div><div class="line"><a name="l01496"></a><span class="lineno"> 1496</span>&#160;}</div><div class="line"><a name="l01497"></a><span class="lineno"> 1497</span>&#160;</div><div class="line"><a name="l01498"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_n_e_direct_convolution_layer_kernel.xhtml#a38da9c4ac16c0ca78e5d7176aab3435e"> 1498</a></span>&#160;<a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="classarm__compute_1_1_n_e_direct_convolution_layer_kernel.xhtml#a38da9c4ac16c0ca78e5d7176aab3435e">NEDirectConvolutionLayerKernel::validate</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *output, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>)</div><div class="line"><a name="l01499"></a><span class="lineno"> 1499</span>&#160;{</div><div class="line"><a name="l01500"></a><span class="lineno"> 1500</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_weight_elems_read_per_row   = 0;</div><div class="line"><a name="l01501"></a><span class="lineno"> 1501</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_elems_read_per_iteration    = 0;</div><div class="line"><a name="l01502"></a><span class="lineno"> 1502</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_elems_written_per_iteration = 0;</div><div class="line"><a name="l01503"></a><span class="lineno"> 1503</span>&#160;    <a class="code" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a>   <a class="code" href="classarm__compute_1_1_n_e_direct_convolution_layer_kernel.xhtml#a423f9a45a52983b4de5e2b347f4369c7">border_size</a>                     = {};</div><div class="line"><a name="l01504"></a><span class="lineno"> 1504</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(validate_arguments(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>));</div><div class="line"><a name="l01505"></a><span class="lineno"> 1505</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(validate_and_configure_window(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;clone().get(),</div><div class="line"><a name="l01506"></a><span class="lineno"> 1506</span>&#160;                                                              <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;clone().get(),</div><div class="line"><a name="l01507"></a><span class="lineno"> 1507</span>&#160;                                                              output-&gt;<a class="code" href="classarm__compute_1_1misc_1_1_i_cloneable.xhtml#a4d10e5012a872e7f78f2b539b673049d">clone</a>().get(),</div><div class="line"><a name="l01508"></a><span class="lineno"> 1508</span>&#160;                                                              <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>,</div><div class="line"><a name="l01509"></a><span class="lineno"> 1509</span>&#160;                                                              num_weight_elems_read_per_row,</div><div class="line"><a name="l01510"></a><span class="lineno"> 1510</span>&#160;                                                              num_elems_read_per_iteration,</div><div class="line"><a name="l01511"></a><span class="lineno"> 1511</span>&#160;                                                              num_elems_written_per_iteration,</div><div class="line"><a name="l01512"></a><span class="lineno"> 1512</span>&#160;                                                              <a class="code" href="classarm__compute_1_1_n_e_direct_convolution_layer_kernel.xhtml#a423f9a45a52983b4de5e2b347f4369c7">border_size</a>)</div><div class="line"><a name="l01513"></a><span class="lineno"> 1513</span>&#160;                                .first);</div><div class="line"><a name="l01514"></a><span class="lineno"> 1514</span>&#160;</div><div class="line"><a name="l01515"></a><span class="lineno"> 1515</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a>{};</div><div class="line"><a name="l01516"></a><span class="lineno"> 1516</span>&#160;}</div><div class="line"><a name="l01517"></a><span class="lineno"> 1517</span>&#160;</div><div class="line"><a name="l01518"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_n_e_direct_convolution_layer_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82"> 1518</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_n_e_direct_convolution_layer_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">NEDirectConvolutionLayerKernel::run</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>)</div><div class="line"><a name="l01519"></a><span class="lineno"> 1519</span>&#160;{</div><div class="line"><a name="l01520"></a><span class="lineno"> 1520</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>);</div><div class="line"><a name="l01521"></a><span class="lineno"> 1521</span>&#160;    <a class="code" href="_validate_8h.xhtml#a1b35b0d258183cf9ef36adf684d0b88c">ARM_COMPUTE_ERROR_ON_UNCONFIGURED_KERNEL</a>(<span class="keyword">this</span>);</div><div class="line"><a name="l01522"></a><span class="lineno"> 1522</span>&#160;    <a class="code" href="_validate_8h.xhtml#a6eb9ce82815fe429250189da7592ba75">ARM_COMPUTE_ERROR_ON_INVALID_SUBWINDOW</a>(<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">INEKernel::window</a>(), <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>);</div><div class="line"><a name="l01523"></a><span class="lineno"> 1523</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(_input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#ab988210662dbd3bf32fd563c7dd1bdbf">buffer</a>() == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l01524"></a><span class="lineno"> 1524</span>&#160;</div><div class="line"><a name="l01525"></a><span class="lineno"> 1525</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> kernel_size = _weights-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(<a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(_weights-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">data_layout</a>(), <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">DataLayoutDimension::WIDTH</a>));</div><div class="line"><a name="l01526"></a><span class="lineno"> 1526</span>&#160;</div><div class="line"><a name="l01527"></a><span class="lineno"> 1527</span>&#160;    <span class="keywordflow">if</span>(_input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">data_layout</a>() == <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>)</div><div class="line"><a name="l01528"></a><span class="lineno"> 1528</span>&#160;    {</div><div class="line"><a name="l01529"></a><span class="lineno"> 1529</span>&#160;        <span class="keywordflow">switch</span>(kernel_size)</div><div class="line"><a name="l01530"></a><span class="lineno"> 1530</span>&#160;        {</div><div class="line"><a name="l01531"></a><span class="lineno"> 1531</span>&#160;            <span class="keywordflow">case</span> 1:</div><div class="line"><a name="l01532"></a><span class="lineno"> 1532</span>&#160;            {</div><div class="line"><a name="l01533"></a><span class="lineno"> 1533</span>&#160;                <span class="keywordflow">switch</span>(_input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>())</div><div class="line"><a name="l01534"></a><span class="lineno"> 1534</span>&#160;                {</div><div class="line"><a name="l01535"></a><span class="lineno"> 1535</span>&#160;                    <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>:</div><div class="line"><a name="l01536"></a><span class="lineno"> 1536</span>&#160;                        convolve_1x1&lt;float, float&gt;(<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>, _num_elems_read_per_iteration, _num_elems_written_per_iteration, _input, _weights, _output, _conv_info);</div><div class="line"><a name="l01537"></a><span class="lineno"> 1537</span>&#160;                        <span class="keywordflow">break</span>;</div><div class="line"><a name="l01538"></a><span class="lineno"> 1538</span>&#160;<span class="preprocessor">#ifdef __ARM_FEATURE_FP16_VECTOR_ARITHMETIC</span></div><div class="line"><a name="l01539"></a><span class="lineno"> 1539</span>&#160;                    <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">DataType::F16</a>:</div><div class="line"><a name="l01540"></a><span class="lineno"> 1540</span>&#160;                        convolve_1x1&lt;float16_t, float16_t&gt;(<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>, _num_elems_read_per_iteration, _num_elems_written_per_iteration, _input, _weights, _output, _conv_info);</div><div class="line"><a name="l01541"></a><span class="lineno"> 1541</span>&#160;                        <span class="keywordflow">break</span>;</div><div class="line"><a name="l01542"></a><span class="lineno"> 1542</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* __ARM_FEATURE_FP16_VECTOR_ARITHMETIC */</span><span class="preprocessor"></span></div><div class="line"><a name="l01543"></a><span class="lineno"> 1543</span>&#160;                    <span class="keywordflow">default</span>:</div><div class="line"><a name="l01544"></a><span class="lineno"> 1544</span>&#160;                        <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Data type not supported&quot;</span>);</div><div class="line"><a name="l01545"></a><span class="lineno"> 1545</span>&#160;                        <span class="keywordflow">break</span>;</div><div class="line"><a name="l01546"></a><span class="lineno"> 1546</span>&#160;                }</div><div class="line"><a name="l01547"></a><span class="lineno"> 1547</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l01548"></a><span class="lineno"> 1548</span>&#160;            }</div><div class="line"><a name="l01549"></a><span class="lineno"> 1549</span>&#160;            <span class="keywordflow">case</span> 3:</div><div class="line"><a name="l01550"></a><span class="lineno"> 1550</span>&#160;            {</div><div class="line"><a name="l01551"></a><span class="lineno"> 1551</span>&#160;                <span class="keywordflow">switch</span>(_input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>())</div><div class="line"><a name="l01552"></a><span class="lineno"> 1552</span>&#160;                {</div><div class="line"><a name="l01553"></a><span class="lineno"> 1553</span>&#160;                    <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>:</div><div class="line"><a name="l01554"></a><span class="lineno"> 1554</span>&#160;                        convolve_3x3&lt;float, float&gt;(<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>, _num_elems_read_per_iteration, _num_elems_written_per_iteration, _input, _weights, _output, _conv_info);</div><div class="line"><a name="l01555"></a><span class="lineno"> 1555</span>&#160;                        <span class="keywordflow">break</span>;</div><div class="line"><a name="l01556"></a><span class="lineno"> 1556</span>&#160;<span class="preprocessor">#ifdef __ARM_FEATURE_FP16_VECTOR_ARITHMETIC</span></div><div class="line"><a name="l01557"></a><span class="lineno"> 1557</span>&#160;                    <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">DataType::F16</a>:</div><div class="line"><a name="l01558"></a><span class="lineno"> 1558</span>&#160;                        convolve_3x3&lt;float16_t, float16_t&gt;(<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>, _num_elems_read_per_iteration, _num_elems_written_per_iteration, _input, _weights, _output, _conv_info);</div><div class="line"><a name="l01559"></a><span class="lineno"> 1559</span>&#160;                        <span class="keywordflow">break</span>;</div><div class="line"><a name="l01560"></a><span class="lineno"> 1560</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* __ARM_FEATURE_FP16_VECTOR_ARITHMETIC */</span><span class="preprocessor"></span></div><div class="line"><a name="l01561"></a><span class="lineno"> 1561</span>&#160;                    <span class="keywordflow">default</span>:</div><div class="line"><a name="l01562"></a><span class="lineno"> 1562</span>&#160;                        <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Data type not supported&quot;</span>);</div><div class="line"><a name="l01563"></a><span class="lineno"> 1563</span>&#160;                        <span class="keywordflow">break</span>;</div><div class="line"><a name="l01564"></a><span class="lineno"> 1564</span>&#160;                }</div><div class="line"><a name="l01565"></a><span class="lineno"> 1565</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l01566"></a><span class="lineno"> 1566</span>&#160;            }</div><div class="line"><a name="l01567"></a><span class="lineno"> 1567</span>&#160;            <span class="keywordflow">case</span> 5:</div><div class="line"><a name="l01568"></a><span class="lineno"> 1568</span>&#160;            {</div><div class="line"><a name="l01569"></a><span class="lineno"> 1569</span>&#160;                <span class="keywordflow">switch</span>(_input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>())</div><div class="line"><a name="l01570"></a><span class="lineno"> 1570</span>&#160;                {</div><div class="line"><a name="l01571"></a><span class="lineno"> 1571</span>&#160;                    <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>:</div><div class="line"><a name="l01572"></a><span class="lineno"> 1572</span>&#160;                        convolve_5x5&lt;float, float&gt;(<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>, _num_elems_read_per_iteration, _num_elems_written_per_iteration, _input, _weights, _output, _conv_info);</div><div class="line"><a name="l01573"></a><span class="lineno"> 1573</span>&#160;                        <span class="keywordflow">break</span>;</div><div class="line"><a name="l01574"></a><span class="lineno"> 1574</span>&#160;                    <span class="keywordflow">default</span>:</div><div class="line"><a name="l01575"></a><span class="lineno"> 1575</span>&#160;                        <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Data type not supported&quot;</span>);</div><div class="line"><a name="l01576"></a><span class="lineno"> 1576</span>&#160;                        <span class="keywordflow">break</span>;</div><div class="line"><a name="l01577"></a><span class="lineno"> 1577</span>&#160;                }</div><div class="line"><a name="l01578"></a><span class="lineno"> 1578</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l01579"></a><span class="lineno"> 1579</span>&#160;            }</div><div class="line"><a name="l01580"></a><span class="lineno"> 1580</span>&#160;            <span class="keywordflow">default</span>:</div><div class="line"><a name="l01581"></a><span class="lineno"> 1581</span>&#160;            {</div><div class="line"><a name="l01582"></a><span class="lineno"> 1582</span>&#160;                <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Only kernel sizes 1x1, 3x3 and 5x5 are supported.&quot;</span>);</div><div class="line"><a name="l01583"></a><span class="lineno"> 1583</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l01584"></a><span class="lineno"> 1584</span>&#160;            }</div><div class="line"><a name="l01585"></a><span class="lineno"> 1585</span>&#160;        }</div><div class="line"><a name="l01586"></a><span class="lineno"> 1586</span>&#160;    }</div><div class="line"><a name="l01587"></a><span class="lineno"> 1587</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l01588"></a><span class="lineno"> 1588</span>&#160;    {</div><div class="line"><a name="l01589"></a><span class="lineno"> 1589</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> kernel_size = _weights-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(<a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(_weights-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">data_layout</a>(), <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">DataLayoutDimension::WIDTH</a>));</div><div class="line"><a name="l01590"></a><span class="lineno"> 1590</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> stride_x    = std::get&lt;0&gt;(_conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a6e324c1bd1111876469ea247da156147">stride</a>());</div><div class="line"><a name="l01591"></a><span class="lineno"> 1591</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> stride_y    = std::get&lt;1&gt;(_conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a6e324c1bd1111876469ea247da156147">stride</a>());</div><div class="line"><a name="l01592"></a><span class="lineno"> 1592</span>&#160;</div><div class="line"><a name="l01593"></a><span class="lineno"> 1593</span>&#160;        <span class="keywordflow">switch</span>(_input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>())</div><div class="line"><a name="l01594"></a><span class="lineno"> 1594</span>&#160;        {</div><div class="line"><a name="l01595"></a><span class="lineno"> 1595</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>:</div><div class="line"><a name="l01596"></a><span class="lineno"> 1596</span>&#160;            {</div><div class="line"><a name="l01597"></a><span class="lineno"> 1597</span>&#160;                <span class="keywordflow">if</span>(kernel_size == 9 &amp;&amp; stride_x == 1 &amp;&amp; stride_y == 1)</div><div class="line"><a name="l01598"></a><span class="lineno"> 1598</span>&#160;                {</div><div class="line"><a name="l01599"></a><span class="lineno"> 1599</span>&#160;                    <span class="keyword">using</span> vtype = <a class="code" href="structarm__compute_1_1wrapper_1_1traits_1_1neon__vector.xhtml">wrapper::traits::neon_vector&lt;float, 4&gt;</a>;</div><div class="line"><a name="l01600"></a><span class="lineno"> 1600</span>&#160;                    convolve_9x9_nhwc&lt;vtype&gt;(<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>, _num_elems_read_per_iteration, _input, _weights, _output, _conv_info);</div><div class="line"><a name="l01601"></a><span class="lineno"> 1601</span>&#160;                }</div><div class="line"><a name="l01602"></a><span class="lineno"> 1602</span>&#160;                <span class="keywordflow">else</span></div><div class="line"><a name="l01603"></a><span class="lineno"> 1603</span>&#160;                {</div><div class="line"><a name="l01604"></a><span class="lineno"> 1604</span>&#160;                    convolver_nhwc&lt;float&gt;::convolve(<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>, kernel_size, _num_elems_read_per_iteration, _input, _weights, _output, _conv_info);</div><div class="line"><a name="l01605"></a><span class="lineno"> 1605</span>&#160;                }</div><div class="line"><a name="l01606"></a><span class="lineno"> 1606</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l01607"></a><span class="lineno"> 1607</span>&#160;            }</div><div class="line"><a name="l01608"></a><span class="lineno"> 1608</span>&#160;            <span class="keywordflow">default</span>:</div><div class="line"><a name="l01609"></a><span class="lineno"> 1609</span>&#160;                <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Data type not supported&quot;</span>);</div><div class="line"><a name="l01610"></a><span class="lineno"> 1610</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l01611"></a><span class="lineno"> 1611</span>&#160;        }</div><div class="line"><a name="l01612"></a><span class="lineno"> 1612</span>&#160;    }</div><div class="line"><a name="l01613"></a><span class="lineno"> 1613</span>&#160;}</div><div class="ttc" id="src_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a009469e4d9b8fce3b6d5e97d2077827d"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a></div><div class="ttdeci">__global uchar * offset(const Image *img, int x, int y)</div><div class="ttdoc">Get the pointer position of a Image.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00510">helpers.h:510</a></div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml_a3fdd42ea34070a54e696b3adc28c4be3"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">arm_compute::BorderSize::top</a></div><div class="ttdeci">unsigned int top</div><div class="ttdoc">top of the border</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00349">Types.h:349</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_kernel_xhtml_ad34a46f53686c12a5c5e717cc9617fb6"><div class="ttname"><a href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">arm_compute::IKernel::window</a></div><div class="ttdeci">const Window &amp; window() const</div><div class="ttdoc">The maximum window the kernel can be executed on.</div><div class="ttdef"><b>Definition:</b> <a href="_i_kernel_8cpp_source.xhtml#l00028">IKernel.cpp:28</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml">arm_compute::TensorShape</a></div><div class="ttdoc">Shape of a tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00039">TensorShape.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_acf5f12bbab64dd614bd8220c97fe484f"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">arm_compute::test::validation::data_layout</a></div><div class="ttdeci">const DataLayout data_layout</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00146">Im2Col.cpp:146</a></div></div>
<div class="ttc" id="_i_tensor_8h_xhtml"><div class="ttname"><a href="_i_tensor_8h.xhtml">ITensor.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tensor_xhtml_ad45f0c01a0713dfb6bd7232c7f396fc4"><div class="ttname"><a href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">arm_compute::CLTensor::info</a></div><div class="ttdeci">TensorInfo * info() const override</div><div class="ttdoc">Interface to be implemented by the child class to return the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tensor_8cpp_source.xhtml#l00041">CLTensor.cpp:41</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a178f0d3d87f959e00a743328d95359d2"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">arm_compute::ITensorInfo::dimension</a></div><div class="ttdeci">virtual size_t dimension(size_t index) const =0</div><div class="ttdoc">Return the size of the requested dimension.</div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml">arm_compute::BorderSize</a></div><div class="ttdoc">Container for 2D border size.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00269">Types.h:269</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_direct_convolution_layer_kernel_xhtml_a537ba0d35bcc8d5488da55d1a27c89a3"><div class="ttname"><a href="classarm__compute_1_1_n_e_direct_convolution_layer_kernel.xhtml#a537ba0d35bcc8d5488da55d1a27c89a3">arm_compute::NEDirectConvolutionLayerKernel::configure</a></div><div class="ttdeci">void configure(const ITensor *input, const ITensor *weights, ITensor *output, const PadStrideInfo &amp;conv_info)</div><div class="ttdoc">Set the input, weights, and output tensors.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_direct_convolution_layer_kernel_8cpp_source.xhtml#l01464">NEDirectConvolutionLayerKernel.cpp:1464</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml_a5f63b63606dbbbe54474e6e970a6738c"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#a5f63b63606dbbbe54474e6e970a6738c">arm_compute::TensorInfo::data_layout</a></div><div class="ttdeci">DataLayout data_layout() const override</div><div class="ttdoc">Get the data layout of the tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00315">TensorInfo.h:315</a></div></div>
<div class="ttc" id="_validate_8h_xhtml_a8f3ff7da485ff7e75dab07baadf5b4bd"><div class="ttname"><a href="_validate_8h.xhtml#a8f3ff7da485ff7e75dab07baadf5b4bd">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_TYPES</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_TYPES(...)</div><div class="ttdef"><b>Definition:</b> <a href="_validate_8h_source.xhtml#l00545">Validate.h:545</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_a5d320d308c16b8ddda3c9d3f60fad79c"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a5d320d308c16b8ddda3c9d3f60fad79c">arm_compute::misc::shape_calculator::compute_deep_convolution_shape</a></div><div class="ttdeci">TensorShape compute_deep_convolution_shape(const ITensorInfo &amp;input, const ITensorInfo &amp;weights, PadStrideInfo conv_info)</div><div class="ttdoc">Calculate the deep convolution shape output shape of a tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l00738">ShapeCalculator.h:738</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00352">Error.h:352</a></div></div>
<div class="ttc" id="_n_e_direct_convolution_layer_kernel_8h_xhtml"><div class="ttname"><a href="_n_e_direct_convolution_layer_kernel_8h.xhtml">NEDirectConvolutionLayerKernel.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a00525ff582f16038a1d3819aa44a23a3"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">arm_compute::test::validation::conv_info</a></div><div class="ttdeci">conv_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_winograd_8cpp_source.xhtml#l00597">Winograd.cpp:597</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a77f54eded7fef436d3a4f21ad5a00da6"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">arm_compute::wrapper::vloadq</a></div><div class="ttdeci">uint8x16_t vloadq(const uint8_t *ptr)</div><div class="ttdef"><b>Definition:</b> <a href="load_8h_source.xhtml#l00058">load.h:58</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a8a1e1c105f0bdaf37db408c7cfcb77a4"><div class="ttname"><a href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ON_ERROR(status)</div><div class="ttdoc">Checks if a status contains an error and returns it.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00204">Error.h:204</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml_a8813441b655b97c00139c6a5a6390e97"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#a8813441b655b97c00139c6a5a6390e97">arm_compute::TensorInfo::dimension</a></div><div class="ttdeci">size_t dimension(size_t index) const override</div><div class="ttdoc">Return the size of the requested dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00232">TensorInfo.h:232</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a34b06c0cd94808a77b697e79880b84b0"><div class="ttname"><a href="namespacearm__compute.xhtml#a34b06c0cd94808a77b697e79880b84b0">arm_compute::element_size_from_data_type</a></div><div class="ttdeci">size_t element_size_from_data_type(DataType dt)</div><div class="ttdoc">The size in bytes of the data type.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_utils_8h_source.xhtml#l00186">Utils.h:186</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a7cfb31af63202568efef5214acfbf3ba"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">arm_compute::ITensorInfo::data_type</a></div><div class="ttdeci">virtual DataType data_type() const =0</div><div class="ttdoc">Data type used for each element of the tensor.</div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a1894e825a225f3b2013f594cbffdae73"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">arm_compute::wrapper::vadd</a></div><div class="ttdeci">uint8x8_t vadd(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="intrinsics_2add_8h_source.xhtml#l00039">add.h:39</a></div></div>
<div class="ttc" id="_validate_8h_xhtml_ae7eed178dac535c6e727061b1f5bc6eb"><div class="ttname"><a href="_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN(t, c,...)</div><div class="ttdef"><b>Definition:</b> <a href="_validate_8h_source.xhtml#l00792">Validate.h:792</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::Format::F32</a></div><div class="ttdoc">1 channel, 1 F32 per channel</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">arm_compute::DataLayoutDimension::HEIGHT</a></div><div class="ttdoc">height</div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a></div><div class="ttdoc">Store the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_info_8h_source.xhtml#l00040">ITensorInfo.h:40</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a938dcd406ce611ef5345ad2531cdb948"><div class="ttname"><a href="_error_8h.xhtml#a938dcd406ce611ef5345ad2531cdb948">ARM_COMPUTE_ERROR_THROW_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_THROW_ON(status)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00455">Error.h:455</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_1_1_dimension_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml">arm_compute::Window::Dimension</a></div><div class="ttdoc">Describe one of the image's dimensions with a start, end and step.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00075">Window.h:75</a></div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml_a802ffcf1b49237efe5be8a314d3f3869"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a802ffcf1b49237efe5be8a314d3f3869">arm_compute::BorderSize::bottom</a></div><div class="ttdeci">unsigned int bottom</div><div class="ttdoc">bottom of the border</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00351">Types.h:351</a></div></div>
<div class="ttc" id="_n_e_direct_convolution_detail_8h_xhtml"><div class="ttname"><a href="_n_e_direct_convolution_detail_8h.xhtml">NEDirectConvolutionDetail.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_direct_convolution_layer_kernel_xhtml_a112b35dd205c62ea6ed1447ef226da82"><div class="ttname"><a href="classarm__compute_1_1_n_e_direct_convolution_layer_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">arm_compute::NEDirectConvolutionLayerKernel::run</a></div><div class="ttdeci">void run(const Window &amp;window, const ThreadInfo &amp;info) override</div><div class="ttdoc">Execute the kernel on the passed window.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_direct_convolution_layer_kernel_8cpp_source.xhtml#l01518">NEDirectConvolutionLayerKernel.cpp:1518</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_a51a8c7a9d2fa20943c213e85eb8d9caf"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a51a8c7a9d2fa20943c213e85eb8d9caf">arm_compute::Window::z</a></div><div class="ttdeci">constexpr const Dimension &amp; z() const</div><div class="ttdoc">Alias to access the third dimension of the window.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00161">Window.h:161</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml_a5f1ca9d674346287cae57a6c5b5c24ec"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#a5f1ca9d674346287cae57a6c5b5c24ec">arm_compute::TensorInfo::strides_in_bytes</a></div><div class="ttdeci">const Strides &amp; strides_in_bytes() const override</div><div class="ttdoc">The strides in bytes for accessing each dimension of the tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00240">TensorInfo.h:240</a></div></div>
<div class="ttc" id="classarm__compute_1_1_status_xhtml"><div class="ttname"><a href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a></div><div class="ttdoc">Status class.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00052">Error.h:52</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1detail_xhtml_ab8ad28c706dc842c9d532e04ed697f0d"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#ab8ad28c706dc842c9d532e04ed697f0d">arm_compute::detail::get_input_num_elems_processed</a></div><div class="ttdeci">int get_input_num_elems_processed(unsigned int num_elems_written_per_iteration)</div></div>
<div class="ttc" id="_error_8h_xhtml_a206d6e247e0957ac3dee45d27756fc25"><div class="ttname"><a href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true, an error is returned.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00296">Error.h:296</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml">arm_compute::ITensor</a></div><div class="ttdoc">Interface for NEON tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_8h_source.xhtml#l00036">ITensor.h:36</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab7980fa5ee693e3282a76da047a1c3b5"><div class="ttname"><a href="namespacearm__compute.xhtml#ab7980fa5ee693e3282a76da047a1c3b5">arm_compute::calculate_max_window</a></div><div class="ttdeci">Window calculate_max_window(const ValidRegion &amp;valid_region, const Steps &amp;steps=Steps(), bool skip_border=false, BorderSize border_size=BorderSize())</div><div class="ttdoc">Calculate the maximum window for a given tensor shape and border setting.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_helpers_8cpp_source.xhtml#l00028">Helpers.cpp:28</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2020 ARM Limited.</div><div class="ttdef"><b>Definition:</b> <a href="00__introduction_8dox_source.xhtml#l00024">00_introduction.dox:24</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a47be6fa38308d0003c25b60b7dbc45ce"><div class="ttname"><a href="namespacearm__compute.xhtml#a47be6fa38308d0003c25b60b7dbc45ce">arm_compute::auto_init_if_empty</a></div><div class="ttdeci">bool auto_init_if_empty(ITensorInfo &amp;info, const TensorShape &amp;shape, int num_channels, DataType data_type, QuantizationInfo quantization_info=QuantizationInfo())</div><div class="ttdoc">Auto initialize the tensor info (shape, number of channels and data type) if the current assignment i...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00202">Helpers.inl:202</a></div></div>
<div class="ttc" id="_c_p_p_2_validate_8h_xhtml_ad2633f3560322e1f8d926949dec1b730"><div class="ttname"><a href="_c_p_p_2_validate_8h.xhtml#ad2633f3560322e1f8d926949dec1b730">ARM_COMPUTE_RETURN_ERROR_ON_CPU_F16_UNSUPPORTED</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_CPU_F16_UNSUPPORTED(tensor)</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_validate_8h_source.xhtml#l00071">Validate.h:71</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">arm_compute::Format::F16</a></div><div class="ttdoc">1 channel, 1 F16 per channel</div></div>
<div class="ttc" id="namespacearm__compute_1_1detail_xhtml_a87f8e27c52a10ec90100fd5b0fcf663d"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#a87f8e27c52a10ec90100fd5b0fcf663d">arm_compute::detail::convolve_3x3</a></div><div class="ttdeci">float32x4x2_t convolve_3x3(const float *in_top, const float *in_mid, const float *in_low, const float32x4x3_t &amp;m0, const float32x4x3_t &amp;m1, const float32x4x3_t &amp;m2)</div></div>
<div class="ttc" id="classarm__compute_1_1_access_window_static_xhtml"><div class="ttname"><a href="classarm__compute_1_1_access_window_static.xhtml">arm_compute::AccessWindowStatic</a></div><div class="ttdoc">Implementation of a static rectangular access pattern.</div><div class="ttdef"><b>Definition:</b> <a href="_access_window_static_8h_source.xhtml#l00046">AccessWindowStatic.h:46</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_aa87f8fc26981b0f3228a78c83b95b802"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">arm_compute::Dimensions::x</a></div><div class="ttdeci">T x() const</div><div class="ttdoc">Alias to access the size of the first dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00081">Dimensions.h:81</a></div></div>
<div class="ttc" id="arm__compute_2core_2_utils_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_utils_8h.xhtml">Utils.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_access_window_rectangle_xhtml"><div class="ttname"><a href="classarm__compute_1_1_access_window_rectangle.xhtml">arm_compute::AccessWindowRectangle</a></div><div class="ttdoc">Implementation of a rectangular access pattern.</div><div class="ttdef"><b>Definition:</b> <a href="_i_access_window_8h_source.xhtml#l00107">IAccessWindow.h:107</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a475ee3c8ef70a2e4f18effd1d527a63a"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a475ee3c8ef70a2e4f18effd1d527a63a">arm_compute::wrapper::vpadd</a></div><div class="ttdeci">uint8x8_t vpadd(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="intrinsics_2add_8h_source.xhtml#l00187">add.h:187</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_aa16ace001ab8287faa46d6962f369219"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">arm_compute::wrapper::vgetlane</a></div><div class="ttdeci">uint8_t vgetlane(const uint8x8_t vector, const unsigned int lane)</div><div class="ttdef"><b>Definition:</b> <a href="getlane_8h_source.xhtml#l00091">getlane.h:91</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_aa96e81276ee4f87ab386cd05a5539a7d"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">arm_compute::Window::DimX</a></div><div class="ttdeci">static constexpr size_t DimX</div><div class="ttdoc">Alias for dimension 0 also known as X dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00043">Window.h:43</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_afc4bd8e872567d9c4c57d89eb0bb3da1"><div class="ttname"><a href="namespacearm__compute.xhtml#afc4bd8e872567d9c4c57d89eb0bb3da1">arm_compute::update_window_and_padding</a></div><div class="ttdeci">bool update_window_and_padding(Window &amp;win, Ts &amp;&amp;... patterns)</div><div class="ttdoc">Update window and padding size for each of the access patterns.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_helpers_8h_source.xhtml#l00402">Helpers.h:402</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
<div class="ttc" id="_c_p_p_2_validate_8h_xhtml"><div class="ttname"><a href="_c_p_p_2_validate_8h.xhtml">Validate.h</a></div></div>
<div class="ttc" id="structarm__compute_1_1wrapper_1_1traits_1_1neon__vector_xhtml"><div class="ttname"><a href="structarm__compute_1_1wrapper_1_1traits_1_1neon__vector.xhtml">arm_compute::wrapper::traits::neon_vector</a></div><div class="ttdoc">Create the appropriate NEON vector given its type and size in terms of elements.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2wrapper_2traits_8h_source.xhtml#l00044">traits.h:44</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a7c66505457d00ece3aa4b34cab80757d"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">arm_compute::ITensorInfo::tensor_shape</a></div><div class="ttdeci">virtual const TensorShape &amp; tensor_shape() const =0</div><div class="ttdoc">Size for each dimension of the tensor.</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab237a0a375cf382d52b61653248d3d4a"><div class="ttname"><a href="namespacearm__compute.xhtml#ab237a0a375cf382d52b61653248d3d4a">arm_compute::ceil_to_multiple</a></div><div class="ttdeci">auto ceil_to_multiple(S value, T divisor) -&gt; decltype(((value+divisor - 1)/divisor) *divisor)</div><div class="ttdoc">Computes the smallest number larger or equal to value that is a multiple of divisor.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_utils_8h_source.xhtml#l00066">Utils.h:66</a></div></div>
<div class="ttc" id="_validate_8h_xhtml_a1da797d2762c1cdbb73bfc83136c3a38"><div class="ttname"><a href="_validate_8h.xhtml#a1da797d2762c1cdbb73bfc83136c3a38">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DIMENSIONS</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DIMENSIONS(...)</div><div class="ttdef"><b>Definition:</b> <a href="_validate_8h_source.xhtml#l00288">Validate.h:288</a></div></div>
<div class="ttc" id="classarm__compute_1_1_steps_xhtml"><div class="ttname"><a href="classarm__compute_1_1_steps.xhtml">arm_compute::Steps</a></div><div class="ttdoc">Class to describe a number of elements in each dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_steps_8h_source.xhtml#l00040">Steps.h:40</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_abb29a685080e999c2a0cb874d2f7bb5a"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#abb29a685080e999c2a0cb874d2f7bb5a">arm_compute::Dimensions::z</a></div><div class="ttdeci">T z() const</div><div class="ttdoc">Alias to access the size of the third dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00091">Dimensions.h:91</a></div></div>
<div class="ttc" id="classarm__compute_1_1_coordinates_xhtml"><div class="ttname"><a href="classarm__compute_1_1_coordinates.xhtml">arm_compute::Coordinates</a></div><div class="ttdoc">Coordinates of an item.</div><div class="ttdef"><b>Definition:</b> <a href="_coordinates_8h_source.xhtml#l00037">Coordinates.h:37</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml_ab988210662dbd3bf32fd563c7dd1bdbf"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml#ab988210662dbd3bf32fd563c7dd1bdbf">arm_compute::ITensor::buffer</a></div><div class="ttdeci">virtual uint8_t * buffer() const =0</div><div class="ttdoc">Interface to be implemented by the child class to return a pointer to CPU memory.</div></div>
<div class="ttc" id="classarm__compute_1_1_access_window_horizontal_xhtml"><div class="ttname"><a href="classarm__compute_1_1_access_window_horizontal.xhtml">arm_compute::AccessWindowHorizontal</a></div><div class="ttdoc">Implementation of a row access pattern.</div><div class="ttdef"><b>Definition:</b> <a href="_i_access_window_8h_source.xhtml#l00232">IAccessWindow.h:232</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pad_stride_info_xhtml_a6e324c1bd1111876469ea247da156147"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml#a6e324c1bd1111876469ea247da156147">arm_compute::PadStrideInfo::stride</a></div><div class="ttdeci">std::pair&lt; unsigned int, unsigned int &gt; stride() const</div><div class="ttdoc">Get the stride.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00734">Types.h:734</a></div></div>
<div class="ttc" id="_shape_calculator_8h_xhtml"><div class="ttname"><a href="_shape_calculator_8h.xhtml">ShapeCalculator.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1misc_1_1_i_cloneable_xhtml_a4d10e5012a872e7f78f2b539b673049d"><div class="ttname"><a href="classarm__compute_1_1misc_1_1_i_cloneable.xhtml#a4d10e5012a872e7f78f2b539b673049d">arm_compute::misc::ICloneable::clone</a></div><div class="ttdeci">virtual std::unique_ptr&lt; T &gt; clone() const =0</div><div class="ttdoc">Provide a clone of the current object of class T.</div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml_a0e95dc1e53c361348314873b168ae237"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">arm_compute::ITensor::info</a></div><div class="ttdeci">virtual ITensorInfo * info() const =0</div><div class="ttdoc">Interface to be implemented by the child class to return the tensor's metadata.</div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a2902775707bc7bf7d6da1bda1cc15783"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">arm_compute::wrapper::vgetlow</a></div><div class="ttdeci">uint8x8_t vgetlow(const uint8x16_t val)</div><div class="ttdef"><b>Definition:</b> <a href="getlow_8h_source.xhtml#l00039">getlow.h:39</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pad_stride_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml">arm_compute::PadStrideInfo</a></div><div class="ttdoc">Padding and stride information class.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00686">Types.h:686</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_acd3d2bba51cb84d34dd7656ad2375a6e"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">arm_compute::Window::set</a></div><div class="ttdeci">void set(size_t dimension, const Dimension &amp;dim)</div><div class="ttdoc">Set the values of a given dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00049">Window.inl:49</a></div></div>
<div class="ttc" id="_error_8h_xhtml"><div class="ttname"><a href="_error_8h.xhtml">Error.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">arm_compute::DataLayoutDimension::CHANNEL</a></div><div class="ttdoc">channel</div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml_a05374b750b0fc472c34ee61e6f028bba"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a05374b750b0fc472c34ee61e6f028bba">arm_compute::BorderSize::left</a></div><div class="ttdeci">unsigned int left</div><div class="ttdoc">left of the border</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00352">Types.h:352</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a59e56af19e754a6aa26a612ebf91d05fa62be47fdd89da032cf78dfce82239579"><div class="ttname"><a href="namespacearm__compute.xhtml#a59e56af19e754a6aa26a612ebf91d05fa62be47fdd89da032cf78dfce82239579">arm_compute::ErrorCode::RUNTIME_ERROR</a></div><div class="ttdoc">Generic runtime error.</div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml_a78b0fed184c642b78f32fd34b228a5f9"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a78b0fed184c642b78f32fd34b228a5f9">arm_compute::BorderSize::right</a></div><div class="ttdeci">unsigned int right</div><div class="ttdoc">right of the border</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00350">Types.h:350</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">arm_compute::DataLayout::NCHW</a></div><div class="ttdoc">Num samples, channels, height, width.</div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a95ee388aa7c5bccab918235dc538a6b3"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">arm_compute::wrapper::vgethigh</a></div><div class="ttdeci">uint8x8_t vgethigh(const uint8x16_t val)</div><div class="ttdef"><b>Definition:</b> <a href="gethigh_8h_source.xhtml#l00039">gethigh.h:39</a></div></div>
<div class="ttc" id="_validate_8h_xhtml_aff911654521523937ff24372a870b89f"><div class="ttname"><a href="_validate_8h.xhtml#aff911654521523937ff24372a870b89f">ARM_COMPUTE_RETURN_ERROR_ON_NULLPTR</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_NULLPTR(...)</div><div class="ttdef"><b>Definition:</b> <a href="_validate_8h_source.xhtml#l00163">Validate.h:163</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_ad2d402364fa822b0b7775081291eeca9"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">arm_compute::Window::DimY</a></div><div class="ttdeci">static constexpr size_t DimY</div><div class="ttdoc">Alias for dimension 1 also known as Y dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00045">Window.h:45</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_direct_convolution_layer_kernel_xhtml_a423f9a45a52983b4de5e2b347f4369c7"><div class="ttname"><a href="classarm__compute_1_1_n_e_direct_convolution_layer_kernel.xhtml#a423f9a45a52983b4de5e2b347f4369c7">arm_compute::NEDirectConvolutionLayerKernel::border_size</a></div><div class="ttdeci">BorderSize border_size() const override</div><div class="ttdoc">The size of the border for that kernel.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_direct_convolution_layer_kernel_8cpp_source.xhtml#l01459">NEDirectConvolutionLayerKernel.cpp:1459</a></div></div>
<div class="ttc" id="_validate_8h_xhtml_a921b705e9e3e0fe928928447869e62a5"><div class="ttname"><a href="_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_NULLPTR(...)</div><div class="ttdef"><b>Definition:</b> <a href="_validate_8h_source.xhtml#l00161">Validate.h:161</a></div></div>
<div class="ttc" id="structarm__compute_1_1_thread_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_thread_info.xhtml">arm_compute::ThreadInfo</a></div><div class="ttdoc">Information about executing thread and CPU.</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_types_8h_source.xhtml#l00225">CPPTypes.h:225</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a18064e0011c3869d884653e9e7c47b66"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a18064e0011c3869d884653e9e7c47b66">arm_compute::ITensorInfo::total_size</a></div><div class="ttdeci">virtual size_t total_size() const =0</div><div class="ttdoc">Returns the total size of the tensor in bytes.</div></div>
<div class="ttc" id="_error_8h_xhtml_af1b8ff8eb557a2ad11272f1505f45d34"><div class="ttname"><a href="_error_8h.xhtml#af1b8ff8eb557a2ad11272f1505f45d34">ARM_COMPUTE_CREATE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_CREATE_ERROR(error_code, msg)</div><div class="ttdoc">Creates an error with a given message.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00159">Error.h:159</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1detail_xhtml"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml">arm_compute::detail</a></div><div class="ttdef"><b>Definition:</b> <a href="_n_e_activation_function_detail_8h_source.xhtml#l00031">NEActivationFunctionDetail.h:31</a></div></div>
<div class="ttc" id="namespace_gemm_tuner_xhtml_a7aead736a07eaf25623ad7bfa1f0ee2d"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a7aead736a07eaf25623ad7bfa1f0ee2d">GemmTuner.type</a></div><div class="ttdeci">type</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00527">GemmTuner.py:527</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_a893d17b56b9abc4423ce26e9a24ac5dc"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">arm_compute::Window::DimZ</a></div><div class="ttdeci">static constexpr size_t DimZ</div><div class="ttdoc">Alias for dimension 2 also known as Z dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00047">Window.h:47</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a3a440b3893fa10608d4428958be1c52ea696b031073e74bf2cb98e5ef201d4aa3"><div class="ttname"><a href="namespacearm__compute.xhtml#a3a440b3893fa10608d4428958be1c52ea696b031073e74bf2cb98e5ef201d4aa3">arm_compute::CLVersion::UNKNOWN</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">arm_compute::DataLayout::NHWC</a></div><div class="ttdoc">Num samples, height, width, channels.</div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_direct_convolution_layer_kernel_xhtml_ac0cdf0dbaff299b1359714a7f70d6072"><div class="ttname"><a href="classarm__compute_1_1_n_e_direct_convolution_layer_kernel.xhtml#ac0cdf0dbaff299b1359714a7f70d6072">arm_compute::NEDirectConvolutionLayerKernel::NEDirectConvolutionLayerKernel</a></div><div class="ttdeci">NEDirectConvolutionLayerKernel()</div><div class="ttdoc">Default constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_direct_convolution_layer_kernel_8cpp_source.xhtml#l01453">NEDirectConvolutionLayerKernel.cpp:1453</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a64a08a9fec5aeee8650e7182b6d171d0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">arm_compute::test::validation::weights</a></div><div class="ttdeci">CLTensor weights</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00188">ConvolutionLayer.cpp:188</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ab1806bf0c5a41f674fb9d2dc6af644f5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ab1806bf0c5a41f674fb9d2dc6af644f5">arm_compute::test::validation::output_shape</a></div><div class="ttdeci">output_shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00182">ConvolutionLayer.cpp:182</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_direct_convolution_layer_kernel_xhtml_a38da9c4ac16c0ca78e5d7176aab3435e"><div class="ttname"><a href="classarm__compute_1_1_n_e_direct_convolution_layer_kernel.xhtml#a38da9c4ac16c0ca78e5d7176aab3435e">arm_compute::NEDirectConvolutionLayerKernel::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *input, const ITensorInfo *weights, const ITensorInfo *output, const PadStrideInfo &amp;conv_info)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of NEDirectConvolutionLayer...</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_direct_convolution_layer_kernel_8cpp_source.xhtml#l01498">NEDirectConvolutionLayerKernel.cpp:1498</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a1c69762a42ab8add645d0a949b6f4b1f"><div class="ttname"><a href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_MSG(cond, msg)</div><div class="ttdoc">If the condition is true, an error is returned.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00244">Error.h:244</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">arm_compute::DataLayoutDimension::WIDTH</a></div><div class="ttdoc">width</div></div>
<div class="ttc" id="arm__compute_2core_2_helpers_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_helpers_8h.xhtml">Helpers.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a39e87435be178fba49b76f49426ef873"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">arm_compute::wrapper::vdup_n</a></div><div class="ttdeci">uint8x8_t vdup_n(uint8_t value, traits::vector_64_tag)</div><div class="ttdef"><b>Definition:</b> <a href="dup__n_8h_source.xhtml#l00041">dup_n.h:41</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5002bf7ec46d52971f9526e94172cfee"><div class="ttname"><a href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;... iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00123">Helpers.inl:123</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1detail_xhtml_afaba543670e99c2483e0bd1996201ba3"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#afaba543670e99c2483e0bd1996201ba3">arm_compute::detail::load_matrix_row</a></div><div class="ttdeci">float32x4x3_t load_matrix_row(const float *ptr)</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_direct_convolution3x3_8h_source.xhtml#l00034">NEDirectConvolution3x3.h:34</a></div></div>
<div class="ttc" id="_access_window_static_8h_xhtml"><div class="ttname"><a href="_access_window_static_8h.xhtml">AccessWindowStatic.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_ac4a1050be02b20b3f791b9a483f3abe2"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#ac4a1050be02b20b3f791b9a483f3abe2">arm_compute::Dimensions::y</a></div><div class="ttdeci">T y() const</div><div class="ttdoc">Alias to access the size of the second dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00086">Dimensions.h:86</a></div></div>
<div class="ttc" id="wrapper_8h_xhtml"><div class="ttname"><a href="wrapper_8h.xhtml">wrapper.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a6b14f175bf5281f57b561e2d4e4b1f1f"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">arm_compute::ITensorInfo::strides_in_bytes</a></div><div class="ttdeci">virtual const Strides &amp; strides_in_bytes() const =0</div><div class="ttdoc">The strides in bytes for accessing each dimension of the tensor.</div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a4287931a2912ecb6cece71219ca5478c"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">arm_compute::wrapper::vmla</a></div><div class="ttdeci">uint8x8_t vmla(const uint8x8_t &amp;a, const uint8x8_t &amp;b, const uint8x8_t &amp;c)</div><div class="ttdef"><b>Definition:</b> <a href="mla_8h_source.xhtml#l00046">mla.h:46</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a5f5b6c4337eac9e2e0046ca2304d80dc"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">arm_compute::test::validation::data_type</a></div><div class="ttdeci">data_type</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_arithmetic_addition_8cpp_source.xhtml#l00138">ArithmeticAddition.cpp:138</a></div></div>
<div class="ttc" id="structarm__compute_1_1_valid_region_xhtml"><div class="ttname"><a href="structarm__compute_1_1_valid_region.xhtml">arm_compute::ValidRegion</a></div><div class="ttdoc">Container for valid region of a window.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00184">Types.h:184</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a46e938020a3ac8c926d0590b7fe957db"><div class="ttname"><a href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">arm_compute::get_data_layout_dimension_index</a></div><div class="ttdeci">size_t get_data_layout_dimension_index(const DataLayout data_layout, const DataLayoutDimension data_layout_dimension)</div><div class="ttdoc">Get the index of the given dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00327">Helpers.inl:327</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a4f4125dba5283887b34f889b1c615c0c"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">arm_compute::test::validation::info</a></div><div class="ttdeci">info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00182">ConvolutionLayer.cpp:182</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_1_1_dimension_xhtml_a0f590bfcf19110f44efc502e7b5c1d9e"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">arm_compute::Window::Dimension::end</a></div><div class="ttdeci">constexpr int end() const</div><div class="ttdoc">Return the end of the dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00097">Window.h:97</a></div></div>
<div class="ttc" id="classarm__compute_1_1_iterator_xhtml"><div class="ttname"><a href="classarm__compute_1_1_iterator.xhtml">arm_compute::Iterator</a></div><div class="ttdoc">Iterator updated by execute_window_loop for each window element.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_helpers_8h_source.xhtml#l00318">Helpers.h:318</a></div></div>
<div class="ttc" id="arm__compute_2core_2_types_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_types_8h.xhtml">Types.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">arm_compute::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdoc">Available data types.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00075">Types.h:75</a></div></div>
<div class="ttc" id="_validate_8h_xhtml_a6eb9ce82815fe429250189da7592ba75"><div class="ttname"><a href="_validate_8h.xhtml#a6eb9ce82815fe429250189da7592ba75">ARM_COMPUTE_ERROR_ON_INVALID_SUBWINDOW</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_INVALID_SUBWINDOW(f, s)</div><div class="ttdef"><b>Definition:</b> <a href="_validate_8h_source.xhtml#l00205">Validate.h:205</a></div></div>
<div class="ttc" id="_n_e_fixed_point_8h_xhtml"><div class="ttname"><a href="_n_e_fixed_point_8h.xhtml">NEFixedPoint.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">arm_compute::DataLayout</a></div><div class="ttdeci">DataLayout</div><div class="ttdoc">[DataLayout enum definition]</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00117">Types.h:117</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_1_1_dimension_xhtml_ab24e31d1a4830bf79564ee902ec6c060"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">arm_compute::Window::Dimension::start</a></div><div class="ttdeci">constexpr int start() const</div><div class="ttdoc">Return the start of the dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00092">Window.h:92</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml">arm_compute::Window</a></div><div class="ttdoc">Describe a multidimensional execution window.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00039">Window.h:39</a></div></div>
<div class="ttc" id="_validate_8h_xhtml_a1b35b0d258183cf9ef36adf684d0b88c"><div class="ttname"><a href="_validate_8h.xhtml#a1b35b0d258183cf9ef36adf684d0b88c">ARM_COMPUTE_ERROR_ON_UNCONFIGURED_KERNEL</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_UNCONFIGURED_KERNEL(k)</div><div class="ttdef"><b>Definition:</b> <a href="_validate_8h_source.xhtml#l00941">Validate.h:941</a></div></div>
<div class="ttc" id="_i_access_window_8h_xhtml"><div class="ttname"><a href="_i_access_window_8h.xhtml">IAccessWindow.h</a></div></div>
<div class="ttc" id="_validate_8h_xhtml"><div class="ttname"><a href="_validate_8h.xhtml">Validate.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a367b5090ab432bc7de2c32369e087ab1"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">arm_compute::ITensorInfo::data_layout</a></div><div class="ttdeci">virtual DataLayout data_layout() const =0</div><div class="ttdoc">Get the data layout of the tensor.</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aebb8dcc11953d78e620bbef0b9e2183.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_d91e1966cc57df4f49d1e07be7697713.xhtml">NEON</a></li><li class="navelem"><a class="el" href="dir_1ce938f580a6f304b99685e2c1dd19db.xhtml">kernels</a></li><li class="navelem"><a class="el" href="_n_e_direct_convolution_layer_kernel_8cpp.xhtml">NEDirectConvolutionLayerKernel.cpp</a></li>
    <li class="footer">Generated on Fri Feb 21 2020 11:10:14 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
