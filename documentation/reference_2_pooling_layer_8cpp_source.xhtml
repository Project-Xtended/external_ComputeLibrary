<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: tests/validation/reference/PoolingLayer.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('reference_2_pooling_layer_8cpp_source.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">PoolingLayer.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="reference_2_pooling_layer_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017-2020 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_pooling_layer_8h.xhtml">PoolingLayer.h</a>&quot;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_types_8h.xhtml">arm_compute/core/Types.h</a>&quot;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_shape_calculator_8h.xhtml">arm_compute/core/utils/misc/ShapeCalculator.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="tests_2validation_2_helpers_8h.xhtml">tests/validation/Helpers.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;{</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword">namespace </span>test</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;{</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keyword">namespace </span>validation</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="keyword">namespace </span>reference</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml">arm_compute::misc::shape_calculator</a>;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;template &lt;typename T, typename ACC_T, typename std::enable_if&lt;is_floating_point&lt;T&gt;::value, <span class="keywordtype">int</span>&gt;<a class="code" href="namespace_gemm_tuner.xhtml#a7aead736a07eaf25623ad7bfa1f0ee2d">::type</a>&gt;</div><div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#adde6134bc76943a056eba241fd26f21b">   41</a></span>&#160;<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#adde6134bc76943a056eba241fd26f21b">pooling_layer_internal</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a>, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>)</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.is_global_pooling &amp;&amp; (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a>.shape().x() != <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a>.shape().y()));</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="comment">// Create reference</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>{ <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#ad242bedd6845b8fc13ade41cfc062c83">compute_pool_shape</a>(<a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a>.shape(), 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a>.data_type()), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a>.data_type(), 1 };</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>   pool_size_x     = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.is_global_pooling ? <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a>.shape().x() : <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.pool_size.width;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>   pool_size_y     = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.is_global_pooling ? <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a>.shape().y() : <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.pool_size.height;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93">PoolingType</a> <a class="code" href="namespace_gemm_tuner.xhtml#a7aead736a07eaf25623ad7bfa1f0ee2d">type</a>            = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.pool_type;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keywordtype">int</span>         pool_stride_x   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.pad_stride_info.stride().first;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keywordtype">int</span>         pool_stride_y   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.pad_stride_info.stride().second;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keywordtype">int</span>         pad_left        = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.pad_stride_info.pad_left();</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keywordtype">int</span>         pad_top         = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.pad_stride_info.pad_top();</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keywordtype">int</span>         pad_right       = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.pad_stride_info.pad_right();</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keywordtype">int</span>         pad_bottom      = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.pad_stride_info.pad_bottom();</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keywordtype">bool</span>        exclude_padding = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.exclude_padding;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> w_src      = static_cast&lt;int&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a>.shape()[0]);</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> h_src      = static_cast&lt;int&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a>.shape()[1]);</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  upper_dims = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a>.shape().total_size() / (w_src * h_src);</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> w_dst = static_cast&lt;int&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.shape()[0]);</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> h_dst = static_cast&lt;int&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.shape()[1]);</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespace_gemm_tuner.xhtml#a7aead736a07eaf25623ad7bfa1f0ee2d">type</a> == <a class="code" href="namespacearm__compute.xhtml#adf2ced65e536375a1c96425d9fced858a26a4b44a837bf97b972628509912b4a5">PoolingType::MAX</a>)</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    {</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> r = 0; r &lt; upper_dims; ++r)</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        {</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> h = 0; h &lt; h_dst; ++h)</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;            {</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                <span class="keywordflow">for</span>(<span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a> = 0; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a> &lt; w_dst; ++<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>)</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                {</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                    <span class="keywordtype">int</span> wstart = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a> * pool_stride_x - pad_left;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                    <span class="keywordtype">int</span> hstart = h * pool_stride_y - pad_top;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                    <span class="keywordtype">int</span> wend   = std::min(wstart + pool_size_x, w_src);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                    <span class="keywordtype">int</span> hend   = std::min(hstart + pool_size_y, h_src);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                    wstart     = std::max(wstart, 0);</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                    hstart     = std::max(hstart, 0);</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                    <span class="keyword">auto</span> max_val = <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;ACC_T&gt;::lowest</a>();</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> y = hstart; y &lt; hend; ++y)</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                    {</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> x = wstart; x &lt; wend; ++x)</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                        {</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                            <span class="keyword">const</span> <span class="keyword">auto</span> val = static_cast&lt;ACC_T&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a>[r * h_src * w_src + y * w_src + x]);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                            <span class="keywordflow">if</span>(val &gt; max_val)</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                            {</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                                max_val = val;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                            }</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                        }</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                    }</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[r * h_dst * w_dst + h * w_dst + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>] = static_cast&lt;T&gt;(max_val);</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                }</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            }</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        }</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    }</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keywordflow">else</span> <span class="comment">// Average or l2 pooling</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    {</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> r = 0; r &lt; upper_dims; ++r)</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        {</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> h = 0; h &lt; h_dst; ++h)</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            {</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                <span class="keywordflow">for</span>(<span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a> = 0; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a> &lt; w_dst; ++<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>)</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                {</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                    ACC_T avg_val(0);</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                    <span class="keywordtype">int</span>   wstart = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a> * pool_stride_x - pad_left;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                    <span class="keywordtype">int</span>   hstart = h * pool_stride_y - pad_top;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                    <span class="keywordtype">int</span>   wend   = std::min(wstart + pool_size_x, w_src + pad_right);</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                    <span class="keywordtype">int</span>   hend   = std::min(hstart + pool_size_y, h_src + pad_bottom);</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                    <span class="keywordtype">int</span>   pool   = (hend - hstart) * (wend - wstart);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                    wstart       = std::max(wstart, 0);</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                    hstart       = std::max(hstart, 0);</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                    wend         = std::min(wend, w_src);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                    hend         = std::min(hend, h_src);</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                    <span class="comment">// Exclude padding pixels from the average</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                    <span class="keywordflow">if</span>(exclude_padding)</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                    {</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                        pool = (hend - hstart) * (wend - wstart);</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                    }</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                    <span class="keywordflow">if</span>(<a class="code" href="namespace_gemm_tuner.xhtml#a7aead736a07eaf25623ad7bfa1f0ee2d">type</a> == <a class="code" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93afcefd647d6a866603c627b11347c707a">PoolingType::AVG</a>)</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                    {</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> y = hstart; y &lt; hend; ++y)</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                        {</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> x = wstart; x &lt; wend; ++x)</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                            {</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                                avg_val += static_cast&lt;ACC_T&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a>[r * h_src * w_src + y * w_src + x]);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                            }</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                        }</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[r * h_dst * w_dst + h * w_dst + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>] = avg_val / pool;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                    }</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                    <span class="keywordflow">else</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                    {</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> y = hstart; y &lt; hend; ++y)</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                        {</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> x = wstart; x &lt; wend; ++x)</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                            {</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                                <span class="keyword">const</span> <span class="keyword">auto</span> val = static_cast&lt;ACC_T&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a>[r * h_src * w_src + y * w_src + x]);</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                                avg_val += val * val;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                            }</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                        }</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[r * h_dst * w_dst + h * w_dst + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>] = static_cast&lt;T&gt;(std::sqrt(avg_val / pool));</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                    }</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                }</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            }</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        }</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    }</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;}</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="keyword">template</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;float&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a38df5d4b79b019076dc4f729349a8a89">pooling_layer_internal&lt;float&gt;</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;float&gt;</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a>, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>);</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="keyword">template</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;half&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#ab5c66e1574182a7d23537ef00cd3c58b">pooling_layer_internal&lt;half&gt;</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;half&gt;</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a>, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>);</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="keyword">template</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;half&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a935d3b47ca900a57986546862ad24bf4">pooling_layer_internal&lt;half, float&gt;</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;half&gt;</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a>, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00159"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#aa38db3b299b350b91320f4e3a39ee437">  159</a></span>&#160;<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#aa38db3b299b350b91320f4e3a39ee437">pooling_layer</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a>, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;output_qinfo)</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;{</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(output_qinfo);</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keywordflow">return</span> pooling_layer_internal&lt;T, T&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>);</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;}</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00166"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a917e9b0539263f775435cac95a8836a9">  166</a></span>&#160;<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;uint8_t&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a917e9b0539263f775435cac95a8836a9">pooling_layer&lt;uint8_t&gt;</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;uint8_t&gt;</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a>, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;output_qinfo)</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;{</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;float&gt;</a>   src_tmp = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a07000b60b919e8d30b8f1a6411a0fe7d">convert_from_asymmetric</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a>);</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;float&gt;</a>   dst_tmp = <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a38df5d4b79b019076dc4f729349a8a89">pooling_layer_internal&lt;float&gt;</a>(src_tmp, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>);</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;uint8_t&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>     = convert_to_asymmetric&lt;uint8_t&gt;(dst_tmp, output_qinfo);</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;}</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00175"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a80f305eb6538237f6ad5cc3db0a1e32a">  175</a></span>&#160;<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int8_t&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a80f305eb6538237f6ad5cc3db0a1e32a">pooling_layer&lt;int8_t&gt;</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int8_t&gt;</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a>, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;output_qinfo)</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;{</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;float&gt;</a>  src_tmp = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a07000b60b919e8d30b8f1a6411a0fe7d">convert_from_asymmetric</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a>);</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;float&gt;</a>  dst_tmp = <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a38df5d4b79b019076dc4f729349a8a89">pooling_layer_internal&lt;float&gt;</a>(src_tmp, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>);</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int8_t&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>     = convert_to_asymmetric&lt;int8_t&gt;(dst_tmp, output_qinfo);</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;}</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00184"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a2babe4794cd5ebb985a9e309f3f66380">  184</a></span>&#160;<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;half&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#aa38db3b299b350b91320f4e3a39ee437">pooling_layer</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;half&gt;</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a>, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;output_qinfo)</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;{</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(output_qinfo);</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a>.data_type() == <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">DataType::F16</a> &amp;&amp; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.fp_mixed_precision)</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    {</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a935d3b47ca900a57986546862ad24bf4">pooling_layer_internal&lt;half, float&gt;</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>);</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    }</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#ab5c66e1574182a7d23537ef00cd3c58b">pooling_layer_internal&lt;half&gt;</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>);</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;}</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="keyword">template</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;float&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#aa38db3b299b350b91320f4e3a39ee437">pooling_layer</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;float&gt;</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a>, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;output_qinfo);</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;} <span class="comment">// namespace reference</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;} <span class="comment">// namespace validation</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;} <span class="comment">// namespace test</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_a935d3b47ca900a57986546862ad24bf4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a935d3b47ca900a57986546862ad24bf4">arm_compute::test::validation::reference::pooling_layer_internal&lt; half, float &gt;</a></div><div class="ttdeci">template SimpleTensor&lt; half &gt; pooling_layer_internal&lt; half, float &gt;(const SimpleTensor&lt; half &gt; &amp;src, const PoolingLayerInfo &amp;info)</div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a1a367830ae09bf6138df822888ec1d71"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">arm_compute::test::validation::w</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; w</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00156">DFT.cpp:156</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_adde6134bc76943a056eba241fd26f21b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#adde6134bc76943a056eba241fd26f21b">arm_compute::test::validation::reference::pooling_layer_internal</a></div><div class="ttdeci">SimpleTensor&lt; T &gt; pooling_layer_internal(const SimpleTensor&lt; T &gt; &amp;src, const PoolingLayerInfo &amp;info)</div><div class="ttdef"><b>Definition:</b> <a href="reference_2_pooling_layer_8cpp_source.xhtml#l00041">PoolingLayer.cpp:41</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_a80f305eb6538237f6ad5cc3db0a1e32a"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a80f305eb6538237f6ad5cc3db0a1e32a">arm_compute::test::validation::reference::pooling_layer&lt; int8_t &gt;</a></div><div class="ttdeci">SimpleTensor&lt; int8_t &gt; pooling_layer&lt; int8_t &gt;(const SimpleTensor&lt; int8_t &gt; &amp;src, const PoolingLayerInfo &amp;info, const QuantizationInfo &amp;output_qinfo)</div><div class="ttdef"><b>Definition:</b> <a href="reference_2_pooling_layer_8cpp_source.xhtml#l00175">PoolingLayer.cpp:175</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_aa38db3b299b350b91320f4e3a39ee437"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#aa38db3b299b350b91320f4e3a39ee437">arm_compute::test::validation::reference::pooling_layer</a></div><div class="ttdeci">SimpleTensor&lt; T &gt; pooling_layer(const SimpleTensor&lt; T &gt; &amp;src, const PoolingLayerInfo &amp;info, const QuantizationInfo &amp;output_qinfo)</div><div class="ttdef"><b>Definition:</b> <a href="reference_2_pooling_layer_8cpp_source.xhtml#l00159">PoolingLayer.cpp:159</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_ab5c66e1574182a7d23537ef00cd3c58b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#ab5c66e1574182a7d23537ef00cd3c58b">arm_compute::test::validation::reference::pooling_layer_internal&lt; half &gt;</a></div><div class="ttdeci">template SimpleTensor&lt; half &gt; pooling_layer_internal&lt; half &gt;(const SimpleTensor&lt; half &gt; &amp;src, const PoolingLayerInfo &amp;info)</div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="tests_2validation_2_helpers_8h_xhtml"><div class="ttname"><a href="tests_2validation_2_helpers_8h.xhtml">Helpers.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a07000b60b919e8d30b8f1a6411a0fe7d"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a07000b60b919e8d30b8f1a6411a0fe7d">arm_compute::test::validation::convert_from_asymmetric</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; convert_from_asymmetric(const SimpleTensor&lt; uint8_t &gt; &amp;src)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_helpers_8cpp_source.xhtml#l00112">Helpers.cpp:112</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_a73e352c61baaf9c1178da2d30105b04e"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">arm_compute::support::cpp11::lowest</a></div><div class="ttdeci">T lowest()</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00418">ToolchainSupport.h:418</a></div></div>
<div class="ttc" id="_pooling_layer_8h_xhtml"><div class="ttname"><a href="_pooling_layer_8h.xhtml">PoolingLayer.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2020 ARM Limited.</div><div class="ttdef"><b>Definition:</b> <a href="00__introduction_8dox_source.xhtml#l00024">00_introduction.dox:24</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">arm_compute::Format::F16</a></div><div class="ttdoc">1 channel, 1 F16 per channel</div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_ad242bedd6845b8fc13ade41cfc062c83"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#ad242bedd6845b8fc13ade41cfc062c83">arm_compute::misc::shape_calculator::compute_pool_shape</a></div><div class="ttdeci">TensorShape compute_pool_shape(const ITensorInfo &amp;input, PoolingLayerInfo pool_info)</div><div class="ttdoc">Calculate the output pool shape of a tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l00787">ShapeCalculator.h:787</a></div></div>
<div class="ttc" id="classarm__compute_1_1_quantization_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_quantization_info.xhtml">arm_compute::QuantizationInfo</a></div><div class="ttdoc">Quantization information.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00069">QuantizationInfo.h:69</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
<div class="ttc" id="structarm__compute_1_1_pooling_layer_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_pooling_layer_info.xhtml">arm_compute::PoolingLayerInfo</a></div><div class="ttdoc">Pooling Layer Information struct.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01211">Types.h:1211</a></div></div>
<div class="ttc" id="_shape_calculator_8h_xhtml"><div class="ttname"><a href="_shape_calculator_8h.xhtml">ShapeCalculator.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_a38df5d4b79b019076dc4f729349a8a89"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a38df5d4b79b019076dc4f729349a8a89">arm_compute::test::validation::reference::pooling_layer_internal&lt; float &gt;</a></div><div class="ttdeci">template SimpleTensor&lt; float &gt; pooling_layer_internal&lt; float &gt;(const SimpleTensor&lt; float &gt; &amp;src, const PoolingLayerInfo &amp;info)</div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">CLTensor dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_absolute_difference_8cpp_source.xhtml#l00102">AbsoluteDifference.cpp:102</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_a917e9b0539263f775435cac95a8836a9"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a917e9b0539263f775435cac95a8836a9">arm_compute::test::validation::reference::pooling_layer&lt; uint8_t &gt;</a></div><div class="ttdeci">SimpleTensor&lt; uint8_t &gt; pooling_layer&lt; uint8_t &gt;(const SimpleTensor&lt; uint8_t &gt; &amp;src, const PoolingLayerInfo &amp;info, const QuantizationInfo &amp;output_qinfo)</div><div class="ttdef"><b>Definition:</b> <a href="reference_2_pooling_layer_8cpp_source.xhtml#l00166">PoolingLayer.cpp:166</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">arm_compute::test::SimpleTensor</a></div><div class="ttdoc">Simple tensor object that stores elements in a consecutive chunk of memory.</div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00059">SimpleTensor.h:59</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a9172da722f0a434e5cc07c0a3c115d93"><div class="ttname"><a href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93">arm_compute::PoolingType</a></div><div class="ttdeci">PoolingType</div><div class="ttdoc">Available pooling types.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00574">Types.h:574</a></div></div>
<div class="ttc" id="namespace_gemm_tuner_xhtml_a7aead736a07eaf25623ad7bfa1f0ee2d"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a7aead736a07eaf25623ad7bfa1f0ee2d">GemmTuner.type</a></div><div class="ttdeci">type</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00527">GemmTuner.py:527</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a9172da722f0a434e5cc07c0a3c115d93afcefd647d6a866603c627b11347c707a"><div class="ttname"><a href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93afcefd647d6a866603c627b11347c707a">arm_compute::PoolingType::AVG</a></div><div class="ttdoc">Average Pooling.</div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml">arm_compute::TensorInfo</a></div><div class="ttdoc">Store the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00045">TensorInfo.h:45</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml">arm_compute::misc::shape_calculator</a></div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l00040">ShapeCalculator.h:40</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_adf2ced65e536375a1c96425d9fced858a26a4b44a837bf97b972628509912b4a5"><div class="ttname"><a href="namespacearm__compute.xhtml#adf2ced65e536375a1c96425d9fced858a26a4b44a837bf97b972628509912b4a5">arm_compute::NonLinearFilterFunction::MAX</a></div><div class="ttdoc">Non linear dilate.</div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a4f4125dba5283887b34f889b1c615c0c"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">arm_compute::test::validation::info</a></div><div class="ttdeci">info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00182">ConvolutionLayer.cpp:182</a></div></div>
<div class="ttc" id="arm__compute_2core_2_types_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_types_8h.xhtml">Types.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a989ab3e96426615bb98e04e0235088ca"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">arm_compute::test::validation::src</a></div><div class="ttdeci">cast configure &amp; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_cast_8cpp_source.xhtml#l00169">Cast.cpp:169</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_59425e443f801f1f2fd8bbe4959a3ccf.xhtml">tests</a></li><li class="navelem"><a class="el" href="dir_e7c7b16542faa38cb4655ff1750d3604.xhtml">validation</a></li><li class="navelem"><a class="el" href="dir_46fdb196cebdbffe77dac340cde62f29.xhtml">reference</a></li><li class="navelem"><a class="el" href="reference_2_pooling_layer_8cpp.xhtml">PoolingLayer.cpp</a></li>
    <li class="footer">Generated on Fri Feb 21 2020 11:10:19 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
