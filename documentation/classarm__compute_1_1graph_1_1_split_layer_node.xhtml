<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: SplitLayerNode Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.02.1</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classarm__compute_1_1graph_1_1_split_layer_node.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">SplitLayerNode Class Reference<span class="mlabels"><span class="mlabel">final</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p>Split Layer node.  
 <a href="classarm__compute_1_1graph_1_1_split_layer_node.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_split_layer_node_8h_source.xhtml">SplitLayerNode.h</a>&gt;</code></p>
<div class="dynheader">
Collaboration diagram for SplitLayerNode:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classarm__compute_1_1graph_1_1_split_layer_node__coll__graph.svg" width="130" height="112"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:accf2137eb2965aaafd664d513b330874"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_split_layer_node.xhtml#accf2137eb2965aaafd664d513b330874">SplitLayerNode</a> (unsigned int <a class="el" href="classarm__compute_1_1graph_1_1_split_layer_node.xhtml#aa5059ce7798ddeeb40b9f6659b851b8b">num_splits</a>, unsigned int <a class="el" href="classarm__compute_1_1graph_1_1_split_layer_node.xhtml#a5c86a49e3cc9c3c03c1c3fb1e027e22b">axis</a>=0)</td></tr>
<tr class="memdesc:accf2137eb2965aaafd664d513b330874"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default Constructor.  <a href="#accf2137eb2965aaafd664d513b330874">More...</a><br /></td></tr>
<tr class="separator:accf2137eb2965aaafd664d513b330874"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa5059ce7798ddeeb40b9f6659b851b8b"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_split_layer_node.xhtml#aa5059ce7798ddeeb40b9f6659b851b8b">num_splits</a> () const</td></tr>
<tr class="memdesc:aa5059ce7798ddeeb40b9f6659b851b8b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Number of splits accessor.  <a href="#aa5059ce7798ddeeb40b9f6659b851b8b">More...</a><br /></td></tr>
<tr class="separator:aa5059ce7798ddeeb40b9f6659b851b8b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c86a49e3cc9c3c03c1c3fb1e027e22b"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_split_layer_node.xhtml#a5c86a49e3cc9c3c03c1c3fb1e027e22b">axis</a> () const</td></tr>
<tr class="memdesc:a5c86a49e3cc9c3c03c1c3fb1e027e22b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Split axis accessor.  <a href="#a5c86a49e3cc9c3c03c1c3fb1e027e22b">More...</a><br /></td></tr>
<tr class="separator:a5c86a49e3cc9c3c03c1c3fb1e027e22b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a600f574bc2868a148f9a746d16774dbd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_split_layer_node.xhtml#a600f574bc2868a148f9a746d16774dbd">validate</a> () const override</td></tr>
<tr class="memdesc:a600f574bc2868a148f9a746d16774dbd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Validate node.  <a href="#a600f574bc2868a148f9a746d16774dbd">More...</a><br /></td></tr>
<tr class="separator:a600f574bc2868a148f9a746d16774dbd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a65d13dc93e2df5e8ab725263cf9f4ac5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16">NodeType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_split_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">type</a> () const override</td></tr>
<tr class="memdesc:a65d13dc93e2df5e8ab725263cf9f4ac5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns node's type.  <a href="#a65d13dc93e2df5e8ab725263cf9f4ac5">More...</a><br /></td></tr>
<tr class="separator:a65d13dc93e2df5e8ab725263cf9f4ac5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6272eb9643b239dd0c1e7adde3ee093b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_split_layer_node.xhtml#a6272eb9643b239dd0c1e7adde3ee093b">forward_descriptors</a> () override</td></tr>
<tr class="memdesc:a6272eb9643b239dd0c1e7adde3ee093b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Forwards descriptor information to outputs if possible.  <a href="#a6272eb9643b239dd0c1e7adde3ee093b">More...</a><br /></td></tr>
<tr class="separator:a6272eb9643b239dd0c1e7adde3ee093b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f18a7449b9d7fc9e5fec212b8e61710"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml">TensorDescriptor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_split_layer_node.xhtml#a3f18a7449b9d7fc9e5fec212b8e61710">configure_output</a> (size_t idx) const override</td></tr>
<tr class="memdesc:a3f18a7449b9d7fc9e5fec212b8e61710"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculates output configuration.  <a href="#a3f18a7449b9d7fc9e5fec212b8e61710">More...</a><br /></td></tr>
<tr class="separator:a3f18a7449b9d7fc9e5fec212b8e61710"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb48b5745c55605a2d4ec6f665bb7f3f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_split_layer_node.xhtml#adb48b5745c55605a2d4ec6f665bb7f3f">accept</a> (<a class="el" href="classarm__compute_1_1graph_1_1_i_node_visitor.xhtml">INodeVisitor</a> &amp;v) override</td></tr>
<tr class="memdesc:adb48b5745c55605a2d4ec6f665bb7f3f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Accepts a node visitor.  <a href="#adb48b5745c55605a2d4ec6f665bb7f3f">More...</a><br /></td></tr>
<tr class="separator:adb48b5745c55605a2d4ec6f665bb7f3f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarm__compute_1_1graph_1_1_i_node"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarm__compute_1_1graph_1_1_i_node')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a></td></tr>
<tr class="memitem:a41ea547ddf32e27b4d3b6cc565ad67d1 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a41ea547ddf32e27b4d3b6cc565ad67d1">INode</a> ()</td></tr>
<tr class="memdesc:a41ea547ddf32e27b4d3b6cc565ad67d1 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor.  <a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a41ea547ddf32e27b4d3b6cc565ad67d1">More...</a><br /></td></tr>
<tr class="separator:a41ea547ddf32e27b4d3b6cc565ad67d1 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1356f0d04912be3ec8d8ce7a2b0cddd2 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1356f0d04912be3ec8d8ce7a2b0cddd2">~INode</a> ()=default</td></tr>
<tr class="memdesc:a1356f0d04912be3ec8d8ce7a2b0cddd2 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor.  <a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1356f0d04912be3ec8d8ce7a2b0cddd2">More...</a><br /></td></tr>
<tr class="separator:a1356f0d04912be3ec8d8ce7a2b0cddd2 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d98a026d543444099ae32d51d150848 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a6d98a026d543444099ae32d51d150848">INode</a> (const <a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> &amp;)=delete</td></tr>
<tr class="memdesc:a6d98a026d543444099ae32d51d150848 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prevent instances of this class from being copied (As this class contains pointers)  <a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a6d98a026d543444099ae32d51d150848">More...</a><br /></td></tr>
<tr class="separator:a6d98a026d543444099ae32d51d150848 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac2f34bc6eaa698b25680f2091dc29170 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ac2f34bc6eaa698b25680f2091dc29170">operator=</a> (const <a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> &amp;)=delete</td></tr>
<tr class="memdesc:ac2f34bc6eaa698b25680f2091dc29170 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prevent instances of this class from being copy assigned (As this class contains pointers)  <a href="classarm__compute_1_1graph_1_1_i_node.xhtml#ac2f34bc6eaa698b25680f2091dc29170">More...</a><br /></td></tr>
<tr class="separator:ac2f34bc6eaa698b25680f2091dc29170 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab926b66a0f1c5bfb4b80f6d56e5edbc9 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ab926b66a0f1c5bfb4b80f6d56e5edbc9">INode</a> (<a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> &amp;&amp;)=default</td></tr>
<tr class="memdesc:ab926b66a0f1c5bfb4b80f6d56e5edbc9 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be moved.  <a href="classarm__compute_1_1graph_1_1_i_node.xhtml#ab926b66a0f1c5bfb4b80f6d56e5edbc9">More...</a><br /></td></tr>
<tr class="separator:ab926b66a0f1c5bfb4b80f6d56e5edbc9 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa85ed20eb40b3a914e78124c89556249 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml#aa85ed20eb40b3a914e78124c89556249">operator=</a> (<a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> &amp;&amp;)=default</td></tr>
<tr class="memdesc:aa85ed20eb40b3a914e78124c89556249 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be move assigned.  <a href="classarm__compute_1_1graph_1_1_i_node.xhtml#aa85ed20eb40b3a914e78124c89556249">More...</a><br /></td></tr>
<tr class="separator:aa85ed20eb40b3a914e78124c89556249 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d89c28bd42ba9a52da008bb69367171 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a> () const</td></tr>
<tr class="memdesc:a1d89c28bd42ba9a52da008bb69367171 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns node's name.  <a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">More...</a><br /></td></tr>
<tr class="separator:a1d89c28bd42ba9a52da008bb69367171 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5ea90a25ef8059df2d2e51b82991ebf3 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5ea90a25ef8059df2d2e51b82991ebf3">id</a> () const</td></tr>
<tr class="memdesc:a5ea90a25ef8059df2d2e51b82991ebf3 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns node's ID.  <a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5ea90a25ef8059df2d2e51b82991ebf3">More...</a><br /></td></tr>
<tr class="separator:a5ea90a25ef8059df2d2e51b82991ebf3 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a88421a0f6fd8896906a4a4b86f41ca4f inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a88421a0f6fd8896906a4a4b86f41ca4f">graph</a> () const</td></tr>
<tr class="memdesc:a88421a0f6fd8896906a4a4b86f41ca4f inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns node's <a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a>.  <a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a88421a0f6fd8896906a4a4b86f41ca4f">More...</a><br /></td></tr>
<tr class="separator:a88421a0f6fd8896906a4a4b86f41ca4f inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa508c46863ea4bb2d54407e43bd062c1 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml#aa508c46863ea4bb2d54407e43bd062c1">graph</a> ()</td></tr>
<tr class="memdesc:aa508c46863ea4bb2d54407e43bd062c1 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns node's <a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a>.  <a href="classarm__compute_1_1graph_1_1_i_node.xhtml#aa508c46863ea4bb2d54407e43bd062c1">More...</a><br /></td></tr>
<tr class="separator:aa508c46863ea4bb2d54407e43bd062c1 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3ace781433ede299fb1dc8d0b02667b9 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a3ace781433ede299fb1dc8d0b02667b9">set_graph</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> *g)</td></tr>
<tr class="memdesc:a3ace781433ede299fb1dc8d0b02667b9 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the graph that this node is registered to.  <a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a3ace781433ede299fb1dc8d0b02667b9">More...</a><br /></td></tr>
<tr class="separator:a3ace781433ede299fb1dc8d0b02667b9 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a483b76accbb02199c359bd5cf23dd476 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a483b76accbb02199c359bd5cf23dd476">set_id</a> (<a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> <a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5ea90a25ef8059df2d2e51b82991ebf3">id</a>)</td></tr>
<tr class="memdesc:a483b76accbb02199c359bd5cf23dd476 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the node id.  <a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a483b76accbb02199c359bd5cf23dd476">More...</a><br /></td></tr>
<tr class="separator:a483b76accbb02199c359bd5cf23dd476 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeadb909ea02bec78f92ca35ff0ccbaea inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml#aeadb909ea02bec78f92ca35ff0ccbaea">set_common_node_parameters</a> (<a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> common_params)</td></tr>
<tr class="memdesc:aeadb909ea02bec78f92ca35ff0ccbaea inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets common node parameters.  <a href="classarm__compute_1_1graph_1_1_i_node.xhtml#aeadb909ea02bec78f92ca35ff0ccbaea">More...</a><br /></td></tr>
<tr class="separator:aeadb909ea02bec78f92ca35ff0ccbaea inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab4d8c49b8b04fae8561238b8efb472f5 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ab4d8c49b8b04fae8561238b8efb472f5">set_requested_target</a> (<a class="el" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">Target</a> target)</td></tr>
<tr class="memdesc:ab4d8c49b8b04fae8561238b8efb472f5 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets target preference.  <a href="classarm__compute_1_1graph_1_1_i_node.xhtml#ab4d8c49b8b04fae8561238b8efb472f5">More...</a><br /></td></tr>
<tr class="separator:ab4d8c49b8b04fae8561238b8efb472f5 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7069f1901ff50cd2ac6ba152cb106058 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a7069f1901ff50cd2ac6ba152cb106058">set_assigned_target</a> (<a class="el" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">Target</a> target)</td></tr>
<tr class="memdesc:a7069f1901ff50cd2ac6ba152cb106058 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the final execution target.  <a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a7069f1901ff50cd2ac6ba152cb106058">More...</a><br /></td></tr>
<tr class="separator:a7069f1901ff50cd2ac6ba152cb106058 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a09dab02145c91bb9be20fe98cbedc300 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a09dab02145c91bb9be20fe98cbedc300">set_output_tensor</a> (<a class="el" href="namespacearm__compute_1_1graph.xhtml#a615af95e19b5d9f74d2760183566a9a3">TensorID</a> tid, size_t idx)</td></tr>
<tr class="memdesc:a09dab02145c91bb9be20fe98cbedc300 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the output tensor of at a given index.  <a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a09dab02145c91bb9be20fe98cbedc300">More...</a><br /></td></tr>
<tr class="separator:a09dab02145c91bb9be20fe98cbedc300 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7c77caaf0ff3ccc12220871c6dfed704 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memItemLeft" align="right" valign="top">const std::vector&lt; <a class="el" href="namespacearm__compute_1_1graph.xhtml#a615af95e19b5d9f74d2760183566a9a3">TensorID</a> &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a7c77caaf0ff3ccc12220871c6dfed704">inputs</a> () const</td></tr>
<tr class="memdesc:a7c77caaf0ff3ccc12220871c6dfed704 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns inputs of the node.  <a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a7c77caaf0ff3ccc12220871c6dfed704">More...</a><br /></td></tr>
<tr class="separator:a7c77caaf0ff3ccc12220871c6dfed704 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a74e6b1e9d4924f2fb12baed6a432d3a5 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memItemLeft" align="right" valign="top">const std::vector&lt; <a class="el" href="namespacearm__compute_1_1graph.xhtml#a615af95e19b5d9f74d2760183566a9a3">TensorID</a> &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a74e6b1e9d4924f2fb12baed6a432d3a5">outputs</a> () const</td></tr>
<tr class="memdesc:a74e6b1e9d4924f2fb12baed6a432d3a5 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns outputs of the node.  <a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a74e6b1e9d4924f2fb12baed6a432d3a5">More...</a><br /></td></tr>
<tr class="separator:a74e6b1e9d4924f2fb12baed6a432d3a5 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3fd5d1d4dea9bb355f9baa9b4d44402f inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memItemLeft" align="right" valign="top">const std::vector&lt; <a class="el" href="namespacearm__compute_1_1graph.xhtml#abba17a56bbf16c7cbc7acd4aa54abcea">EdgeID</a> &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a3fd5d1d4dea9bb355f9baa9b4d44402f">input_edges</a> () const</td></tr>
<tr class="memdesc:a3fd5d1d4dea9bb355f9baa9b4d44402f inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns input edge set.  <a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a3fd5d1d4dea9bb355f9baa9b4d44402f">More...</a><br /></td></tr>
<tr class="separator:a3fd5d1d4dea9bb355f9baa9b4d44402f inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abbf8678d888561b348dd1c34d9e34af9 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memItemLeft" align="right" valign="top">const std::set&lt; <a class="el" href="namespacearm__compute_1_1graph.xhtml#abba17a56bbf16c7cbc7acd4aa54abcea">EdgeID</a> &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml#abbf8678d888561b348dd1c34d9e34af9">output_edges</a> () const</td></tr>
<tr class="memdesc:abbf8678d888561b348dd1c34d9e34af9 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns output edge set.  <a href="classarm__compute_1_1graph_1_1_i_node.xhtml#abbf8678d888561b348dd1c34d9e34af9">More...</a><br /></td></tr>
<tr class="separator:abbf8678d888561b348dd1c34d9e34af9 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6a156d1ea7a01d8b27131f30aacaf40b inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a615af95e19b5d9f74d2760183566a9a3">TensorID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a6a156d1ea7a01d8b27131f30aacaf40b">input_id</a> (size_t idx) const</td></tr>
<tr class="memdesc:a6a156d1ea7a01d8b27131f30aacaf40b inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the tensor ID of a given input of the node.  <a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a6a156d1ea7a01d8b27131f30aacaf40b">More...</a><br /></td></tr>
<tr class="separator:a6a156d1ea7a01d8b27131f30aacaf40b inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a339f9817d95cb065b7670d35c03f4d88 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a615af95e19b5d9f74d2760183566a9a3">TensorID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a339f9817d95cb065b7670d35c03f4d88">output_id</a> (size_t idx) const</td></tr>
<tr class="memdesc:a339f9817d95cb065b7670d35c03f4d88 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the tensor ID of a given output of the node.  <a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a339f9817d95cb065b7670d35c03f4d88">More...</a><br /></td></tr>
<tr class="separator:a339f9817d95cb065b7670d35c03f4d88 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad7c09b0faaf3c808b0489012204852a9 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml">Tensor</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a> (size_t idx) const</td></tr>
<tr class="memdesc:ad7c09b0faaf3c808b0489012204852a9 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the tensor of a given input of the node.  <a href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">More...</a><br /></td></tr>
<tr class="separator:ad7c09b0faaf3c808b0489012204852a9 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a27369471d9b2ba47746e1e923f585b9f inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml">Tensor</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a> (size_t idx) const</td></tr>
<tr class="memdesc:a27369471d9b2ba47746e1e923f585b9f inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the tensor of a given output of the node.  <a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">More...</a><br /></td></tr>
<tr class="separator:a27369471d9b2ba47746e1e923f585b9f inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a283425ac27acd897fb075e0cee215020 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute_1_1graph.xhtml#abba17a56bbf16c7cbc7acd4aa54abcea">EdgeID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a283425ac27acd897fb075e0cee215020">input_edge_id</a> (size_t idx) const</td></tr>
<tr class="memdesc:a283425ac27acd897fb075e0cee215020 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the edge ID of a given input of the node.  <a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a283425ac27acd897fb075e0cee215020">More...</a><br /></td></tr>
<tr class="separator:a283425ac27acd897fb075e0cee215020 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6bca7473aa08cb0ecba36cb5dda2badf inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1graph_1_1_edge.xhtml">Edge</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a6bca7473aa08cb0ecba36cb5dda2badf">input_edge</a> (size_t idx) const</td></tr>
<tr class="memdesc:a6bca7473aa08cb0ecba36cb5dda2badf inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the edge of a given input of the node.  <a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a6bca7473aa08cb0ecba36cb5dda2badf">More...</a><br /></td></tr>
<tr class="separator:a6bca7473aa08cb0ecba36cb5dda2badf inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abe0cb3e4411a1c289e3e40e3f9d79fec inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml#abe0cb3e4411a1c289e3e40e3f9d79fec">num_inputs</a> () const</td></tr>
<tr class="memdesc:abe0cb3e4411a1c289e3e40e3f9d79fec inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns number of inputs of the node.  <a href="classarm__compute_1_1graph_1_1_i_node.xhtml#abe0cb3e4411a1c289e3e40e3f9d79fec">More...</a><br /></td></tr>
<tr class="separator:abe0cb3e4411a1c289e3e40e3f9d79fec inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a75d7c8bdf0059bb235880f8ef8d190bc inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a75d7c8bdf0059bb235880f8ef8d190bc">num_outputs</a> () const</td></tr>
<tr class="memdesc:a75d7c8bdf0059bb235880f8ef8d190bc inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns number of outputs of the node.  <a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a75d7c8bdf0059bb235880f8ef8d190bc">More...</a><br /></td></tr>
<tr class="separator:a75d7c8bdf0059bb235880f8ef8d190bc inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a106f54af67828d3da9f8098397d3b4ea inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a106f54af67828d3da9f8098397d3b4ea">common_node_params</a> () const</td></tr>
<tr class="memdesc:a106f54af67828d3da9f8098397d3b4ea inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns common node parameters.  <a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a106f54af67828d3da9f8098397d3b4ea">More...</a><br /></td></tr>
<tr class="separator:a106f54af67828d3da9f8098397d3b4ea inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afc6514aa006c1820217d9a8d832cc656 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">Target</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml#afc6514aa006c1820217d9a8d832cc656">requested_target</a> () const</td></tr>
<tr class="memdesc:afc6514aa006c1820217d9a8d832cc656 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns requested target for this node.  <a href="classarm__compute_1_1graph_1_1_i_node.xhtml#afc6514aa006c1820217d9a8d832cc656">More...</a><br /></td></tr>
<tr class="separator:afc6514aa006c1820217d9a8d832cc656 inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa26cd423e8fc9233bd2bff46f82f46ab inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">Target</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml#aa26cd423e8fc9233bd2bff46f82f46ab">assigned_target</a> () const</td></tr>
<tr class="memdesc:aa26cd423e8fc9233bd2bff46f82f46ab inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns assigned target for this node.  <a href="classarm__compute_1_1graph_1_1_i_node.xhtml#aa26cd423e8fc9233bd2bff46f82f46ab">More...</a><br /></td></tr>
<tr class="separator:aa26cd423e8fc9233bd2bff46f82f46ab inherit pub_methods_classarm__compute_1_1graph_1_1_i_node"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:ac03531d01e5f5d091b030b0c5d6537d7"><td class="memItemLeft" align="right" valign="top">static std::pair&lt; <a class="el" href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml">TensorDescriptor</a>, <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_split_layer_node.xhtml#ac03531d01e5f5d091b030b0c5d6537d7">compute_output_descriptor</a> (const <a class="el" href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml">TensorDescriptor</a> &amp;input_descriptor, unsigned int <a class="el" href="classarm__compute_1_1graph_1_1_split_layer_node.xhtml#aa5059ce7798ddeeb40b9f6659b851b8b">num_splits</a>, unsigned int <a class="el" href="classarm__compute_1_1graph_1_1_split_layer_node.xhtml#a5c86a49e3cc9c3c03c1c3fb1e027e22b">axis</a>, unsigned int idx)</td></tr>
<tr class="memdesc:ac03531d01e5f5d091b030b0c5d6537d7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Computes split layer output descriptor.  <a href="#ac03531d01e5f5d091b030b0c5d6537d7">More...</a><br /></td></tr>
<tr class="separator:ac03531d01e5f5d091b030b0c5d6537d7"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Split Layer node. </p>

<p class="definition">Definition at line <a class="el" href="_split_layer_node_8h_source.xhtml#l00036">36</a> of file <a class="el" href="_split_layer_node_8h_source.xhtml">SplitLayerNode.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="accf2137eb2965aaafd664d513b330874"></a>
<h2 class="memtitle"><span class="permalink"><a href="#accf2137eb2965aaafd664d513b330874">&#9670;&nbsp;</a></span>SplitLayerNode()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1graph_1_1_split_layer_node.xhtml">SplitLayerNode</a> </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>num_splits</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>axis</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Default Constructor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">num_splits</td><td>Number of splits </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">axis</td><td>(Optional) Axis to split on. Supported axis &gt;= 2. Defaults to 0 </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_split_layer_node_8cpp_source.xhtml#l00034">34</a> of file <a class="el" href="_split_layer_node_8cpp_source.xhtml">SplitLayerNode.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    : _num_splits(<a class="code" href="classarm__compute_1_1graph_1_1_split_layer_node.xhtml#aa5059ce7798ddeeb40b9f6659b851b8b">num_splits</a>), _axis(<a class="code" href="classarm__compute_1_1graph_1_1_split_layer_node.xhtml#a5c86a49e3cc9c3c03c1c3fb1e027e22b">axis</a>)</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    _input_edges.resize(1, <a class="code" href="namespacearm__compute_1_1graph.xhtml#a8e0b093eda0649ddbce791bb5076104f">EmptyEdgeID</a>);</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    _outputs.resize(<a class="code" href="classarm__compute_1_1graph_1_1_split_layer_node.xhtml#aa5059ce7798ddeeb40b9f6659b851b8b">num_splits</a>, <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa94938a3eb11fda4724c362c53c28f24">NullTensorID</a>);</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1graph_1_1_split_layer_node_xhtml_aa5059ce7798ddeeb40b9f6659b851b8b"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_split_layer_node.xhtml#aa5059ce7798ddeeb40b9f6659b851b8b">arm_compute::graph::SplitLayerNode::num_splits</a></div><div class="ttdeci">unsigned int num_splits() const</div><div class="ttdoc">Number of splits accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_split_layer_node_8cpp_source.xhtml#l00041">SplitLayerNode.cpp:41</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_split_layer_node_xhtml_a5c86a49e3cc9c3c03c1c3fb1e027e22b"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_split_layer_node.xhtml#a5c86a49e3cc9c3c03c1c3fb1e027e22b">arm_compute::graph::SplitLayerNode::axis</a></div><div class="ttdeci">unsigned int axis() const</div><div class="ttdoc">Split axis accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_split_layer_node_8cpp_source.xhtml#l00046">SplitLayerNode.cpp:46</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a8e0b093eda0649ddbce791bb5076104f"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a8e0b093eda0649ddbce791bb5076104f">arm_compute::graph::EmptyEdgeID</a></div><div class="ttdeci">constexpr EdgeID EmptyEdgeID</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00073">Types.h:73</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_aa94938a3eb11fda4724c362c53c28f24"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#aa94938a3eb11fda4724c362c53c28f24">arm_compute::graph::NullTensorID</a></div><div class="ttdeci">constexpr TensorID NullTensorID</div><div class="ttdoc">Constant NodeID specifying an equivalent of null node.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00069">Types.h:69</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml#l00073">arm_compute::graph::EmptyEdgeID</a>, <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml#l00069">arm_compute::graph::NullTensorID</a>, and <a class="el" href="_split_layer_node_8cpp_source.xhtml#l00041">SplitLayerNode::num_splits()</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="adb48b5745c55605a2d4ec6f665bb7f3f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adb48b5745c55605a2d4ec6f665bb7f3f">&#9670;&nbsp;</a></span>accept()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void accept </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_i_node_visitor.xhtml">INodeVisitor</a> &amp;&#160;</td>
          <td class="paramname"><em>v</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Accepts a node visitor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">v</td><td>Visitor to accept </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a69a6e8613e2e1b00de98610c2ae6288a">INode</a>.</p>

<p class="definition">Definition at line <a class="el" href="_split_layer_node_8cpp_source.xhtml#l00113">113</a> of file <a class="el" href="_split_layer_node_8cpp_source.xhtml">SplitLayerNode.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;{</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    v.visit(*<span class="keyword">this</span>);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;}</div></div><!-- fragment -->
<p class="reference">References <a class="el" href="classarm__compute_1_1graph_1_1_i_node_visitor.xhtml#af2dbe7c232e1d5d1a9d0621c3bb483a0">INodeVisitor::visit()</a>.</p>

</div>
</div>
<a id="a5c86a49e3cc9c3c03c1c3fb1e027e22b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5c86a49e3cc9c3c03c1c3fb1e027e22b">&#9670;&nbsp;</a></span>axis()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int axis </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Split axis accessor. </p>
<dl class="section return"><dt>Returns</dt><dd>Split axis </dd></dl>

<p class="definition">Definition at line <a class="el" href="_split_layer_node_8cpp_source.xhtml#l00046">46</a> of file <a class="el" href="_split_layer_node_8cpp_source.xhtml">SplitLayerNode.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;{</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keywordflow">return</span> _axis;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;}</div></div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_split_layer_node_8cpp_source.xhtml#l00051">SplitLayerNode::compute_output_descriptor()</a>.</p>

</div>
</div>
<a id="ac03531d01e5f5d091b030b0c5d6537d7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac03531d01e5f5d091b030b0c5d6537d7">&#9670;&nbsp;</a></span>compute_output_descriptor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::pair&lt; <a class="el" href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml">TensorDescriptor</a>, <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &gt; compute_output_descriptor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml">TensorDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>input_descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>num_splits</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>axis</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>idx</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Computes split layer output descriptor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input_descriptor</td><td>Descriptor of the input tensor </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">num_splits</td><td>Number of splits </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">axis</td><td>Axis to perform the split on </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">idx</td><td>Index of the split</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A pair with the descriptor of the split and the starting coordinates </dd></dl>

<p class="definition">Definition at line <a class="el" href="_split_layer_node_8cpp_source.xhtml#l00051">51</a> of file <a class="el" href="_split_layer_node_8cpp_source.xhtml">SplitLayerNode.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;{</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> split_size = input_descriptor.shape[<a class="code" href="classarm__compute_1_1graph_1_1_split_layer_node.xhtml#a5c86a49e3cc9c3c03c1c3fb1e027e22b">axis</a>] / <a class="code" href="classarm__compute_1_1graph_1_1_split_layer_node.xhtml#aa5059ce7798ddeeb40b9f6659b851b8b">num_splits</a>;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    TensorDescriptor output_descriptor = input_descriptor;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    output_descriptor.shape.set(<a class="code" href="classarm__compute_1_1graph_1_1_split_layer_node.xhtml#a5c86a49e3cc9c3c03c1c3fb1e027e22b">axis</a>, split_size);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    Coordinates coords;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    coords.set(<a class="code" href="classarm__compute_1_1graph_1_1_split_layer_node.xhtml#a5c86a49e3cc9c3c03c1c3fb1e027e22b">axis</a>, idx * split_size);</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keywordflow">return</span> std::make_pair(output_descriptor, coords);</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1graph_1_1_split_layer_node_xhtml_aa5059ce7798ddeeb40b9f6659b851b8b"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_split_layer_node.xhtml#aa5059ce7798ddeeb40b9f6659b851b8b">arm_compute::graph::SplitLayerNode::num_splits</a></div><div class="ttdeci">unsigned int num_splits() const</div><div class="ttdoc">Number of splits accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_split_layer_node_8cpp_source.xhtml#l00041">SplitLayerNode.cpp:41</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_split_layer_node_xhtml_a5c86a49e3cc9c3c03c1c3fb1e027e22b"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_split_layer_node.xhtml#a5c86a49e3cc9c3c03c1c3fb1e027e22b">arm_compute::graph::SplitLayerNode::axis</a></div><div class="ttdeci">unsigned int axis() const</div><div class="ttdoc">Split axis accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_split_layer_node_8cpp_source.xhtml#l00046">SplitLayerNode.cpp:46</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_split_layer_node_8cpp_source.xhtml#l00046">SplitLayerNode::axis()</a>, <a class="el" href="_split_layer_node_8cpp_source.xhtml#l00041">SplitLayerNode::num_splits()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00074">Dimensions&lt; T &gt;::set()</a>, <a class="el" href="_tensor_shape_8h_source.xhtml#l00078">TensorShape::set()</a>, and <a class="el" href="_tensor_descriptor_8h_source.xhtml#l00109">TensorDescriptor::shape</a>.</p>

<p class="reference">Referenced by <a class="el" href="_split_layer_node_8cpp_source.xhtml#l00084">SplitLayerNode::configure_output()</a>, and <a class="el" href="_split_layer_sub_tensor_mutator_8cpp_source.xhtml#l00050">SplitLayerSubTensorMutator::mutate()</a>.</p>

</div>
</div>
<a id="a3f18a7449b9d7fc9e5fec212b8e61710"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3f18a7449b9d7fc9e5fec212b8e61710">&#9670;&nbsp;</a></span>configure_output()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml">TensorDescriptor</a> configure_output </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>idx</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculates output configuration. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">idx</td><td>Output index to configure</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Output descriptor configuration </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a98dd474c332ea76a71bd81b790d7e0d9">INode</a>.</p>

<p class="definition">Definition at line <a class="el" href="_split_layer_node_8cpp_source.xhtml#l00084">84</a> of file <a class="el" href="_split_layer_node_8cpp_source.xhtml">SplitLayerNode.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;{</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(idx);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(idx &gt;= _outputs.size());</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keyword">const</span> Tensor *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a> = <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0);</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a> == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    TensorDescriptor <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a25cae7166733a51d1354f3f395652782">output_info</a>;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    std::tie(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a25cae7166733a51d1354f3f395652782">output_info</a>, std::ignore) = <a class="code" href="classarm__compute_1_1graph_1_1_split_layer_node.xhtml#ac03531d01e5f5d091b030b0c5d6537d7">compute_output_descriptor</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a>-&gt;desc(), _num_splits, _axis, idx);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a25cae7166733a51d1354f3f395652782">output_info</a>;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1graph_1_1_split_layer_node_xhtml_ac03531d01e5f5d091b030b0c5d6537d7"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_split_layer_node.xhtml#ac03531d01e5f5d091b030b0c5d6537d7">arm_compute::graph::SplitLayerNode::compute_output_descriptor</a></div><div class="ttdeci">static std::pair&lt; TensorDescriptor, Coordinates &gt; compute_output_descriptor(const TensorDescriptor &amp;input_descriptor, unsigned int num_splits, unsigned int axis, unsigned int idx)</div><div class="ttdoc">Computes split layer output descriptor.</div><div class="ttdef"><b>Definition:</b> <a href="_split_layer_node_8cpp_source.xhtml#l00051">SplitLayerNode.cpp:51</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a25cae7166733a51d1354f3f395652782"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a25cae7166733a51d1354f3f395652782">arm_compute::test::validation::output_info</a></div><div class="ttdeci">output_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_winograd_8cpp_source.xhtml#l00328">Winograd.cpp:328</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_ad7c09b0faaf3c808b0489012204852a9"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">arm_compute::graph::INode::input</a></div><div class="ttdeci">Tensor * input(size_t idx) const</div><div class="ttdoc">Returns the tensor of a given input of the node.</div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00150">INode.cpp:150</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a989ab3e96426615bb98e04e0235088ca"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">arm_compute::test::validation::src</a></div><div class="ttdeci">cast configure &amp; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_cast_8cpp_source.xhtml#l00169">Cast.cpp:169</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_error_8h_source.xhtml#l00152">ARM_COMPUTE_UNUSED</a>, <a class="el" href="_split_layer_node_8cpp_source.xhtml#l00051">SplitLayerNode::compute_output_descriptor()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_c_l_2_winograd_8cpp_source.xhtml#l00328">arm_compute::test::validation::output_info</a>, and <a class="el" href="_c_l_2_cast_8cpp_source.xhtml#l00169">arm_compute::test::validation::src</a>.</p>

<p class="reference">Referenced by <a class="el" href="_split_layer_node_8cpp_source.xhtml#l00065">SplitLayerNode::forward_descriptors()</a>.</p>

</div>
</div>
<a id="a6272eb9643b239dd0c1e7adde3ee093b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6272eb9643b239dd0c1e7adde3ee093b">&#9670;&nbsp;</a></span>forward_descriptors()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool forward_descriptors </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Forwards descriptor information to outputs if possible. </p>
<dl class="section return"><dt>Returns</dt><dd>True if descriptor information could be forwarded otherwise false </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5edbd8a4a1b75060bb3b49bc0ba2c6b0">INode</a>.</p>

<p class="definition">Definition at line <a class="el" href="_split_layer_node_8cpp_source.xhtml#l00065">65</a> of file <a class="el" href="_split_layer_node_8cpp_source.xhtml">SplitLayerNode.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;{</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a6a156d1ea7a01d8b27131f30aacaf40b">input_id</a>(0) != <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa94938a3eb11fda4724c362c53c28f24">NullTensorID</a>)</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    {</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <a class="code" href="classarm__compute_1_1graph_1_1_split_layer_node.xhtml#a600f574bc2868a148f9a746d16774dbd">validate</a>();</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; _outputs.size(); ++i)</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        {</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            <span class="keywordflow">if</span>(<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a339f9817d95cb065b7670d35c03f4d88">output_id</a>(i) != <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa94938a3eb11fda4724c362c53c28f24">NullTensorID</a>)</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            {</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                Tensor *dst_i = <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(i);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(dst_i == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                dst_i-&gt;desc() = <a class="code" href="classarm__compute_1_1graph_1_1_split_layer_node.xhtml#a3f18a7449b9d7fc9e5fec212b8e61710">configure_output</a>(i);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;            }</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        }</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    }</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a27369471d9b2ba47746e1e923f585b9f"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">arm_compute::graph::INode::output</a></div><div class="ttdeci">Tensor * output(size_t idx) const</div><div class="ttdoc">Returns the tensor of a given output of the node.</div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00158">INode.cpp:158</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a6a156d1ea7a01d8b27131f30aacaf40b"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a6a156d1ea7a01d8b27131f30aacaf40b">arm_compute::graph::INode::input_id</a></div><div class="ttdeci">TensorID input_id(size_t idx) const</div><div class="ttdoc">Returns the tensor ID of a given input of the node.</div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00137">INode.cpp:137</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a339f9817d95cb065b7670d35c03f4d88"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a339f9817d95cb065b7670d35c03f4d88">arm_compute::graph::INode::output_id</a></div><div class="ttdeci">TensorID output_id(size_t idx) const</div><div class="ttdoc">Returns the tensor ID of a given output of the node.</div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00144">INode.cpp:144</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_aa94938a3eb11fda4724c362c53c28f24"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#aa94938a3eb11fda4724c362c53c28f24">arm_compute::graph::NullTensorID</a></div><div class="ttdeci">constexpr TensorID NullTensorID</div><div class="ttdoc">Constant NodeID specifying an equivalent of null node.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00069">Types.h:69</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_split_layer_node_xhtml_a600f574bc2868a148f9a746d16774dbd"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_split_layer_node.xhtml#a600f574bc2868a148f9a746d16774dbd">arm_compute::graph::SplitLayerNode::validate</a></div><div class="ttdeci">Status validate() const override</div><div class="ttdoc">Validate node.</div><div class="ttdef"><b>Definition:</b> <a href="_split_layer_node_8cpp_source.xhtml#l00098">SplitLayerNode.cpp:98</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_split_layer_node_xhtml_a3f18a7449b9d7fc9e5fec212b8e61710"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_split_layer_node.xhtml#a3f18a7449b9d7fc9e5fec212b8e61710">arm_compute::graph::SplitLayerNode::configure_output</a></div><div class="ttdeci">TensorDescriptor configure_output(size_t idx) const override</div><div class="ttdoc">Calculates output configuration.</div><div class="ttdef"><b>Definition:</b> <a href="_split_layer_node_8cpp_source.xhtml#l00084">SplitLayerNode.cpp:84</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_split_layer_node_8cpp_source.xhtml#l00084">SplitLayerNode::configure_output()</a>, <a class="el" href="graph_2_tensor_8cpp_source.xhtml#l00040">Tensor::desc()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00137">INode::input_id()</a>, <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml#l00069">arm_compute::graph::NullTensorID</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00144">INode::output_id()</a>, and <a class="el" href="_split_layer_node_8cpp_source.xhtml#l00098">SplitLayerNode::validate()</a>.</p>

</div>
</div>
<a id="aa5059ce7798ddeeb40b9f6659b851b8b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa5059ce7798ddeeb40b9f6659b851b8b">&#9670;&nbsp;</a></span>num_splits()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int num_splits </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Number of splits accessor. </p>
<dl class="section return"><dt>Returns</dt><dd>Number of splits </dd></dl>

<p class="definition">Definition at line <a class="el" href="_split_layer_node_8cpp_source.xhtml#l00041">41</a> of file <a class="el" href="_split_layer_node_8cpp_source.xhtml">SplitLayerNode.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keywordflow">return</span> _num_splits;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;}</div></div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_split_layer_node_8cpp_source.xhtml#l00051">SplitLayerNode::compute_output_descriptor()</a>, and <a class="el" href="_split_layer_node_8cpp_source.xhtml#l00034">SplitLayerNode::SplitLayerNode()</a>.</p>

</div>
</div>
<a id="a65d13dc93e2df5e8ab725263cf9f4ac5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a65d13dc93e2df5e8ab725263cf9f4ac5">&#9670;&nbsp;</a></span>type()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16">NodeType</a> type </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns node's type. </p>
<dl class="section return"><dt>Returns</dt><dd>Node's type </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a6b2d83e561886647467f86c20ce39bec">INode</a>.</p>

<p class="definition">Definition at line <a class="el" href="_split_layer_node_8cpp_source.xhtml#l00108">108</a> of file <a class="el" href="_split_layer_node_8cpp_source.xhtml">SplitLayerNode.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;{</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16af2ee14b628c0a45e1682de8f33983dc1">NodeType::SplitLayer</a>;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16af2ee14b628c0a45e1682de8f33983dc1"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16af2ee14b628c0a45e1682de8f33983dc1">arm_compute::graph::NodeType::SplitLayer</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16af2ee14b628c0a45e1682de8f33983dc1">arm_compute::graph::SplitLayer</a>.</p>

</div>
</div>
<a id="a600f574bc2868a148f9a746d16774dbd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a600f574bc2868a148f9a746d16774dbd">&#9670;&nbsp;</a></span>validate()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> validate </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Validate node. </p>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> containing any errors </dd></dl>

<p>Reimplemented from <a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a0f3b12aedc549ea5ba08cbb36871da15">INode</a>.</p>

<p class="definition">Definition at line <a class="el" href="_split_layer_node_8cpp_source.xhtml#l00098">98</a> of file <a class="el" href="_split_layer_node_8cpp_source.xhtml">SplitLayerNode.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;{</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keyword">const</span> Tensor *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a> = <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a> == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(_axis &gt;= <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a>-&gt;desc().shape.num_dimensions());</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">src</a>-&gt;desc().shape[_axis] % _num_splits, <span class="stringliteral">&quot;Split should be exact&quot;</span>);</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keywordflow">return</span> Status{};</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a206d6e247e0957ac3dee45d27756fc25"><div class="ttname"><a href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true, an error is returned.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00296">Error.h:296</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a1c69762a42ab8add645d0a949b6f4b1f"><div class="ttname"><a href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_MSG(cond, msg)</div><div class="ttdoc">If the condition is true, an error is returned.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00244">Error.h:244</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_ad7c09b0faaf3c808b0489012204852a9"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">arm_compute::graph::INode::input</a></div><div class="ttdeci">Tensor * input(size_t idx) const</div><div class="ttdoc">Returns the tensor of a given input of the node.</div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00150">INode.cpp:150</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a989ab3e96426615bb98e04e0235088ca"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a989ab3e96426615bb98e04e0235088ca">arm_compute::test::validation::src</a></div><div class="ttdeci">cast configure &amp; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_cast_8cpp_source.xhtml#l00169">Cast.cpp:169</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00296">ARM_COMPUTE_RETURN_ERROR_ON</a>, <a class="el" href="_error_8h_source.xhtml#l00244">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, and <a class="el" href="_c_l_2_cast_8cpp_source.xhtml#l00169">arm_compute::test::validation::src</a>.</p>

<p class="reference">Referenced by <a class="el" href="_split_layer_node_8cpp_source.xhtml#l00065">SplitLayerNode::forward_descriptors()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>arm_compute/graph/nodes/<a class="el" href="_split_layer_node_8h_source.xhtml">SplitLayerNode.h</a></li>
<li>src/graph/nodes/<a class="el" href="_split_layer_node_8cpp_source.xhtml">SplitLayerNode.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1graph.xhtml">graph</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1graph_1_1_split_layer_node.xhtml">SplitLayerNode</a></li>
    <li class="footer">Generated on Thu Mar 5 2020 16:07:18 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
