<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/core/NEON/kernels/NEWarpKernel.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('_n_e_warp_kernel_8cpp_source.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">NEWarpKernel.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_n_e_warp_kernel_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2016-2018 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_n_e_warp_kernel_8h.xhtml">arm_compute/core/NEON/kernels/NEWarpKernel.h</a>&quot;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_access_window_static_8h.xhtml">arm_compute/core/AccessWindowStatic.h</a>&quot;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_coordinates_8h.xhtml">arm_compute/core/Coordinates.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_error_8h.xhtml">arm_compute/core/Error.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_helpers_8h.xhtml">arm_compute/core/Helpers.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_tensor_8h.xhtml">arm_compute/core/ITensor.h</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_tensor_info_8h.xhtml">arm_compute/core/TensorInfo.h</a>&quot;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_validate_8h.xhtml">arm_compute/core/Validate.h</a>&quot;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_window_8h.xhtml">arm_compute/core/Window.h</a>&quot;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &lt;cstddef&gt;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a>;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="keyword">namespace</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;{</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="keyword">inline</span> uint8_t nearest_interpolation(<span class="keyword">const</span> uint8_t *in_ptr, <span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y, <span class="keywordtype">size_t</span> stride)</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keywordflow">return</span> in_ptr[x + y * stride];</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;}</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;} <span class="comment">// namespace</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_i_n_e_warp_kernel.xhtml#a7acfff8355cadd1f4a467a82d05df75a">   47</a></span>&#160;<a class="code" href="classarm__compute_1_1_i_n_e_warp_kernel.xhtml#a7acfff8355cadd1f4a467a82d05df75a">INEWarpKernel::INEWarpKernel</a>()</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    : _func(nullptr), _input(nullptr), _output(nullptr), _constant_border_value(0), _matrix()</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;{</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;}</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_i_n_e_warp_kernel.xhtml#a423f9a45a52983b4de5e2b347f4369c7">   52</a></span>&#160;<a class="code" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a> <a class="code" href="classarm__compute_1_1_i_n_e_warp_kernel.xhtml#a423f9a45a52983b4de5e2b347f4369c7">INEWarpKernel::border_size</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a>(1);</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;}</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_i_n_e_warp_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">   57</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_i_n_e_warp_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">INEWarpKernel::run</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>)</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;{</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>);</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <a class="code" href="_validate_8h.xhtml#a1b35b0d258183cf9ef36adf684d0b88c">ARM_COMPUTE_ERROR_ON_UNCONFIGURED_KERNEL</a>(<span class="keyword">this</span>);</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <a class="code" href="_validate_8h.xhtml#a6eb9ce82815fe429250189da7592ba75">ARM_COMPUTE_ERROR_ON_INVALID_SUBWINDOW</a>(<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">INEKernel::window</a>(), <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>);</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(_func == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    (this-&gt;*_func)(<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>);</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;}</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_i_n_e_warp_kernel.xhtml#a1aad3191e6d0d90fa0114a355ac52991">   67</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_i_n_e_warp_kernel.xhtml#a1aad3191e6d0d90fa0114a355ac52991">INEWarpKernel::configure</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, <span class="keyword">const</span> std::array&lt;float, 9&gt; &amp;matrix, <a class="code" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5471e46933e7a9c4709972d91fc4ea65">border_mode</a>, uint8_t constant_border_value)</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;{</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <a class="code" href="_validate_8h.xhtml#aadf5c9cff86327b96d88d04649d9715e">ARM_COMPUTE_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>);</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <a class="code" href="_validate_8h.xhtml#aadf5c9cff86327b96d88d04649d9715e">ARM_COMPUTE_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(output, 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>);</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    _matrix                = matrix;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    _constant_border_value = constant_border_value;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keywordflow">switch</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5471e46933e7a9c4709972d91fc4ea65">border_mode</a>)</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    {</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a0db45d2a4141101bdfe48e3314cfbca3">BorderMode::UNDEFINED</a>:</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            _func = &amp;INEWarpKernel::warp_undefined;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92">BorderMode::CONSTANT</a>:</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            _func = &amp;INEWarpKernel::warp_constant;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a4ef59320fbe90fe47d40f1f71e4c5daa">BorderMode::REPLICATE</a>:</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            _func = &amp;INEWarpKernel::warp_replicate;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Border mode not supported&quot;</span>);</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    }</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    _input  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    _output = output;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="comment">// Configure kernel window</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> win = <a class="code" href="namespacearm__compute.xhtml#ab7980fa5ee693e3282a76da047a1c3b5">calculate_max_window</a>(*output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), <a class="code" href="classarm__compute_1_1_steps.xhtml">Steps</a>(1<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a>));</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &amp;input_valid_region = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;valid_region();</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="comment">// Reads can occur within the valid region of the input</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <a class="code" href="classarm__compute_1_1_access_window_static.xhtml">AccessWindowStatic</a> input_access(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info(),</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                                    input_valid_region.anchor[0] - <a class="code" href="classarm__compute_1_1_i_n_e_warp_kernel.xhtml#a423f9a45a52983b4de5e2b347f4369c7">border_size</a>().<a class="code" href="structarm__compute_1_1_border_size.xhtml#a05374b750b0fc472c34ee61e6f028bba">left</a>, input_valid_region.anchor[1] - <a class="code" href="classarm__compute_1_1_i_n_e_warp_kernel.xhtml#a423f9a45a52983b4de5e2b347f4369c7">border_size</a>().<a class="code" href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">top</a>,</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                                    input_valid_region.anchor[0] + input_valid_region.shape[0] + <a class="code" href="classarm__compute_1_1_i_n_e_warp_kernel.xhtml#a423f9a45a52983b4de5e2b347f4369c7">border_size</a>().<a class="code" href="structarm__compute_1_1_border_size.xhtml#a78b0fed184c642b78f32fd34b228a5f9">right</a>,</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                                    input_valid_region.anchor[1] + input_valid_region.shape[1] + <a class="code" href="classarm__compute_1_1_i_n_e_warp_kernel.xhtml#a423f9a45a52983b4de5e2b347f4369c7">border_size</a>().<a class="code" href="structarm__compute_1_1_border_size.xhtml#a802ffcf1b49237efe5be8a314d3f3869">bottom</a>);</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <a class="code" href="classarm__compute_1_1_access_window_horizontal.xhtml">AccessWindowHorizontal</a> output_access(output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), 0, 1);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#afc4bd8e872567d9c4c57d89eb0bb3da1">update_window_and_padding</a>(win, input_access, output_access);</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    output_access.set_valid_region(win, <a class="code" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a>(<a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>(), output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>()));</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    INEKernel::configure(win);</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;}</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="keyword">template</span> &lt;InterpolationPolicy <span class="keywordtype">int</span>erpolation&gt;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_n_e_warp_affine_kernel.xhtml">NEWarpAffineKernel&lt;interpolation&gt;::warp_undefined</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;{</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="comment">// Don&#39;t increment in X and Y direction for the input tensor</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="comment">// A pointer to the start of this plane is needed as base for the precomputed offsets</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> win_in(window);</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    win_in.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 0, 0));</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    win_in.set(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 0, 0));</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> in(_input, win_in);</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> out(_output, window);</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>    min_x  = _input-&gt;info()-&gt;valid_region().anchor[0];</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>    max_x  = min_x + _input-&gt;info()-&gt;valid_region().shape[0];</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>    min_y  = _input-&gt;info()-&gt;valid_region().anchor[1];</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>    max_y  = min_y + _input-&gt;info()-&gt;valid_region().shape[1];</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> stride = _input-&gt;info()-&gt;strides_in_bytes()[1];</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="comment">// x0 = M01 * x + M01 * y + M02</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="comment">// y0 = M11 * x + M11 * y + M12</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> M00 = _matrix[0];</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> M10 = _matrix[1];</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> M01 = _matrix[0 + 1 * 2];</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> M11 = _matrix[1 + 1 * 2];</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> M02 = _matrix[0 + 2 * 2];</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> M12 = _matrix[1 + 2 * 2];</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="comment">// &quot;M00 * x&quot; and &quot;M10 * x&quot;, when x = window.x.start</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> start_x0 = M00 * window.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>();</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> start_y0 = M10 * window.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>();</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="comment">// Current row</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keywordtype">int</span> y_cur  = window.<a class="code" href="classarm__compute_1_1_window.xhtml#a1b522b073f3ca32d24eb4e03495ef8a6">y</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>();</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keywordtype">int</span> z_cur  = window.<a class="code" href="classarm__compute_1_1_window.xhtml#a51a8c7a9d2fa20943c213e85eb8d9caf">z</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>();</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keywordtype">int</span> d3_cur = window[3].start();</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keywordtype">int</span> d4_cur = window[4].start();</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keywordtype">int</span> d5_cur = window[5].start();</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="comment">// const_x0 and const_y0 are the constant parts of x0 and y0 during the row processing</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keywordtype">float</span> const_x0 = M01 * y_cur + M02;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keywordtype">float</span> const_y0 = M11 * y_cur + M12;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="comment">// Affine warp coordinates</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="keywordtype">float</span> x0 = start_x0 + const_x0;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="keywordtype">float</span> y0 = start_y0 + const_y0;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(window, [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp; <span class="keywordtype">id</span>)</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    {</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        <span class="comment">// Check if we are processing a new row. If so, update the current processed row (y_cur), x0, y0 and z0</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        <span class="keywordflow">if</span>((y_cur != <span class="keywordtype">id</span>.y()) || (z_cur != <span class="keywordtype">id</span>.z()) || (d3_cur != <span class="keywordtype">id</span>[3]) || (d4_cur != <span class="keywordtype">id</span>[4]) || (d5_cur != <span class="keywordtype">id</span>[5]))</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        {</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            y_cur  = <span class="keywordtype">id</span>.y();</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;            z_cur  = <span class="keywordtype">id</span>.z();</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            d3_cur = <span class="keywordtype">id</span>[3];</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;            d4_cur = <span class="keywordtype">id</span>[4];</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            d5_cur = <span class="keywordtype">id</span>[5];</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            const_x0 = M01 * y_cur + M02;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            const_y0 = M11 * y_cur + M12;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;            x0 = start_x0 + const_x0;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            y0 = start_y0 + const_y0;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        }</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        <span class="comment">// Only write to output if x0 and y0 are within the valid region.</span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        <span class="comment">// Otherwise the read value would be undefined.</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <span class="keywordflow">if</span>((min_y &lt;= y0) &amp;&amp; (y0 &lt; max_y) &amp;&amp; (min_x &lt;= x0) &amp;&amp; (x0 &lt; max_x))</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        {</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;            <span class="keywordflow">switch</span>(interpolation)</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;            {</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9a7f5ccbc3d30c2cd3fd04d567946cbde2">InterpolationPolicy::NEAREST_NEIGHBOR</a>:</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                    *out.ptr() = nearest_interpolation(in.ptr(), x0, y0, stride);</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9aad6fddf718ad19b063e02fdd7e8e3e65">InterpolationPolicy::BILINEAR</a>:</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                    *out.ptr() = <a class="code" href="namespacearm__compute.xhtml#a1c8d639ec2b3086a9506e72605a32333">pixel_bilinear_c1</a>(in.ptr(), stride, x0, y0);</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                <span class="keywordflow">default</span>:</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                    <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Interpolation not supported&quot;</span>);</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;            }</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        }</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        x0 += M00;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        y0 += M10;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    },</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    in, out);</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;}</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="keyword">template</span> &lt;InterpolationPolicy <span class="keywordtype">int</span>erpolation&gt;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_n_e_warp_affine_kernel.xhtml">NEWarpAffineKernel&lt;interpolation&gt;::warp_constant</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;{</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="comment">// Don&#39;t increment in X and Y direction for the input tensor</span></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="comment">// A pointer to the start of this plane is needed as base for the precomputed offsets</span></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> win_in(window);</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    win_in.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 0, 0));</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    win_in.set(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 0, 0));</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> in(_input, win_in);</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> out(_output, window);</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>    min_x  = _input-&gt;info()-&gt;valid_region().anchor[0];</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>    max_x  = min_x + _input-&gt;info()-&gt;valid_region().shape[0];</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>    min_y  = _input-&gt;info()-&gt;valid_region().anchor[1];</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>    max_y  = min_y + _input-&gt;info()-&gt;valid_region().shape[1];</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> stride = _input-&gt;info()-&gt;strides_in_bytes()[1];</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <span class="comment">// x0 = M01 * x + M01 * y + M02</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="comment">// y0 = M11 * x + M11 * y + M12</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> M00 = _matrix[0];</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> M10 = _matrix[1];</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> M01 = _matrix[0 + 1 * 2];</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> M11 = _matrix[1 + 1 * 2];</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> M02 = _matrix[0 + 2 * 2];</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> M12 = _matrix[1 + 2 * 2];</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <span class="comment">// &quot;M00 * x&quot; and &quot;M10 * x&quot;, when x = window.x.start</span></div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> start_x0 = M00 * window.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>();</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> start_y0 = M10 * window.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>();</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="comment">// Current row</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keywordtype">int</span> y_cur  = window.<a class="code" href="classarm__compute_1_1_window.xhtml#a1b522b073f3ca32d24eb4e03495ef8a6">y</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>();</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <span class="keywordtype">int</span> z_cur  = window.<a class="code" href="classarm__compute_1_1_window.xhtml#a51a8c7a9d2fa20943c213e85eb8d9caf">z</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>();</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <span class="keywordtype">int</span> d3_cur = window[3].start();</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <span class="keywordtype">int</span> d4_cur = window[4].start();</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <span class="keywordtype">int</span> d5_cur = window[5].start();</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="comment">// const_x0 and const_y0 are the constant parts of x0 and y0 during the row processing</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <span class="keywordtype">float</span> const_x0 = M01 * y_cur + M02;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="keywordtype">float</span> const_y0 = M11 * y_cur + M12;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <span class="comment">// Affine warp coordinates</span></div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="keywordtype">float</span> x0 = start_x0 + const_x0;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="keywordtype">float</span> y0 = start_y0 + const_y0;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(window, [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp; <span class="keywordtype">id</span>)</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    {</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        <span class="comment">// Check if we are processing a new row. If so, update the current processed row (y_cur), x0, y0 and z0</span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        <span class="keywordflow">if</span>((y_cur != <span class="keywordtype">id</span>.y()) || (z_cur != <span class="keywordtype">id</span>.z()) || (d3_cur != <span class="keywordtype">id</span>[3]) || (d4_cur != <span class="keywordtype">id</span>[4]) || (d5_cur != <span class="keywordtype">id</span>[5]))</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        {</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;            y_cur  = <span class="keywordtype">id</span>.y();</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;            z_cur  = <span class="keywordtype">id</span>.z();</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;            d3_cur = <span class="keywordtype">id</span>[3];</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;            d4_cur = <span class="keywordtype">id</span>[4];</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;            d5_cur = <span class="keywordtype">id</span>[5];</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;            const_x0 = M01 * y_cur + M02;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;            const_y0 = M11 * y_cur + M12;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;            x0 = start_x0 + const_x0;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;            y0 = start_y0 + const_y0;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        }</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        <span class="comment">// Only use input values if x0 and y0 are within the valid region.</span></div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        <span class="comment">// Otherwise write the constant border value.</span></div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        <span class="keywordflow">if</span>((min_y &lt;= y0) &amp;&amp; (y0 &lt; max_y) &amp;&amp; (min_x &lt;= x0) &amp;&amp; (x0 &lt; max_x))</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        {</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;            <span class="keywordflow">switch</span>(interpolation)</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;            {</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9a7f5ccbc3d30c2cd3fd04d567946cbde2">InterpolationPolicy::NEAREST_NEIGHBOR</a>:</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                    *out.ptr() = nearest_interpolation(in.ptr(), x0, y0, stride);</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9aad6fddf718ad19b063e02fdd7e8e3e65">InterpolationPolicy::BILINEAR</a>:</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                    *out.ptr() = <a class="code" href="namespacearm__compute.xhtml#a1c8d639ec2b3086a9506e72605a32333">pixel_bilinear_c1</a>(in.ptr(), stride, x0, y0);</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                <span class="keywordflow">default</span>:</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                    <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Interpolation not supported&quot;</span>);</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;            }</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        }</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        {</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;            <span class="keywordflow">switch</span>(interpolation)</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;            {</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9a7f5ccbc3d30c2cd3fd04d567946cbde2">InterpolationPolicy::NEAREST_NEIGHBOR</a>:</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                    *out.ptr() = _constant_border_value;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9aad6fddf718ad19b063e02fdd7e8e3e65">InterpolationPolicy::BILINEAR</a>:</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                {</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> xi   = utility::clamp&lt;int&gt;(std::floor(x0), min_x - 1, max_x);</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> yi   = utility::clamp&lt;int&gt;(std::floor(y0), min_y - 1, max_y);</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> xi_1 = utility::clamp&lt;int&gt;(std::floor(x0 + 1), min_x - 1, max_x);</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> yi_1 = utility::clamp&lt;int&gt;(std::floor(y0 + 1), min_y - 1, max_y);</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> dx  = x0 - std::floor(x0);</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> dy  = y0 - std::floor(y0);</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> dx1 = 1.0f - dx;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> dy1 = 1.0f - dy;</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> a00 = *(in.ptr() + xi + yi * stride);</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> a01 = *(in.ptr() + xi_1 + yi * stride);</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> a10 = *(in.ptr() + xi + yi_1 * stride);</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> a11 = *(in.ptr() + xi_1 + yi_1 * stride);</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                    *out.ptr() = a00 * (dx1 * dy1) + a01 * (dx * dy1) + a10 * (dx1 * dy) + a11 * (dx * dy);</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                }</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                <span class="keywordflow">default</span>:</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                    <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Interpolation not supported&quot;</span>);</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;            }</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;        }</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;        x0 += M00;</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;        y0 += M10;</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    },</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    in, out);</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;}</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;<span class="keyword">template</span> &lt;InterpolationPolicy <span class="keywordtype">int</span>erpolation&gt;</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_n_e_warp_affine_kernel.xhtml">NEWarpAffineKernel&lt;interpolation&gt;::warp_replicate</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;{</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    <span class="comment">// Don&#39;t increment in X and Y direction for the input tensor</span></div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <span class="comment">// A pointer to the start of this plane is needed as base for the precomputed offsets</span></div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> win_in(window);</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    win_in.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 0, 0));</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    win_in.set(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 0, 0));</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> in(_input, win_in);</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> out(_output, window);</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>    min_x  = _input-&gt;info()-&gt;valid_region().anchor[0];</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>    max_x  = min_x + _input-&gt;info()-&gt;valid_region().shape[0];</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>    min_y  = _input-&gt;info()-&gt;valid_region().anchor[1];</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>    max_y  = min_y + _input-&gt;info()-&gt;valid_region().shape[1];</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> stride = _input-&gt;info()-&gt;strides_in_bytes()[1];</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    <span class="comment">// Current row</span></div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    <span class="keywordtype">int</span> y_cur  = window.<a class="code" href="classarm__compute_1_1_window.xhtml#a1b522b073f3ca32d24eb4e03495ef8a6">y</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>();</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    <span class="keywordtype">int</span> z_cur  = window.<a class="code" href="classarm__compute_1_1_window.xhtml#a51a8c7a9d2fa20943c213e85eb8d9caf">z</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>();</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    <span class="keywordtype">int</span> d3_cur = window[3].start();</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    <span class="keywordtype">int</span> d4_cur = window[4].start();</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <span class="keywordtype">int</span> d5_cur = window[5].start();</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> M00 = _matrix[0];</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> M10 = _matrix[1];</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> M01 = _matrix[0 + 1 * 2];</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> M11 = _matrix[1 + 1 * 2];</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> M02 = _matrix[0 + 2 * 2];</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> M12 = _matrix[1 + 2 * 2];</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    <span class="comment">// &quot;M00 * x&quot; and &quot;M10 * x&quot;, when x = window.x.start</span></div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> start_x0 = M00 * window.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>();</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> start_y0 = M10 * window.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>();</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    <span class="comment">// const_x0 and const_y0 are the constant parts of x0 and y0 during the row processing</span></div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    <span class="keywordtype">float</span> const_x0 = M01 * y_cur + M02;</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    <span class="keywordtype">float</span> const_y0 = M11 * y_cur + M12;</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    <span class="keywordtype">float</span> x0 = start_x0 + const_x0;</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    <span class="keywordtype">float</span> y0 = start_y0 + const_y0;</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(window, [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp; <span class="keywordtype">id</span>)</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    {</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;        <span class="comment">// Check if we are processing a new row. If so, update the current processed row (y_cur), x0, y0 and z0</span></div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;        <span class="keywordflow">if</span>((y_cur != <span class="keywordtype">id</span>.y()) || (z_cur != <span class="keywordtype">id</span>.z()) || (d3_cur != <span class="keywordtype">id</span>[3]) || (d4_cur != <span class="keywordtype">id</span>[4]) || (d5_cur != <span class="keywordtype">id</span>[5]))</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;        {</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;            y_cur  = <span class="keywordtype">id</span>.y();</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;            z_cur  = <span class="keywordtype">id</span>.z();</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;            d3_cur = <span class="keywordtype">id</span>[3];</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;            d4_cur = <span class="keywordtype">id</span>[4];</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;            d5_cur = <span class="keywordtype">id</span>[5];</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;            const_x0 = M01 * y_cur + M02;</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;            const_y0 = M11 * y_cur + M12;</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;            x0 = start_x0 + const_x0;</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;            y0 = start_y0 + const_y0;</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;        }</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;        <span class="comment">// Only load from (x0, y0) if the point is within the valid region.</span></div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;        <span class="comment">// Otherwise load from the edge of the valid region.</span></div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;        <span class="keywordflow">if</span>((min_y &lt;= y0) &amp;&amp; (y0 &lt; max_y) &amp;&amp; (min_x &lt;= x0) &amp;&amp; (x0 &lt; max_x))</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;        {</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;            <span class="keywordflow">switch</span>(interpolation)</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;            {</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9a7f5ccbc3d30c2cd3fd04d567946cbde2">InterpolationPolicy::NEAREST_NEIGHBOR</a>:</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;                    *out.ptr() = nearest_interpolation(in.ptr(), x0, y0, stride);</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9aad6fddf718ad19b063e02fdd7e8e3e65">InterpolationPolicy::BILINEAR</a>:</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;                    *out.ptr() = <a class="code" href="namespacearm__compute.xhtml#a1c8d639ec2b3086a9506e72605a32333">pixel_bilinear_c1</a>(in.ptr(), stride, x0, y0);</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                <span class="keywordflow">default</span>:</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                    <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Interpolation not supported&quot;</span>);</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;            }</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;        }</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;        {</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;            <span class="comment">// Clamp coordinates</span></div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> xi = utility::clamp&lt;int&gt;(std::floor(x0), min_x, max_x - 1);</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> yi = utility::clamp&lt;int&gt;(std::floor(y0), min_y, max_y - 1);</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;            <span class="keywordflow">switch</span>(interpolation)</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;            {</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9a7f5ccbc3d30c2cd3fd04d567946cbde2">InterpolationPolicy::NEAREST_NEIGHBOR</a>:</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;                    *out.ptr() = *(in.ptr() + xi + yi * stride);</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9aad6fddf718ad19b063e02fdd7e8e3e65">InterpolationPolicy::BILINEAR</a>:</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;                {</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> xi_1 = utility::clamp&lt;int&gt;(std::floor(x0 + 1), min_x, max_x - 1);</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> yi_1 = utility::clamp&lt;int&gt;(std::floor(y0 + 1), min_y, max_y - 1);</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> dx  = x0 - std::floor(x0);</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> dy  = y0 - std::floor(y0);</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> dx1 = 1.0f - dx;</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> dy1 = 1.0f - dy;</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> a00 = *(in.ptr() + xi + yi * stride);</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> a01 = *(in.ptr() + xi_1 + yi * stride);</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> a10 = *(in.ptr() + xi + yi_1 * stride);</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> a11 = *(in.ptr() + xi_1 + yi_1 * stride);</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;                    *out.ptr() = a00 * (dx1 * dy1) + a01 * (dx * dy1) + a10 * (dx1 * dy) + a11 * (dx * dy);</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;                }</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;                <span class="keywordflow">default</span>:</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;                    <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Interpolation not supported&quot;</span>);</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;            }</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;        }</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;        x0 += M00;</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;        y0 += M10;</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    },</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    in, out);</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;}</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;<span class="keyword">template</span> &lt;InterpolationPolicy <span class="keywordtype">int</span>erpolation&gt;</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_n_e_warp_perspective_kernel.xhtml">NEWarpPerspectiveKernel&lt;interpolation&gt;::warp_undefined</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;{</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    <span class="comment">// Don&#39;t increment in X and Y direction for the input tensor</span></div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    <span class="comment">// A pointer to the start of this plane is needed as base for the precomputed offsets</span></div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> win_in(window);</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    win_in.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 0, 0));</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    win_in.set(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 0, 0));</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> in(_input, win_in);</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> out(_output, window);</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>    min_x  = _input-&gt;info()-&gt;valid_region().anchor[0];</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>    max_x  = min_x + _input-&gt;info()-&gt;valid_region().shape[0];</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>    min_y  = _input-&gt;info()-&gt;valid_region().anchor[1];</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>    max_y  = min_y + _input-&gt;info()-&gt;valid_region().shape[1];</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> stride = _input-&gt;info()-&gt;strides_in_bytes()[1];</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    <span class="comment">// x0 = M00 * x + M01 * y + M02</span></div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    <span class="comment">// y0 = M10 * x + M11 * y + M12</span></div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    <span class="comment">// z0 = M20 * x + M21 * y + M22</span></div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    <span class="comment">// xn = x0 / z0</span></div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    <span class="comment">// yn = y0 / z0</span></div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> M00 = _matrix[0];</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> M10 = _matrix[1];</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> M20 = _matrix[2];</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> M01 = _matrix[0 + 1 * 3];</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> M11 = _matrix[1 + 1 * 3];</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> M21 = _matrix[2 + 1 * 3];</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> M02 = _matrix[0 + 2 * 3];</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> M12 = _matrix[1 + 2 * 3];</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> M22 = _matrix[2 + 2 * 3];</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    <span class="comment">// &quot;M00 * x&quot;, &quot;M10 * x&quot; and &quot;M20 * x&quot;, when x = window.x.start</span></div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> start_x0 = M00 * window.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>();</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> start_y0 = M10 * window.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>();</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> start_z0 = M20 * window.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>();</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    <span class="comment">// Current row</span></div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;    <span class="keywordtype">int</span> y_cur  = window.<a class="code" href="classarm__compute_1_1_window.xhtml#a1b522b073f3ca32d24eb4e03495ef8a6">y</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>();</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    <span class="keywordtype">int</span> z_cur  = window.<a class="code" href="classarm__compute_1_1_window.xhtml#a51a8c7a9d2fa20943c213e85eb8d9caf">z</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>();</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;    <span class="keywordtype">int</span> d3_cur = window[3].start();</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;    <span class="keywordtype">int</span> d4_cur = window[4].start();</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;    <span class="keywordtype">int</span> d5_cur = window[5].start();</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;    <span class="comment">// const_x0, const_y0 and const_z0 are the constant parts of x0, y0 and z0 during the row processing</span></div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;    <span class="keywordtype">float</span> const_x0 = M01 * y_cur + M02;</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;    <span class="keywordtype">float</span> const_y0 = M11 * y_cur + M12;</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    <span class="keywordtype">float</span> const_z0 = M21 * y_cur + M22;</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;    <span class="comment">// Perspective warp coordinates</span></div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;    <span class="keywordtype">float</span> x0 = start_x0 + const_x0;</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;    <span class="keywordtype">float</span> y0 = start_y0 + const_y0;</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;    <span class="keywordtype">float</span> z0 = start_z0 + const_z0;</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(window, [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp; <span class="keywordtype">id</span>)</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    {</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;        <span class="comment">// Check if we are processing a new row. If so, update the current processed row (y_cur), x0, y0 and z0</span></div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;        <span class="keywordflow">if</span>((y_cur != <span class="keywordtype">id</span>.y()) || (z_cur != <span class="keywordtype">id</span>.z()) || (d3_cur != <span class="keywordtype">id</span>[3]) || (d4_cur != <span class="keywordtype">id</span>[4]) || (d5_cur != <span class="keywordtype">id</span>[5]))</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;        {</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;            y_cur  = <span class="keywordtype">id</span>.y();</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;            z_cur  = <span class="keywordtype">id</span>.z();</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;            d3_cur = <span class="keywordtype">id</span>[3];</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;            d4_cur = <span class="keywordtype">id</span>[4];</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;            d5_cur = <span class="keywordtype">id</span>[5];</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;            const_x0 = M01 * y_cur + M02;</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;            const_y0 = M11 * y_cur + M12;</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;            const_z0 = M21 * y_cur + M22;</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;            x0 = start_x0 + const_x0;</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;            y0 = start_y0 + const_y0;</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;            z0 = start_z0 + const_z0;</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;        }</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span> xn = x0 / z0;</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span> yn = y0 / z0;</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;        <span class="comment">// Only write to output if xn and yn are within the valid region.</span></div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;        <span class="comment">// Otherwise the read value would be undefined.</span></div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;        <span class="keywordflow">if</span>((min_y &lt;= yn) &amp;&amp; (yn &lt; max_y) &amp;&amp; (min_x &lt;= xn) &amp;&amp; (xn &lt; max_x))</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;        {</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;            <span class="keywordflow">switch</span>(interpolation)</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;            {</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9a7f5ccbc3d30c2cd3fd04d567946cbde2">InterpolationPolicy::NEAREST_NEIGHBOR</a>:</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;                    *out.ptr() = nearest_interpolation(in.ptr(), xn, yn, stride);</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9aad6fddf718ad19b063e02fdd7e8e3e65">InterpolationPolicy::BILINEAR</a>:</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;                    *out.ptr() = <a class="code" href="namespacearm__compute.xhtml#a1c8d639ec2b3086a9506e72605a32333">pixel_bilinear_c1</a>(in.ptr(), stride, xn, yn);</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;                <span class="keywordflow">default</span>:</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;                    <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Interpolation not supported&quot;</span>);</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;            }</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;        }</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;        x0 += M00;</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;        y0 += M10;</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;        z0 += M20;</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;    },</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;    in, out);</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;}</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;<span class="keyword">template</span> &lt;InterpolationPolicy <span class="keywordtype">int</span>erpolation&gt;</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_n_e_warp_perspective_kernel.xhtml">NEWarpPerspectiveKernel&lt;interpolation&gt;::warp_constant</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;{</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;    <span class="comment">// Don&#39;t increment in X and Y direction for the input tensor</span></div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;    <span class="comment">// A pointer to the start of this plane is needed as base for the precomputed offsets</span></div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> win_in(window);</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;    win_in.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 0, 0));</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;    win_in.set(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 0, 0));</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;    <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> in(_input, win_in);</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;    <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> out(_output, window);</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>    min_x  = _input-&gt;info()-&gt;valid_region().anchor[0];</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>    max_x  = min_x + _input-&gt;info()-&gt;valid_region().shape[0];</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>    min_y  = _input-&gt;info()-&gt;valid_region().anchor[1];</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>    max_y  = min_y + _input-&gt;info()-&gt;valid_region().shape[1];</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> stride = _input-&gt;info()-&gt;strides_in_bytes()[1];</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;    <span class="comment">// x0 = M00 * x + M01 * y + M02</span></div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;    <span class="comment">// y0 = M10 * x + M11 * y + M12</span></div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;    <span class="comment">// z0 = M20 * x + M21 * y + M22</span></div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;    <span class="comment">// xn = x0 / z0</span></div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;    <span class="comment">// yn = y0 / z0</span></div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> M00 = _matrix[0];</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> M10 = _matrix[1];</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> M20 = _matrix[2];</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> M01 = _matrix[0 + 1 * 3];</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> M11 = _matrix[1 + 1 * 3];</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> M21 = _matrix[2 + 1 * 3];</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> M02 = _matrix[0 + 2 * 3];</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> M12 = _matrix[1 + 2 * 3];</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> M22 = _matrix[2 + 2 * 3];</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;    <span class="comment">// &quot;M00 * x&quot;, &quot;M10 * x&quot; and &quot;M20 * x&quot;, when x = window.x.start</span></div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> start_x0 = M00 * window.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>();</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> start_y0 = M10 * window.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>();</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> start_z0 = M20 * window.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>();</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;    <span class="comment">// Current row</span></div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;    <span class="keywordtype">int</span> y_cur  = window.<a class="code" href="classarm__compute_1_1_window.xhtml#a1b522b073f3ca32d24eb4e03495ef8a6">y</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>();</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;    <span class="keywordtype">int</span> z_cur  = window.<a class="code" href="classarm__compute_1_1_window.xhtml#a51a8c7a9d2fa20943c213e85eb8d9caf">z</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>();</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;    <span class="keywordtype">int</span> d3_cur = window[3].start();</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;    <span class="keywordtype">int</span> d4_cur = window[4].start();</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;    <span class="keywordtype">int</span> d5_cur = window[5].start();</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;    <span class="comment">// const_x0, const_y0 and const_z0 are the constant parts of x0, y0 and z0 during the row processing</span></div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;    <span class="keywordtype">float</span> const_x0 = M01 * y_cur + M02;</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;    <span class="keywordtype">float</span> const_y0 = M11 * y_cur + M12;</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;    <span class="keywordtype">float</span> const_z0 = M21 * y_cur + M22;</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;    <span class="comment">// Perspective warp coordinates</span></div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;    <span class="keywordtype">float</span> x0 = start_x0 + const_x0;</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;    <span class="keywordtype">float</span> y0 = start_y0 + const_y0;</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;    <span class="keywordtype">float</span> z0 = start_z0 + const_z0;</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(window, [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp; <span class="keywordtype">id</span>)</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;    {</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;        <span class="comment">// Check if we are processing a new row. If so, update the current processed row (y_cur), x0, y0 and z0</span></div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;        <span class="keywordflow">if</span>((y_cur != <span class="keywordtype">id</span>.y()) || (z_cur != <span class="keywordtype">id</span>.z()) || (d3_cur != <span class="keywordtype">id</span>[3]) || (d4_cur != <span class="keywordtype">id</span>[4]) || (d5_cur != <span class="keywordtype">id</span>[5]))</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;        {</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;            y_cur  = <span class="keywordtype">id</span>.y();</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;            z_cur  = <span class="keywordtype">id</span>.z();</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;            d3_cur = <span class="keywordtype">id</span>[3];</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;            d4_cur = <span class="keywordtype">id</span>[4];</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;            d5_cur = <span class="keywordtype">id</span>[5];</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;            const_x0 = M01 * y_cur + M02;</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;            const_y0 = M11 * y_cur + M12;</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;            const_z0 = M21 * y_cur + M22;</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;            x0 = start_x0 + const_x0;</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;            y0 = start_y0 + const_y0;</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;            z0 = start_z0 + const_z0;</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;        }</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span> xn = x0 / z0;</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span> yn = y0 / z0;</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;        <span class="comment">// Only use input values if xn and yn are within the valid region.</span></div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;        <span class="keywordflow">if</span>((min_y &lt;= yn) &amp;&amp; (yn &lt; max_y) &amp;&amp; (min_x &lt;= xn) &amp;&amp; (xn &lt; max_x))</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;        {</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;            <span class="keywordflow">switch</span>(interpolation)</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;            {</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9a7f5ccbc3d30c2cd3fd04d567946cbde2">InterpolationPolicy::NEAREST_NEIGHBOR</a>:</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;                    *out.ptr() = nearest_interpolation(in.ptr(), xn, yn, stride);</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9aad6fddf718ad19b063e02fdd7e8e3e65">InterpolationPolicy::BILINEAR</a>:</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;                    *out.ptr() = <a class="code" href="namespacearm__compute.xhtml#a1c8d639ec2b3086a9506e72605a32333">pixel_bilinear_c1</a>(in.ptr(), stride, xn, yn);</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;                <span class="keywordflow">default</span>:</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;                    <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Interpolation not supported&quot;</span>);</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;            }</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;        }</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;        {</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;            <span class="keywordflow">switch</span>(interpolation)</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;            {</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9a7f5ccbc3d30c2cd3fd04d567946cbde2">InterpolationPolicy::NEAREST_NEIGHBOR</a>:</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;                    *out.ptr() = _constant_border_value;</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9aad6fddf718ad19b063e02fdd7e8e3e65">InterpolationPolicy::BILINEAR</a>:</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;                {</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> xi   = utility::clamp&lt;int&gt;(std::floor(xn), min_x - 1, max_x);</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> yi   = utility::clamp&lt;int&gt;(std::floor(yn), min_y - 1, max_y);</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> xi_1 = utility::clamp&lt;int&gt;(std::floor(xn + 1), min_x - 1, max_x);</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> yi_1 = utility::clamp&lt;int&gt;(std::floor(yn + 1), min_y - 1, max_y);</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> dx  = xn - std::floor(xn);</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> dy  = yn - std::floor(yn);</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> dx1 = 1.0f - dx;</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> dy1 = 1.0f - dy;</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> a00 = *(in.ptr() + xi + yi * stride);</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> a01 = *(in.ptr() + xi_1 + yi * stride);</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> a10 = *(in.ptr() + xi + yi_1 * stride);</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> a11 = *(in.ptr() + xi_1 + yi_1 * stride);</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;                    *out.ptr() = a00 * (dx1 * dy1) + a01 * (dx * dy1) + a10 * (dx1 * dy) + a11 * (dx * dy);</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;                }</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;                <span class="keywordflow">default</span>:</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;                    <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Interpolation not supported&quot;</span>);</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;            }</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;        }</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;        x0 += M00;</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;        y0 += M10;</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;        z0 += M20;</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;    },</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;    in, out);</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;}</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;<span class="keyword">template</span> &lt;InterpolationPolicy <span class="keywordtype">int</span>erpolation&gt;</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_n_e_warp_perspective_kernel.xhtml">NEWarpPerspectiveKernel&lt;interpolation&gt;::warp_replicate</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;{</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;    <span class="comment">// Don&#39;t increment in X and Y direction for the input tensor</span></div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;    <span class="comment">// A pointer to the start of this plane is needed as base for the precomputed offsets</span></div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> win_in(window);</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;    win_in.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 0, 0));</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;    win_in.set(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 0, 0));</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;    <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> in(_input, win_in);</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;    <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> out(_output, window);</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>    min_x  = _input-&gt;info()-&gt;valid_region().anchor[0];</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>    max_x  = min_x + _input-&gt;info()-&gt;valid_region().shape[0];</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>    min_y  = _input-&gt;info()-&gt;valid_region().anchor[1];</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>    max_y  = min_y + _input-&gt;info()-&gt;valid_region().shape[1];</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> stride = _input-&gt;info()-&gt;strides_in_bytes()[1];</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;    <span class="comment">// Current row</span></div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;    <span class="keywordtype">int</span> y_cur  = window.<a class="code" href="classarm__compute_1_1_window.xhtml#a1b522b073f3ca32d24eb4e03495ef8a6">y</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>();</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;    <span class="keywordtype">int</span> z_cur  = window.<a class="code" href="classarm__compute_1_1_window.xhtml#a51a8c7a9d2fa20943c213e85eb8d9caf">z</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>();</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;    <span class="keywordtype">int</span> d3_cur = window[3].start();</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;    <span class="keywordtype">int</span> d4_cur = window[4].start();</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;    <span class="keywordtype">int</span> d5_cur = window[5].start();</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;    <span class="comment">// x0 = M00 * x + M01 * y + M02</span></div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;    <span class="comment">// y0 = M10 * x + M11 * y + M12</span></div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;    <span class="comment">// z0 = M20 * x + M21 * y + M22</span></div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;    <span class="comment">// xn = x0 / z0</span></div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;    <span class="comment">// yn = y0 / z0</span></div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> M00 = _matrix[0];</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> M10 = _matrix[1];</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> M20 = _matrix[2];</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> M01 = _matrix[0 + 1 * 3];</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> M11 = _matrix[1 + 1 * 3];</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> M21 = _matrix[2 + 1 * 3];</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> M02 = _matrix[0 + 2 * 3];</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> M12 = _matrix[1 + 2 * 3];</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> M22 = _matrix[2 + 2 * 3];</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;    <span class="comment">// &quot;M00 * x&quot;, &quot;M10 * x&quot; and &quot;M20 * x&quot;, when x = window.x.start</span></div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> start_x0 = M00 * window.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>();</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> start_y0 = M10 * window.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>();</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> start_z0 = M20 * window.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>();</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;    <span class="comment">// const_x0, const_y0 and const_z0 are the constant parts of x0, y0 and z0 during the row processing</span></div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;    <span class="keywordtype">float</span> const_x0 = M01 * y_cur + M02;</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;    <span class="keywordtype">float</span> const_y0 = M11 * y_cur + M12;</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;    <span class="keywordtype">float</span> const_z0 = M21 * y_cur + M22;</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;    <span class="comment">// Perspective warp coordinates</span></div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;    <span class="keywordtype">float</span> x0 = start_x0 + const_x0;</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;    <span class="keywordtype">float</span> y0 = start_y0 + const_y0;</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;    <span class="keywordtype">float</span> z0 = start_z0 + const_z0;</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(window, [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp; <span class="keywordtype">id</span>)</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;    {</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;        <span class="comment">// Check if we are processing a new row. If so, update the current processed row (y_cur), x0, y0 and z0</span></div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;        <span class="keywordflow">if</span>((y_cur != <span class="keywordtype">id</span>.y()) || (z_cur != <span class="keywordtype">id</span>.z()) || (d3_cur != <span class="keywordtype">id</span>[3]) || (d4_cur != <span class="keywordtype">id</span>[4]) || (d5_cur != <span class="keywordtype">id</span>[5]))</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;        {</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;            y_cur  = <span class="keywordtype">id</span>.y();</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;            z_cur  = <span class="keywordtype">id</span>.z();</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;            d3_cur = <span class="keywordtype">id</span>[3];</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;            d4_cur = <span class="keywordtype">id</span>[4];</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;            d5_cur = <span class="keywordtype">id</span>[5];</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;            const_x0 = M01 * y_cur + M02;</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;            const_y0 = M11 * y_cur + M12;</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;            const_z0 = M21 * y_cur + M22;</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;            x0 = start_x0 + const_x0;</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;            y0 = start_y0 + const_y0;</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;            z0 = start_z0 + const_z0;</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;        }</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span> xn = x0 / z0;</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span> yn = y0 / z0;</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;        <span class="comment">// Only load from (x0, y0) if the point is within the valid region.</span></div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;        <span class="keywordflow">if</span>((min_y &lt;= yn) &amp;&amp; (yn &lt; max_y) &amp;&amp; (min_x &lt;= xn) &amp;&amp; (xn &lt; max_x))</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;        {</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;            <span class="keywordflow">switch</span>(interpolation)</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;            {</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9a7f5ccbc3d30c2cd3fd04d567946cbde2">InterpolationPolicy::NEAREST_NEIGHBOR</a>:</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;                    *out.ptr() = nearest_interpolation(in.ptr(), xn, yn, stride);</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9aad6fddf718ad19b063e02fdd7e8e3e65">InterpolationPolicy::BILINEAR</a>:</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;                    *out.ptr() = <a class="code" href="namespacearm__compute.xhtml#a1c8d639ec2b3086a9506e72605a32333">pixel_bilinear_c1</a>(in.ptr(), stride, xn, yn);</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;                <span class="keywordflow">default</span>:</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;                    <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Interpolation not supported&quot;</span>);</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;            }</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;        }</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;        {</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;            <span class="comment">// Clamp coordinates</span></div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> xi = utility::clamp&lt;int&gt;(std::floor(xn), min_x, max_x - 1);</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> yi = utility::clamp&lt;int&gt;(std::floor(yn), min_y, max_y - 1);</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;            <span class="keywordflow">switch</span>(interpolation)</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;            {</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9a7f5ccbc3d30c2cd3fd04d567946cbde2">InterpolationPolicy::NEAREST_NEIGHBOR</a>:</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;                    *out.ptr() = *(in.ptr() + xi + yi * stride);</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9aad6fddf718ad19b063e02fdd7e8e3e65">InterpolationPolicy::BILINEAR</a>:</div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;                {</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> xi_1 = utility::clamp&lt;int&gt;(std::floor(xn + 1), min_x, max_x - 1);</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> yi_1 = utility::clamp&lt;int&gt;(std::floor(yn + 1), min_y, max_y - 1);</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> dx  = xn - std::floor(xn);</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> dy  = yn - std::floor(yn);</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> dx1 = 1.0f - dx;</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> dy1 = 1.0f - dy;</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> a00 = *(in.ptr() + xi + yi * stride);</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> a01 = *(in.ptr() + xi_1 + yi * stride);</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> a10 = *(in.ptr() + xi + yi_1 * stride);</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> a11 = *(in.ptr() + xi_1 + yi_1 * stride);</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;                    *out.ptr() = a00 * (dx1 * dy1) + a01 * (dx * dy1) + a10 * (dx1 * dy) + a11 * (dx * dy);</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;                }</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;                <span class="keywordflow">default</span>:</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;                    <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Interpolation not supported&quot;</span>);</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;            }</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;        }</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;        x0 += M00;</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;        y0 += M10;</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;        z0 += M20;</div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;    },</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;    in, out);</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;}</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;<span class="keyword">template</span> <span class="keyword">class </span><a class="code" href="classarm__compute_1_1_n_e_warp_affine_kernel.xhtml">arm_compute::NEWarpAffineKernel&lt;InterpolationPolicy::NEAREST_NEIGHBOR&gt;</a>;</div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;<span class="keyword">template</span> <span class="keyword">class </span><a class="code" href="classarm__compute_1_1_n_e_warp_affine_kernel.xhtml">arm_compute::NEWarpAffineKernel&lt;InterpolationPolicy::BILINEAR&gt;</a>;</div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;<span class="keyword">template</span> <span class="keyword">class </span><a class="code" href="classarm__compute_1_1_n_e_warp_perspective_kernel.xhtml">arm_compute::NEWarpPerspectiveKernel&lt;InterpolationPolicy::NEAREST_NEIGHBOR&gt;</a>;</div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;<span class="keyword">template</span> <span class="keyword">class </span><a class="code" href="classarm__compute_1_1_n_e_warp_perspective_kernel.xhtml">arm_compute::NEWarpPerspectiveKernel&lt;InterpolationPolicy::BILINEAR&gt;</a>;</div><div class="ttc" id="namespacearm__compute_xhtml_a15a05537a472ee742404821851529327"><div class="ttname"><a href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">arm_compute::BorderMode</a></div><div class="ttdeci">BorderMode</div><div class="ttdoc">Methods available to handle borders.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00261">Types.h:261</a></div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml_a3fdd42ea34070a54e696b3adc28c4be3"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">arm_compute::BorderSize::top</a></div><div class="ttdeci">unsigned int top</div><div class="ttdoc">top of the border</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00349">Types.h:349</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_kernel_xhtml_ad34a46f53686c12a5c5e717cc9617fb6"><div class="ttname"><a href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">arm_compute::IKernel::window</a></div><div class="ttdeci">const Window &amp; window() const</div><div class="ttdoc">The maximum window the kernel can be executed on.</div><div class="ttdef"><b>Definition:</b> <a href="_i_kernel_8cpp_source.xhtml#l00028">IKernel.cpp:28</a></div></div>
<div class="ttc" id="_i_tensor_8h_xhtml"><div class="ttname"><a href="_i_tensor_8h.xhtml">ITensor.h</a></div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml">arm_compute::BorderSize</a></div><div class="ttdoc">Container for 2D border size.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00269">Types.h:269</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00352">Error.h:352</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_n_e_warp_kernel_xhtml_a112b35dd205c62ea6ed1447ef226da82"><div class="ttname"><a href="classarm__compute_1_1_i_n_e_warp_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">arm_compute::INEWarpKernel::run</a></div><div class="ttdeci">void run(const Window &amp;window, const ThreadInfo &amp;info) override</div><div class="ttdoc">Execute the kernel on the passed window.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_warp_kernel_8cpp_source.xhtml#l00057">NEWarpKernel.cpp:57</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::Format::U8</a></div><div class="ttdoc">1 channel, 1 U8 per channel</div></div>
<div class="ttc" id="_window_8h_xhtml"><div class="ttname"><a href="_window_8h.xhtml">Window.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_n_e_warp_kernel_xhtml_a7acfff8355cadd1f4a467a82d05df75a"><div class="ttname"><a href="classarm__compute_1_1_i_n_e_warp_kernel.xhtml#a7acfff8355cadd1f4a467a82d05df75a">arm_compute::INEWarpKernel::INEWarpKernel</a></div><div class="ttdeci">INEWarpKernel()</div><div class="ttdoc">Default constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_warp_kernel_8cpp_source.xhtml#l00047">NEWarpKernel.cpp:47</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a966a9c417ce5e94dca08d9b5e745c0c9aad6fddf718ad19b063e02fdd7e8e3e65"><div class="ttname"><a href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9aad6fddf718ad19b063e02fdd7e8e3e65">arm_compute::InterpolationPolicy::BILINEAR</a></div><div class="ttdoc">Output values are defined by bilinear interpolation between the pixels.</div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_1_1_dimension_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml">arm_compute::Window::Dimension</a></div><div class="ttdoc">Describe one of the image's dimensions with a start, end and step.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00075">Window.h:75</a></div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml_a802ffcf1b49237efe5be8a314d3f3869"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a802ffcf1b49237efe5be8a314d3f3869">arm_compute::BorderSize::bottom</a></div><div class="ttdeci">unsigned int bottom</div><div class="ttdoc">bottom of the border</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00351">Types.h:351</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_a51a8c7a9d2fa20943c213e85eb8d9caf"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a51a8c7a9d2fa20943c213e85eb8d9caf">arm_compute::Window::z</a></div><div class="ttdeci">constexpr const Dimension &amp; z() const</div><div class="ttdoc">Alias to access the third dimension of the window.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00161">Window.h:161</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a966a9c417ce5e94dca08d9b5e745c0c9a7f5ccbc3d30c2cd3fd04d567946cbde2"><div class="ttname"><a href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9a7f5ccbc3d30c2cd3fd04d567946cbde2">arm_compute::InterpolationPolicy::NEAREST_NEIGHBOR</a></div><div class="ttdoc">Output values are defined to match the source pixel whose center is nearest to the sample position.</div></div>
<div class="ttc" id="_tensor_info_8h_xhtml"><div class="ttname"><a href="_tensor_info_8h.xhtml">TensorInfo.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml">arm_compute::ITensor</a></div><div class="ttdoc">Interface for NEON tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_8h_source.xhtml#l00036">ITensor.h:36</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab7980fa5ee693e3282a76da047a1c3b5"><div class="ttname"><a href="namespacearm__compute.xhtml#ab7980fa5ee693e3282a76da047a1c3b5">arm_compute::calculate_max_window</a></div><div class="ttdeci">Window calculate_max_window(const ValidRegion &amp;valid_region, const Steps &amp;steps=Steps(), bool skip_border=false, BorderSize border_size=BorderSize())</div><div class="ttdoc">Calculate the maximum window for a given tensor shape and border setting.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_helpers_8cpp_source.xhtml#l00028">Helpers.cpp:28</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2020 ARM Limited.</div><div class="ttdef"><b>Definition:</b> <a href="00__introduction_8dox_source.xhtml#l00024">00_introduction.dox:24</a></div></div>
<div class="ttc" id="classarm__compute_1_1_access_window_static_xhtml"><div class="ttname"><a href="classarm__compute_1_1_access_window_static.xhtml">arm_compute::AccessWindowStatic</a></div><div class="ttdoc">Implementation of a static rectangular access pattern.</div><div class="ttdef"><b>Definition:</b> <a href="_access_window_static_8h_source.xhtml#l00046">AccessWindowStatic.h:46</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a5471e46933e7a9c4709972d91fc4ea65"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a5471e46933e7a9c4709972d91fc4ea65">arm_compute::test::validation::border_mode</a></div><div class="ttdeci">border_mode</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_8cpp_source.xhtml#l00118">Convolution.cpp:118</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_aa96e81276ee4f87ab386cd05a5539a7d"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">arm_compute::Window::DimX</a></div><div class="ttdeci">static constexpr size_t DimX</div><div class="ttdoc">Alias for dimension 0 also known as X dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00043">Window.h:43</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_afc4bd8e872567d9c4c57d89eb0bb3da1"><div class="ttname"><a href="namespacearm__compute.xhtml#afc4bd8e872567d9c4c57d89eb0bb3da1">arm_compute::update_window_and_padding</a></div><div class="ttdeci">bool update_window_and_padding(Window &amp;win, Ts &amp;&amp;... patterns)</div><div class="ttdoc">Update window and padding size for each of the access patterns.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_helpers_8h_source.xhtml#l00402">Helpers.h:402</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">arm_compute::Channel::U</a></div><div class="ttdoc">Cb/U channel.</div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a7c66505457d00ece3aa4b34cab80757d"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">arm_compute::ITensorInfo::tensor_shape</a></div><div class="ttdeci">virtual const TensorShape &amp; tensor_shape() const =0</div><div class="ttdoc">Size for each dimension of the tensor.</div></div>
<div class="ttc" id="classarm__compute_1_1_steps_xhtml"><div class="ttname"><a href="classarm__compute_1_1_steps.xhtml">arm_compute::Steps</a></div><div class="ttdoc">Class to describe a number of elements in each dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_steps_8h_source.xhtml#l00040">Steps.h:40</a></div></div>
<div class="ttc" id="classarm__compute_1_1_coordinates_xhtml"><div class="ttname"><a href="classarm__compute_1_1_coordinates.xhtml">arm_compute::Coordinates</a></div><div class="ttdoc">Coordinates of an item.</div><div class="ttdef"><b>Definition:</b> <a href="_coordinates_8h_source.xhtml#l00037">Coordinates.h:37</a></div></div>
<div class="ttc" id="classarm__compute_1_1_access_window_horizontal_xhtml"><div class="ttname"><a href="classarm__compute_1_1_access_window_horizontal.xhtml">arm_compute::AccessWindowHorizontal</a></div><div class="ttdoc">Implementation of a row access pattern.</div><div class="ttdef"><b>Definition:</b> <a href="_i_access_window_8h_source.xhtml#l00232">IAccessWindow.h:232</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml_a0e95dc1e53c361348314873b168ae237"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">arm_compute::ITensor::info</a></div><div class="ttdeci">virtual ITensorInfo * info() const =0</div><div class="ttdoc">Interface to be implemented by the child class to return the tensor's metadata.</div></div>
<div class="ttc" id="_error_8h_xhtml"><div class="ttname"><a href="_error_8h.xhtml">Error.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_warp_affine_kernel_xhtml"><div class="ttname"><a href="classarm__compute_1_1_n_e_warp_affine_kernel.xhtml">arm_compute::NEWarpAffineKernel</a></div><div class="ttdoc">Template interface for the kernel to compute warp affine.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_warp_kernel_8h_source.xhtml#l00099">NEWarpKernel.h:99</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_n_e_warp_kernel_xhtml_a423f9a45a52983b4de5e2b347f4369c7"><div class="ttname"><a href="classarm__compute_1_1_i_n_e_warp_kernel.xhtml#a423f9a45a52983b4de5e2b347f4369c7">arm_compute::INEWarpKernel::border_size</a></div><div class="ttdeci">BorderSize border_size() const override</div><div class="ttdoc">The size of the border for that kernel.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_warp_kernel_8cpp_source.xhtml#l00052">NEWarpKernel.cpp:52</a></div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml_a05374b750b0fc472c34ee61e6f028bba"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a05374b750b0fc472c34ee61e6f028bba">arm_compute::BorderSize::left</a></div><div class="ttdeci">unsigned int left</div><div class="ttdoc">left of the border</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00352">Types.h:352</a></div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml_a78b0fed184c642b78f32fd34b228a5f9"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a78b0fed184c642b78f32fd34b228a5f9">arm_compute::BorderSize::right</a></div><div class="ttdeci">unsigned int right</div><div class="ttdoc">right of the border</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00350">Types.h:350</a></div></div>
<div class="ttc" id="_validate_8h_xhtml_aadf5c9cff86327b96d88d04649d9715e"><div class="ttname"><a href="_validate_8h.xhtml#aadf5c9cff86327b96d88d04649d9715e">ARM_COMPUTE_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN(t, c,...)</div><div class="ttdef"><b>Definition:</b> <a href="_validate_8h_source.xhtml#l00790">Validate.h:790</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_ad2d402364fa822b0b7775081291eeca9"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">arm_compute::Window::DimY</a></div><div class="ttdeci">static constexpr size_t DimY</div><div class="ttdoc">Alias for dimension 1 also known as Y dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00045">Window.h:45</a></div></div>
<div class="ttc" id="structarm__compute_1_1_thread_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_thread_info.xhtml">arm_compute::ThreadInfo</a></div><div class="ttdoc">Information about executing thread and CPU.</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_types_8h_source.xhtml#l00225">CPPTypes.h:225</a></div></div>
<div class="ttc" id="_coordinates_8h_xhtml"><div class="ttname"><a href="_coordinates_8h.xhtml">Coordinates.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1c8d639ec2b3086a9506e72605a32333"><div class="ttname"><a href="namespacearm__compute.xhtml#a1c8d639ec2b3086a9506e72605a32333">arm_compute::pixel_bilinear_c1</a></div><div class="ttdeci">T pixel_bilinear_c1(const T *first_pixel_ptr, size_t stride, float x, float y)</div><div class="ttdoc">Return the pixel at (x,y) using bilinear interpolation.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_helpers_8h_source.xhtml#l00244">Helpers.h:244</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92"><div class="ttname"><a href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92">arm_compute::PaddingMode::CONSTANT</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a15a05537a472ee742404821851529327a0db45d2a4141101bdfe48e3314cfbca3"><div class="ttname"><a href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a0db45d2a4141101bdfe48e3314cfbca3">arm_compute::BorderMode::UNDEFINED</a></div><div class="ttdoc">Borders are left undefined.</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a15a05537a472ee742404821851529327a4ef59320fbe90fe47d40f1f71e4c5daa"><div class="ttname"><a href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a4ef59320fbe90fe47d40f1f71e4c5daa">arm_compute::BorderMode::REPLICATE</a></div><div class="ttdoc">Pixels outside the image are assumed to have the same value as the closest image pixel.</div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_a1b522b073f3ca32d24eb4e03495ef8a6"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a1b522b073f3ca32d24eb4e03495ef8a6">arm_compute::Window::y</a></div><div class="ttdeci">constexpr const Dimension &amp; y() const</div><div class="ttdoc">Alias to access the second dimension of the window.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00152">Window.h:152</a></div></div>
<div class="ttc" id="arm__compute_2core_2_helpers_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_helpers_8h.xhtml">Helpers.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5002bf7ec46d52971f9526e94172cfee"><div class="ttname"><a href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;... iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00123">Helpers.inl:123</a></div></div>
<div class="ttc" id="_access_window_static_8h_xhtml"><div class="ttname"><a href="_access_window_static_8h.xhtml">AccessWindowStatic.h</a></div></div>
<div class="ttc" id="structarm__compute_1_1_valid_region_xhtml"><div class="ttname"><a href="structarm__compute_1_1_valid_region.xhtml">arm_compute::ValidRegion</a></div><div class="ttdoc">Container for valid region of a window.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00184">Types.h:184</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a4f4125dba5283887b34f889b1c615c0c"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">arm_compute::test::validation::info</a></div><div class="ttdeci">info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00182">ConvolutionLayer.cpp:182</a></div></div>
<div class="ttc" id="classarm__compute_1_1_iterator_xhtml"><div class="ttname"><a href="classarm__compute_1_1_iterator.xhtml">arm_compute::Iterator</a></div><div class="ttdoc">Iterator updated by execute_window_loop for each window element.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_helpers_8h_source.xhtml#l00318">Helpers.h:318</a></div></div>
<div class="ttc" id="_validate_8h_xhtml_a6eb9ce82815fe429250189da7592ba75"><div class="ttname"><a href="_validate_8h.xhtml#a6eb9ce82815fe429250189da7592ba75">ARM_COMPUTE_ERROR_ON_INVALID_SUBWINDOW</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_INVALID_SUBWINDOW(f, s)</div><div class="ttdef"><b>Definition:</b> <a href="_validate_8h_source.xhtml#l00205">Validate.h:205</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_1_1_dimension_xhtml_ab24e31d1a4830bf79564ee902ec6c060"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">arm_compute::Window::Dimension::start</a></div><div class="ttdeci">constexpr int start() const</div><div class="ttdoc">Return the start of the dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00092">Window.h:92</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml">arm_compute::Window</a></div><div class="ttdoc">Describe a multidimensional execution window.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00039">Window.h:39</a></div></div>
<div class="ttc" id="_validate_8h_xhtml_a1b35b0d258183cf9ef36adf684d0b88c"><div class="ttname"><a href="_validate_8h.xhtml#a1b35b0d258183cf9ef36adf684d0b88c">ARM_COMPUTE_ERROR_ON_UNCONFIGURED_KERNEL</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_UNCONFIGURED_KERNEL(k)</div><div class="ttdef"><b>Definition:</b> <a href="_validate_8h_source.xhtml#l00941">Validate.h:941</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_warp_perspective_kernel_xhtml"><div class="ttname"><a href="classarm__compute_1_1_n_e_warp_perspective_kernel.xhtml">arm_compute::NEWarpPerspectiveKernel</a></div><div class="ttdoc">Template interface for the kernel to compute warp perspective.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_warp_kernel_8h_source.xhtml#l00116">NEWarpKernel.h:116</a></div></div>
<div class="ttc" id="_validate_8h_xhtml"><div class="ttname"><a href="_validate_8h.xhtml">Validate.h</a></div></div>
<div class="ttc" id="_n_e_warp_kernel_8h_xhtml"><div class="ttname"><a href="_n_e_warp_kernel_8h.xhtml">NEWarpKernel.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_n_e_warp_kernel_xhtml_a1aad3191e6d0d90fa0114a355ac52991"><div class="ttname"><a href="classarm__compute_1_1_i_n_e_warp_kernel.xhtml#a1aad3191e6d0d90fa0114a355ac52991">arm_compute::INEWarpKernel::configure</a></div><div class="ttdeci">virtual void configure(const ITensor *input, ITensor *output, const std::array&lt; float, 9 &gt; &amp;matrix, BorderMode border_mode, uint8_t constant_border_value)</div><div class="ttdoc">Initialise the kernel's input, output and border mode.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_warp_kernel_8cpp_source.xhtml#l00067">NEWarpKernel.cpp:67</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_a273fd2ecdd45169b2f702f01a7e5e382"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">arm_compute::Window::x</a></div><div class="ttdeci">constexpr const Dimension &amp; x() const</div><div class="ttdoc">Alias to access the first dimension of the window.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00143">Window.h:143</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aebb8dcc11953d78e620bbef0b9e2183.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_d91e1966cc57df4f49d1e07be7697713.xhtml">NEON</a></li><li class="navelem"><a class="el" href="dir_1ce938f580a6f304b99685e2c1dd19db.xhtml">kernels</a></li><li class="navelem"><a class="el" href="_n_e_warp_kernel_8cpp.xhtml">NEWarpKernel.cpp</a></li>
    <li class="footer">Generated on Fri Feb 21 2020 11:10:15 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
