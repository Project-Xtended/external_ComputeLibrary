<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: examples/neon_opticalflow.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('neon__opticalflow_8cpp_source.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">neon_opticalflow.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="neon__opticalflow_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2019 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_n_e_functions_8h.xhtml">arm_compute/runtime/NEON/NEFunctions.h</a>&quot;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_types_8h.xhtml">arm_compute/core/Types.h</a>&quot;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_image_loader_8h.xhtml">utils/ImageLoader.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="utils_2_utils_8h.xhtml">utils/Utils.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &lt;fstream&gt;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &lt;sstream&gt;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a>;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">using namespace </span>utils;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keyword">class </span>NeonOpticalFlowExample : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1utils_1_1_example.xhtml">Example</a></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    NeonOpticalFlowExample()</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        : input_points(100), output_points(100), point_estimates(100)</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    {</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    }</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keywordtype">bool</span> do_setup(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> **argv)<span class="keyword"> override</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        <span class="keywordflow">if</span>(argc &lt; 5)</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        {</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;            <span class="comment">// Print help</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;            std::cout &lt;&lt; <span class="stringliteral">&quot;Usage: ./build/neon_opticalflow [src_1st.ppm] [src_2nd.ppm] [keypoints] [estimates]\n\n&quot;</span>;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> img_width  = 64;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> img_height = 64;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> rect_x     = 20;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> rect_y     = 40;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> rect_s     = 8;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> offsetx    = 24;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> offsety    = 3;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            std::cout &lt;&lt; <span class="stringliteral">&quot;No input_image provided, creating test data:\n&quot;</span>;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;            std::cout &lt;&lt; <span class="stringliteral">&quot;\t Image src_1st = (&quot;</span> &lt;&lt; img_width &lt;&lt; <span class="stringliteral">&quot;,&quot;</span> &lt;&lt; img_height &lt;&lt; <span class="stringliteral">&quot;)&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;            std::cout &lt;&lt; <span class="stringliteral">&quot;\t Image src_2nd = (&quot;</span> &lt;&lt; img_width &lt;&lt; <span class="stringliteral">&quot;,&quot;</span> &lt;&lt; img_height &lt;&lt; <span class="stringliteral">&quot;)&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;            init_img(src_1st, img_width, img_height, rect_x, rect_y, rect_s);</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            init_img(src_2nd, img_width, img_height, rect_x + offsetx, rect_y + offsety, rect_s);</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> num_points = 4;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            input_points.resize(num_points);</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            point_estimates.resize(num_points);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            <span class="keyword">const</span> std::array&lt;unsigned int, num_points&gt; tracking_coordsx = { rect_x - 1, rect_x, rect_x + 1, rect_x + 2 };</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            <span class="keyword">const</span> std::array&lt;unsigned int, num_points&gt; tracking_coordsy = { rect_y - 1, rect_y, rect_y + 1, rect_y + 2 };</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            <span class="keyword">const</span> std::array&lt;unsigned int, num_points&gt; estimate_coordsx = { rect_x + offsetx - 1, rect_x + offsetx, rect_x + offsetx + 1, rect_x + offsetx + 2 };</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            <span class="keyword">const</span> std::array&lt;unsigned int, num_points&gt; estimate_coordsy = { rect_y + offsety - 1, rect_y + offsety, rect_y + offsety + 1, rect_y + offsety + 2 };</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k = 0; k &lt; num_points; ++k)</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            {</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                <span class="keyword">auto</span> &amp;keypoint           = input_points.at(k);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                keypoint.x               = tracking_coordsx[k];</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                keypoint.y               = tracking_coordsy[k];</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                keypoint.tracking_status = 1;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;            }</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k = 0; k &lt; num_points; ++k)</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;            {</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                <span class="keyword">auto</span> &amp;keypoint           = point_estimates.at(k);</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                keypoint.x               = estimate_coordsx[k];</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                keypoint.y               = estimate_coordsy[k];</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                keypoint.tracking_status = 1;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            }</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        }</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        {</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            load_ppm(argv[1], src_1st);</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            load_ppm(argv[2], src_2nd);</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            load_keypoints(argv[3], input_points);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            load_keypoints(argv[4], point_estimates);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        }</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        print_points(input_points, <span class="stringliteral">&quot;Tracking points : &quot;</span>);</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        print_points(point_estimates, <span class="stringliteral">&quot;Estimates points : &quot;</span>);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_levels = 3;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        <span class="comment">// Initialise and allocate pyramids</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        <a class="code" href="classarm__compute_1_1_pyramid_info.xhtml">PyramidInfo</a> pyramid_info(num_levels, <a class="code" href="namespacearm__compute.xhtml#af9876aedd664cac0ddeacddb40cb71cd">SCALE_PYRAMID_HALF</a>, src_1st.info()-&gt;tensor_shape(), src_1st.info()-&gt;format());</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        pyr_1st.init_auto_padding(pyramid_info);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        pyr_2nd.init_auto_padding(pyramid_info);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        pyrf_1st.configure(&amp;src_1st, &amp;pyr_1st, <a class="code" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a0db45d2a4141101bdfe48e3314cfbca3">BorderMode::UNDEFINED</a>, 0);</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        pyrf_2nd.configure(&amp;src_2nd, &amp;pyr_2nd, <a class="code" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a0db45d2a4141101bdfe48e3314cfbca3">BorderMode::UNDEFINED</a>, 0);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        output_points.resize(input_points.num_values());</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        optkf.configure(&amp;pyr_1st, &amp;pyr_2nd,</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                        &amp;input_points, &amp;point_estimates, &amp;output_points,</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                        <a class="code" href="namespacearm__compute.xhtml#a08c1503414e23f5dd10ff83492685453a788740b1ba2d6463dae318a332513b29">Termination::TERM_CRITERIA_BOTH</a>, 0.01f, 15, 5, <span class="keyword">true</span>, <a class="code" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a0db45d2a4141101bdfe48e3314cfbca3">BorderMode::UNDEFINED</a>, 0);</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        pyr_1st.allocate();</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        pyr_2nd.allocate();</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    }</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keywordtype">void</span> do_run()<span class="keyword"> override</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        <span class="comment">//Execute the functions:</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        pyrf_1st.run();</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        pyrf_2nd.run();</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        optkf.run();</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    }</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keywordtype">void</span> do_teardown()<span class="keyword"> override</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        print_points(output_points, <span class="stringliteral">&quot;Output points : &quot;</span>);</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    }</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="keyword">private</span>:<span class="comment"></span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment">    /** Loads the input keypoints from a file into an array</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment">     * @param[in]  fn  Filename containing the keypoints. Each line must have two values X Y.</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment">     * @param[out] img Reference to an unintialised KeyPointArray</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keywordtype">bool</span> load_keypoints(<span class="keyword">const</span> std::string &amp;fn, <a class="code" href="classarm__compute_1_1_array.xhtml">KeyPointArray</a> &amp;array)</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    {</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        assert(!fn.empty());</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        std::ifstream f(fn);</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <span class="keywordflow">if</span>(f.is_open())</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        {</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            std::cout &lt;&lt; <span class="stringliteral">&quot;Reading points from &quot;</span> &lt;&lt; fn &lt;&lt; std::endl;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            std::vector&lt;KeyPoint&gt; v;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            <span class="keywordflow">for</span>(std::string line; std::getline(f, line);)</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            {</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                std::stringstream ss(line);</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                std::string       xcoord;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                std::string       ycoord;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                getline(ss, xcoord, <span class="charliteral">&#39; &#39;</span>);</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                getline(ss, ycoord, <span class="charliteral">&#39; &#39;</span>);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                <a class="code" href="structarm__compute_1_1_key_point.xhtml">KeyPoint</a> kp;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                kp.<a class="code" href="structarm__compute_1_1_key_point.xhtml#af6d3062751bd565decb1a2cd3b63bdb2">x</a>               = <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#abdba606a789b8d664774f17d18f45cfe">std::stoi</a>(xcoord);</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                kp.<a class="code" href="structarm__compute_1_1_key_point.xhtml#af64066d134a77e01b3d6eb8da813627a">y</a>               = <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#abdba606a789b8d664774f17d18f45cfe">std::stoi</a>(ycoord);</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                kp.<a class="code" href="structarm__compute_1_1_key_point.xhtml#a8ca2aae59762685dd38143e5f8267147">tracking_status</a> = 1;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                v.push_back(kp);</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;            }</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> num_points = v.size();</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;            array.<a class="code" href="classarm__compute_1_1_i_array.xhtml#ae21b0e95ded2dcfb5e62848ea0193828">resize</a>(num_points);</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k = 0; k &lt; num_points; ++k)</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;            {</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                <span class="keyword">auto</span> &amp;keypoint = array.<a class="code" href="classarm__compute_1_1_i_array.xhtml#a9deaea40b2409ee68d354bdb9d3f8443">at</a>(k);</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                keypoint       = v[k];</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;            }</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        }</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        {</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;            std::cout &lt;&lt; <span class="stringliteral">&quot;Cannot open keypoints file &quot;</span> &lt;&lt; fn &lt;&lt; std::endl;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        }</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    }</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="comment">    /** Creates and Image and fills it with the ppm data from the file</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="comment">     * @param[in]  fn  PPM filename to be loaded</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="comment">     * @param[out] img Reference to an unintialised image instance</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keywordtype">bool</span> load_ppm(<span class="keyword">const</span> std::string &amp;fn, <a class="code" href="struct_image.xhtml">Image</a> &amp;img)</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    {</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        assert(!fn.empty());</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        <a class="code" href="classarm__compute_1_1utils_1_1_p_p_m_loader.xhtml">PPMLoader</a> ppm;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        ppm.<a class="code" href="classarm__compute_1_1utils_1_1_p_p_m_loader.xhtml#ab23b23a466d459ecbad7d046bb085324">open</a>(fn);</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        ppm.init_image(img, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>);</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        img.allocator()-&gt;allocate();</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        <span class="keywordflow">if</span>(ppm.is_open())</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        {</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            std::cout &lt;&lt; <span class="stringliteral">&quot;Reading image &quot;</span> &lt;&lt; fn &lt;&lt; std::endl;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;            ppm.fill_image(img);</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        }</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        {</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;            std::cout &lt;&lt; <span class="stringliteral">&quot;Cannot open &quot;</span> &lt;&lt; fn &lt;&lt; std::endl;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        }</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="comment">    /** Creates and Image and draws a square in the specified coordinares.</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="comment">     * @param[out] img             Reference to an unintialised image instance</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="comment">     * @param[in]  img_width       Width of the image to be created</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="comment">     * @param[in]  img_height      Height of the image to be created</span></div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="comment">     * @param[in]  square_center_x Coordinate along x-axis to be used as the center for the square</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="comment">     * @param[in]  square_center_y Coordinate along y-axis to be used as the center for the square</span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="comment">     * @param[in]  square_size     Size in pixels to be used for the square</span></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <span class="keywordtype">void</span> init_img(<a class="code" href="struct_image.xhtml">Image</a> &amp;img, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> img_width, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> img_height,</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> square_center_x, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> square_center_y,</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> square_size)</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    {</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        img.allocator()-&gt;init(<a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>(img_width, img_height, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>));</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        img.allocator()-&gt;allocate();</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> square_half = square_size / 2;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        <span class="comment">// assert the square is in the bounds of the image</span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        assert(square_center_x &gt; square_half &amp;&amp; square_center_x + square_half &lt; img_width);</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        assert(square_center_y &gt; square_half &amp;&amp; square_center_y + square_half &lt; img_height);</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        <span class="comment">// get ptr to the top left pixel for the squeare</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1643f4cb252152ed8ffc0df84744ad5d">std::fill</a>(img.buffer(), img.buffer() + img_width * img_height, 0);</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; square_size; ++i)</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        {</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> j = 0; j &lt; square_size; ++j)</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;            {</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                uint8_t *ptr = img.ptr_to_element(<a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>(square_center_x - square_half + j, square_center_y - square_half + i));</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                *ptr         = 0xFF;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;            }</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        }</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="comment">    /** Prints an array of keypoints and an optional label</span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="comment">     * @param[in] a   Keypoint array to be printed</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="comment">     * @param[in] str Label to be printed before the array</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="keywordtype">void</span> print_points(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_array.xhtml">KeyPointArray</a> &amp;a, <span class="keyword">const</span> std::string &amp;str = <span class="stringliteral">&quot;&quot;</span>)</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    {</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        std::cout &lt;&lt; str &lt;&lt; std::endl;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k = 0; k &lt; a.<a class="code" href="classarm__compute_1_1_i_array.xhtml#aac8e28a698cd201286d75eb3f5ad3e1c">num_values</a>(); ++k)</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        {</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;            <span class="keyword">auto</span> kp = a.<a class="code" href="classarm__compute_1_1_i_array.xhtml#a9deaea40b2409ee68d354bdb9d3f8443">at</a>(k);</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;            std::cout &lt;&lt; <span class="stringliteral">&quot;\t &quot;</span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                      &lt;&lt; <span class="stringliteral">&quot; (x,y) = (&quot;</span> &lt;&lt; kp.<a class="code" href="structarm__compute_1_1_key_point.xhtml#af6d3062751bd565decb1a2cd3b63bdb2">x</a> &lt;&lt; <span class="stringliteral">&quot;,&quot;</span> &lt;&lt; kp.<a class="code" href="structarm__compute_1_1_key_point.xhtml#af64066d134a77e01b3d6eb8da813627a">y</a> &lt;&lt; <span class="stringliteral">&quot;)&quot;</span>;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;            std::cout &lt;&lt; <span class="stringliteral">&quot; strength = &quot;</span> &lt;&lt; kp.<a class="code" href="structarm__compute_1_1_key_point.xhtml#a2c1c8f9331368f38bfc3eaee260b59a6">strength</a> &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                      &lt;&lt; <span class="stringliteral">&quot; scale = &quot;</span> &lt;&lt; kp.<a class="code" href="structarm__compute_1_1_key_point.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a> &lt;&lt; <span class="stringliteral">&quot; orientation &quot;</span> &lt;&lt; kp.<a class="code" href="structarm__compute_1_1_key_point.xhtml#a0e3266fc15309697502533db62b682af">orientation</a> &lt;&lt; <span class="stringliteral">&quot; status &quot;</span> &lt;&lt; kp.<a class="code" href="structarm__compute_1_1_key_point.xhtml#a8ca2aae59762685dd38143e5f8267147">tracking_status</a> &lt;&lt; <span class="stringliteral">&quot; err = &quot;</span> &lt;&lt; kp.<a class="code" href="structarm__compute_1_1_key_point.xhtml#a7cfd13d282af770aaa971755fa092fca">error</a> &lt;&lt; std::endl;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        }</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    }</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <a class="code" href="classarm__compute_1_1_pyramid.xhtml">Pyramid</a>               pyr_1st{};</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <a class="code" href="classarm__compute_1_1_pyramid.xhtml">Pyramid</a>               pyr_2nd{};</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <a class="code" href="classarm__compute_1_1_n_e_gaussian_pyramid_half.xhtml">NEGaussianPyramidHalf</a> pyrf_1st{};</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <a class="code" href="classarm__compute_1_1_n_e_gaussian_pyramid_half.xhtml">NEGaussianPyramidHalf</a> pyrf_2nd{};</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <a class="code" href="classarm__compute_1_1_n_e_optical_flow.xhtml">NEOpticalFlow</a>         optkf{};</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a>                 src_1st{}, src_2nd{};</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <a class="code" href="classarm__compute_1_1_array.xhtml">KeyPointArray</a>         input_points;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <a class="code" href="classarm__compute_1_1_array.xhtml">KeyPointArray</a>         output_points;</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <a class="code" href="classarm__compute_1_1_array.xhtml">KeyPointArray</a>         point_estimates;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;};</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;<span class="comment">/** Main program for optical flow test</span></div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="comment"> * @param[in] argc Number of arguments</span></div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="comment"> * @param[in] argv Arguments ( [optional] Path to PPM image to process )</span></div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00260"></a><span class="lineno"><a class="line" href="neon__opticalflow_8cpp.xhtml#a3c04138a5bfe5d72780bb7e82a18e627">  260</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="neon__opticalflow_8cpp.xhtml#a3c04138a5bfe5d72780bb7e82a18e627">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> **argv)</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;{</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <span class="keywordflow">return</span> utils::run_example&lt;NeonOpticalFlowExample&gt;(argc, argv);</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;}</div><div class="ttc" id="namespacearm__compute_xhtml_af9876aedd664cac0ddeacddb40cb71cd"><div class="ttname"><a href="namespacearm__compute.xhtml#af9876aedd664cac0ddeacddb40cb71cd">arm_compute::SCALE_PYRAMID_HALF</a></div><div class="ttdeci">constexpr float SCALE_PYRAMID_HALF</div><div class="ttdoc">Constant value used to indicate a half-scale pyramid.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00109">Types.h:109</a></div></div>
<div class="ttc" id="neon__opticalflow_8cpp_xhtml_a3c04138a5bfe5d72780bb7e82a18e627"><div class="ttname"><a href="neon__opticalflow_8cpp.xhtml#a3c04138a5bfe5d72780bb7e82a18e627">main</a></div><div class="ttdeci">int main(int argc, char **argv)</div><div class="ttdoc">Main program for optical flow test.</div><div class="ttdef"><b>Definition:</b> <a href="neon__opticalflow_8cpp_source.xhtml#l00260">neon_opticalflow.cpp:260</a></div></div>
<div class="ttc" id="structarm__compute_1_1_key_point_xhtml_a1d28dec57cce925ad92342891bd71e7c"><div class="ttname"><a href="structarm__compute_1_1_key_point.xhtml#a1d28dec57cce925ad92342891bd71e7c">arm_compute::KeyPoint::scale</a></div><div class="ttdeci">float scale</div><div class="ttdoc">Scale initialized to 0 by the corner detector.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00418">Types.h:418</a></div></div>
<div class="ttc" id="structarm__compute_1_1_key_point_xhtml_af6d3062751bd565decb1a2cd3b63bdb2"><div class="ttname"><a href="structarm__compute_1_1_key_point.xhtml#af6d3062751bd565decb1a2cd3b63bdb2">arm_compute::KeyPoint::x</a></div><div class="ttdeci">int32_t x</div><div class="ttdoc">X coordinates.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00415">Types.h:415</a></div></div>
<div class="ttc" id="structarm__compute_1_1_key_point_xhtml_a0e3266fc15309697502533db62b682af"><div class="ttname"><a href="structarm__compute_1_1_key_point.xhtml#a0e3266fc15309697502533db62b682af">arm_compute::KeyPoint::orientation</a></div><div class="ttdeci">float orientation</div><div class="ttdoc">Orientation initialized to 0 by the corner detector.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00419">Types.h:419</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_p_p_m_loader_xhtml_ab23b23a466d459ecbad7d046bb085324"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_p_p_m_loader.xhtml#ab23b23a466d459ecbad7d046bb085324">arm_compute::utils::PPMLoader::open</a></div><div class="ttdeci">void open(const std::string &amp;filename) override</div><div class="ttdoc">Open an image file and reads its metadata (Width, height)</div><div class="ttdef"><b>Definition:</b> <a href="_image_loader_8h_source.xhtml#l00381">ImageLoader.h:381</a></div></div>
<div class="ttc" id="utils_2_utils_8h_xhtml"><div class="ttname"><a href="utils_2_utils_8h.xhtml">Utils.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::Format::U8</a></div><div class="ttdoc">1 channel, 1 U8 per channel</div></div>
<div class="ttc" id="structarm__compute_1_1_key_point_xhtml_a8ca2aae59762685dd38143e5f8267147"><div class="ttname"><a href="structarm__compute_1_1_key_point.xhtml#a8ca2aae59762685dd38143e5f8267147">arm_compute::KeyPoint::tracking_status</a></div><div class="ttdeci">int32_t tracking_status</div><div class="ttdoc">Status initialized to 1 by the corner detector, set to 0 when the point is lost.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00420">Types.h:420</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_array_xhtml_ae21b0e95ded2dcfb5e62848ea0193828"><div class="ttname"><a href="classarm__compute_1_1_i_array.xhtml#ae21b0e95ded2dcfb5e62848ea0193828">arm_compute::IArray::resize</a></div><div class="ttdeci">void resize(size_t num)</div><div class="ttdoc">Resizes the array to contain &quot;num&quot; elements.</div><div class="ttdef"><b>Definition:</b> <a href="_i_array_8h_source.xhtml#l00128">IArray.h:128</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a08c1503414e23f5dd10ff83492685453a788740b1ba2d6463dae318a332513b29"><div class="ttname"><a href="namespacearm__compute.xhtml#a08c1503414e23f5dd10ff83492685453a788740b1ba2d6463dae318a332513b29">arm_compute::Termination::TERM_CRITERIA_BOTH</a></div><div class="ttdoc">Terminate on whichever of the other conditions occurs first.</div></div>
<div class="ttc" id="_n_e_functions_8h_xhtml"><div class="ttname"><a href="_n_e_functions_8h.xhtml">NEFunctions.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2020 ARM Limited.</div><div class="ttdef"><b>Definition:</b> <a href="00__introduction_8dox_source.xhtml#l00024">00_introduction.dox:24</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pyramid_xhtml"><div class="ttname"><a href="classarm__compute_1_1_pyramid.xhtml">arm_compute::Pyramid</a></div><div class="ttdoc">Basic implementation of the pyramid interface.</div><div class="ttdef"><b>Definition:</b> <a href="_pyramid_8h_source.xhtml#l00040">Pyramid.h:40</a></div></div>
<div class="ttc" id="structarm__compute_1_1_key_point_xhtml"><div class="ttname"><a href="structarm__compute_1_1_key_point.xhtml">arm_compute::KeyPoint</a></div><div class="ttdoc">Keypoint type.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00413">Types.h:413</a></div></div>
<div class="ttc" id="classarm__compute_1_1_array_xhtml"><div class="ttname"><a href="classarm__compute_1_1_array.xhtml">arm_compute::Array</a></div><div class="ttdoc">Basic implementation of the IArray interface which allocates a static number of T values.</div><div class="ttdef"><b>Definition:</b> <a href="_array_8h_source.xhtml#l00037">Array.h:37</a></div></div>
<div class="ttc" id="structarm__compute_1_1_key_point_xhtml_a2c1c8f9331368f38bfc3eaee260b59a6"><div class="ttname"><a href="structarm__compute_1_1_key_point.xhtml#a2c1c8f9331368f38bfc3eaee260b59a6">arm_compute::KeyPoint::strength</a></div><div class="ttdeci">float strength</div><div class="ttdoc">Strength of the point.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00417">Types.h:417</a></div></div>
<div class="ttc" id="structarm__compute_1_1_key_point_xhtml_a7cfd13d282af770aaa971755fa092fca"><div class="ttname"><a href="structarm__compute_1_1_key_point.xhtml#a7cfd13d282af770aaa971755fa092fca">arm_compute::KeyPoint::error</a></div><div class="ttdeci">float error</div><div class="ttdoc">Tracking error initialized to 0 by the corner detector.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00421">Types.h:421</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_array_xhtml_aac8e28a698cd201286d75eb3f5ad3e1c"><div class="ttname"><a href="classarm__compute_1_1_i_array.xhtml#aac8e28a698cd201286d75eb3f5ad3e1c">arm_compute::IArray::num_values</a></div><div class="ttdeci">size_t num_values() const</div><div class="ttdoc">Number of values currently stored in the array.</div><div class="ttdef"><b>Definition:</b> <a href="_i_array_8h_source.xhtml#l00068">IArray.h:68</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a1643f4cb252152ed8ffc0df84744ad5d"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a1643f4cb252152ed8ffc0df84744ad5d">arm_compute::test::validation::fill</a></div><div class="ttdeci">library fill(src, distribution, 0)</div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_gaussian_pyramid_half_xhtml"><div class="ttname"><a href="classarm__compute_1_1_n_e_gaussian_pyramid_half.xhtml">arm_compute::NEGaussianPyramidHalf</a></div><div class="ttdoc">Basic function to execute gaussian pyramid with HALF scale factor.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_gaussian_pyramid_8h_source.xhtml#l00083">NEGaussianPyramid.h:83</a></div></div>
<div class="ttc" id="classarm__compute_1_1_coordinates_xhtml"><div class="ttname"><a href="classarm__compute_1_1_coordinates.xhtml">arm_compute::Coordinates</a></div><div class="ttdoc">Coordinates of an item.</div><div class="ttdef"><b>Definition:</b> <a href="_coordinates_8h_source.xhtml#l00037">Coordinates.h:37</a></div></div>
<div class="ttc" id="_image_loader_8h_xhtml"><div class="ttname"><a href="_image_loader_8h.xhtml">ImageLoader.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_example_xhtml"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_example.xhtml">arm_compute::utils::Example</a></div><div class="ttdoc">Abstract Example class.</div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00074">Utils.h:74</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_abdba606a789b8d664774f17d18f45cfe"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#abdba606a789b8d664774f17d18f45cfe">arm_compute::support::cpp11::stoi</a></div><div class="ttdeci">int stoi(const std::string &amp;str, std::size_t *pos=0, NumericBase base=NumericBase::BASE_10)</div><div class="ttdoc">Convert string values to integer.</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00067">ToolchainSupport.h:67</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_optical_flow_xhtml"><div class="ttname"><a href="classarm__compute_1_1_n_e_optical_flow.xhtml">arm_compute::NEOpticalFlow</a></div><div class="ttdoc">Basic function to execute optical flow.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_optical_flow_8h_source.xhtml#l00053">NEOpticalFlow.h:53</a></div></div>
<div class="ttc" id="struct_image_xhtml"><div class="ttname"><a href="struct_image.xhtml">Image</a></div><div class="ttdoc">Structure to hold Image information.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00349">helpers.h:349</a></div></div>
<div class="ttc" id="structarm__compute_1_1_key_point_xhtml_af64066d134a77e01b3d6eb8da813627a"><div class="ttname"><a href="structarm__compute_1_1_key_point.xhtml#af64066d134a77e01b3d6eb8da813627a">arm_compute::KeyPoint::y</a></div><div class="ttdeci">int32_t y</div><div class="ttdoc">Y coordinates.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00416">Types.h:416</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pyramid_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_pyramid_info.xhtml">arm_compute::PyramidInfo</a></div><div class="ttdoc">Store the Pyramid's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_pyramid_info_8h_source.xhtml#l00035">PyramidInfo.h:35</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a15a05537a472ee742404821851529327a0db45d2a4141101bdfe48e3314cfbca3"><div class="ttname"><a href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a0db45d2a4141101bdfe48e3314cfbca3">arm_compute::BorderMode::UNDEFINED</a></div><div class="ttdoc">Borders are left undefined.</div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml">arm_compute::TensorInfo</a></div><div class="ttdoc">Store the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00045">TensorInfo.h:45</a></div></div>
<div class="ttc" id="arm__compute_2core_2_types_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_types_8h.xhtml">Types.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_p_p_m_loader_xhtml"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_p_p_m_loader.xhtml">arm_compute::utils::PPMLoader</a></div><div class="ttdoc">PPM Image loader concrete implementation.</div><div class="ttdef"><b>Definition:</b> <a href="_image_loader_8h_source.xhtml#l00367">ImageLoader.h:367</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_array_xhtml_a9deaea40b2409ee68d354bdb9d3f8443"><div class="ttname"><a href="classarm__compute_1_1_i_array.xhtml#a9deaea40b2409ee68d354bdb9d3f8443">arm_compute::IArray::at</a></div><div class="ttdeci">virtual T &amp; at(size_t index) const</div><div class="ttdoc">Reference to the element of the array located at the given index.</div><div class="ttdef"><b>Definition:</b> <a href="_i_array_8h_source.xhtml#l00117">IArray.h:117</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_d28a4824dc47e487b107a5db32ef43c4.xhtml">examples</a></li><li class="navelem"><a class="el" href="neon__opticalflow_8cpp.xhtml">neon_opticalflow.cpp</a></li>
    <li class="footer">Generated on Fri Feb 21 2020 11:10:11 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
