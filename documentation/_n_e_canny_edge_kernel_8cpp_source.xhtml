<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/core/NEON/kernels/NECannyEdgeKernel.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('_n_e_canny_edge_kernel_8cpp_source.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">NECannyEdgeKernel.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_n_e_canny_edge_kernel_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2016-2019 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_n_e_canny_edge_kernel_8h.xhtml">arm_compute/core/NEON/kernels/NECannyEdgeKernel.h</a>&quot;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_access_window_static_8h.xhtml">arm_compute/core/AccessWindowStatic.h</a>&quot;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_error_8h.xhtml">arm_compute/core/Error.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_helpers_8h.xhtml">arm_compute/core/Helpers.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_tensor_8h.xhtml">arm_compute/core/ITensor.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_tensor_info_8h.xhtml">arm_compute/core/TensorInfo.h</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_types_8h.xhtml">arm_compute/core/Types.h</a>&quot;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_utils_8h.xhtml">arm_compute/core/Utils.h</a>&quot;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_validate_8h.xhtml">arm_compute/core/Validate.h</a>&quot;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &lt;arm_neon.h&gt;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &lt;cstddef&gt;</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#include &lt;cstdint&gt;</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#include &lt;tuple&gt;</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a>;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;{</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="keyword">namespace</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;{</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;constexpr <span class="keywordtype">int</span> <a class="code" href="canny_8cl.xhtml#a333a1d2eee75220d5161fdb0e778867d">NO_EDGE</a> = 0;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;constexpr <span class="keywordtype">int</span> <a class="code" href="canny_8cl.xhtml#ac243bfa96aa2c28014159ff098bd2324">EDGE</a>    = 255;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;constexpr <span class="keywordtype">int</span> MAYBE   = 127;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;} <span class="comment">// namespace</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="keyword">namespace</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;{</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="keyword">inline</span> uint8x8_t phase_quantization(<span class="keyword">const</span> float32x4x2_t &amp;gx, <span class="keyword">const</span> float32x4x2_t &amp;gy)</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;{</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="comment">// Constant use for evaluating score1 and score3</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> float32x4_t const45 = vdupq_n_f32(0.70710678118655f);</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> float32x4_t zero    = vdupq_n_f32(0.0f);</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> float32x4_t one     = vdupq_n_f32(1.0f);</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> float32x4_t two     = vdupq_n_f32(2.0f);</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> float32x4_t three   = vdupq_n_f32(3.0f);</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="comment">// Score0: (1, 0)</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keyword">const</span> float32x4x2_t score0 =</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    {</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        {</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            vabsq_f32(gx.val[0]),</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            vabsq_f32(gx.val[1])</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        }</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    };</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="comment">// Score2: ( 0, 1 )</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keyword">const</span> float32x4x2_t score2 =</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    {</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        {</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            vabsq_f32(gy.val[0]),</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;            vabsq_f32(gy.val[1])</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        }</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    };</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="comment">// Score1 and Score3: ( sqrt(2) / 2, sqrt(2) / 2 ) - ( -sqrt(2) / 2, sqrt(2) / 2 )</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    float32x4x2_t score1 =</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    {</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        {</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            vmulq_f32(gy.val[0], const45),</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            vmulq_f32(gy.val[1], const45)</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        }</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    };</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    float32x4x2_t score3 = score1;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    score1.val[0] = vmlaq_f32(score1.val[0], gx.val[0], const45);</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    score1.val[1] = vmlaq_f32(score1.val[1], gx.val[1], const45);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    score3.val[0] = vmlsq_f32(score3.val[0], gx.val[0], const45);</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    score3.val[1] = vmlsq_f32(score3.val[1], gx.val[1], const45);</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    score1.val[0] = vabsq_f32(score1.val[0]);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    score1.val[1] = vabsq_f32(score1.val[1]);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    score3.val[0] = vabsq_f32(score3.val[0]);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    score3.val[1] = vabsq_f32(score3.val[1]);</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    float32x4x2_t <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a74991bda4fcca3ce5dcf8afdccdbafff">phase</a> =</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    {</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        {</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            zero,</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            zero</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        }</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    };</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    float32x4x2_t old_score = score0;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="comment">// score1 &gt; old_score?</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    uint32x4x2_t mask =</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    {</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        {</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            vcgtq_f32(score1.val[0], old_score.val[0]),</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            vcgtq_f32(score1.val[1], old_score.val[1])</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        }</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    };</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a74991bda4fcca3ce5dcf8afdccdbafff">phase</a>.val[0]     = vbslq_f32(mask.val[0], one, <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a74991bda4fcca3ce5dcf8afdccdbafff">phase</a>.val[0]);</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a74991bda4fcca3ce5dcf8afdccdbafff">phase</a>.val[1]     = vbslq_f32(mask.val[1], one, <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a74991bda4fcca3ce5dcf8afdccdbafff">phase</a>.val[1]);</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    old_score.val[0] = vbslq_f32(mask.val[0], score1.val[0], old_score.val[0]);</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    old_score.val[1] = vbslq_f32(mask.val[1], score1.val[1], old_score.val[1]);</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="comment">// score2 &gt; old_score?</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    mask.val[0] = vcgtq_f32(score2.val[0], old_score.val[0]);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    mask.val[1] = vcgtq_f32(score2.val[1], old_score.val[1]);</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a74991bda4fcca3ce5dcf8afdccdbafff">phase</a>.val[0]     = vbslq_f32(mask.val[0], two, <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a74991bda4fcca3ce5dcf8afdccdbafff">phase</a>.val[0]);</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a74991bda4fcca3ce5dcf8afdccdbafff">phase</a>.val[1]     = vbslq_f32(mask.val[1], two, <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a74991bda4fcca3ce5dcf8afdccdbafff">phase</a>.val[1]);</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    old_score.val[0] = vbslq_f32(mask.val[0], score2.val[0], old_score.val[0]);</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    old_score.val[1] = vbslq_f32(mask.val[1], score2.val[1], old_score.val[1]);</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="comment">// score3 &gt; old_score?</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    mask.val[0] = vcgtq_f32(score3.val[0], old_score.val[0]);</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    mask.val[1] = vcgtq_f32(score3.val[1], old_score.val[1]);</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a74991bda4fcca3ce5dcf8afdccdbafff">phase</a>.val[0]     = vbslq_f32(mask.val[0], three, <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a74991bda4fcca3ce5dcf8afdccdbafff">phase</a>.val[0]);</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a74991bda4fcca3ce5dcf8afdccdbafff">phase</a>.val[1]     = vbslq_f32(mask.val[1], three, <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a74991bda4fcca3ce5dcf8afdccdbafff">phase</a>.val[1]);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    old_score.val[0] = vbslq_f32(mask.val[0], score3.val[0], old_score.val[0]);</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    old_score.val[1] = vbslq_f32(mask.val[1], score3.val[1], old_score.val[1]);</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="comment">// Convert from float32x4_t to uint8x8_t</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keywordflow">return</span> vmovn_u16(vcombine_u16(vmovn_u32(vcvtq_u32_f32(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a74991bda4fcca3ce5dcf8afdccdbafff">phase</a>.val[0])),</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                                  vmovn_u32(vcvtq_u32_f32(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a74991bda4fcca3ce5dcf8afdccdbafff">phase</a>.val[1]))));</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;}</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment">/* Computes the gradient phase if gradient_size = 3 or 5. The output is quantized.</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment"> * 0 = 0°, 1 = 45°, 2 = 90°, 3 = 135°</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment"> * @param[in] gx Gx component</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment"> * @param[in] gy Gy component</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment"> * @return quantized phase for 8 pixels</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="keyword">inline</span> uint8x8_t phase_quantization_S16_S16(int16x8_t gx, int16x8_t gy)</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;{</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="comment">// Convert to float</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keyword">const</span> float32x4x2_t gx_f32 =</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    {</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        {</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;            vcvtq_f32_s32(vmovl_s16(vget_low_s16(gx))),</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            vcvtq_f32_s32(vmovl_s16(vget_high_s16(gx)))</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        }</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    };</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="keyword">const</span> float32x4x2_t gy_f32 =</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    {</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        {</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;            vcvtq_f32_s32(vmovl_s16(vget_low_s16(gy))),</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            vcvtq_f32_s32(vmovl_s16(vget_high_s16(gy)))</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        }</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    };</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="keywordflow">return</span> phase_quantization(gx_f32, gy_f32);</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;}</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment">/* Computes the gradient phase if gradient_size = 7. The output is quantized.</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="comment"> * 0 = 0°, 1 = 45°, 2 = 90°, 3 = 135°</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="comment"> * @param[in] gx Gx component</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="comment"> * @param[in] gy Gy component</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="comment"> * @return quantized phase for 8 pixels</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="keyword">inline</span> uint8x8_t phase_quantization_S32_S32(<span class="keyword">const</span> int32x4x2_t &amp;gx, <span class="keyword">const</span> int32x4x2_t &amp;gy)</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;{</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="comment">// Convert to float</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="keyword">const</span> float32x4x2_t gx_f32 =</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    {</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        {</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;            vcvtq_f32_s32(gx.val[0]),</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            vcvtq_f32_s32(gx.val[1])</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        }</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    };</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="keyword">const</span> float32x4x2_t gy_f32 =</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    {</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        {</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;            vcvtq_f32_s32(gy.val[0]),</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            vcvtq_f32_s32(gy.val[1])</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        }</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    };</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="keywordflow">return</span> phase_quantization(gx_f32, gy_f32);</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;}</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="comment">/* Computes the magnitude using the L1-norm type if gradient_size = 3 or 5</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="comment"> * @param[in] gx Gx component</span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="comment"> * @param[in] gy Gy component</span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="comment"> * @return magnitude for 8 pixels</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="keyword">inline</span> uint16x8_t mag_l1_S16_S16(int16x8_t gx, int16x8_t gy)</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;{</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <span class="keywordflow">return</span> vaddq_u16(vreinterpretq_u16_s16(vabsq_s16(gx)),</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                     vreinterpretq_u16_s16(vabsq_s16(gy)));</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;}</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="comment">/* Computes the magnitude using the L1-norm type if gradient_size = 7</span></div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="comment"> * @param[in] gx Gx component</span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="comment"> * @param[in] gy Gy component</span></div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="comment"> * @return magnitude for 8 pixels</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="keyword">inline</span> uint32x4x2_t mag_l1_S32_S32(<span class="keyword">const</span> int32x4x2_t &amp;gx, <span class="keyword">const</span> int32x4x2_t &amp;gy)</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;{</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <span class="keyword">const</span> uint32x4x2_t gx_abs =</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    {</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        {</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;            vreinterpretq_u32_s32(vabsq_s32(gx.val[0])),</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;            vreinterpretq_u32_s32(vabsq_s32(gx.val[1]))</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        }</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    };</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keyword">const</span> uint32x4x2_t gy_abs =</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    {</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        {</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;            vreinterpretq_u32_s32(vabsq_s32(gy.val[0])),</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;            vreinterpretq_u32_s32(vabsq_s32(gy.val[1]))</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        }</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    };</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="keyword">const</span> uint32x4x2_t output =</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    {</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        {</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;            vaddq_u32(gx_abs.val[0], gy_abs.val[0]),</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;            vaddq_u32(gx_abs.val[1], gy_abs.val[1])</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        }</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    };</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <span class="keywordflow">return</span> output;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;}</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="keyword">inline</span> float32x4x2_t mag_l2(<span class="keyword">const</span> float32x4x2_t &amp;gx, <span class="keyword">const</span> float32x4x2_t &amp;gy)</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;{</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <span class="comment">// x^2 ...</span></div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    float32x4x2_t <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a> =</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    {</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        {</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;            vmulq_f32(gx.val[0], gx.val[0]),</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;            vmulq_f32(gx.val[1], gx.val[1])</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        }</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    };</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <span class="comment">// ... + y^2</span></div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a>.val[0] = vmlaq_f32(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a>.val[0], gy.val[0], gy.val[0]);</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a>.val[1] = vmlaq_f32(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a>.val[1], gy.val[1], gy.val[1]);</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    <span class="comment">// sqrt(...)</span></div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a>.val[0] = vmulq_f32(vrsqrteq_f32(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a>.val[0]), <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a>.val[0]);</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a>.val[1] = vmulq_f32(vrsqrteq_f32(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a>.val[1]), <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a>.val[1]);</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a>;</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;}</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="comment">/* Computes the magnitude using L2-norm if gradient_size = 3 or 5</span></div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="comment"> * @param[in] gx Gx component</span></div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="comment"> * @param[in] gy Gy component</span></div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;<span class="comment"> * @return magnitude for 8 pixels</span></div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;<span class="keyword">inline</span> uint16x8_t mag_l2_S16_S16(int16x8_t gx, int16x8_t gy)</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;{</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    <span class="comment">// Compute magnitude using L2 normalization</span></div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    <span class="keyword">const</span> float32x4x2_t gx2 =</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    {</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        {</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;            vcvtq_f32_s32(vmovl_s16(vget_low_s16(gx))),</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;            vcvtq_f32_s32(vmovl_s16(vget_high_s16(gx)))</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;        }</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    };</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    <span class="keyword">const</span> float32x4x2_t gy2 =</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    {</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;        {</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;            vcvtq_f32_s32(vmovl_s16(vget_low_s16(gy))),</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;            vcvtq_f32_s32(vmovl_s16(vget_high_s16(gy)))</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        }</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    };</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    <span class="keyword">const</span> float32x4x2_t <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a> = mag_l2(gx2, gy2);</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    <span class="comment">// Store magnitude - Convert to uint16x8</span></div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    <span class="keywordflow">return</span> vcombine_u16(vmovn_u32(vcvtq_u32_f32(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a>.val[0])),</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                        vmovn_u32(vcvtq_u32_f32(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a>.val[1])));</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;}</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;<span class="comment">/* Computes the magnitude using L2-norm if gradient_size = 7</span></div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;<span class="comment"> * @param[in] gx Gx component</span></div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;<span class="comment"> * @param[in] gy Gy component</span></div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;<span class="comment"> * @return magnitude for 8 pixels</span></div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;<span class="keyword">inline</span> uint32x4x2_t mag_l2_S32_S32(<span class="keyword">const</span> int32x4x2_t &amp;gx, <span class="keyword">const</span> int32x4x2_t &amp;gy)</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;{</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    <span class="comment">// Compute magnitude using L2 normalization</span></div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    float32x4x2_t gx2 =</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    {</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;        {</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;            vcvtq_f32_s32(gx.val[0]),</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;            vcvtq_f32_s32(gx.val[1])</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        }</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    };</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    float32x4x2_t gy2 =</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    {</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;        {</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;            vcvtq_f32_s32(gy.val[0]),</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;            vcvtq_f32_s32(gy.val[1])</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;        }</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    };</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <span class="keyword">const</span> float32x4x2_t <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a> = mag_l2(gx2, gy2);</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    <span class="keyword">const</span> uint32x4x2_t  mag32 =</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    {</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        {</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;            vcvtq_u32_f32(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a>.val[0]),</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;            vcvtq_u32_f32(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a>.val[1])</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;        }</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    };</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    <span class="keywordflow">return</span> mag32;</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;}</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;<span class="comment">/* Gradient function used when the gradient size = 3 or 5 and when the norm_type = L1-norm</span></div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;<span class="comment"> * @param[in]  gx_ptr        Pointer to source image. Gx image. Data type supported S16</span></div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;<span class="comment"> * @param[in]  gy_ptr        Pointer to source image. Gy image. Data type supported S16</span></div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;<span class="comment"> * @param[out] magnitude_ptr Pointer to destination image. Magnitude. Data type supported U16</span></div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;<span class="comment"> * @param[out] phase_ptr     Pointer to destination image. Quantized phase. Data type supported U8</span></div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;<span class="keywordtype">void</span> mag_phase_l1norm_S16_S16_U16_U8(<span class="keyword">const</span> <span class="keywordtype">void</span> *__restrict gx_ptr, <span class="keyword">const</span> <span class="keywordtype">void</span> *__restrict gy_ptr, <span class="keywordtype">void</span> *__restrict magnitude_ptr, <span class="keywordtype">void</span> *__restrict phase_ptr)</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;{</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> gx        = static_cast&lt;const int16_t *__restrict&gt;(gx_ptr);</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> gy        = static_cast&lt;const int16_t *__restrict&gt;(gy_ptr);</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a> = static_cast&lt;uint16_t *__restrict&gt;(magnitude_ptr);</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a74991bda4fcca3ce5dcf8afdccdbafff">phase</a>     = static_cast&lt;uint8_t *__restrict&gt;(phase_ptr);</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    <span class="keyword">const</span> int16x8x4_t gx_val =</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    {</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;        {</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;            vld1q_s16(gx),</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;            vld1q_s16(gx + 8),</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;            vld1q_s16(gx + 16),</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;            vld1q_s16(gx + 24)</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;        }</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    };</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    <span class="keyword">const</span> int16x8x4_t gy_val =</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    {</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;        {</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;            vld1q_s16(gy),</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;            vld1q_s16(gy + 8),</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;            vld1q_s16(gy + 16),</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;            vld1q_s16(gy + 24)</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;        }</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    };</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    <span class="comment">// Compute and store phase</span></div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    vst1_u8(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a74991bda4fcca3ce5dcf8afdccdbafff">phase</a> + 0, phase_quantization_S16_S16(gx_val.val[0], gy_val.val[0]));</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    vst1_u8(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a74991bda4fcca3ce5dcf8afdccdbafff">phase</a> + 8, phase_quantization_S16_S16(gx_val.val[1], gy_val.val[1]));</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    vst1_u8(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a74991bda4fcca3ce5dcf8afdccdbafff">phase</a> + 16, phase_quantization_S16_S16(gx_val.val[2], gy_val.val[2]));</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    vst1_u8(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a74991bda4fcca3ce5dcf8afdccdbafff">phase</a> + 24, phase_quantization_S16_S16(gx_val.val[3], gy_val.val[3]));</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    <span class="comment">// Compute ans store magnitude using L1 normalization</span></div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    vst1q_u16(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a> + 0, mag_l1_S16_S16(gx_val.val[0], gy_val.val[0]));</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    vst1q_u16(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a> + 8, mag_l1_S16_S16(gx_val.val[1], gy_val.val[1]));</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    vst1q_u16(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a> + 16, mag_l1_S16_S16(gx_val.val[2], gy_val.val[2]));</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    vst1q_u16(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a> + 24, mag_l1_S16_S16(gx_val.val[3], gy_val.val[3]));</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;}</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;<span class="comment">/* Gradient function used when the gradient size = 3 or 5 and when the norm_type = L2-norm</span></div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;<span class="comment"> * @param[in]  gx_ptr        Pointer to source image. Gx image. Data type supported S16</span></div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;<span class="comment"> * @param[in]  gy_ptr        Pointer to source image. Gy image. Data type supported S16</span></div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;<span class="comment"> * @param[out] magnitude_ptr Pointer to destination image. Magnitude. Data type supported U16</span></div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;<span class="comment"> * @param[out] phase_ptr     Pointer to destination image. Quantized phase. Data type supported U8</span></div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;<span class="keywordtype">void</span> mag_phase_l2norm_S16_S16_U16_U8(<span class="keyword">const</span> <span class="keywordtype">void</span> *__restrict gx_ptr, <span class="keyword">const</span> <span class="keywordtype">void</span> *__restrict gy_ptr, <span class="keywordtype">void</span> *__restrict magnitude_ptr, <span class="keywordtype">void</span> *__restrict phase_ptr)</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;{</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> gx        = static_cast&lt;const int16_t *__restrict&gt;(gx_ptr);</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> gy        = static_cast&lt;const int16_t *__restrict&gt;(gy_ptr);</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a> = static_cast&lt;uint16_t *__restrict&gt;(magnitude_ptr);</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a74991bda4fcca3ce5dcf8afdccdbafff">phase</a>     = static_cast&lt;uint8_t *__restrict&gt;(phase_ptr);</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    <span class="keyword">const</span> int16x8x4_t gx_val =</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    {</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;        {</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;            vld1q_s16(gx),</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;            vld1q_s16(gx + 8),</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;            vld1q_s16(gx + 16),</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;            vld1q_s16(gx + 24)</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;        }</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    };</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    <span class="keyword">const</span> int16x8x4_t gy_val =</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    {</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;        {</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;            vld1q_s16(gy),</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;            vld1q_s16(gy + 8),</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;            vld1q_s16(gy + 16),</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;            vld1q_s16(gy + 24)</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;        }</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    };</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    <span class="comment">// Compute and store phase</span></div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    vst1_u8(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a74991bda4fcca3ce5dcf8afdccdbafff">phase</a> + 0, phase_quantization_S16_S16(gx_val.val[0], gy_val.val[0]));</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    vst1_u8(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a74991bda4fcca3ce5dcf8afdccdbafff">phase</a> + 8, phase_quantization_S16_S16(gx_val.val[1], gy_val.val[1]));</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    vst1_u8(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a74991bda4fcca3ce5dcf8afdccdbafff">phase</a> + 16, phase_quantization_S16_S16(gx_val.val[2], gy_val.val[2]));</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    vst1_u8(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a74991bda4fcca3ce5dcf8afdccdbafff">phase</a> + 24, phase_quantization_S16_S16(gx_val.val[3], gy_val.val[3]));</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    <span class="comment">// Compute and store magnitude using L2 normalization</span></div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    vst1q_u16(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a> + 0, mag_l2_S16_S16(gx_val.val[0], gy_val.val[0]));</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;    vst1q_u16(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a> + 8, mag_l2_S16_S16(gx_val.val[1], gy_val.val[1]));</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    vst1q_u16(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a> + 16, mag_l2_S16_S16(gx_val.val[2], gy_val.val[2]));</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    vst1q_u16(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a> + 24, mag_l2_S16_S16(gx_val.val[3], gy_val.val[3]));</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;}</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;<span class="comment">/* Gradient function used when the gradient size = 7 and when the norm_type = L1-norm</span></div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;<span class="comment"> * @param[in]  gx_ptr        Pointer to source image. Gx image. Data type supported S32</span></div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;<span class="comment"> * @param[in]  gy_ptr        Pointer to source image. Gy image. Data type supported S32</span></div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;<span class="comment"> * @param[out] magnitude_ptr Pointer to destination image. Magnitude. Data type supported U32</span></div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;<span class="comment"> * @param[out] phase_ptr     Pointer to destination image. Quantized phase. Data type support U8</span></div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;<span class="keywordtype">void</span> mag_phase_l1norm_S32_S32_U32_U8(<span class="keyword">const</span> <span class="keywordtype">void</span> *__restrict gx_ptr, <span class="keyword">const</span> <span class="keywordtype">void</span> *__restrict gy_ptr, <span class="keywordtype">void</span> *__restrict magnitude_ptr, <span class="keywordtype">void</span> *__restrict phase_ptr)</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;{</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    <span class="keyword">auto</span> gx        = static_cast&lt;const int32_t *__restrict&gt;(gx_ptr);</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    <span class="keyword">auto</span> gy        = static_cast&lt;const int32_t *__restrict&gt;(gy_ptr);</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a> = static_cast&lt;uint32_t *__restrict&gt;(magnitude_ptr);</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a74991bda4fcca3ce5dcf8afdccdbafff">phase</a>     = static_cast&lt;uint8_t *__restrict&gt;(phase_ptr);</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;    <span class="comment">// Process low and high part</span></div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i = 0; i &lt; 2; ++i, gx += 16, gy += 16, <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a> += 16, <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a74991bda4fcca3ce5dcf8afdccdbafff">phase</a> += 16)</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    {</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;        <span class="keyword">const</span> int32x4x2_t gx0 =</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;        {</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;            {</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;                vld1q_s32(gx + 0),</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;                vld1q_s32(gx + 4)</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;            }</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;        };</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;        <span class="keyword">const</span> int32x4x2_t gx1 =</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;        {</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;            {</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;                vld1q_s32(gx + 8),</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;                vld1q_s32(gx + 12)</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;            }</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;        };</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;        <span class="keyword">const</span> int32x4x2_t gy0 =</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;        {</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;            {</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;                vld1q_s32(gy + 0),</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;                vld1q_s32(gy + 4)</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;            }</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;        };</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;        <span class="keyword">const</span> int32x4x2_t gy1 =</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;        {</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;            {</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;                vld1q_s32(gy + 8),</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;                vld1q_s32(gy + 12)</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;            }</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;        };</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;        <span class="comment">// Compute and store phase</span></div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;        vst1_u8(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a74991bda4fcca3ce5dcf8afdccdbafff">phase</a> + 0, phase_quantization_S32_S32(gx0, gy0));</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;        vst1_u8(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a74991bda4fcca3ce5dcf8afdccdbafff">phase</a> + 8, phase_quantization_S32_S32(gx1, gy1));</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;        <span class="comment">// Compute magnitude using L1 normalization</span></div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;        <span class="keyword">const</span> uint32x4x2_t mag0 = mag_l1_S32_S32(gx0, gy0);</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;        <span class="keyword">const</span> uint32x4x2_t mag1 = mag_l1_S32_S32(gx1, gy1);</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;        <span class="comment">// Store magnitude</span></div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;        vst1q_u32(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a> + 0, mag0.val[0]);</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;        vst1q_u32(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a> + 4, mag0.val[1]);</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;        vst1q_u32(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a> + 8, mag1.val[0]);</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;        vst1q_u32(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a> + 12, mag1.val[1]);</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    }</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;}</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;<span class="comment">/* Gradient function used when the gradient size = 7 and when the norm_type = L2-norm</span></div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;<span class="comment"> * @param[in]  gx_ptr        Pointer to source image. Gx image. Data type supported S32</span></div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;<span class="comment"> * @param[in]  gy_ptr        Pointer to source image. Gy image. Data type supported S32</span></div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;<span class="comment"> * @param[out] magnitude_ptr Pointer to destination image. Magnitude. Data type supported U32</span></div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;<span class="comment"> * @param[out] phase_ptr     Pointer to destination image. Quantized phase. Data type supported U8</span></div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;<span class="keywordtype">void</span> mag_phase_l2norm_S32_S32_U32_U8(<span class="keyword">const</span> <span class="keywordtype">void</span> *__restrict gx_ptr, <span class="keyword">const</span> <span class="keywordtype">void</span> *__restrict gy_ptr, <span class="keywordtype">void</span> *__restrict magnitude_ptr, <span class="keywordtype">void</span> *__restrict phase_ptr)</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;{</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;    <span class="keyword">auto</span> gx        = static_cast&lt;const int32_t *__restrict&gt;(gx_ptr);</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    <span class="keyword">auto</span> gy        = static_cast&lt;const int32_t *__restrict&gt;(gy_ptr);</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a> = static_cast&lt;uint32_t *__restrict&gt;(magnitude_ptr);</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;    <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a74991bda4fcca3ce5dcf8afdccdbafff">phase</a>     = static_cast&lt;uint8_t *__restrict&gt;(phase_ptr);</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    <span class="comment">// Process low and high part</span></div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i = 0; i &lt; 2; ++i, gx += 16, gy += 16, <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a> += 16, <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a74991bda4fcca3ce5dcf8afdccdbafff">phase</a> += 16)</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    {</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;        <span class="keyword">const</span> int32x4x2_t gx0 =</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;        {</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;            {</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;                vld1q_s32(gx + 0),</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;                vld1q_s32(gx + 4)</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;            }</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;        };</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;        <span class="keyword">const</span> int32x4x2_t gx1 =</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;        {</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;            {</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;                vld1q_s32(gx + 8),</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;                vld1q_s32(gx + 12)</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;            }</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;        };</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;        <span class="keyword">const</span> int32x4x2_t gy0 =</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;        {</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;            {</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;                vld1q_s32(gy + 0),</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;                vld1q_s32(gy + 4)</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;            }</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;        };</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;        <span class="keyword">const</span> int32x4x2_t gy1 =</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;        {</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;            {</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;                vld1q_s32(gy + 8),</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;                vld1q_s32(gy + 12)</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;            }</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;        };</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;        <span class="comment">// Compute and store phase</span></div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;        vst1_u8(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a74991bda4fcca3ce5dcf8afdccdbafff">phase</a> + 0, phase_quantization_S32_S32(gx0, gy0));</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;        vst1_u8(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a74991bda4fcca3ce5dcf8afdccdbafff">phase</a> + 8, phase_quantization_S32_S32(gx1, gy1));</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;        <span class="comment">// Compute magnitude using L2 normalization</span></div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;        <span class="keyword">const</span> uint32x4x2_t mag0 = mag_l2_S32_S32(gx0, gy0);</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;        <span class="keyword">const</span> uint32x4x2_t mag1 = mag_l2_S32_S32(gx1, gy1);</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;        <span class="comment">// Store magnitude</span></div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;        vst1q_u32(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a> + 0, mag0.val[0]);</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;        vst1q_u32(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a> + 4, mag0.val[1]);</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;        vst1q_u32(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a> + 8, mag1.val[0]);</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;        vst1q_u32(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a> + 12, mag1.val[1]);</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;    }</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;}</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;<span class="comment">/* Computes non-maxima suppression and hysteresis when the gradient size = 3 or 5</span></div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;<span class="comment"> * @param[in]  magnitude_ptr Pointer to source image. Magnitude. Data type supported U16</span></div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;<span class="comment"> * @param[in]  phase_ptr     Pointer to source image. Quantized phase. Data type supported U8</span></div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;<span class="comment"> * @param[out] output_ptr    Pointer to output image. Data type supported U8</span></div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;<span class="comment"> * @param[in]  stride_mag    Stride of magnitude image</span></div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;<span class="comment"> * @param[in]  lower_thr     Lower threshold used for the hysteresis</span></div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;<span class="comment"> * @param[in]  upper_thr     Upper threshold used for the hysteresis</span></div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;<span class="keywordtype">void</span> non_max_suppression_U16_U8_U8(<span class="keyword">const</span> <span class="keywordtype">void</span> *__restrict magnitude_ptr, <span class="keyword">const</span> <span class="keywordtype">void</span> *__restrict phase_ptr, <span class="keywordtype">void</span> *__restrict output_ptr, <span class="keyword">const</span> uint32_t stride_mag, <span class="keyword">const</span> int32_t lower_thr,</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;                                   <span class="keyword">const</span> int32_t upper_thr)</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;{</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a> = static_cast&lt;const uint16_t *__restrict&gt;(magnitude_ptr);</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a74991bda4fcca3ce5dcf8afdccdbafff">phase</a>     = static_cast&lt;const uint8_t *__restrict&gt;(phase_ptr);</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> output    = static_cast&lt;uint8_t *__restrict&gt;(output_ptr);</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;    <span class="comment">// Get magnitude and phase of the centre pixels</span></div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;    uint16x8_t mc = vld1q_u16(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a>);</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;    <span class="comment">// Angle_quantized: 0 = 0°, 1 = 45°, 2 = 90°, 3 = 135°</span></div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;    <span class="keyword">const</span> uint16x8_t pc16 = vmovl_u8(vld1_u8(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a74991bda4fcca3ce5dcf8afdccdbafff">phase</a>));</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;    <span class="comment">// 0 degree</span></div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;    <span class="keyword">const</span> uint16x8_t mk0_0 = vld1q_u16(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a> - 1);</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;    <span class="keyword">const</span> uint16x8_t mk0_1 = vld1q_u16(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a> + 1);</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;    uint16x8_t       mask0 = vceqq_u16(pc16, vdupq_n_u16(0));</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;    mask0                  = vandq_u16(mask0, vcgtq_u16(mc, mk0_0));</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;    mask0                  = vandq_u16(mask0, vcgtq_u16(mc, mk0_1));</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;    <span class="comment">// 45 degree</span></div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;    <span class="keyword">const</span> uint16x8_t mk45_0 = vld1q_u16(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a> - stride_mag - 1);</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;    <span class="keyword">const</span> uint16x8_t mk45_1 = vld1q_u16(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a> + stride_mag + 1);</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;    uint16x8_t       mask1  = vceqq_u16(pc16, vdupq_n_u16(1));</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;    mask1                   = vandq_u16(mask1, vcgtq_u16(mc, mk45_0));</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;    mask1                   = vandq_u16(mask1, vcgtq_u16(mc, mk45_1));</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;    <span class="comment">// 90 degree</span></div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;    <span class="keyword">const</span> uint16x8_t mk90_0 = vld1q_u16(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a> - stride_mag);</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;    <span class="keyword">const</span> uint16x8_t mk90_1 = vld1q_u16(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a> + stride_mag);</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;    uint16x8_t       mask2  = vceqq_u16(pc16, vdupq_n_u16(2));</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;    mask2                   = vandq_u16(mask2, vcgtq_u16(mc, mk90_0));</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;    mask2                   = vandq_u16(mask2, vcgtq_u16(mc, mk90_1));</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;    <span class="comment">// 135 degree</span></div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;    <span class="keyword">const</span> uint16x8_t mk135_0 = vld1q_u16(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a> - stride_mag + 1);</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;    <span class="keyword">const</span> uint16x8_t mk135_1 = vld1q_u16(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a> + stride_mag - 1);</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;    uint16x8_t       mask3   = vceqq_u16(pc16, vdupq_n_u16(3));</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;    mask3                    = vandq_u16(mask3, vcgtq_u16(mc, mk135_0));</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;    mask3                    = vandq_u16(mask3, vcgtq_u16(mc, mk135_1));</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;    <span class="comment">// Merge masks</span></div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;    mask0 = vorrq_u16(mask0, mask1);</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;    mask2 = vorrq_u16(mask2, mask3);</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;    mask0 = vorrq_u16(mask0, mask2);</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;    mc = vbslq_u16(mask0, mc, vdupq_n_u16(0));</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    <span class="comment">// mc &gt; upper_thr</span></div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;    mask0 = vcgtq_u16(mc, vdupq_n_u16(upper_thr));</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;    <span class="comment">// mc &lt;= lower_thr</span></div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;    mask1 = vcleq_u16(mc, vdupq_n_u16(lower_thr));</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;    <span class="comment">// mc &lt;= upper_thr &amp;&amp; mc &gt; lower_thr</span></div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;    mask2 = vcleq_u16(mc, vdupq_n_u16(upper_thr));</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;    mask2 = vandq_u16(mask2, vcgtq_u16(mc, vdupq_n_u16(lower_thr)));</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;    mc = vbslq_u16(mask0, vdupq_n_u16(<a class="code" href="canny_8cl.xhtml#ac243bfa96aa2c28014159ff098bd2324">EDGE</a>), mc);</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;    mc = vbslq_u16(mask1, vdupq_n_u16(<a class="code" href="canny_8cl.xhtml#a333a1d2eee75220d5161fdb0e778867d">NO_EDGE</a>), mc);</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;    mc = vbslq_u16(mask2, vdupq_n_u16(MAYBE), mc);</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;    vst1_u8(output, vmovn_u16(mc));</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;}</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;<span class="keyword">inline</span> uint16x4_t non_max_U32_helper(<span class="keyword">const</span> uint32_t *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keyword">const</span> uint16x4_t pc, <span class="keyword">const</span> uint32_t stride_mag, <span class="keyword">const</span> int32_t lower_thr, <span class="keyword">const</span> int32_t upper_thr)</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;{</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;    <span class="comment">// Phase for 4 pixel</span></div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;    <span class="keyword">const</span> uint32x4_t pc32 = vmovl_u16(pc);</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;    <span class="comment">// Get magnitude for 4 pixel</span></div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;    uint32x4_t mc = vld1q_u32(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>);</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;    <span class="comment">// Angle_quantized: 0 = 0°, 1 = 45°, 2 = 90°, 3 = 135°</span></div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;    <span class="comment">// 0 degree</span></div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;    <span class="keyword">const</span> uint32x4_t mk0_0 = vld1q_u32(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> - 1);</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;    <span class="keyword">const</span> uint32x4_t mk0_1 = vld1q_u32(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> + 1);</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;    uint32x4_t       mask0 = vceqq_u32(pc32, vdupq_n_u32(0));</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;    mask0                  = vandq_u32(mask0, vcgtq_u32(mc, mk0_0));</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;    mask0                  = vandq_u32(mask0, vcgtq_u32(mc, mk0_1));</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;    <span class="comment">// 45 degree</span></div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;    <span class="keyword">const</span> uint32x4_t mk45_0 = vld1q_u32(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> - stride_mag - 1);</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;    <span class="keyword">const</span> uint32x4_t mk45_1 = vld1q_u32(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> + stride_mag + 1);</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;    uint32x4_t       mask1  = vceqq_u32(pc32, vdupq_n_u32(1));</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;    mask1                   = vandq_u32(mask1, vcgtq_u32(mc, mk45_0));</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;    mask1                   = vandq_u32(mask1, vcgtq_u32(mc, mk45_1));</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;    <span class="comment">// 90 degree</span></div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;    <span class="keyword">const</span> uint32x4_t mk90_0 = vld1q_u32(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> - stride_mag);</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;    <span class="keyword">const</span> uint32x4_t mk90_1 = vld1q_u32(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> + stride_mag);</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;    uint32x4_t       mask2  = vceqq_u32(pc32, vdupq_n_u32(2));</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;    mask2                   = vandq_u32(mask2, vcgtq_u32(mc, mk90_0));</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;    mask2                   = vandq_u32(mask2, vcgtq_u32(mc, mk90_1));</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;    <span class="comment">// 135 degree</span></div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;    <span class="keyword">const</span> uint32x4_t mk135_0 = vld1q_u32(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> - stride_mag + 1);</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;    <span class="keyword">const</span> uint32x4_t mk135_1 = vld1q_u32(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> + stride_mag - 1);</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;    uint32x4_t       mask3   = vceqq_u32(pc32, vdupq_n_u32(3));</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;    mask3                    = vandq_u32(mask3, vcgtq_u32(mc, mk135_0));</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;    mask3                    = vandq_u32(mask3, vcgtq_u32(mc, mk135_1));</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;    <span class="comment">// Merge masks</span></div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;    mask0 = vorrq_u32(mask0, mask1);</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;    mask2 = vorrq_u32(mask2, mask3);</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;    mask0 = vorrq_u32(mask0, mask2);</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;    mc = vbslq_u32(mask0, mc, vdupq_n_u32(0));</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;    <span class="comment">// mc &gt; upper_thr</span></div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;    mask0 = vcgtq_u32(mc, vdupq_n_u32(upper_thr));</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;    <span class="comment">// mc &lt;= lower_thr</span></div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;    mask1 = vcleq_u32(mc, vdupq_n_u32(lower_thr));</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;    <span class="comment">// mc &lt;= upper_thr &amp;&amp; mc &gt; lower_thr</span></div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;    mask2 = vcleq_u32(mc, vdupq_n_u32(upper_thr));</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;    mask2 = vandq_u32(mask2, vcgtq_u32(mc, vdupq_n_u32(lower_thr)));</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;    mc = vbslq_u32(mask0, vdupq_n_u32(<a class="code" href="canny_8cl.xhtml#ac243bfa96aa2c28014159ff098bd2324">EDGE</a>), mc);</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;    mc = vbslq_u32(mask1, vdupq_n_u32(<a class="code" href="canny_8cl.xhtml#a333a1d2eee75220d5161fdb0e778867d">NO_EDGE</a>), mc);</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;    mc = vbslq_u32(mask2, vdupq_n_u32(MAYBE), mc);</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;    <span class="keywordflow">return</span> vmovn_u32(mc);</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;}</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;<span class="comment">/* Computes non-maxima suppression and hysteresis when the gradient_size = 7</span></div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;<span class="comment"> * @param[in]  magnitude_ptr Pointer to source image. Magnitude. Data type supported U32</span></div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;<span class="comment"> * @param[in]  phase_ptr     Pointer to source image. Quantized phase. Data type supported U8</span></div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;<span class="comment"> * @param[out] output_ptr    Pointer to destination image. Data type supported U8</span></div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;<span class="comment"> * @param[in]  stride_mag    Stride of magnitude image</span></div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;<span class="comment"> * @param[in]  lower_thr     Lower threshold used for the hysteresis</span></div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;<span class="comment"> * @param[in]  upper_thr     Upper threshold used for the hysteresis</span></div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;<span class="keywordtype">void</span> non_max_suppression_U32_U8_U8(<span class="keyword">const</span> <span class="keywordtype">void</span> *__restrict magnitude_ptr, <span class="keyword">const</span> <span class="keywordtype">void</span> *__restrict phase_ptr, <span class="keywordtype">void</span> *__restrict output_ptr, <span class="keyword">const</span> uint32_t stride_mag, <span class="keyword">const</span> int32_t lower_thr,</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;                                   <span class="keyword">const</span> int32_t upper_thr)</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;{</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a> = static_cast&lt;const uint32_t *__restrict&gt;(magnitude_ptr);</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a74991bda4fcca3ce5dcf8afdccdbafff">phase</a>     = static_cast&lt;const uint8_t *__restrict&gt;(phase_ptr);</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> output    = static_cast&lt;uint8_t *__restrict&gt;(output_ptr);</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;    <span class="comment">// Get phase for 8 pixel</span></div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;    <span class="keyword">const</span> uint16x8_t pc16 = vmovl_u8(vld1_u8(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a74991bda4fcca3ce5dcf8afdccdbafff">phase</a>));</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;    <span class="comment">// Compute non maxima suppression</span></div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;    <span class="keyword">const</span> uint16x4x2_t res =</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;    {</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;        {</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;            non_max_U32_helper(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a>, vget_low_u16(pc16), stride_mag, lower_thr, upper_thr),</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;            non_max_U32_helper(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a> + 4, vget_high_u16(pc16), stride_mag, lower_thr, upper_thr)</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;        }</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;    };</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;    <span class="comment">// Store result</span></div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;    vst1_u8(output, vmovn_u16(vcombine_u16(res.val[0], res.val[1])));</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;}</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;<span class="comment">/* Computes edge tracing when is called by edge_trace_U8_U8 recursively</span></div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;<span class="comment"> * @param[in]  input         Pointer to source image. Data type supported U8</span></div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;<span class="comment"> * @param[out] output        Pointer to destination image. Data type supported U8</span></div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;<span class="comment"> * @param[in]  input_stride  Stride of the input image</span></div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;<span class="comment"> * @param[in]  output_stride Stride of the output image</span></div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;<span class="keywordtype">void</span> edge_trace_recursive_U8_U8(uint8_t *__restrict <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, uint8_t *__restrict output, <span class="keyword">const</span> int32_t input_stride, <span class="keyword">const</span> int32_t output_stride)</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;{</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;    <span class="comment">// Look for MAYBE pixels in 8 directions</span></div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;    *output = <a class="code" href="canny_8cl.xhtml#ac243bfa96aa2c28014159ff098bd2324">EDGE</a>;</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;    <span class="comment">// (-1, 0)</span></div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;    uint8_t pixel = *(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> - 1);</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;    <span class="keywordflow">if</span>(pixel == MAYBE)</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;    {</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;        <span class="comment">// Touched a MAYBE point. MAYBE becomes EDGE</span></div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;        *(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> - 1) = <a class="code" href="canny_8cl.xhtml#ac243bfa96aa2c28014159ff098bd2324">EDGE</a>;</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;        edge_trace_recursive_U8_U8(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> - 1, output - 1, input_stride, output_stride);</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;    }</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;    <span class="comment">// (+1, 0)</span></div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;    pixel = *(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> + 1);</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;    <span class="keywordflow">if</span>(pixel == MAYBE)</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;    {</div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;        <span class="comment">// Touched a MAYBE point. MAYBE becomes EDGE</span></div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;        *(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> + 1) = <a class="code" href="canny_8cl.xhtml#ac243bfa96aa2c28014159ff098bd2324">EDGE</a>;</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;        edge_trace_recursive_U8_U8(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> + 1, output + 1, input_stride, output_stride);</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;    }</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> -= input_stride;</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;    output -= output_stride;</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;    <span class="comment">// (-1, -1)</span></div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;    pixel = *(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> - 1);</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;    <span class="keywordflow">if</span>(pixel == MAYBE)</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;    {</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;        <span class="comment">// Touched a MAYBE point. MAYBE becomes EDGE</span></div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;        *(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> - 1) = <a class="code" href="canny_8cl.xhtml#ac243bfa96aa2c28014159ff098bd2324">EDGE</a>;</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;        edge_trace_recursive_U8_U8(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> - 1, output - 1, input_stride, output_stride);</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;    }</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;    <span class="comment">// (0, -1)</span></div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;    pixel = *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>;</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;    <span class="keywordflow">if</span>(pixel == MAYBE)</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;    {</div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;        <span class="comment">// Touched a MAYBE point. MAYBE becomes EDGE</span></div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;        *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> = <a class="code" href="canny_8cl.xhtml#ac243bfa96aa2c28014159ff098bd2324">EDGE</a>;</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;        edge_trace_recursive_U8_U8(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, input_stride, output_stride);</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;    }</div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;</div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;    <span class="comment">// (+1, -1)</span></div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;    pixel = *(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> + 1);</div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;</div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;    <span class="keywordflow">if</span>(pixel == MAYBE)</div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;    {</div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;        <span class="comment">// Touched a MAYBE point. MAYBE becomes EDGE</span></div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;        *(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> + 1) = <a class="code" href="canny_8cl.xhtml#ac243bfa96aa2c28014159ff098bd2324">EDGE</a>;</div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;</div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;        edge_trace_recursive_U8_U8(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> + 1, output + 1, input_stride, output_stride);</div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;    }</div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> += input_stride * 2;</div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;    output += output_stride * 2;</div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;</div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;    <span class="comment">// (-1, +1)</span></div><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;    pixel = *(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> - 1);</div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;</div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;    <span class="keywordflow">if</span>(pixel == MAYBE)</div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;    {</div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;        <span class="comment">// Touched a MAYBE point. MAYBE becomes EDGE</span></div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;        *(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> - 1) = <a class="code" href="canny_8cl.xhtml#ac243bfa96aa2c28014159ff098bd2324">EDGE</a>;</div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;</div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;        edge_trace_recursive_U8_U8(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> - 1, output - 1, input_stride, output_stride);</div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;    }</div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;</div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;    <span class="comment">// (0, +1)</span></div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;    pixel = *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>;</div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;</div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;    <span class="keywordflow">if</span>(pixel == MAYBE)</div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;    {</div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;        <span class="comment">// Touched a MAYBE point. MAYBE becomes EDGE</span></div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;        *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> = <a class="code" href="canny_8cl.xhtml#ac243bfa96aa2c28014159ff098bd2324">EDGE</a>;</div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;</div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;        edge_trace_recursive_U8_U8(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, input_stride, output_stride);</div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;    }</div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;</div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;    <span class="comment">// (+1, +1)</span></div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;    pixel = *(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> + 1);</div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;</div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;    <span class="keywordflow">if</span>(pixel == MAYBE)</div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;    {</div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;        <span class="comment">// Touched a MAYBE point. MAYBE becomes EDGE</span></div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;        *(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> + 1) = <a class="code" href="canny_8cl.xhtml#ac243bfa96aa2c28014159ff098bd2324">EDGE</a>;</div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;</div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;        edge_trace_recursive_U8_U8(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> + 1, output + 1, input_stride, output_stride);</div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;    }</div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;}</div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;</div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;<span class="comment">/* Computes edge tracing</span></div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;<span class="comment"> * @param[in]  input         Pointer to source image. Data type supported U8</span></div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;<span class="comment"> * @param[out] output        Pointer to destination image. Data type supported U8</span></div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;<span class="comment"> * @param[in]  input_stride  Stride of the input image</span></div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;<span class="comment"> * @param[in]  output_stride Stride of the output image</span></div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;<span class="keywordtype">void</span> edge_trace_U8_U8(uint8_t *__restrict <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, uint8_t *__restrict output, <span class="keyword">const</span> int32_t input_stride, <span class="keyword">const</span> int32_t output_stride)</div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;{</div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;    <span class="keywordflow">if</span>(*<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> == <a class="code" href="canny_8cl.xhtml#a333a1d2eee75220d5161fdb0e778867d">NO_EDGE</a>)</div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;    {</div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;        *output = <a class="code" href="canny_8cl.xhtml#a333a1d2eee75220d5161fdb0e778867d">NO_EDGE</a>;</div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;    }</div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;    <span class="comment">// Check if EDGE and not yet touched</span></div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>((*<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> == <a class="code" href="canny_8cl.xhtml#ac243bfa96aa2c28014159ff098bd2324">EDGE</a>) &amp;&amp; (*output == <a class="code" href="canny_8cl.xhtml#a333a1d2eee75220d5161fdb0e778867d">NO_EDGE</a>))</div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;    {</div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;        edge_trace_recursive_U8_U8(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, input_stride, output_stride);</div><div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;    }</div><div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;}</div><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;} <span class="comment">// namespace</span></div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;</div><div class="line"><a name="l00872"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_n_e_gradient_kernel.xhtml#a7da52d0627026b852dc51dbab82a978b">  872</a></span>&#160;<a class="code" href="classarm__compute_1_1_n_e_gradient_kernel.xhtml#a7da52d0627026b852dc51dbab82a978b">NEGradientKernel::NEGradientKernel</a>()</div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;    : _func(nullptr), _gx(nullptr), _gy(nullptr), _magnitude(nullptr), _phase(nullptr)</div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;{</div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;}</div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;</div><div class="line"><a name="l00877"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_n_e_gradient_kernel.xhtml#a0c6175a719b3ef4c20d8e2fc45d6990d">  877</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_n_e_gradient_kernel.xhtml#a0c6175a719b3ef4c20d8e2fc45d6990d">NEGradientKernel::configure</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *gx, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *gy, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a>, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a74991bda4fcca3ce5dcf8afdccdbafff">phase</a>, int32_t norm_type)</div><div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;{</div><div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;    <a class="code" href="_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a>(gx, gy, <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a74991bda4fcca3ce5dcf8afdccdbafff">phase</a>);</div><div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;</div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a9d1a839c51134b2ae171a2264c541b6f">set_shape_if_empty</a>(*<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a>-&gt;info(), gx-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>());</div><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a9d1a839c51134b2ae171a2264c541b6f">set_shape_if_empty</a>(*<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a74991bda4fcca3ce5dcf8afdccdbafff">phase</a>-&gt;info(), gx-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>());</div><div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;</div><div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> magnitude_format = gx-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>() == <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a> ? <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">Format::U16</a> : <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">Format::U32</a>;</div><div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a8076ba239b6681067b6cfea7f773a39f">set_format_if_unknown</a>(*<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a>-&gt;info(), magnitude_format);</div><div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a8076ba239b6681067b6cfea7f773a39f">set_format_if_unknown</a>(*<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a74991bda4fcca3ce5dcf8afdccdbafff">phase</a>-&gt;info(), <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>);</div><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;</div><div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;    <a class="code" href="_validate_8h.xhtml#aafce5e9928fac427dcd29d960bcf2ae3">ARM_COMPUTE_ERROR_ON_MISMATCHING_SHAPES</a>(gx, gy, <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a74991bda4fcca3ce5dcf8afdccdbafff">phase</a>);</div><div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;    <a class="code" href="_validate_8h.xhtml#aadf5c9cff86327b96d88d04649d9715e">ARM_COMPUTE_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(gx, 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>);</div><div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;    <a class="code" href="_validate_8h.xhtml#aadf5c9cff86327b96d88d04649d9715e">ARM_COMPUTE_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(gy, 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>);</div><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;    <a class="code" href="_validate_8h.xhtml#aadf5c9cff86327b96d88d04649d9715e">ARM_COMPUTE_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a>, 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">DataType::U16</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">DataType::U32</a>);</div><div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;    <a class="code" href="_validate_8h.xhtml#aadf5c9cff86327b96d88d04649d9715e">ARM_COMPUTE_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a74991bda4fcca3ce5dcf8afdccdbafff">phase</a>, 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>);</div><div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;    <a class="code" href="_validate_8h.xhtml#a5befbfaf6bc224eabc58b5e88b1de6d1">ARM_COMPUTE_ERROR_ON_MISMATCHING_DATA_TYPES</a>(gx, gy);</div><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(<a class="code" href="namespacearm__compute.xhtml#a34b06c0cd94808a77b697e79880b84b0">element_size_from_data_type</a>(gx-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>()) != <a class="code" href="namespacearm__compute.xhtml#a34b06c0cd94808a77b697e79880b84b0">element_size_from_data_type</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a>-&gt;info()-&gt;data_type()), <span class="stringliteral">&quot;Magnitude must have the same element size as Gx and Gy&quot;</span>);</div><div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;</div><div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;    _gx        = gx;</div><div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;    _gy        = gy;</div><div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;    _magnitude = <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a>;</div><div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;    _phase     = <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a74991bda4fcca3ce5dcf8afdccdbafff">phase</a>;</div><div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;</div><div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;    <span class="keywordflow">if</span>(_gx-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>() == <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a>)</div><div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;    {</div><div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;        <span class="keywordflow">if</span>(norm_type == 1)</div><div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;        {</div><div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;            _func = &amp;mag_phase_l1norm_S16_S16_U16_U8;</div><div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;        }</div><div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;        {</div><div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;            _func = &amp;mag_phase_l2norm_S16_S16_U16_U8;</div><div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;        }</div><div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;    }</div><div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;    {</div><div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;        <span class="keywordflow">if</span>(norm_type == 1)</div><div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;        {</div><div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;            _func = &amp;mag_phase_l1norm_S32_S32_U32_U8;</div><div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;        }</div><div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;        {</div><div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;            _func = &amp;mag_phase_l2norm_S32_S32_U32_U8;</div><div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;        }</div><div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;    }</div><div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;</div><div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;    constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="_c_l_im2_col_kernel_8cpp.xhtml#a4e45c1f5e4280813a78a77dda71d8799">num_elems_processed_per_iteration</a> = 32;</div><div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;</div><div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;    <span class="comment">// Configure kernel window</span></div><div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> win = <a class="code" href="namespacearm__compute.xhtml#ab7980fa5ee693e3282a76da047a1c3b5">calculate_max_window</a>(*_gx-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), <a class="code" href="classarm__compute_1_1_steps.xhtml">Steps</a>(<a class="code" href="_c_l_im2_col_kernel_8cpp.xhtml#a4e45c1f5e4280813a78a77dda71d8799">num_elems_processed_per_iteration</a>));</div><div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;</div><div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;    <a class="code" href="classarm__compute_1_1_access_window_horizontal.xhtml">AccessWindowHorizontal</a> gx_access(_gx-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), 0, <a class="code" href="_c_l_im2_col_kernel_8cpp.xhtml#a4e45c1f5e4280813a78a77dda71d8799">num_elems_processed_per_iteration</a>);</div><div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;    <a class="code" href="classarm__compute_1_1_access_window_horizontal.xhtml">AccessWindowHorizontal</a> gy_access(_gy-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), 0, <a class="code" href="_c_l_im2_col_kernel_8cpp.xhtml#a4e45c1f5e4280813a78a77dda71d8799">num_elems_processed_per_iteration</a>);</div><div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;    <a class="code" href="classarm__compute_1_1_access_window_horizontal.xhtml">AccessWindowHorizontal</a> mag_access(_magnitude-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), 0, <a class="code" href="_c_l_im2_col_kernel_8cpp.xhtml#a4e45c1f5e4280813a78a77dda71d8799">num_elems_processed_per_iteration</a>);</div><div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;    <a class="code" href="classarm__compute_1_1_access_window_horizontal.xhtml">AccessWindowHorizontal</a> phase_access(_phase-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), 0, <a class="code" href="_c_l_im2_col_kernel_8cpp.xhtml#a4e45c1f5e4280813a78a77dda71d8799">num_elems_processed_per_iteration</a>);</div><div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;</div><div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(<a class="code" href="namespacearm__compute.xhtml#afc4bd8e872567d9c4c57d89eb0bb3da1">update_window_and_padding</a>(win, gx_access, gy_access, mag_access, phase_access));</div><div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;</div><div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;    mag_access.set_valid_region(win, _gx-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a74dfd07380a290c34fe7c8e065029b95">valid_region</a>());</div><div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;    phase_access.set_valid_region(win, _gx-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a74dfd07380a290c34fe7c8e065029b95">valid_region</a>());</div><div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;</div><div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;    INEKernel::configure(win);</div><div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;}</div><div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;</div><div class="line"><a name="l00942"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_n_e_gradient_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">  942</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_n_e_gradient_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">NEGradientKernel::run</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>)</div><div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;{</div><div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>);</div><div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;    <a class="code" href="_validate_8h.xhtml#a1b35b0d258183cf9ef36adf684d0b88c">ARM_COMPUTE_ERROR_ON_UNCONFIGURED_KERNEL</a>(<span class="keyword">this</span>);</div><div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;    <a class="code" href="_validate_8h.xhtml#a6eb9ce82815fe429250189da7592ba75">ARM_COMPUTE_ERROR_ON_INVALID_SUBWINDOW</a>(<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">INEKernel::window</a>(), <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>);</div><div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(_func == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;    <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> gx(_gx, <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>);</div><div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;    <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> gy(_gy, <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>);</div><div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;    <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a>(_magnitude, <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>);</div><div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;    <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a74991bda4fcca3ce5dcf8afdccdbafff">phase</a>(_phase, <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>);</div><div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;</div><div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>, [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;)</div><div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;    {</div><div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;        (*_func)(gx.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>(), gy.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>(), <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a>.ptr(), <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a74991bda4fcca3ce5dcf8afdccdbafff">phase</a>.ptr());</div><div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;    },</div><div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;    gx, gy, <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a74991bda4fcca3ce5dcf8afdccdbafff">phase</a>);</div><div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;}</div><div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;</div><div class="line"><a name="l00960"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_n_e_edge_non_max_suppression_kernel.xhtml#a7e3beb7abd77b10e6630ae83f33e558b">  960</a></span>&#160;<a class="code" href="classarm__compute_1_1_n_e_edge_non_max_suppression_kernel.xhtml#a7e3beb7abd77b10e6630ae83f33e558b">NEEdgeNonMaxSuppressionKernel::NEEdgeNonMaxSuppressionKernel</a>()</div><div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;    : _func(nullptr), _magnitude(nullptr), _phase(nullptr), _output(nullptr), _lower_thr(0), _upper_thr(0)</div><div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;{</div><div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;}</div><div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;</div><div class="line"><a name="l00965"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_n_e_edge_non_max_suppression_kernel.xhtml#a423f9a45a52983b4de5e2b347f4369c7">  965</a></span>&#160;<a class="code" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a> <a class="code" href="classarm__compute_1_1_n_e_edge_non_max_suppression_kernel.xhtml#a423f9a45a52983b4de5e2b347f4369c7">NEEdgeNonMaxSuppressionKernel::border_size</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a>(1);</div><div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;}</div><div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;</div><div class="line"><a name="l00970"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_n_e_edge_non_max_suppression_kernel.xhtml#a57a36344e261edfdfa97b19ac40b7c30">  970</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_n_e_edge_non_max_suppression_kernel.xhtml#a57a36344e261edfdfa97b19ac40b7c30">NEEdgeNonMaxSuppressionKernel::configure</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a74991bda4fcca3ce5dcf8afdccdbafff">phase</a>, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output,</div><div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;                                              int32_t upper_thr, int32_t lower_thr, <span class="keywordtype">bool</span> border_undefined)</div><div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;{</div><div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;    <a class="code" href="_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a74991bda4fcca3ce5dcf8afdccdbafff">phase</a>, output);</div><div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;</div><div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a9d1a839c51134b2ae171a2264c541b6f">set_shape_if_empty</a>(*output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a>-&gt;info()-&gt;tensor_shape());</div><div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;</div><div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a8076ba239b6681067b6cfea7f773a39f">set_format_if_unknown</a>(*<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a74991bda4fcca3ce5dcf8afdccdbafff">phase</a>-&gt;info(), <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>);</div><div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a8076ba239b6681067b6cfea7f773a39f">set_format_if_unknown</a>(*output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>);</div><div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;</div><div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;    <a class="code" href="_validate_8h.xhtml#aafce5e9928fac427dcd29d960bcf2ae3">ARM_COMPUTE_ERROR_ON_MISMATCHING_SHAPES</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a74991bda4fcca3ce5dcf8afdccdbafff">phase</a>, output);</div><div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;    <a class="code" href="_validate_8h.xhtml#aadf5c9cff86327b96d88d04649d9715e">ARM_COMPUTE_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a>, 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">DataType::U16</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">DataType::U32</a>);</div><div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;    <a class="code" href="_validate_8h.xhtml#aadf5c9cff86327b96d88d04649d9715e">ARM_COMPUTE_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a74991bda4fcca3ce5dcf8afdccdbafff">phase</a>, 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>);</div><div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;    <a class="code" href="_validate_8h.xhtml#aadf5c9cff86327b96d88d04649d9715e">ARM_COMPUTE_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(output, 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>);</div><div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;    <a class="code" href="_validate_8h.xhtml#a5befbfaf6bc224eabc58b5e88b1de6d1">ARM_COMPUTE_ERROR_ON_MISMATCHING_DATA_TYPES</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a74991bda4fcca3ce5dcf8afdccdbafff">phase</a>, output);</div><div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;</div><div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;    _magnitude = <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a>;</div><div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;    _phase     = <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a74991bda4fcca3ce5dcf8afdccdbafff">phase</a>;</div><div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;    _output    = output;</div><div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;</div><div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;    <span class="keywordflow">switch</span>(_magnitude-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>())</div><div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;    {</div><div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">DataType::U16</a>:</div><div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;            _func = &amp;non_max_suppression_U16_U8_U8;</div><div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">DataType::U32</a>:</div><div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;            _func = &amp;non_max_suppression_U32_U8_U8;</div><div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported data type!&quot;</span>);</div><div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;    }</div><div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;</div><div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;    <span class="comment">// Set thresholds</span></div><div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;    _lower_thr = lower_thr;</div><div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;    _upper_thr = upper_thr;</div><div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;</div><div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;    constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="_c_l_im2_col_kernel_8cpp.xhtml#a4e45c1f5e4280813a78a77dda71d8799">num_elems_processed_per_iteration</a> = 8;</div><div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;    constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_elems_read_per_iteration      = 10;</div><div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;    constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_rows_read_per_iteration       = 3;</div><div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;</div><div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;    <span class="comment">// Configure kernel window</span></div><div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> win = <a class="code" href="namespacearm__compute.xhtml#ab7980fa5ee693e3282a76da047a1c3b5">calculate_max_window</a>(*_magnitude-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), <a class="code" href="classarm__compute_1_1_steps.xhtml">Steps</a>(<a class="code" href="_c_l_im2_col_kernel_8cpp.xhtml#a4e45c1f5e4280813a78a77dda71d8799">num_elems_processed_per_iteration</a>), border_undefined, <a class="code" href="classarm__compute_1_1_n_e_edge_non_max_suppression_kernel.xhtml#a423f9a45a52983b4de5e2b347f4369c7">border_size</a>());</div><div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;</div><div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;    <a class="code" href="classarm__compute_1_1_access_window_rectangle.xhtml">AccessWindowRectangle</a>  mag_access(_magnitude-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), -<a class="code" href="classarm__compute_1_1_n_e_edge_non_max_suppression_kernel.xhtml#a423f9a45a52983b4de5e2b347f4369c7">border_size</a>().<a class="code" href="structarm__compute_1_1_border_size.xhtml#a05374b750b0fc472c34ee61e6f028bba">left</a>, -<a class="code" href="classarm__compute_1_1_n_e_edge_non_max_suppression_kernel.xhtml#a423f9a45a52983b4de5e2b347f4369c7">border_size</a>().<a class="code" href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">top</a>, num_elems_read_per_iteration, num_rows_read_per_iteration);</div><div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;    <a class="code" href="classarm__compute_1_1_access_window_horizontal.xhtml">AccessWindowHorizontal</a> phase_access(_phase-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), 0, <a class="code" href="_c_l_im2_col_kernel_8cpp.xhtml#a4e45c1f5e4280813a78a77dda71d8799">num_elems_processed_per_iteration</a>);</div><div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;    <a class="code" href="classarm__compute_1_1_access_window_horizontal.xhtml">AccessWindowHorizontal</a> output_access(_output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), 0, <a class="code" href="_c_l_im2_col_kernel_8cpp.xhtml#a4e45c1f5e4280813a78a77dda71d8799">num_elems_processed_per_iteration</a>);</div><div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;</div><div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#afc4bd8e872567d9c4c57d89eb0bb3da1">update_window_and_padding</a>(win, mag_access, phase_access, output_access);</div><div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;</div><div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;    output_access.set_valid_region(win, _magnitude-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a74dfd07380a290c34fe7c8e065029b95">valid_region</a>(), border_undefined, <a class="code" href="classarm__compute_1_1_n_e_edge_non_max_suppression_kernel.xhtml#a423f9a45a52983b4de5e2b347f4369c7">border_size</a>());</div><div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;</div><div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;    INEKernel::configure(win);</div><div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;}</div><div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;</div><div class="line"><a name="l01024"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_n_e_edge_non_max_suppression_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82"> 1024</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_n_e_edge_non_max_suppression_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">NEEdgeNonMaxSuppressionKernel::run</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>)</div><div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;{</div><div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>);</div><div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;    <a class="code" href="_validate_8h.xhtml#a1b35b0d258183cf9ef36adf684d0b88c">ARM_COMPUTE_ERROR_ON_UNCONFIGURED_KERNEL</a>(<span class="keyword">this</span>);</div><div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;    <a class="code" href="_validate_8h.xhtml#a6eb9ce82815fe429250189da7592ba75">ARM_COMPUTE_ERROR_ON_INVALID_SUBWINDOW</a>(<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">INEKernel::window</a>(), <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>);</div><div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(_func == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;    <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a>(_magnitude, <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>);</div><div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;    <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a74991bda4fcca3ce5dcf8afdccdbafff">phase</a>(_phase, <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>);</div><div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;    <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> output(_output, <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>);</div><div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;</div><div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> input1_stride        = _magnitude-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">strides_in_bytes</a>()[1];</div><div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> input1_stride_ushort = input1_stride / <a class="code" href="namespacearm__compute.xhtml#abb7e0f23a4f2e63f39433f158dad47ab">data_size_from_type</a>(_magnitude-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>());</div><div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;</div><div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>, [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;)</div><div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;    {</div><div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;        (*_func)(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a>.ptr(), <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a74991bda4fcca3ce5dcf8afdccdbafff">phase</a>.ptr(), output.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>(), input1_stride_ushort, _lower_thr, _upper_thr);</div><div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;    },</div><div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">magnitude</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a74991bda4fcca3ce5dcf8afdccdbafff">phase</a>, output);</div><div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;}</div><div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;</div><div class="line"><a name="l01044"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_n_e_edge_trace_kernel.xhtml#a612c2d90812d66a7ce4c2f588b5845c4"> 1044</a></span>&#160;<a class="code" href="classarm__compute_1_1_n_e_edge_trace_kernel.xhtml#a612c2d90812d66a7ce4c2f588b5845c4">NEEdgeTraceKernel::NEEdgeTraceKernel</a>()</div><div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;    : _input(nullptr), _output(nullptr)</div><div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;{</div><div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;}</div><div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;</div><div class="line"><a name="l01049"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_n_e_edge_trace_kernel.xhtml#a423f9a45a52983b4de5e2b347f4369c7"> 1049</a></span>&#160;<a class="code" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a> <a class="code" href="classarm__compute_1_1_n_e_edge_trace_kernel.xhtml#a423f9a45a52983b4de5e2b347f4369c7">NEEdgeTraceKernel::border_size</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a>(1);</div><div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;}</div><div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;</div><div class="line"><a name="l01054"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_n_e_edge_trace_kernel.xhtml#a4370ae5fda7bd455a171fc8ed4d3f283"> 1054</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1_n_e_edge_trace_kernel.xhtml#a4370ae5fda7bd455a171fc8ed4d3f283">NEEdgeTraceKernel::is_parallelisable</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;}</div><div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;</div><div class="line"><a name="l01059"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_n_e_edge_trace_kernel.xhtml#a9daf8026e68559806afe7d0aa12693d6"> 1059</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_n_e_edge_trace_kernel.xhtml#a9daf8026e68559806afe7d0aa12693d6">NEEdgeTraceKernel::configure</a>(<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output)</div><div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;{</div><div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;    <a class="code" href="_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output);</div><div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;</div><div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a9d1a839c51134b2ae171a2264c541b6f">set_shape_if_empty</a>(*output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape());</div><div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;</div><div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a8076ba239b6681067b6cfea7f773a39f">set_format_if_unknown</a>(*<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info(), <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>);</div><div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a8076ba239b6681067b6cfea7f773a39f">set_format_if_unknown</a>(*output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>);</div><div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;</div><div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;    <a class="code" href="_validate_8h.xhtml#aafce5e9928fac427dcd29d960bcf2ae3">ARM_COMPUTE_ERROR_ON_MISMATCHING_SHAPES</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output);</div><div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;    <a class="code" href="_validate_8h.xhtml#aadf5c9cff86327b96d88d04649d9715e">ARM_COMPUTE_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>);</div><div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;    <a class="code" href="_validate_8h.xhtml#aadf5c9cff86327b96d88d04649d9715e">ARM_COMPUTE_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(output, 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>);</div><div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;    <a class="code" href="_validate_8h.xhtml#a5befbfaf6bc224eabc58b5e88b1de6d1">ARM_COMPUTE_ERROR_ON_MISMATCHING_DATA_TYPES</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output);</div><div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;</div><div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;    _input  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>;</div><div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;    _output = output;</div><div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;</div><div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;    constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="_c_l_im2_col_kernel_8cpp.xhtml#a4e45c1f5e4280813a78a77dda71d8799">num_elems_processed_per_iteration</a> = 1;</div><div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;</div><div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;    <span class="comment">// Configure kernel window</span></div><div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> win = <a class="code" href="namespacearm__compute.xhtml#ab7980fa5ee693e3282a76da047a1c3b5">calculate_max_window</a>(*_input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), <a class="code" href="classarm__compute_1_1_steps.xhtml">Steps</a>(<a class="code" href="_c_l_im2_col_kernel_8cpp.xhtml#a4e45c1f5e4280813a78a77dda71d8799">num_elems_processed_per_iteration</a>));</div><div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160;</div><div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &amp;input_valid_region  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;valid_region();</div><div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &amp;output_valid_region = output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a74dfd07380a290c34fe7c8e065029b95">valid_region</a>();</div><div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;</div><div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;    <span class="comment">// Reads can occur within the valid region of the input + border</span></div><div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;    <a class="code" href="classarm__compute_1_1_access_window_static.xhtml">AccessWindowStatic</a> input_access(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info(),</div><div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;                                    input_valid_region.anchor[0] - <a class="code" href="classarm__compute_1_1_n_e_edge_trace_kernel.xhtml#a423f9a45a52983b4de5e2b347f4369c7">border_size</a>().<a class="code" href="structarm__compute_1_1_border_size.xhtml#a05374b750b0fc472c34ee61e6f028bba">left</a>,</div><div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;                                    input_valid_region.anchor[1] - <a class="code" href="classarm__compute_1_1_n_e_edge_trace_kernel.xhtml#a423f9a45a52983b4de5e2b347f4369c7">border_size</a>().<a class="code" href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">top</a>,</div><div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;                                    input_valid_region.anchor[0] + input_valid_region.shape[0] + <a class="code" href="classarm__compute_1_1_n_e_edge_trace_kernel.xhtml#a423f9a45a52983b4de5e2b347f4369c7">border_size</a>().<a class="code" href="structarm__compute_1_1_border_size.xhtml#a78b0fed184c642b78f32fd34b228a5f9">right</a>,</div><div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;                                    input_valid_region.anchor[1] + input_valid_region.shape[1] + <a class="code" href="classarm__compute_1_1_n_e_edge_trace_kernel.xhtml#a423f9a45a52983b4de5e2b347f4369c7">border_size</a>().<a class="code" href="structarm__compute_1_1_border_size.xhtml#a802ffcf1b49237efe5be8a314d3f3869">bottom</a>);</div><div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;</div><div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;    <span class="comment">// Writes can occur within the valid region of the output + border</span></div><div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;    <a class="code" href="classarm__compute_1_1_access_window_static.xhtml">AccessWindowStatic</a> output_access(output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(),</div><div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;                                     output_valid_region.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a55a69b397082accd94221dd10b722cf7">anchor</a>[0] - <a class="code" href="classarm__compute_1_1_n_e_edge_trace_kernel.xhtml#a423f9a45a52983b4de5e2b347f4369c7">border_size</a>().<a class="code" href="structarm__compute_1_1_border_size.xhtml#a05374b750b0fc472c34ee61e6f028bba">left</a>,</div><div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;                                     output_valid_region.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a55a69b397082accd94221dd10b722cf7">anchor</a>[1] - <a class="code" href="classarm__compute_1_1_n_e_edge_trace_kernel.xhtml#a423f9a45a52983b4de5e2b347f4369c7">border_size</a>().<a class="code" href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">top</a>,</div><div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;                                     output_valid_region.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a55a69b397082accd94221dd10b722cf7">anchor</a>[0] + output_valid_region.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a1fcd64682b37ed3c2098d0094ce788d8">shape</a>[0] + <a class="code" href="classarm__compute_1_1_n_e_edge_trace_kernel.xhtml#a423f9a45a52983b4de5e2b347f4369c7">border_size</a>().<a class="code" href="structarm__compute_1_1_border_size.xhtml#a78b0fed184c642b78f32fd34b228a5f9">right</a>,</div><div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;                                     output_valid_region.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a55a69b397082accd94221dd10b722cf7">anchor</a>[1] + output_valid_region.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a1fcd64682b37ed3c2098d0094ce788d8">shape</a>[1] + <a class="code" href="classarm__compute_1_1_n_e_edge_trace_kernel.xhtml#a423f9a45a52983b4de5e2b347f4369c7">border_size</a>().<a class="code" href="structarm__compute_1_1_border_size.xhtml#a802ffcf1b49237efe5be8a314d3f3869">bottom</a>);</div><div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;</div><div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#afc4bd8e872567d9c4c57d89eb0bb3da1">update_window_and_padding</a>(win, input_access, output_access);</div><div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;</div><div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;    output_access.set_valid_region(win, _input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a74dfd07380a290c34fe7c8e065029b95">valid_region</a>());</div><div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;</div><div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;    INEKernel::configure(win);</div><div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;}</div><div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;</div><div class="line"><a name="l01105"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_n_e_edge_trace_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82"> 1105</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_n_e_edge_trace_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">NEEdgeTraceKernel::run</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>)</div><div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;{</div><div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>);</div><div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;    <a class="code" href="_validate_8h.xhtml#a1b35b0d258183cf9ef36adf684d0b88c">ARM_COMPUTE_ERROR_ON_UNCONFIGURED_KERNEL</a>(<span class="keyword">this</span>);</div><div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;    <a class="code" href="_validate_8h.xhtml#a6eb9ce82815fe429250189da7592ba75">ARM_COMPUTE_ERROR_ON_INVALID_SUBWINDOW</a>(<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">INEKernel::window</a>(), <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>);</div><div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;    <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>(_input, <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>);</div><div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;    <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> output(_output, <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>);</div><div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;</div><div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> input_stride  = _input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">strides_in_bytes</a>()[1];</div><div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> output_stride = _output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">strides_in_bytes</a>()[1];</div><div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;</div><div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>, [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;)</div><div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;    {</div><div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;        edge_trace_U8_U8(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.ptr(), output.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>(), input_stride, output_stride);</div><div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;    },</div><div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output);</div><div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;}</div><div class="ttc" id="structarm__compute_1_1_border_size_xhtml_a3fdd42ea34070a54e696b3adc28c4be3"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">arm_compute::BorderSize::top</a></div><div class="ttdeci">unsigned int top</div><div class="ttdoc">top of the border</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00349">Types.h:349</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_kernel_xhtml_ad34a46f53686c12a5c5e717cc9617fb6"><div class="ttname"><a href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">arm_compute::IKernel::window</a></div><div class="ttdeci">const Window &amp; window() const</div><div class="ttdoc">The maximum window the kernel can be executed on.</div><div class="ttdef"><b>Definition:</b> <a href="_i_kernel_8cpp_source.xhtml#l00028">IKernel.cpp:28</a></div></div>
<div class="ttc" id="_i_tensor_8h_xhtml"><div class="ttname"><a href="_i_tensor_8h.xhtml">ITensor.h</a></div></div>
<div class="ttc" id="structarm__compute_1_1_valid_region_xhtml_a1fcd64682b37ed3c2098d0094ce788d8"><div class="ttname"><a href="structarm__compute_1_1_valid_region.xhtml#a1fcd64682b37ed3c2098d0094ce788d8">arm_compute::ValidRegion::shape</a></div><div class="ttdeci">TensorShape shape</div><div class="ttdoc">Shape of the valid region.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00257">Types.h:257</a></div></div>
<div class="ttc" id="_validate_8h_xhtml_a5befbfaf6bc224eabc58b5e88b1de6d1"><div class="ttname"><a href="_validate_8h.xhtml#a5befbfaf6bc224eabc58b5e88b1de6d1">ARM_COMPUTE_ERROR_ON_MISMATCHING_DATA_TYPES</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MISMATCHING_DATA_TYPES(...)</div><div class="ttdef"><b>Definition:</b> <a href="_validate_8h_source.xhtml#l00543">Validate.h:543</a></div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml">arm_compute::BorderSize</a></div><div class="ttdoc">Container for 2D border size.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00269">Types.h:269</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00352">Error.h:352</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::Format::U8</a></div><div class="ttdoc">1 channel, 1 U8 per channel</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a34b06c0cd94808a77b697e79880b84b0"><div class="ttname"><a href="namespacearm__compute.xhtml#a34b06c0cd94808a77b697e79880b84b0">arm_compute::element_size_from_data_type</a></div><div class="ttdeci">size_t element_size_from_data_type(DataType dt)</div><div class="ttdoc">The size in bytes of the data type.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_utils_8h_source.xhtml#l00186">Utils.h:186</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a7cfb31af63202568efef5214acfbf3ba"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">arm_compute::ITensorInfo::data_type</a></div><div class="ttdeci">virtual DataType data_type() const =0</div><div class="ttdoc">Data type used for each element of the tensor.</div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_a74991bda4fcca3ce5dcf8afdccdbafff"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a74991bda4fcca3ce5dcf8afdccdbafff">arm_compute::test::validation::reference::phase</a></div><div class="ttdeci">SimpleTensor&lt; uint8_t &gt; phase(const SimpleTensor&lt; T &gt; &amp;gx, const SimpleTensor&lt; T &gt; &amp;gy, PhaseType phase_type)</div><div class="ttdef"><b>Definition:</b> <a href="reference_2_phase_8cpp_source.xhtml#l00035">Phase.cpp:35</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">arm_compute::Format::U16</a></div><div class="ttdoc">1 channel, 1 U16 per channel</div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml_a802ffcf1b49237efe5be8a314d3f3869"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a802ffcf1b49237efe5be8a314d3f3869">arm_compute::BorderSize::bottom</a></div><div class="ttdeci">unsigned int bottom</div><div class="ttdoc">bottom of the border</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00351">Types.h:351</a></div></div>
<div class="ttc" id="_n_e_canny_edge_kernel_8h_xhtml"><div class="ttname"><a href="_n_e_canny_edge_kernel_8h.xhtml">NECannyEdgeKernel.h</a></div></div>
<div class="ttc" id="_tensor_info_8h_xhtml"><div class="ttname"><a href="_tensor_info_8h.xhtml">TensorInfo.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml">arm_compute::ITensor</a></div><div class="ttdoc">Interface for NEON tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_8h_source.xhtml#l00036">ITensor.h:36</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab7980fa5ee693e3282a76da047a1c3b5"><div class="ttname"><a href="namespacearm__compute.xhtml#ab7980fa5ee693e3282a76da047a1c3b5">arm_compute::calculate_max_window</a></div><div class="ttdeci">Window calculate_max_window(const ValidRegion &amp;valid_region, const Steps &amp;steps=Steps(), bool skip_border=false, BorderSize border_size=BorderSize())</div><div class="ttdoc">Calculate the maximum window for a given tensor shape and border setting.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_helpers_8cpp_source.xhtml#l00028">Helpers.cpp:28</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2020 ARM Limited.</div><div class="ttdef"><b>Definition:</b> <a href="00__introduction_8dox_source.xhtml#l00024">00_introduction.dox:24</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_edge_non_max_suppression_kernel_xhtml_a423f9a45a52983b4de5e2b347f4369c7"><div class="ttname"><a href="classarm__compute_1_1_n_e_edge_non_max_suppression_kernel.xhtml#a423f9a45a52983b4de5e2b347f4369c7">arm_compute::NEEdgeNonMaxSuppressionKernel::border_size</a></div><div class="ttdeci">BorderSize border_size() const override</div><div class="ttdoc">The size of the border for that kernel.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_canny_edge_kernel_8cpp_source.xhtml#l00965">NECannyEdgeKernel.cpp:965</a></div></div>
<div class="ttc" id="_validate_8h_xhtml_aafce5e9928fac427dcd29d960bcf2ae3"><div class="ttname"><a href="_validate_8h.xhtml#aafce5e9928fac427dcd29d960bcf2ae3">ARM_COMPUTE_ERROR_ON_MISMATCHING_SHAPES</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MISMATCHING_SHAPES(...)</div><div class="ttdef"><b>Definition:</b> <a href="_validate_8h_source.xhtml#l00441">Validate.h:441</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_edge_trace_kernel_xhtml_a4370ae5fda7bd455a171fc8ed4d3f283"><div class="ttname"><a href="classarm__compute_1_1_n_e_edge_trace_kernel.xhtml#a4370ae5fda7bd455a171fc8ed4d3f283">arm_compute::NEEdgeTraceKernel::is_parallelisable</a></div><div class="ttdeci">bool is_parallelisable() const override</div><div class="ttdoc">Indicates whether or not the kernel is parallelisable.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_canny_edge_kernel_8cpp_source.xhtml#l01054">NECannyEdgeKernel.cpp:1054</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_gradient_kernel_xhtml_a0c6175a719b3ef4c20d8e2fc45d6990d"><div class="ttname"><a href="classarm__compute_1_1_n_e_gradient_kernel.xhtml#a0c6175a719b3ef4c20d8e2fc45d6990d">arm_compute::NEGradientKernel::configure</a></div><div class="ttdeci">virtual void configure(const ITensor *gx, const ITensor *gy, ITensor *magnitude, ITensor *phase, int32_t norm_type)</div><div class="ttdoc">Initialise the kernel's sources, destinations and border mode.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_canny_edge_kernel_8cpp_source.xhtml#l00877">NECannyEdgeKernel.cpp:877</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a74dfd07380a290c34fe7c8e065029b95"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a74dfd07380a290c34fe7c8e065029b95">arm_compute::ITensorInfo::valid_region</a></div><div class="ttdeci">virtual ValidRegion valid_region() const =0</div><div class="ttdoc">Valid region of the tensor.</div></div>
<div class="ttc" id="classarm__compute_1_1_access_window_static_xhtml"><div class="ttname"><a href="classarm__compute_1_1_access_window_static.xhtml">arm_compute::AccessWindowStatic</a></div><div class="ttdoc">Implementation of a static rectangular access pattern.</div><div class="ttdef"><b>Definition:</b> <a href="_access_window_static_8h_source.xhtml#l00046">AccessWindowStatic.h:46</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_edge_non_max_suppression_kernel_xhtml_a7e3beb7abd77b10e6630ae83f33e558b"><div class="ttname"><a href="classarm__compute_1_1_n_e_edge_non_max_suppression_kernel.xhtml#a7e3beb7abd77b10e6630ae83f33e558b">arm_compute::NEEdgeNonMaxSuppressionKernel::NEEdgeNonMaxSuppressionKernel</a></div><div class="ttdeci">NEEdgeNonMaxSuppressionKernel()</div><div class="ttdoc">Default constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_canny_edge_kernel_8cpp_source.xhtml#l00960">NECannyEdgeKernel.cpp:960</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::Format::S32</a></div><div class="ttdoc">1 channel, 1 S32 per channel</div></div>
<div class="ttc" id="arm__compute_2core_2_utils_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_utils_8h.xhtml">Utils.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_access_window_rectangle_xhtml"><div class="ttname"><a href="classarm__compute_1_1_access_window_rectangle.xhtml">arm_compute::AccessWindowRectangle</a></div><div class="ttdoc">Implementation of a rectangular access pattern.</div><div class="ttdef"><b>Definition:</b> <a href="_i_access_window_8h_source.xhtml#l00107">IAccessWindow.h:107</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_edge_trace_kernel_xhtml_a112b35dd205c62ea6ed1447ef226da82"><div class="ttname"><a href="classarm__compute_1_1_n_e_edge_trace_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">arm_compute::NEEdgeTraceKernel::run</a></div><div class="ttdeci">void run(const Window &amp;window, const ThreadInfo &amp;info) override</div><div class="ttdoc">Execute the kernel on the passed window.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_canny_edge_kernel_8cpp_source.xhtml#l01105">NECannyEdgeKernel.cpp:1105</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_afc4bd8e872567d9c4c57d89eb0bb3da1"><div class="ttname"><a href="namespacearm__compute.xhtml#afc4bd8e872567d9c4c57d89eb0bb3da1">arm_compute::update_window_and_padding</a></div><div class="ttdeci">bool update_window_and_padding(Window &amp;win, Ts &amp;&amp;... patterns)</div><div class="ttdoc">Update window and padding size for each of the access patterns.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_helpers_8h_source.xhtml#l00402">Helpers.h:402</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">arm_compute::Format::U32</a></div><div class="ttdoc">1 channel, 1 U32 per channel</div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a7c66505457d00ece3aa4b34cab80757d"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">arm_compute::ITensorInfo::tensor_shape</a></div><div class="ttdeci">virtual const TensorShape &amp; tensor_shape() const =0</div><div class="ttdoc">Size for each dimension of the tensor.</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">arm_compute::Format</a></div><div class="ttdeci">Format</div><div class="ttdoc">Image colour formats.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00053">Types.h:53</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_edge_trace_kernel_xhtml_a423f9a45a52983b4de5e2b347f4369c7"><div class="ttname"><a href="classarm__compute_1_1_n_e_edge_trace_kernel.xhtml#a423f9a45a52983b4de5e2b347f4369c7">arm_compute::NEEdgeTraceKernel::border_size</a></div><div class="ttdeci">BorderSize border_size() const override</div><div class="ttdoc">The size of the border for that kernel.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_canny_edge_kernel_8cpp_source.xhtml#l01049">NECannyEdgeKernel.cpp:1049</a></div></div>
<div class="ttc" id="classarm__compute_1_1_steps_xhtml"><div class="ttname"><a href="classarm__compute_1_1_steps.xhtml">arm_compute::Steps</a></div><div class="ttdoc">Class to describe a number of elements in each dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_steps_8h_source.xhtml#l00040">Steps.h:40</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a0b0eb3235749a2909dc5a101afe59a1b"><div class="ttname"><a href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond, msg)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00456">Error.h:456</a></div></div>
<div class="ttc" id="classarm__compute_1_1_coordinates_xhtml"><div class="ttname"><a href="classarm__compute_1_1_coordinates.xhtml">arm_compute::Coordinates</a></div><div class="ttdoc">Coordinates of an item.</div><div class="ttdef"><b>Definition:</b> <a href="_coordinates_8h_source.xhtml#l00037">Coordinates.h:37</a></div></div>
<div class="ttc" id="classarm__compute_1_1_access_window_horizontal_xhtml"><div class="ttname"><a href="classarm__compute_1_1_access_window_horizontal.xhtml">arm_compute::AccessWindowHorizontal</a></div><div class="ttdoc">Implementation of a row access pattern.</div><div class="ttdef"><b>Definition:</b> <a href="_i_access_window_8h_source.xhtml#l00232">IAccessWindow.h:232</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_edge_trace_kernel_xhtml_a612c2d90812d66a7ce4c2f588b5845c4"><div class="ttname"><a href="classarm__compute_1_1_n_e_edge_trace_kernel.xhtml#a612c2d90812d66a7ce4c2f588b5845c4">arm_compute::NEEdgeTraceKernel::NEEdgeTraceKernel</a></div><div class="ttdeci">NEEdgeTraceKernel()</div><div class="ttdoc">Default constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_canny_edge_kernel_8cpp_source.xhtml#l01044">NECannyEdgeKernel.cpp:1044</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_edge_non_max_suppression_kernel_xhtml_a57a36344e261edfdfa97b19ac40b7c30"><div class="ttname"><a href="classarm__compute_1_1_n_e_edge_non_max_suppression_kernel.xhtml#a57a36344e261edfdfa97b19ac40b7c30">arm_compute::NEEdgeNonMaxSuppressionKernel::configure</a></div><div class="ttdeci">void configure(const ITensor *magnitude, const ITensor *phase, ITensor *output, int32_t upper_thr, int32_t lower_thr, bool border_undefined)</div><div class="ttdoc">Initialise the kernel's sources, destination and border mode.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_canny_edge_kernel_8cpp_source.xhtml#l00970">NECannyEdgeKernel.cpp:970</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml_a0e95dc1e53c361348314873b168ae237"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">arm_compute::ITensor::info</a></div><div class="ttdeci">virtual ITensorInfo * info() const =0</div><div class="ttdoc">Interface to be implemented by the child class to return the tensor's metadata.</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_abb7e0f23a4f2e63f39433f158dad47ab"><div class="ttname"><a href="namespacearm__compute.xhtml#abb7e0f23a4f2e63f39433f158dad47ab">arm_compute::data_size_from_type</a></div><div class="ttdeci">size_t data_size_from_type(DataType data_type)</div><div class="ttdoc">The size in bytes of the data type.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_utils_8h_source.xhtml#l00109">Utils.h:109</a></div></div>
<div class="ttc" id="classarm__compute_1_1_iterator_xhtml_ab260e292b1df3944bc1d55a9b2301e41"><div class="ttname"><a href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">arm_compute::Iterator::ptr</a></div><div class="ttdeci">constexpr uint8_t * ptr() const</div><div class="ttdoc">Return a pointer to the current pixel.</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00185">Helpers.inl:185</a></div></div>
<div class="ttc" id="_error_8h_xhtml"><div class="ttname"><a href="_error_8h.xhtml">Error.h</a></div></div>
<div class="ttc" id="canny_8cl_xhtml_ac243bfa96aa2c28014159ff098bd2324"><div class="ttname"><a href="canny_8cl.xhtml#ac243bfa96aa2c28014159ff098bd2324">EDGE</a></div><div class="ttdeci">#define EDGE</div><div class="ttdef"><b>Definition:</b> <a href="canny_8cl_source.xhtml#l00151">canny.cl:151</a></div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml_a05374b750b0fc472c34ee61e6f028bba"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a05374b750b0fc472c34ee61e6f028bba">arm_compute::BorderSize::left</a></div><div class="ttdeci">unsigned int left</div><div class="ttdoc">left of the border</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00352">Types.h:352</a></div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml_a78b0fed184c642b78f32fd34b228a5f9"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a78b0fed184c642b78f32fd34b228a5f9">arm_compute::BorderSize::right</a></div><div class="ttdeci">unsigned int right</div><div class="ttdoc">right of the border</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00350">Types.h:350</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">arm_compute::Format::S16</a></div><div class="ttdoc">1 channel, 1 S16 per channel</div></div>
<div class="ttc" id="canny_8cl_xhtml_a333a1d2eee75220d5161fdb0e778867d"><div class="ttname"><a href="canny_8cl.xhtml#a333a1d2eee75220d5161fdb0e778867d">NO_EDGE</a></div><div class="ttdeci">#define NO_EDGE</div><div class="ttdef"><b>Definition:</b> <a href="canny_8cl_source.xhtml#l00152">canny.cl:152</a></div></div>
<div class="ttc" id="_validate_8h_xhtml_aadf5c9cff86327b96d88d04649d9715e"><div class="ttname"><a href="_validate_8h.xhtml#aadf5c9cff86327b96d88d04649d9715e">ARM_COMPUTE_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN(t, c,...)</div><div class="ttdef"><b>Definition:</b> <a href="_validate_8h_source.xhtml#l00790">Validate.h:790</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_gradient_kernel_xhtml_a7da52d0627026b852dc51dbab82a978b"><div class="ttname"><a href="classarm__compute_1_1_n_e_gradient_kernel.xhtml#a7da52d0627026b852dc51dbab82a978b">arm_compute::NEGradientKernel::NEGradientKernel</a></div><div class="ttdeci">NEGradientKernel()</div><div class="ttdoc">Default constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_canny_edge_kernel_8cpp_source.xhtml#l00872">NECannyEdgeKernel.cpp:872</a></div></div>
<div class="ttc" id="_validate_8h_xhtml_a921b705e9e3e0fe928928447869e62a5"><div class="ttname"><a href="_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_NULLPTR(...)</div><div class="ttdef"><b>Definition:</b> <a href="_validate_8h_source.xhtml#l00161">Validate.h:161</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_gradient_kernel_xhtml_a112b35dd205c62ea6ed1447ef226da82"><div class="ttname"><a href="classarm__compute_1_1_n_e_gradient_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">arm_compute::NEGradientKernel::run</a></div><div class="ttdeci">void run(const Window &amp;window, const ThreadInfo &amp;info) override</div><div class="ttdoc">Execute the kernel on the passed window.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_canny_edge_kernel_8cpp_source.xhtml#l00942">NECannyEdgeKernel.cpp:942</a></div></div>
<div class="ttc" id="structarm__compute_1_1_thread_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_thread_info.xhtml">arm_compute::ThreadInfo</a></div><div class="ttdoc">Information about executing thread and CPU.</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_types_8h_source.xhtml#l00225">CPPTypes.h:225</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_edge_trace_kernel_xhtml_a9daf8026e68559806afe7d0aa12693d6"><div class="ttname"><a href="classarm__compute_1_1_n_e_edge_trace_kernel.xhtml#a9daf8026e68559806afe7d0aa12693d6">arm_compute::NEEdgeTraceKernel::configure</a></div><div class="ttdeci">void configure(ITensor *input, ITensor *output)</div><div class="ttdoc">Initialise the kernel's source, destination and border mode.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_canny_edge_kernel_8cpp_source.xhtml#l01059">NECannyEdgeKernel.cpp:1059</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a9d1a839c51134b2ae171a2264c541b6f"><div class="ttname"><a href="namespacearm__compute.xhtml#a9d1a839c51134b2ae171a2264c541b6f">arm_compute::set_shape_if_empty</a></div><div class="ttdeci">bool set_shape_if_empty(ITensorInfo &amp;info, const TensorShape &amp;shape)</div><div class="ttdoc">Set the shape to the specified value if the current assignment is empty.</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00235">Helpers.inl:235</a></div></div>
<div class="ttc" id="_c_l_im2_col_kernel_8cpp_xhtml_a4e45c1f5e4280813a78a77dda71d8799"><div class="ttname"><a href="_c_l_im2_col_kernel_8cpp.xhtml#a4e45c1f5e4280813a78a77dda71d8799">num_elems_processed_per_iteration</a></div><div class="ttdeci">unsigned int num_elems_processed_per_iteration</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_im2_col_kernel_8cpp_source.xhtml#l00054">CLIm2ColKernel.cpp:54</a></div></div>
<div class="ttc" id="arm__compute_2core_2_helpers_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_helpers_8h.xhtml">Helpers.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5002bf7ec46d52971f9526e94172cfee"><div class="ttname"><a href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;... iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00123">Helpers.inl:123</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a8076ba239b6681067b6cfea7f773a39f"><div class="ttname"><a href="namespacearm__compute.xhtml#a8076ba239b6681067b6cfea7f773a39f">arm_compute::set_format_if_unknown</a></div><div class="ttdeci">bool set_format_if_unknown(ITensorInfo &amp;info, Format format)</div><div class="ttdoc">Set the format, data type and number of channels to the specified value if the current data type is u...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00246">Helpers.inl:246</a></div></div>
<div class="ttc" id="_access_window_static_8h_xhtml"><div class="ttname"><a href="_access_window_static_8h.xhtml">AccessWindowStatic.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a6b14f175bf5281f57b561e2d4e4b1f1f"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">arm_compute::ITensorInfo::strides_in_bytes</a></div><div class="ttdeci">virtual const Strides &amp; strides_in_bytes() const =0</div><div class="ttdoc">The strides in bytes for accessing each dimension of the tensor.</div></div>
<div class="ttc" id="structarm__compute_1_1_valid_region_xhtml"><div class="ttname"><a href="structarm__compute_1_1_valid_region.xhtml">arm_compute::ValidRegion</a></div><div class="ttdoc">Container for valid region of a window.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00184">Types.h:184</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a4f4125dba5283887b34f889b1c615c0c"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">arm_compute::test::validation::info</a></div><div class="ttdeci">info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00182">ConvolutionLayer.cpp:182</a></div></div>
<div class="ttc" id="classarm__compute_1_1_iterator_xhtml"><div class="ttname"><a href="classarm__compute_1_1_iterator.xhtml">arm_compute::Iterator</a></div><div class="ttdoc">Iterator updated by execute_window_loop for each window element.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_helpers_8h_source.xhtml#l00318">Helpers.h:318</a></div></div>
<div class="ttc" id="arm__compute_2core_2_types_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_types_8h.xhtml">Types.h</a></div></div>
<div class="ttc" id="_validate_8h_xhtml_a6eb9ce82815fe429250189da7592ba75"><div class="ttname"><a href="_validate_8h.xhtml#a6eb9ce82815fe429250189da7592ba75">ARM_COMPUTE_ERROR_ON_INVALID_SUBWINDOW</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_INVALID_SUBWINDOW(f, s)</div><div class="ttdef"><b>Definition:</b> <a href="_validate_8h_source.xhtml#l00205">Validate.h:205</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_edge_non_max_suppression_kernel_xhtml_a112b35dd205c62ea6ed1447ef226da82"><div class="ttname"><a href="classarm__compute_1_1_n_e_edge_non_max_suppression_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">arm_compute::NEEdgeNonMaxSuppressionKernel::run</a></div><div class="ttdeci">void run(const Window &amp;window, const ThreadInfo &amp;info) override</div><div class="ttdoc">Execute the kernel on the passed window.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_canny_edge_kernel_8cpp_source.xhtml#l01024">NECannyEdgeKernel.cpp:1024</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml">arm_compute::Window</a></div><div class="ttdoc">Describe a multidimensional execution window.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00039">Window.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_a6aa278cb3dd1777e7338c5e573c55550"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6aa278cb3dd1777e7338c5e573c55550">arm_compute::test::validation::reference::magnitude</a></div><div class="ttdeci">SimpleTensor&lt; T &gt; magnitude(const SimpleTensor&lt; T &gt; &amp;gx, const SimpleTensor&lt; T &gt; &amp;gy, MagnitudeType magnitude_type)</div><div class="ttdef"><b>Definition:</b> <a href="reference_2_magnitude_8cpp_source.xhtml#l00035">Magnitude.cpp:35</a></div></div>
<div class="ttc" id="_validate_8h_xhtml_a1b35b0d258183cf9ef36adf684d0b88c"><div class="ttname"><a href="_validate_8h.xhtml#a1b35b0d258183cf9ef36adf684d0b88c">ARM_COMPUTE_ERROR_ON_UNCONFIGURED_KERNEL</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_UNCONFIGURED_KERNEL(k)</div><div class="ttdef"><b>Definition:</b> <a href="_validate_8h_source.xhtml#l00941">Validate.h:941</a></div></div>
<div class="ttc" id="structarm__compute_1_1_valid_region_xhtml_a55a69b397082accd94221dd10b722cf7"><div class="ttname"><a href="structarm__compute_1_1_valid_region.xhtml#a55a69b397082accd94221dd10b722cf7">arm_compute::ValidRegion::anchor</a></div><div class="ttdeci">Coordinates anchor</div><div class="ttdoc">Anchor for the start of the valid region.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00256">Types.h:256</a></div></div>
<div class="ttc" id="_validate_8h_xhtml"><div class="ttname"><a href="_validate_8h.xhtml">Validate.h</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aebb8dcc11953d78e620bbef0b9e2183.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_d91e1966cc57df4f49d1e07be7697713.xhtml">NEON</a></li><li class="navelem"><a class="el" href="dir_1ce938f580a6f304b99685e2c1dd19db.xhtml">kernels</a></li><li class="navelem"><a class="el" href="_n_e_canny_edge_kernel_8cpp.xhtml">NECannyEdgeKernel.cpp</a></li>
    <li class="footer">Generated on Fri Feb 21 2020 11:10:14 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
