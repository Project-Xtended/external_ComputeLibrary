<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/runtime/CL/functions/CLFullyConnectedLayer.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('_c_l_fully_connected_layer_8cpp_source.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">CLFullyConnectedLayer.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_c_l_fully_connected_layer_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017-2020 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_c_l_fully_connected_layer_8h.xhtml">arm_compute/runtime/CL/functions/CLFullyConnectedLayer.h</a>&quot;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_size2_d_8h.xhtml">arm_compute/core/Size2D.h</a>&quot;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_validate_8h.xhtml">arm_compute/core/Validate.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_cast_8h.xhtml">arm_compute/core/utils/misc/Cast.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_shape_calculator_8h.xhtml">arm_compute/core/utils/misc/ShapeCalculator.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_asymm_helpers_8h.xhtml">arm_compute/core/utils/quantization/AsymmHelpers.h</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_c_l_scheduler_8h.xhtml">arm_compute/runtime/CL/CLScheduler.h</a>&quot;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_toolchain_support_8h.xhtml">support/ToolchainSupport.h</a>&quot;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml">arm_compute::misc::shape_calculator</a>;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml">arm_compute::utils::cast</a>;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="keyword">namespace</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;Status construct_gemmlowp_output_stage(<span class="keyword">const</span> ITensorInfo &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keyword">const</span> ITensorInfo &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, <span class="keyword">const</span> ITensorInfo &amp;output,</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;                                       GEMMLowpOutputStageInfo &amp;gemmlowp_output_stage)</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;{</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    gemmlowp_output_stage.type                = <a class="code" href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864ab300cae200f67712c1eb9234e28158ca">GEMMLowpOutputStageType::QUANTIZE_DOWN_FIXEDPOINT</a>;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    gemmlowp_output_stage.gemmlowp_offset     = 0;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    gemmlowp_output_stage.gemmlowp_multiplier = 0;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    gemmlowp_output_stage.gemmlowp_shift      = 0;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a> = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.data_type();</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="comment">// Configure output stage for quantized case</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute.xhtml#a14f46283f316e7f0fad301d5c1507e9f">is_data_type_quantized_asymmetric</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>))</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    {</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <span class="keyword">const</span> UniformQuantizationInfo iq_info = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.quantization_info().uniform();</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        <span class="keyword">const</span> UniformQuantizationInfo wq_info = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>.quantization_info().uniform();</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        <span class="keyword">const</span> UniformQuantizationInfo oq_info = output.quantization_info().uniform();</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> output_quant_info = (output.total_size() == 0) ? iq_info : oq_info;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span> multiplier        = (iq_info.scale * wq_info.scale) / output_quant_info.scale;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="keywordtype">int</span>         output_multiplier = 0;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="keywordtype">int</span>         output_shift      = 0;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="namespacearm__compute_1_1quantization.xhtml#a63fdf412c27b0151bd4495c64cc112da">quantization::calculate_quantized_multiplier</a>(multiplier, &amp;output_multiplier, &amp;output_shift));</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        PixelValue <a class="code" href="minmaxloc_8cl.xhtml#a538b4b63f40e7b12891774e03a4f0dec">type_min</a>{};</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        PixelValue <a class="code" href="minmaxloc_8cl.xhtml#a4464d6f922ea17b4a9ca6a2cec7ddb75">type_max</a>{};</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        std::tie(<a class="code" href="minmaxloc_8cl.xhtml#a538b4b63f40e7b12891774e03a4f0dec">type_min</a>, <a class="code" href="minmaxloc_8cl.xhtml#a4464d6f922ea17b4a9ca6a2cec7ddb75">type_max</a>) = <a class="code" href="namespacearm__compute.xhtml#ae69217acf0f0b5d4de030a09ad50a0bc">get_min_max</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>);</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="comment">// Set the GEMMLowp output stage info</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        gemmlowp_output_stage.gemmlowp_offset     = output_quant_info.offset;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        gemmlowp_output_stage.gemmlowp_multiplier = output_multiplier;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        gemmlowp_output_stage.gemmlowp_shift      = output_shift;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        gemmlowp_output_stage.gemmlowp_multipliers.push_back(output_multiplier);</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        gemmlowp_output_stage.gemmlowp_shifts.push_back(output_shift);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <a class="code" href="minmaxloc_8cl.xhtml#a538b4b63f40e7b12891774e03a4f0dec">type_min</a>.get(gemmlowp_output_stage.gemmlowp_min_bound);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        <a class="code" href="minmaxloc_8cl.xhtml#a4464d6f922ea17b4a9ca6a2cec7ddb75">type_max</a>.get(gemmlowp_output_stage.gemmlowp_max_bound);</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    }</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keywordflow">return</span> Status{};</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;}</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;Status validate_mm(<span class="keyword">const</span> ITensorInfo &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keyword">const</span> ITensorInfo &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, <span class="keyword">const</span> ITensorInfo *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3a77be8aebd8e00522b32061d46ccdbd">bias</a>, <span class="keyword">const</span> ITensorInfo &amp;output, <span class="keyword">const</span> FullyConnectedLayerInfo &amp;fc_info)</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;{</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    GEMMLowpOutputStageInfo gemmlowp_output_stage;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(construct_gemmlowp_output_stage(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, output, gemmlowp_output_stage));</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keyword">const</span> GEMMInfo &amp;gemm_info = GEMMInfo(<span class="keyword">false</span>,                           <span class="comment">// is_a_reshaped</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                                         <span class="keyword">false</span>,                           <span class="comment">// is_b_reshaped</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                                         <span class="keyword">true</span>,                            <span class="comment">// reshape_b_only_on_first_run</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                                         0,                               <span class="comment">// depth_output_gemm3d</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                                         <span class="keyword">false</span>,                           <span class="comment">// reinterpret_input_as_3d</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                                         fc_info.retain_internal_weights, <span class="comment">// retain_internal_weights</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                                         gemmlowp_output_stage,           <span class="comment">// gemmlowp_output_stage</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                                         fc_info.fp_mixed_precision,      <span class="comment">// fp_mixed_precision</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                                         <span class="keyword">true</span>,                            <span class="comment">// broadcast_bias</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                                         ActivationLayerInfo());          <span class="comment">// activation_info</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute.xhtml#a14f46283f316e7f0fad301d5c1507e9f">is_data_type_quantized_asymmetric</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.data_type()))</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    {</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        <span class="keyword">const</span> UniformQuantizationInfo iq_info = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.quantization_info().uniform();</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <span class="keyword">const</span> UniformQuantizationInfo wq_info = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>.quantization_info().uniform();</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <span class="comment">// Since we need negative offsets for computing convolution, we need to change QuantizationInfo()</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        <span class="comment">// Extract and negate input and weights offset</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        <span class="keyword">const</span> QuantizationInfo input_quantization_info(iq_info.scale, -iq_info.offset);</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        <span class="keyword">const</span> QuantizationInfo <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#afff44a0110c3767f144c9cb8e6f81625">weights_quantization_info</a>(wq_info.scale, -wq_info.offset);</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        <span class="comment">// Validate gemmlowp function</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_multiply_core.xhtml#a8c3cf2d65afb288e39909171ada19566">CLGEMMLowpMatrixMultiplyCore::validate</a>(&amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.clone()-&gt;set_quantization_info(input_quantization_info),</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                                                                           &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>.clone()-&gt;set_quantization_info(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#afff44a0110c3767f144c9cb8e6f81625">weights_quantization_info</a>),</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                                                                           <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3a77be8aebd8e00522b32061d46ccdbd">bias</a>,</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                                                                           &amp;output,</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                                                                           gemm_info));</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    }</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    {</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml#a3493ba7d1f2057740ff5931fa00a44ac">CLGEMM::validate</a>(&amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3a77be8aebd8e00522b32061d46ccdbd">bias</a>, &amp;output, 1.f, 1.f, gemm_info));</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    }</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keywordflow">return</span> Status{};</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;}</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;} <span class="comment">// namespace</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_fully_connected_layer_reshape_weights.xhtml#a074e10cfb217e657b9e81adeca2abc68">  126</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_fully_connected_layer_reshape_weights.xhtml#a074e10cfb217e657b9e81adeca2abc68">CLFullyConnectedLayerReshapeWeights::configure</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *output)</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;{</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keyword">auto</span> k = arm_compute::support::cpp14::make_unique&lt;CLTransposeKernel&gt;();</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    k-&gt;configure(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    _kernel = std::move(k);</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;}</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div><div class="line"><a name="l00133"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_fully_connected_layer_reshape_weights.xhtml#a968b23a6ef327fcfb5b99d58e3fbe883">  133</a></span>&#160;<a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="classarm__compute_1_1_c_l_fully_connected_layer_reshape_weights.xhtml#a968b23a6ef327fcfb5b99d58e3fbe883">CLFullyConnectedLayerReshapeWeights::validate</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *output)</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;{</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_c_l_transpose_kernel.xhtml#a968b23a6ef327fcfb5b99d58e3fbe883">CLTransposeKernel::validate</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output);</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;}</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_fully_connected_layer.xhtml#a926e2d274f6c3597c77f7a0b9c4c2ef1">  138</a></span>&#160;<a class="code" href="classarm__compute_1_1_c_l_fully_connected_layer.xhtml#a926e2d274f6c3597c77f7a0b9c4c2ef1">CLFullyConnectedLayer::CLFullyConnectedLayer</a>(std::shared_ptr&lt;IMemoryManager&gt; memory_manager, <a class="code" href="classarm__compute_1_1_i_weights_manager.xhtml">IWeightsManager</a> *weights_manager)</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    : _memory_group(memory_manager), _weights_manager(weights_manager), _convert_weights(), _convert_weights_managed(), _reshape_weights_managed_function(), _flatten_layer(), _reshape_weights_function(),</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;      _mm_gemm(memory_manager, weights_manager), _mm_gemmlowp(memory_manager), _flatten_output(), _converted_weights_output(), _reshape_weights_output(), _are_weights_converted(true),</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;      _are_weights_reshaped(true), _is_fc_after_conv(true), _is_quantized(false), _is_prepared(false), _original_weights(nullptr)</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;{</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;}</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="keywordtype">void</span> CLFullyConnectedLayer::configure_mm(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3a77be8aebd8e00522b32061d46ccdbd">bias</a>, <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *output, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_fully_connected_layer_info.xhtml">FullyConnectedLayerInfo</a> &amp;fc_info)</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;{</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <a class="code" href="structarm__compute_1_1_g_e_m_m_lowp_output_stage_info.xhtml">GEMMLowpOutputStageInfo</a> gemmlowp_output_stage;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    construct_gemmlowp_output_stage(*<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info(), *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>(), *output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), gemmlowp_output_stage);</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_g_e_m_m_info.xhtml">GEMMInfo</a> &amp;gemm_info = <a class="code" href="classarm__compute_1_1_g_e_m_m_info.xhtml">GEMMInfo</a>(<span class="keyword">false</span>,                           <span class="comment">// is_a_reshaped</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                                         <span class="keyword">false</span>,                           <span class="comment">// is_b_reshaped</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                                         <span class="keyword">true</span>,                            <span class="comment">// reshape_b_only_on_first_run</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                                         0,                               <span class="comment">// depth_output_gemm3d</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                                         <span class="keyword">false</span>,                           <span class="comment">// reinterpret_input_as_3d</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                                         fc_info.<a class="code" href="structarm__compute_1_1_fully_connected_layer_info.xhtml#a4f87c5060cca01305f94a9d2f10e9d83">retain_internal_weights</a>, <span class="comment">// retain_internal_weights</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                                         gemmlowp_output_stage,           <span class="comment">// gemmlowp_output_stage</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                                         fc_info.<a class="code" href="structarm__compute_1_1_fully_connected_layer_info.xhtml#a31ff0f4153b53a0abfc96250b18b15f1">fp_mixed_precision</a>,      <span class="comment">// fp_mixed_precision</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                                         <span class="keyword">true</span>,                            <span class="comment">// broadcast_bias</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                                         <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>());          <span class="comment">// activation_info</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keywordflow">if</span>(_is_quantized)</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    {</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        <span class="comment">// Since we need negative offsets for computing convolution, we need to change QuantizationInfo()</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <span class="comment">// Extract and negate input and weights offset</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> input_quantization_info   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;quantization_info();</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#afff44a0110c3767f144c9cb8e6f81625">weights_quantization_info</a> = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#ac74736e3863207232a23b7181c1d0f44">quantization_info</a>();</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;set_quantization_info(<a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>(input_quantization_info.<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">uniform</a>().<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a>, -input_quantization_info.<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">uniform</a>().<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a97bd6c077f3c7769f575b82988b9b668">offset</a>));</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a78839e7861ba8ffed52ca55da2745761">set_quantization_info</a>(<a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#afff44a0110c3767f144c9cb8e6f81625">weights_quantization_info</a>.<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">uniform</a>().<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a>, -<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#afff44a0110c3767f144c9cb8e6f81625">weights_quantization_info</a>.<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">uniform</a>().<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a97bd6c077f3c7769f575b82988b9b668">offset</a>));</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        <span class="comment">// Configure gemmlowp function</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        _mm_gemmlowp.<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_multiply_core.xhtml#a0ae54876c8c3394f2e207f6b884f2b58">configure</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3a77be8aebd8e00522b32061d46ccdbd">bias</a>, output, gemm_info);</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        <span class="comment">// Revert back QuantizatioInfo as input and weights could be used in other fully connected layers</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;set_quantization_info(input_quantization_info);</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a78839e7861ba8ffed52ca55da2745761">set_quantization_info</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#afff44a0110c3767f144c9cb8e6f81625">weights_quantization_info</a>);</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    }</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    {</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <span class="comment">// Configure matrix multiply kernel</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        _mm_gemm.<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml#a34e7b882208ff6720bad2e4f2c7565c5">configure</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3a77be8aebd8e00522b32061d46ccdbd">bias</a>, output, 1.f, 1.f, gemm_info);</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    }</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;}</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="keywordtype">void</span> CLFullyConnectedLayer::configure_conv_fc(<span class="keyword">const</span> ICLTensor *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keyword">const</span> ICLTensor *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, <span class="keyword">const</span> ICLTensor *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3a77be8aebd8e00522b32061d46ccdbd">bias</a>, ICLTensor *output, <span class="keyword">const</span> FullyConnectedLayerInfo &amp;fc_info)</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;{</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>((<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a8813441b655b97c00139c6a5a6390e97">dimension</a>(1) != (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;dimension(0) * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;dimension(1) * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;dimension(2))));</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="comment">// If the fully connected layer is called after a convolution layer, the input tensor must be linearized</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="comment">// Initialize output tensor for flatten</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    TensorShape shape_flatten = <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a83efb6708574e67d13965bcd2059ad75">compute_flatten_shape</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info());</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    _flatten_output.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#af36143939a43fa124312e395975091ed">init</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;clone()-&gt;set_is_resizable(<span class="keyword">true</span>).reset_padding().set_tensor_shape(shape_flatten).set_data_layout(<a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>));</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="comment">// Configure flatten kernel</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    _memory_group.<a class="code" href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">manage</a>(&amp;_flatten_output);</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    _flatten_layer.<a class="code" href="classarm__compute_1_1_c_l_flatten_layer.xhtml#a074e10cfb217e657b9e81adeca2abc68">configure</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, &amp;_flatten_output);</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="comment">// Configure matrix multiply kernel</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    configure_mm(&amp;_flatten_output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3a77be8aebd8e00522b32061d46ccdbd">bias</a>, output, fc_info);</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <span class="comment">// Allocate the output tensor for flatten once all the configure methods have been called</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    _flatten_output.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;}</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="keywordtype">void</span> CLFullyConnectedLayer::configure_fc_fc(<span class="keyword">const</span> ICLTensor *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keyword">const</span> ICLTensor *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, <span class="keyword">const</span> ICLTensor *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3a77be8aebd8e00522b32061d46ccdbd">bias</a>, ICLTensor *output, <span class="keyword">const</span> FullyConnectedLayerInfo &amp;fc_info)</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;{</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;dimension(0) != <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a8813441b655b97c00139c6a5a6390e97">dimension</a>(1));</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="comment">// Configure matrix multiply kernel</span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    configure_mm(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3a77be8aebd8e00522b32061d46ccdbd">bias</a>, output, fc_info);</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;}</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div><div class="line"><a name="l00213"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_fully_connected_layer.xhtml#ab205e8e07c4eff3197d0c8cc85a4488d">  213</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_fully_connected_layer.xhtml#ab205e8e07c4eff3197d0c8cc85a4488d">CLFullyConnectedLayer::configure</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *biases, <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *output,</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                                      <a class="code" href="structarm__compute_1_1_fully_connected_layer_info.xhtml">FullyConnectedLayerInfo</a> fc_info)</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;{</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <a class="code" href="_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, output);</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <span class="comment">// Perform validate step</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <a class="code" href="_error_8h.xhtml#a938dcd406ce611ef5345ad2531cdb948">ARM_COMPUTE_ERROR_THROW_ON</a>(<a class="code" href="classarm__compute_1_1_c_l_fully_connected_layer.xhtml#a8da875051f2d75a497fb2de9cdd2e6cb">CLFullyConnectedLayer::validate</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info(),</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                                                               <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>(),</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                                                               biases != <span class="keyword">nullptr</span> ? biases-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>() : <span class="keyword">nullptr</span>,</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                                                               output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(),</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                                                               fc_info));</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    _are_weights_converted = <span class="keyword">true</span>;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    _are_weights_reshaped  = fc_info.<a class="code" href="structarm__compute_1_1_fully_connected_layer_info.xhtml#a11851649b6a7cd12ae25cf72b769cfb9">transpose_weights</a> ? fc_info.<a class="code" href="structarm__compute_1_1_fully_connected_layer_info.xhtml#a146a7be9d813ad80abb72a0bf6566cbc">are_weights_reshaped</a> : <span class="keyword">true</span>;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    _is_fc_after_conv      = <span class="keyword">true</span>;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    _is_quantized          = <a class="code" href="namespacearm__compute.xhtml#a14f46283f316e7f0fad301d5c1507e9f">is_data_type_quantized_asymmetric</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type());</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    _is_prepared           = fc_info.<a class="code" href="structarm__compute_1_1_fully_connected_layer_info.xhtml#a4f87c5060cca01305f94a9d2f10e9d83">retain_internal_weights</a>;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    _original_weights      = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keywordflow">if</span>(_weights_manager)</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    {</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        _weights_manager-&gt;<a class="code" href="classarm__compute_1_1_i_weights_manager.xhtml#a18bd2d54155972d4d740fbba8337a27e">manage</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>);</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    }</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *weights_to_use = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <span class="comment">// With the Fully Connected layer we can have 4 different cases:</span></div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="comment">//  1) Convolution layer -&gt; Fully Connected layer without batches</span></div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="comment">//  2) Fully Connected layer -&gt; Fully Connected layer without batches</span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <span class="comment">//  3) Convolution layer -&gt; Fully Connected layer with batches</span></div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="comment">//  4) Fully Connected layer -&gt; Fully Connected layer with batches</span></div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <span class="comment">// Check if we have a fully connected layer with batches</span></div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_batched_fc_layer = output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(1) &gt; 1;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <span class="keywordflow">if</span>(is_batched_fc_layer)</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    {</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        _is_fc_after_conv = (<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">TensorShape::num_max_dimensions</a> &gt;= 4) &amp;&amp; (std::equal(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape().cbegin() + 3,</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                                                                                  <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape().cend(),</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                                                                                  output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a8c9efb4e1ad142d58d65af400f20217d">cbegin</a>() + 1));</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    }</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    {</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        _is_fc_after_conv = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;num_dimensions() &gt; 1;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    }</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="comment">// Reshape weights if needed</span></div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="keywordflow">if</span>(!_are_weights_reshaped)</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    {</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        <span class="keywordflow">if</span>(_weights_manager &amp;&amp; _weights_manager-&gt;<a class="code" href="classarm__compute_1_1_i_weights_manager.xhtml#a386f2182d06bad88bffebd18ace91f46">are_weights_managed</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>))</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        {</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;            _reshape_weights_managed_function.<a class="code" href="classarm__compute_1_1weights__transformations_1_1_c_l_fully_connected_layer_reshape_weights_managed.xhtml#afbdbe01b0797281ec427df9b5a8844d7">configure</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>);</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;            weights_to_use = utils::cast::polymorphic_downcast&lt;ICLTensor *&gt;(_weights_manager-&gt;<a class="code" href="classarm__compute_1_1_i_weights_manager.xhtml#a9b3e3aff065fafe490a5e190bf530ada">acquire</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, &amp;_reshape_weights_managed_function));</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        }</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        {</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;            <span class="comment">// Reshape the weights</span></div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;            _reshape_weights_function.<a class="code" href="classarm__compute_1_1_c_l_fully_connected_layer_reshape_weights.xhtml#a074e10cfb217e657b9e81adeca2abc68">configure</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, &amp;_reshape_weights_output);</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;            weights_to_use = &amp;_reshape_weights_output;</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        }</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    }</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    <span class="comment">// Convert weights if needed</span></div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    <span class="keywordflow">if</span>(_is_fc_after_conv &amp;&amp; (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_layout() != fc_info.<a class="code" href="structarm__compute_1_1_fully_connected_layer_info.xhtml#a89d0ed86875fd3fb395899187c84bc2f">weights_trained_layout</a>))</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    {</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        <span class="keywordflow">if</span>(_weights_manager &amp;&amp; _weights_manager-&gt;<a class="code" href="classarm__compute_1_1_i_weights_manager.xhtml#a386f2182d06bad88bffebd18ace91f46">are_weights_managed</a>(weights_to_use))</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        {</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;            _convert_weights_managed.<a class="code" href="classarm__compute_1_1weights__transformations_1_1_c_l_convert_fully_connected_weights_managed.xhtml#ab214d16c6d37a8d8c55171570aea60dd">configure</a>(weights_to_use,</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;                                               <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape(),</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;                                               fc_info.<a class="code" href="structarm__compute_1_1_fully_connected_layer_info.xhtml#a89d0ed86875fd3fb395899187c84bc2f">weights_trained_layout</a>);</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;            weights_to_use = utils::cast::polymorphic_downcast&lt;ICLTensor *&gt;(_weights_manager-&gt;<a class="code" href="classarm__compute_1_1_i_weights_manager.xhtml#a9b3e3aff065fafe490a5e190bf530ada">acquire</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, &amp;_convert_weights_managed));</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        }</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;        {</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;            <span class="comment">// Convert weights</span></div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;            _convert_weights.<a class="code" href="classarm__compute_1_1_c_l_convert_fully_connected_weights.xhtml#a52184fd44c124af2e50bdb1649781782">configure</a>(weights_to_use,</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                                       &amp;_converted_weights_output,</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                                       <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape(),</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                                       fc_info.<a class="code" href="structarm__compute_1_1_fully_connected_layer_info.xhtml#a89d0ed86875fd3fb395899187c84bc2f">weights_trained_layout</a>);</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;            weights_to_use = &amp;_converted_weights_output;</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;        }</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        _are_weights_converted = <span class="keyword">false</span>;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    }</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    <span class="keywordflow">if</span>(_is_fc_after_conv)</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    {</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        <span class="comment">// Fully Connected layer after a Convolution Layer without batches</span></div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        configure_conv_fc(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, weights_to_use, biases, output, fc_info);</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    }</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    {</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;        <span class="comment">// Fully Connected layer after a Fully Connected Layer without batches</span></div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        configure_fc_fc(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, weights_to_use, biases, output, fc_info);</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    }</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;}</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;</div><div class="line"><a name="l00309"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_fully_connected_layer.xhtml#a8da875051f2d75a497fb2de9cdd2e6cb">  309</a></span>&#160;<a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="classarm__compute_1_1_c_l_fully_connected_layer.xhtml#a8da875051f2d75a497fb2de9cdd2e6cb">CLFullyConnectedLayer::validate</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *biases, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *output,</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                                       <a class="code" href="structarm__compute_1_1_fully_connected_layer_info.xhtml">FullyConnectedLayerInfo</a> fc_info)</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;{</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    <a class="code" href="_validate_8h.xhtml#aff911654521523937ff24372a870b89f">ARM_COMPUTE_RETURN_ERROR_ON_NULLPTR</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, output);</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    <a class="code" href="_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, 1, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">DataType::QASYMM8_SIGNED</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">DataType::F16</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>);</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    <a class="code" href="_validate_8h.xhtml#a8f3ff7da485ff7e75dab07baadf5b4bd">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_TYPES</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, output);</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;num_dimensions() &gt; 2);</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    <span class="keywordtype">bool</span> weights_reshaped = fc_info.<a class="code" href="structarm__compute_1_1_fully_connected_layer_info.xhtml#a11851649b6a7cd12ae25cf72b769cfb9">transpose_weights</a> ? fc_info.<a class="code" href="structarm__compute_1_1_fully_connected_layer_info.xhtml#a146a7be9d813ad80abb72a0bf6566cbc">are_weights_reshaped</a> : <span class="keyword">true</span>;</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    <span class="keywordtype">bool</span> is_fc_after_conv = <span class="keyword">true</span>;</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;flatten_input     = <a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;clone()-&gt;set_is_resizable(<span class="keyword">true</span>).reset_padding().set_tensor_shape(<a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a83efb6708574e67d13965bcd2059ad75">compute_flatten_shape</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>)).set_data_layout(<a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>));</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;reshaped_weights  = <a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;clone()-&gt;set_is_resizable(<span class="keyword">true</span>).reset_padding().set_tensor_shape(<a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a69cb11b5b37f94a6bea9eaad9d13cccf">compute_transposed_shape</a>(*<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>)));</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;converted_weights = weights_reshaped ? <a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;clone()-&gt;set_is_resizable(<span class="keyword">true</span>).reset_padding()) : <a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>(*reshaped_weights.clone());</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    <span class="comment">// With the Fully Connected layer we can have 4 different cases:</span></div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    <span class="comment">//  1) Convolution layer -&gt; Fully Connected layer without batches</span></div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    <span class="comment">//  2) Fully Connected layer -&gt; Fully Connected layer without batches</span></div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    <span class="comment">//  3) Convolution layer -&gt; Fully Connected layer with batches</span></div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    <span class="comment">//  4) Fully Connected layer -&gt; Fully Connected layer with batches</span></div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input_to_use   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>;</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *weights_to_use = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>;</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    <span class="comment">// Check if we have a fully connected layer with batches</span></div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_batched_fc_layer = output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(1) &gt; 1;</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    <span class="keywordflow">if</span>(is_batched_fc_layer)</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    {</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;        is_fc_after_conv = (<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">TensorShape::num_max_dimensions</a> &gt;= 4) &amp;&amp; (std::equal(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;tensor_shape().cbegin() + 3,</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;                                                                                 <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;tensor_shape().cend(),</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;                                                                                 output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a8c9efb4e1ad142d58d65af400f20217d">cbegin</a>() + 1));</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    }</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    {</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;        is_fc_after_conv = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;num_dimensions() &gt; 1;</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    }</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    <span class="keywordflow">if</span>(!weights_reshaped)</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    {</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        <span class="comment">// Validate reshape weights kernel</span></div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_fully_connected_layer_reshape_weights.xhtml#a968b23a6ef327fcfb5b99d58e3fbe883">CLFullyConnectedLayerReshapeWeights::validate</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, &amp;reshaped_weights));</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;        weights_to_use = &amp;reshaped_weights;</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    }</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    <span class="keywordflow">if</span>(is_fc_after_conv &amp;&amp; (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;data_layout() != fc_info.<a class="code" href="structarm__compute_1_1_fully_connected_layer_info.xhtml#a89d0ed86875fd3fb395899187c84bc2f">weights_trained_layout</a>))</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    {</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;        <span class="comment">// Validate convert weights kernel</span></div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_convert_fully_connected_weights.xhtml#a01b81c1c60fd95dc360fd7ad680f114b">CLConvertFullyConnectedWeights::validate</a>(weights_to_use,</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                                                                             &amp;converted_weights,</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;                                                                             <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;tensor_shape(),</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;                                                                             fc_info.<a class="code" href="structarm__compute_1_1_fully_connected_layer_info.xhtml#a89d0ed86875fd3fb395899187c84bc2f">weights_trained_layout</a>));</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;        weights_to_use = &amp;converted_weights;</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    }</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    <span class="keywordflow">if</span>(is_fc_after_conv)</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    {</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;        <span class="comment">// Fully Connected layer after a Convolution Layer without batches</span></div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;        <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>((weights_to_use-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(1) != (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;dimension(0) * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;dimension(1) * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;dimension(2))));</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;        <span class="comment">// Validate flatten kernel</span></div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_flatten_layer.xhtml#a968b23a6ef327fcfb5b99d58e3fbe883">CLFlattenLayer::validate</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, &amp;flatten_input));</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;        input_to_use = &amp;flatten_input;</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    }</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    {</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;        <span class="comment">// Fully Connected layer after a Fully Connected Layer without batches</span></div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;        <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;dimension(0) != weights_to_use-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(1));</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    }</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    <span class="comment">// Validate matrix multiply kernel</span></div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(validate_mm(*input_to_use, *weights_to_use, biases, *output, fc_info));</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a>{};</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;}</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;</div><div class="line"><a name="l00384"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_fully_connected_layer.xhtml#ad1717410afd0be936c6213a63c8005fb">  384</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_fully_connected_layer.xhtml#ad1717410afd0be936c6213a63c8005fb">CLFullyConnectedLayer::run</a>()</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;{</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_fully_connected_layer.xhtml#aa9b93ef660fc3c5b4b19d3fc7b891b77">prepare</a>();</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    <a class="code" href="classarm__compute_1_1_memory_group_resource_scope.xhtml">MemoryGroupResourceScope</a> scope_mg(_memory_group);</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    <span class="comment">// Linearize input if it comes from a convolutional layer</span></div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    <span class="keywordflow">if</span>(_is_fc_after_conv)</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    {</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;        _flatten_layer.<a class="code" href="classarm__compute_1_1_i_c_l_simple_function.xhtml#a92fe532c342ae2b07956a65520c05362">run</a>();</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    }</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    <span class="comment">// Run matrix multiply</span></div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    <span class="keywordflow">if</span>(_is_quantized)</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    {</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;        _mm_gemmlowp.<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_multiply_core.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    }</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    {</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;        _mm_gemm.<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;    }</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;}</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;</div><div class="line"><a name="l00407"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_fully_connected_layer.xhtml#aa9b93ef660fc3c5b4b19d3fc7b891b77">  407</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_fully_connected_layer.xhtml#aa9b93ef660fc3c5b4b19d3fc7b891b77">CLFullyConnectedLayer::prepare</a>()</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;{</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    <span class="keywordflow">if</span>(!_is_prepared)</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    {</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;        <span class="keywordflow">if</span>(!_weights_manager)</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;        {</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;            <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!_original_weights-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a209ea2ddfdfa80703799c92da8beb643">is_used</a>());</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;        }</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;        <span class="keyword">auto</span> release_unused = [](<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a> * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>)</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;        {</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;            <span class="keywordflow">if</span>(!<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>-&gt;is_used())</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;            {</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;                <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a398a2582c746d28fc125487a44c9ed74">queue</a>().finish();</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;                <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>-&gt;allocator()-&gt;free();</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;            }</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;        };</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;        <span class="comment">// Pointer to current weights</span></div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *cur_weights = _original_weights;</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;        <span class="comment">// Reshape of the weights if needed (happens only once)</span></div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;        <span class="keywordflow">if</span>(!_are_weights_reshaped)</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;        {</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;            <span class="keywordflow">if</span>(_weights_manager &amp;&amp; _weights_manager-&gt;<a class="code" href="classarm__compute_1_1_i_weights_manager.xhtml#a386f2182d06bad88bffebd18ace91f46">are_weights_managed</a>(_original_weights))</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;            {</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;                cur_weights = utils::cast::polymorphic_downcast&lt;ICLTensor *&gt;(_weights_manager-&gt;<a class="code" href="classarm__compute_1_1_i_weights_manager.xhtml#a73808ac61e51d72c7d6349d6d51dcf37">run</a>(cur_weights, &amp;_reshape_weights_managed_function));</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;            }</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;            {</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;                <span class="comment">// Run reshape weights kernel and mark weights as unused</span></div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;                _reshape_weights_output.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;                _reshape_weights_function.<a class="code" href="classarm__compute_1_1_i_c_l_simple_function.xhtml#a92fe532c342ae2b07956a65520c05362">run</a>();</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;                cur_weights-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a9bc00234de9adf8c99a21eb1d7d494c2">mark_as_unused</a>();</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;                cur_weights = &amp;_reshape_weights_output;</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;            }</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;            _are_weights_reshaped = <span class="keyword">true</span>;</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;        }</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;        <span class="comment">// Convert weights if needed (happens only once)</span></div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;        <span class="keywordflow">if</span>(!_are_weights_converted)</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;        {</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;            <span class="keywordflow">if</span>(_weights_manager &amp;&amp; _weights_manager-&gt;<a class="code" href="classarm__compute_1_1_i_weights_manager.xhtml#a386f2182d06bad88bffebd18ace91f46">are_weights_managed</a>(cur_weights))</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;            {</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;                _weights_manager-&gt;<a class="code" href="classarm__compute_1_1_i_weights_manager.xhtml#a73808ac61e51d72c7d6349d6d51dcf37">run</a>(cur_weights, &amp;_convert_weights_managed);</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;            }</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;            {</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;                _converted_weights_output.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;                _convert_weights.<a class="code" href="classarm__compute_1_1_i_c_l_simple_function.xhtml#a92fe532c342ae2b07956a65520c05362">run</a>();</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;                cur_weights-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a9bc00234de9adf8c99a21eb1d7d494c2">mark_as_unused</a>();</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;            }</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;            _are_weights_converted = <span class="keyword">true</span>;</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;        }</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;        <span class="comment">// Release reshaped weights if unused</span></div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;        release_unused(&amp;_reshape_weights_output);</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;        <span class="comment">// Prepare GEMM prepare and release unused weights</span></div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;        <span class="keywordflow">if</span>(!_is_quantized)</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;        {</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;            _mm_gemm.<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml#aa9b93ef660fc3c5b4b19d3fc7b891b77">prepare</a>();</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;        }</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;        <span class="comment">// Release converted weights if unused</span></div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;        release_unused(&amp;_reshape_weights_output);</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;        release_unused(&amp;_converted_weights_output);</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;        _is_prepared = <span class="keyword">true</span>;</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;    }</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;}</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="ttc" id="classarm__compute_1_1_c_l_flatten_layer_xhtml_a968b23a6ef327fcfb5b99d58e3fbe883"><div class="ttname"><a href="classarm__compute_1_1_c_l_flatten_layer.xhtml#a968b23a6ef327fcfb5b99d58e3fbe883">arm_compute::CLFlattenLayer::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *input, const ITensorInfo *output)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of CLFlattenLayer.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_flatten_layer_8cpp_source.xhtml#l00040">CLFlattenLayer.cpp:40</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a1a367830ae09bf6138df822888ec1d71"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">arm_compute::test::validation::w</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; w</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00156">DFT.cpp:156</a></div></div>
<div class="ttc" id="_toolchain_support_8h_xhtml"><div class="ttname"><a href="_toolchain_support_8h.xhtml">ToolchainSupport.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5558e2cc22f7f4771653d992c8ad8864ab300cae200f67712c1eb9234e28158ca"><div class="ttname"><a href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864ab300cae200f67712c1eb9234e28158ca">arm_compute::GEMMLowpOutputStageType::QUANTIZE_DOWN_FIXEDPOINT</a></div><div class="ttdoc">Quantize using a fixed point multiplication.</div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_g_e_m_m_xhtml_aa9b93ef660fc3c5b4b19d3fc7b891b77"><div class="ttname"><a href="classarm__compute_1_1_c_l_g_e_m_m.xhtml#aa9b93ef660fc3c5b4b19d3fc7b891b77">arm_compute::CLGEMM::prepare</a></div><div class="ttdeci">void prepare() override</div><div class="ttdoc">Prepare the function for executing.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_g_e_m_m_8cpp_source.xhtml#l00720">CLGEMM.cpp:720</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_fully_connected_layer_xhtml_a926e2d274f6c3597c77f7a0b9c4c2ef1"><div class="ttname"><a href="classarm__compute_1_1_c_l_fully_connected_layer.xhtml#a926e2d274f6c3597c77f7a0b9c4c2ef1">arm_compute::CLFullyConnectedLayer::CLFullyConnectedLayer</a></div><div class="ttdeci">CLFullyConnectedLayer(std::shared_ptr&lt; IMemoryManager &gt; memory_manager=nullptr, IWeightsManager *weights_manager=nullptr)</div><div class="ttdoc">Constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_fully_connected_layer_8cpp_source.xhtml#l00138">CLFullyConnectedLayer.cpp:138</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tensor_xhtml_ad45f0c01a0713dfb6bd7232c7f396fc4"><div class="ttname"><a href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">arm_compute::CLTensor::info</a></div><div class="ttdeci">TensorInfo * info() const override</div><div class="ttdoc">Interface to be implemented by the child class to return the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tensor_8cpp_source.xhtml#l00041">CLTensor.cpp:41</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_g_e_m_m_xhtml_ad1717410afd0be936c6213a63c8005fb"><div class="ttname"><a href="classarm__compute_1_1_c_l_g_e_m_m.xhtml#ad1717410afd0be936c6213a63c8005fb">arm_compute::CLGEMM::run</a></div><div class="ttdeci">void run() override</div><div class="ttdoc">Run the kernels contained in the function.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_g_e_m_m_8cpp_source.xhtml#l00639">CLGEMM.cpp:639</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a178f0d3d87f959e00a743328d95359d2"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">arm_compute::ITensorInfo::dimension</a></div><div class="ttdeci">virtual size_t dimension(size_t index) const =0</div><div class="ttdoc">Return the size of the requested dimension.</div></div>
<div class="ttc" id="structarm__compute_1_1_fully_connected_layer_info_xhtml_a4f87c5060cca01305f94a9d2f10e9d83"><div class="ttname"><a href="structarm__compute_1_1_fully_connected_layer_info.xhtml#a4f87c5060cca01305f94a9d2f10e9d83">arm_compute::FullyConnectedLayerInfo::retain_internal_weights</a></div><div class="ttdeci">bool retain_internal_weights</div><div class="ttdoc">Retain internal reshaped weights.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00808">Types.h:808</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a9b58d0eb9a2af8e6d7908695e1557d6c"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">arm_compute::CLScheduler::get</a></div><div class="ttdeci">static CLScheduler &amp; get()</div><div class="ttdoc">Access the scheduler singleton.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00099">CLScheduler.cpp:99</a></div></div>
<div class="ttc" id="_validate_8h_xhtml_a8f3ff7da485ff7e75dab07baadf5b4bd"><div class="ttname"><a href="_validate_8h.xhtml#a8f3ff7da485ff7e75dab07baadf5b4bd">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_TYPES</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_TYPES(...)</div><div class="ttdef"><b>Definition:</b> <a href="_validate_8h_source.xhtml#l00545">Validate.h:545</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1utils_1_1cast_xhtml"><div class="ttname"><a href="namespacearm__compute_1_1utils_1_1cast.xhtml">arm_compute::utils::cast</a></div><div class="ttdef"><b>Definition:</b> <a href="_cast_8h_source.xhtml#l00033">Cast.h:33</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a8a1e1c105f0bdaf37db408c7cfcb77a4"><div class="ttname"><a href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ON_ERROR(status)</div><div class="ttdoc">Checks if a status contains an error and returns it.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00204">Error.h:204</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml_a8813441b655b97c00139c6a5a6390e97"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#a8813441b655b97c00139c6a5a6390e97">arm_compute::TensorInfo::dimension</a></div><div class="ttdeci">size_t dimension(size_t index) const override</div><div class="ttdoc">Return the size of the requested dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00232">TensorInfo.h:232</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml_a209ea2ddfdfa80703799c92da8beb643"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml#a209ea2ddfdfa80703799c92da8beb643">arm_compute::ITensor::is_used</a></div><div class="ttdeci">bool is_used() const</div><div class="ttdoc">Flags if the tensor is used or not.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_8cpp_source.xhtml#l00162">ITensor.cpp:162</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml_ac74736e3863207232a23b7181c1d0f44"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#ac74736e3863207232a23b7181c1d0f44">arm_compute::TensorInfo::quantization_info</a></div><div class="ttdeci">QuantizationInfo quantization_info() const override</div><div class="ttdoc">Get the quantization settings (scale and offset) of the tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00311">TensorInfo.h:311</a></div></div>
<div class="ttc" id="_validate_8h_xhtml_ae7eed178dac535c6e727061b1f5bc6eb"><div class="ttname"><a href="_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN(t, c,...)</div><div class="ttdef"><b>Definition:</b> <a href="_validate_8h_source.xhtml#l00792">Validate.h:792</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::Format::F32</a></div><div class="ttdoc">1 channel, 1 F32 per channel</div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="classarm__compute_1_1weights__transformations_1_1_c_l_fully_connected_layer_reshape_weights_managed_xhtml_afbdbe01b0797281ec427df9b5a8844d7"><div class="ttname"><a href="classarm__compute_1_1weights__transformations_1_1_c_l_fully_connected_layer_reshape_weights_managed.xhtml#afbdbe01b0797281ec427df9b5a8844d7">arm_compute::weights_transformations::CLFullyConnectedLayerReshapeWeightsManaged::configure</a></div><div class="ttdeci">void configure(const ICLTensor *input)</div><div class="ttdoc">Configures the CLFullyConnectedLayerReshapeWeights function.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_fully_connected_layer_8h_source.xhtml#l00101">CLFullyConnectedLayer.h:101</a></div></div>
<div class="ttc" id="structarm__compute_1_1_fully_connected_layer_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_fully_connected_layer_info.xhtml">arm_compute::FullyConnectedLayerInfo</a></div><div class="ttdoc">Fully connected layer info.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00803">Types.h:803</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a></div><div class="ttdoc">Store the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_info_8h_source.xhtml#l00040">ITensorInfo.h:40</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tensor_xhtml_a4083de30daebd6bdee6b35d9c8262108"><div class="ttname"><a href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">arm_compute::CLTensor::allocator</a></div><div class="ttdeci">CLTensorAllocator * allocator()</div><div class="ttdoc">Return a pointer to the tensor's allocator.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tensor_8cpp_source.xhtml#l00061">CLTensor.cpp:61</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a938dcd406ce611ef5345ad2531cdb948"><div class="ttname"><a href="_error_8h.xhtml#a938dcd406ce611ef5345ad2531cdb948">ARM_COMPUTE_ERROR_THROW_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_THROW_ON(status)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00455">Error.h:455</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_multiply_core_xhtml_a0ae54876c8c3394f2e207f6b884f2b58"><div class="ttname"><a href="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_multiply_core.xhtml#a0ae54876c8c3394f2e207f6b884f2b58">arm_compute::CLGEMMLowpMatrixMultiplyCore::configure</a></div><div class="ttdeci">void configure(const ICLTensor *a, const ICLTensor *b, const ICLTensor *c, ICLTensor *output, const GEMMInfo &amp;gemm_info=GEMMInfo())</div><div class="ttdoc">Initialise the kernel's inputs, output.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_g_e_m_m_lowp_matrix_multiply_core_8cpp_source.xhtml#l00083">CLGEMMLowpMatrixMultiplyCore.cpp:83</a></div></div>
<div class="ttc" id="structarm__compute_1_1_uniform_quantization_info_xhtml_a1d28dec57cce925ad92342891bd71e7c"><div class="ttname"><a href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">arm_compute::UniformQuantizationInfo::scale</a></div><div class="ttdeci">float scale</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00064">QuantizationInfo.h:64</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_weights_manager_xhtml_a18bd2d54155972d4d740fbba8337a27e"><div class="ttname"><a href="classarm__compute_1_1_i_weights_manager.xhtml#a18bd2d54155972d4d740fbba8337a27e">arm_compute::IWeightsManager::manage</a></div><div class="ttdeci">void manage(const ITensor *weights, ITransformWeights *parent=nullptr)</div><div class="ttdoc">Start managing a weights tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_i_weights_manager_8cpp_source.xhtml#l00033">IWeightsManager.cpp:33</a></div></div>
<div class="ttc" id="classarm__compute_1_1_status_xhtml"><div class="ttname"><a href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a></div><div class="ttdoc">Status class.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00052">Error.h:52</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_multiply_core_xhtml_ad1717410afd0be936c6213a63c8005fb"><div class="ttname"><a href="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_multiply_core.xhtml#ad1717410afd0be936c6213a63c8005fb">arm_compute::CLGEMMLowpMatrixMultiplyCore::run</a></div><div class="ttdeci">void run() override</div><div class="ttdoc">Run the kernels contained in the function.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_g_e_m_m_lowp_matrix_multiply_core_8cpp_source.xhtml#l00440">CLGEMMLowpMatrixMultiplyCore.cpp:440</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a206d6e247e0957ac3dee45d27756fc25"><div class="ttname"><a href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true, an error is returned.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00296">Error.h:296</a></div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml">arm_compute::ActivationLayerInfo</a></div><div class="ttdoc">Activation Layer Information class.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01615">Types.h:1615</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_fully_connected_layer_xhtml_aa9b93ef660fc3c5b4b19d3fc7b891b77"><div class="ttname"><a href="classarm__compute_1_1_c_l_fully_connected_layer.xhtml#aa9b93ef660fc3c5b4b19d3fc7b891b77">arm_compute::CLFullyConnectedLayer::prepare</a></div><div class="ttdeci">void prepare() override</div><div class="ttdoc">Prepare the function for executing.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_fully_connected_layer_8cpp_source.xhtml#l00407">CLFullyConnectedLayer.cpp:407</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_allocator_xhtml_af36143939a43fa124312e395975091ed"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_allocator.xhtml#af36143939a43fa124312e395975091ed">arm_compute::ITensorAllocator::init</a></div><div class="ttdeci">void init(const TensorInfo &amp;input, size_t alignment=0)</div><div class="ttdoc">Initialize a tensor based on the passed TensorInfo.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_allocator_8cpp_source.xhtml#l00038">ITensorAllocator.cpp:38</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2020 ARM Limited.</div><div class="ttdef"><b>Definition:</b> <a href="00__introduction_8dox_source.xhtml#l00024">00_introduction.dox:24</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">arm_compute::Format::F16</a></div><div class="ttdoc">1 channel, 1 F16 per channel</div></div>
<div class="ttc" id="_size2_d_8h_xhtml"><div class="ttname"><a href="_size2_d_8h.xhtml">Size2D.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml_a78839e7861ba8ffed52ca55da2745761"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#a78839e7861ba8ffed52ca55da2745761">arm_compute::TensorInfo::set_quantization_info</a></div><div class="ttdeci">ITensorInfo &amp; set_quantization_info(const QuantizationInfo &amp;quantization_info) override</div><div class="ttdoc">Set the quantization settings (scale and offset) of the tensor.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_tensor_info_8cpp_source.xhtml#l00372">TensorInfo.cpp:372</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_a69cb11b5b37f94a6bea9eaad9d13cccf"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a69cb11b5b37f94a6bea9eaad9d13cccf">arm_compute::misc::shape_calculator::compute_transposed_shape</a></div><div class="ttdeci">TensorShape compute_transposed_shape(const ITensorInfo &amp;input)</div><div class="ttdoc">Calculate the transposed shape of a tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l00426">ShapeCalculator.h:426</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
<div class="ttc" id="_cast_8h_xhtml"><div class="ttname"><a href="_cast_8h.xhtml">Cast.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml_a9bc00234de9adf8c99a21eb1d7d494c2"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml#a9bc00234de9adf8c99a21eb1d7d494c2">arm_compute::ITensor::mark_as_unused</a></div><div class="ttdeci">void mark_as_unused() const</div><div class="ttdoc">Marks a tensor as unused.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_8cpp_source.xhtml#l00167">ITensor.cpp:167</a></div></div>
<div class="ttc" id="classarm__compute_1_1_memory_group_xhtml_a6fc0a49304c152c20a0f6df0634fb3cd"><div class="ttname"><a href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">arm_compute::MemoryGroup::manage</a></div><div class="ttdeci">void manage(IMemoryManageable *obj) override</div><div class="ttdoc">Sets a object to be managed by the given memory group.</div><div class="ttdef"><b>Definition:</b> <a href="_memory_group_8h_source.xhtml#l00079">MemoryGroup.h:79</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_weights_manager_xhtml_a386f2182d06bad88bffebd18ace91f46"><div class="ttname"><a href="classarm__compute_1_1_i_weights_manager.xhtml#a386f2182d06bad88bffebd18ace91f46">arm_compute::IWeightsManager::are_weights_managed</a></div><div class="ttdeci">bool are_weights_managed(const ITensor *weights)</div><div class="ttdoc">Check if the weights are managed.</div><div class="ttdef"><b>Definition:</b> <a href="_i_weights_manager_8cpp_source.xhtml#l00112">IWeightsManager.cpp:112</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_a83efb6708574e67d13965bcd2059ad75"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a83efb6708574e67d13965bcd2059ad75">arm_compute::misc::shape_calculator::compute_flatten_shape</a></div><div class="ttdeci">TensorShape compute_flatten_shape(const ITensorInfo *input)</div><div class="ttdoc">Calculate the flattened output shape of a tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l00587">ShapeCalculator.h:587</a></div></div>
<div class="ttc" id="_c_l_scheduler_8h_xhtml"><div class="ttname"><a href="_c_l_scheduler_8h.xhtml">CLScheduler.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_fully_connected_layer_xhtml_ab205e8e07c4eff3197d0c8cc85a4488d"><div class="ttname"><a href="classarm__compute_1_1_c_l_fully_connected_layer.xhtml#ab205e8e07c4eff3197d0c8cc85a4488d">arm_compute::CLFullyConnectedLayer::configure</a></div><div class="ttdeci">void configure(const ICLTensor *input, const ICLTensor *weights, const ICLTensor *biases, ICLTensor *output, FullyConnectedLayerInfo fc_info=FullyConnectedLayerInfo())</div><div class="ttdoc">Set the input and output tensors.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_fully_connected_layer_8cpp_source.xhtml#l00213">CLFullyConnectedLayer.cpp:213</a></div></div>
<div class="ttc" id="classarm__compute_1_1_quantization_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_quantization_info.xhtml">arm_compute::QuantizationInfo</a></div><div class="ttdoc">Quantization information.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00069">QuantizationInfo.h:69</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_multiply_core_xhtml_a8c3cf2d65afb288e39909171ada19566"><div class="ttname"><a href="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_multiply_core.xhtml#a8c3cf2d65afb288e39909171ada19566">arm_compute::CLGEMMLowpMatrixMultiplyCore::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *a, const ITensorInfo *b, const ITensorInfo *c, const ITensorInfo *output, const GEMMInfo &amp;gemm_info=GEMMInfo())</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of CLGEMMLowpMatrixMultiply...</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_g_e_m_m_lowp_matrix_multiply_core_8cpp_source.xhtml#l00274">CLGEMMLowpMatrixMultiplyCore.cpp:274</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_simple_function_xhtml_a92fe532c342ae2b07956a65520c05362"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_simple_function.xhtml#a92fe532c342ae2b07956a65520c05362">arm_compute::ICLSimpleFunction::run</a></div><div class="ttdeci">void run() override final</div><div class="ttdoc">Run the kernels contained in the function.</div><div class="ttdef"><b>Definition:</b> <a href="_i_c_l_simple_function_8cpp_source.xhtml#l00039">ICLSimpleFunction.cpp:39</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a7c66505457d00ece3aa4b34cab80757d"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">arm_compute::ITensorInfo::tensor_shape</a></div><div class="ttdeci">virtual const TensorShape &amp; tensor_shape() const =0</div><div class="ttdoc">Size for each dimension of the tensor.</div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_fully_connected_layer_xhtml_a8da875051f2d75a497fb2de9cdd2e6cb"><div class="ttname"><a href="classarm__compute_1_1_c_l_fully_connected_layer.xhtml#a8da875051f2d75a497fb2de9cdd2e6cb">arm_compute::CLFullyConnectedLayer::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *input, const ITensorInfo *weights, const ITensorInfo *biases, const ITensorInfo *output, FullyConnectedLayerInfo fc_info=FullyConnectedLayerInfo())</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of CLFullyConnectedLayer.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_fully_connected_layer_8cpp_source.xhtml#l00309">CLFullyConnectedLayer.cpp:309</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">arm_compute::DataType::QASYMM8</a></div><div class="ttdoc">quantized, asymmetric fixed-point 8-bit number unsigned</div></div>
<div class="ttc" id="structarm__compute_1_1_fully_connected_layer_info_xhtml_a146a7be9d813ad80abb72a0bf6566cbc"><div class="ttname"><a href="structarm__compute_1_1_fully_connected_layer_info.xhtml#a146a7be9d813ad80abb72a0bf6566cbc">arm_compute::FullyConnectedLayerInfo::are_weights_reshaped</a></div><div class="ttdeci">bool are_weights_reshaped</div><div class="ttdoc">Reshape the weights tensor if false.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00807">Types.h:807</a></div></div>
<div class="ttc" id="classarm__compute_1_1_quantization_info_xhtml_a706fc156bcd4c45441bcaad05884b57d"><div class="ttname"><a href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">arm_compute::QuantizationInfo::uniform</a></div><div class="ttdeci">UniformQuantizationInfo uniform() const</div><div class="ttdoc">Return per layer quantization info.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00148">QuantizationInfo.h:148</a></div></div>
<div class="ttc" id="_shape_calculator_8h_xhtml"><div class="ttname"><a href="_shape_calculator_8h.xhtml">ShapeCalculator.h</a></div></div>
<div class="ttc" id="structarm__compute_1_1_g_e_m_m_lowp_output_stage_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_g_e_m_m_lowp_output_stage_info.xhtml">arm_compute::GEMMLowpOutputStageInfo</a></div><div class="ttdoc">GEMMLowp output stage info.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01944">Types.h:1944</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml_a0e95dc1e53c361348314873b168ae237"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">arm_compute::ITensor::info</a></div><div class="ttdeci">virtual ITensorInfo * info() const =0</div><div class="ttdoc">Interface to be implemented by the child class to return the tensor's metadata.</div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_flatten_layer_xhtml_a074e10cfb217e657b9e81adeca2abc68"><div class="ttname"><a href="classarm__compute_1_1_c_l_flatten_layer.xhtml#a074e10cfb217e657b9e81adeca2abc68">arm_compute::CLFlattenLayer::configure</a></div><div class="ttdeci">void configure(const ICLTensor *input, ICLTensor *output)</div><div class="ttdoc">Initialise the kernel's input and output.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_flatten_layer_8cpp_source.xhtml#l00032">CLFlattenLayer.cpp:32</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_fully_connected_layer_xhtml_ad1717410afd0be936c6213a63c8005fb"><div class="ttname"><a href="classarm__compute_1_1_c_l_fully_connected_layer.xhtml#ad1717410afd0be936c6213a63c8005fb">arm_compute::CLFullyConnectedLayer::run</a></div><div class="ttdeci">void run() override</div><div class="ttdoc">Run the kernels contained in the function.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_fully_connected_layer_8cpp_source.xhtml#l00384">CLFullyConnectedLayer.cpp:384</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a3a77be8aebd8e00522b32061d46ccdbd"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a3a77be8aebd8e00522b32061d46ccdbd">arm_compute::test::validation::bias</a></div><div class="ttdeci">CLTensor bias</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00189">ConvolutionLayer.cpp:189</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a398a2582c746d28fc125487a44c9ed74"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a398a2582c746d28fc125487a44c9ed74">arm_compute::CLScheduler::queue</a></div><div class="ttdeci">cl::CommandQueue &amp; queue()</div><div class="ttdoc">Accessor for the associated CL command queue.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00041">CLScheduler.cpp:41</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_weights_manager_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_weights_manager.xhtml">arm_compute::IWeightsManager</a></div><div class="ttdoc">Weights manager interface to handle weights transformations.</div><div class="ttdef"><b>Definition:</b> <a href="_i_weights_manager_8h_source.xhtml#l00036">IWeightsManager.h:36</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">arm_compute::DataLayout::NCHW</a></div><div class="ttdoc">Num samples, channels, height, width.</div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_convert_fully_connected_weights_xhtml_a01b81c1c60fd95dc360fd7ad680f114b"><div class="ttname"><a href="classarm__compute_1_1_c_l_convert_fully_connected_weights.xhtml#a01b81c1c60fd95dc360fd7ad680f114b">arm_compute::CLConvertFullyConnectedWeights::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *input, const ITensorInfo *output, const TensorShape &amp;original_input_shape, DataLayout data_layout)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of CLConvertFullyConnectedW...</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_convert_fully_connected_weights_8cpp_source.xhtml#l00036">CLConvertFullyConnectedWeights.cpp:36</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a14f46283f316e7f0fad301d5c1507e9f"><div class="ttname"><a href="namespacearm__compute.xhtml#a14f46283f316e7f0fad301d5c1507e9f">arm_compute::is_data_type_quantized_asymmetric</a></div><div class="ttdeci">bool is_data_type_quantized_asymmetric(DataType dt)</div><div class="ttdoc">Check if a given data type is of asymmetric quantized type.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_utils_8h_source.xhtml#l01139">Utils.h:1139</a></div></div>
<div class="ttc" id="minmaxloc_8cl_xhtml_a538b4b63f40e7b12891774e03a4f0dec"><div class="ttname"><a href="minmaxloc_8cl.xhtml#a538b4b63f40e7b12891774e03a4f0dec">type_min</a></div><div class="ttdeci">__constant DATA_TYPE16 type_min</div><div class="ttdef"><b>Definition:</b> <a href="minmaxloc_8cl_source.xhtml#l00046">minmaxloc.cl:46</a></div></div>
<div class="ttc" id="_validate_8h_xhtml_aff911654521523937ff24372a870b89f"><div class="ttname"><a href="_validate_8h.xhtml#aff911654521523937ff24372a870b89f">ARM_COMPUTE_RETURN_ERROR_ON_NULLPTR</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_NULLPTR(...)</div><div class="ttdef"><b>Definition:</b> <a href="_validate_8h_source.xhtml#l00163">Validate.h:163</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tensor_allocator_xhtml_a6e509c2a177b0b29e9e2369535094dee"><div class="ttname"><a href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">arm_compute::CLTensorAllocator::allocate</a></div><div class="ttdeci">void allocate() override</div><div class="ttdoc">Allocate size specified by TensorInfo of OpenCL memory.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tensor_allocator_8cpp_source.xhtml#l00127">CLTensorAllocator.cpp:127</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_a8c9efb4e1ad142d58d65af400f20217d"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a8c9efb4e1ad142d58d65af400f20217d">arm_compute::Dimensions::cbegin</a></div><div class="ttdeci">std::array&lt; T, num_max_dimensions &gt;::const_iterator cbegin() const</div><div class="ttdoc">Returns a read-only (constant) iterator that points to the first element in the dimension array.</div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00210">Dimensions.h:210</a></div></div>
<div class="ttc" id="_validate_8h_xhtml_a921b705e9e3e0fe928928447869e62a5"><div class="ttname"><a href="_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_NULLPTR(...)</div><div class="ttdef"><b>Definition:</b> <a href="_validate_8h_source.xhtml#l00161">Validate.h:161</a></div></div>
<div class="ttc" id="classarm__compute_1_1_memory_group_resource_scope_xhtml"><div class="ttname"><a href="classarm__compute_1_1_memory_group_resource_scope.xhtml">arm_compute::MemoryGroupResourceScope</a></div><div class="ttdoc">Memory group resources scope handling class.</div><div class="ttdef"><b>Definition:</b> <a href="_i_memory_group_8h_source.xhtml#l00082">IMemoryGroup.h:82</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_tensor.xhtml">arm_compute::ICLTensor</a></div><div class="ttdoc">Interface for OpenCL tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_i_c_l_tensor_8h_source.xhtml#l00042">ICLTensor.h:42</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_g_e_m_m_xhtml_a34e7b882208ff6720bad2e4f2c7565c5"><div class="ttname"><a href="classarm__compute_1_1_c_l_g_e_m_m.xhtml#a34e7b882208ff6720bad2e4f2c7565c5">arm_compute::CLGEMM::configure</a></div><div class="ttdeci">void configure(const ICLTensor *a, const ICLTensor *b, const ICLTensor *c, ICLTensor *output, float alpha, float beta, const GEMMInfo &amp;gemm_info=GEMMInfo())</div><div class="ttdoc">Initialise the kernel's inputs and output.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_g_e_m_m_8cpp_source.xhtml#l00537">CLGEMM.cpp:537</a></div></div>
<div class="ttc" id="_c_l_fully_connected_layer_8h_xhtml"><div class="ttname"><a href="_c_l_fully_connected_layer_8h.xhtml">CLFullyConnectedLayer.h</a></div></div>
<div class="ttc" id="structarm__compute_1_1_fully_connected_layer_info_xhtml_a89d0ed86875fd3fb395899187c84bc2f"><div class="ttname"><a href="structarm__compute_1_1_fully_connected_layer_info.xhtml#a89d0ed86875fd3fb395899187c84bc2f">arm_compute::FullyConnectedLayerInfo::weights_trained_layout</a></div><div class="ttdeci">DataLayout weights_trained_layout</div><div class="ttdoc">Layout that the weights have been trained with.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00805">Types.h:805</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_convert_fully_connected_weights_xhtml_a52184fd44c124af2e50bdb1649781782"><div class="ttname"><a href="classarm__compute_1_1_c_l_convert_fully_connected_weights.xhtml#a52184fd44c124af2e50bdb1649781782">arm_compute::CLConvertFullyConnectedWeights::configure</a></div><div class="ttdeci">void configure(const ICLTensor *input, ICLTensor *output, const TensorShape &amp;original_input_shape, DataLayout data_layout)</div><div class="ttdoc">Initialize the function.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_convert_fully_connected_weights_8cpp_source.xhtml#l00028">CLConvertFullyConnectedWeights.cpp:28</a></div></div>
<div class="ttc" id="structarm__compute_1_1_uniform_quantization_info_xhtml_a97bd6c077f3c7769f575b82988b9b668"><div class="ttname"><a href="structarm__compute_1_1_uniform_quantization_info.xhtml#a97bd6c077f3c7769f575b82988b9b668">arm_compute::UniformQuantizationInfo::offset</a></div><div class="ttdeci">int32_t offset</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00065">QuantizationInfo.h:65</a></div></div>
<div class="ttc" id="structarm__compute_1_1_fully_connected_layer_info_xhtml_a31ff0f4153b53a0abfc96250b18b15f1"><div class="ttname"><a href="structarm__compute_1_1_fully_connected_layer_info.xhtml#a31ff0f4153b53a0abfc96250b18b15f1">arm_compute::FullyConnectedLayerInfo::fp_mixed_precision</a></div><div class="ttdeci">bool fp_mixed_precision</div><div class="ttdoc">Use wider accumulators (32 bit instead of 16 for FP16) to improve accuracy.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00809">Types.h:809</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_fully_connected_layer_reshape_weights_xhtml_a074e10cfb217e657b9e81adeca2abc68"><div class="ttname"><a href="classarm__compute_1_1_c_l_fully_connected_layer_reshape_weights.xhtml#a074e10cfb217e657b9e81adeca2abc68">arm_compute::CLFullyConnectedLayerReshapeWeights::configure</a></div><div class="ttdeci">void configure(const ICLTensor *input, ICLTensor *output)</div><div class="ttdoc">Set the input and output tensors.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_fully_connected_layer_8cpp_source.xhtml#l00126">CLFullyConnectedLayer.cpp:126</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1quantization_xhtml_a63fdf412c27b0151bd4495c64cc112da"><div class="ttname"><a href="namespacearm__compute_1_1quantization.xhtml#a63fdf412c27b0151bd4495c64cc112da">arm_compute::quantization::calculate_quantized_multiplier</a></div><div class="ttdeci">Status calculate_quantized_multiplier(float multiplier, int32_t *quant_multiplier, int32_t *shift)</div><div class="ttdoc">Calculate quantized representation of multiplier.</div><div class="ttdef"><b>Definition:</b> <a href="_asymm_helpers_8cpp_source.xhtml#l00038">AsymmHelpers.cpp:38</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_afff44a0110c3767f144c9cb8e6f81625"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#afff44a0110c3767f144c9cb8e6f81625">arm_compute::test::validation::weights_quantization_info</a></div><div class="ttdeci">const QuantizationInfo weights_quantization_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00198">ConvolutionLayer.cpp:198</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_g_e_m_m_xhtml_a3493ba7d1f2057740ff5931fa00a44ac"><div class="ttname"><a href="classarm__compute_1_1_c_l_g_e_m_m.xhtml#a3493ba7d1f2057740ff5931fa00a44ac">arm_compute::CLGEMM::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *a, const ITensorInfo *b, const ITensorInfo *c, const ITensorInfo *output, float alpha, float beta, const GEMMInfo &amp;gemm_info=GEMMInfo())</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of CLGEMM.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_g_e_m_m_8cpp_source.xhtml#l00592">CLGEMM.cpp:592</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a64a08a9fec5aeee8650e7182b6d171d0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">arm_compute::test::validation::weights</a></div><div class="ttdeci">CLTensor weights</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00188">ConvolutionLayer.cpp:188</a></div></div>
<div class="ttc" id="classarm__compute_1_1weights__transformations_1_1_c_l_convert_fully_connected_weights_managed_xhtml_ab214d16c6d37a8d8c55171570aea60dd"><div class="ttname"><a href="classarm__compute_1_1weights__transformations_1_1_c_l_convert_fully_connected_weights_managed.xhtml#ab214d16c6d37a8d8c55171570aea60dd">arm_compute::weights_transformations::CLConvertFullyConnectedWeightsManaged::configure</a></div><div class="ttdeci">void configure(const ICLTensor *input, const TensorShape &amp;original_input_shape, DataLayout data_layout)</div><div class="ttdoc">Configures the CLConvertFullyConnectedWeights function.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_convert_fully_connected_weights_8h_source.xhtml#l00097">CLConvertFullyConnectedWeights.h:97</a></div></div>
<div class="ttc" id="minmaxloc_8cl_xhtml_a4464d6f922ea17b4a9ca6a2cec7ddb75"><div class="ttname"><a href="minmaxloc_8cl.xhtml#a4464d6f922ea17b4a9ca6a2cec7ddb75">type_max</a></div><div class="ttdeci">__constant DATA_TYPE16 type_max</div><div class="ttdef"><b>Definition:</b> <a href="minmaxloc_8cl_source.xhtml#l00047">minmaxloc.cl:47</a></div></div>
<div class="ttc" id="structarm__compute_1_1_fully_connected_layer_info_xhtml_a11851649b6a7cd12ae25cf72b769cfb9"><div class="ttname"><a href="structarm__compute_1_1_fully_connected_layer_info.xhtml#a11851649b6a7cd12ae25cf72b769cfb9">arm_compute::FullyConnectedLayerInfo::transpose_weights</a></div><div class="ttdeci">bool transpose_weights</div><div class="ttdoc">Transpose weights if true.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00806">Types.h:806</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml">arm_compute::TensorInfo</a></div><div class="ttdoc">Store the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00045">TensorInfo.h:45</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml">arm_compute::misc::shape_calculator</a></div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l00040">ShapeCalculator.h:40</a></div></div>
<div class="ttc" id="classarm__compute_1_1_g_e_m_m_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_g_e_m_m_info.xhtml">arm_compute::GEMMInfo</a></div><div class="ttdoc">GEMM information class.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01983">Types.h:1983</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_weights_manager_xhtml_a73808ac61e51d72c7d6349d6d51dcf37"><div class="ttname"><a href="classarm__compute_1_1_i_weights_manager.xhtml#a73808ac61e51d72c7d6349d6d51dcf37">arm_compute::IWeightsManager::run</a></div><div class="ttdeci">ITensor * run(const ITensor *weights, ITransformWeights *weights_transform)</div><div class="ttdoc">Run the reshape function.</div><div class="ttdef"><b>Definition:</b> <a href="_i_weights_manager_8cpp_source.xhtml#l00051">IWeightsManager.cpp:51</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">arm_compute::DataType::QASYMM8_SIGNED</a></div><div class="ttdoc">quantized, asymmetric fixed-point 8-bit number signed</div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a5f5b6c4337eac9e2e0046ca2304d80dc"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">arm_compute::test::validation::data_type</a></div><div class="ttdeci">data_type</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_arithmetic_addition_8cpp_source.xhtml#l00138">ArithmeticAddition.cpp:138</a></div></div>
<div class="ttc" id="_asymm_helpers_8h_xhtml"><div class="ttname"><a href="_asymm_helpers_8h.xhtml">AsymmHelpers.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_a1b67d5b720119d50faa286c774579ecc"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">arm_compute::Dimensions&lt; uint32_t &gt;::num_max_dimensions</a></div><div class="ttdeci">static constexpr size_t num_max_dimensions</div><div class="ttdoc">Number of dimensions the tensor has.</div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00045">Dimensions.h:45</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_fully_connected_layer_reshape_weights_xhtml_a968b23a6ef327fcfb5b99d58e3fbe883"><div class="ttname"><a href="classarm__compute_1_1_c_l_fully_connected_layer_reshape_weights.xhtml#a968b23a6ef327fcfb5b99d58e3fbe883">arm_compute::CLFullyConnectedLayerReshapeWeights::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *input, const ITensorInfo *output)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of CLFullyConnectedLayerRes...</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_fully_connected_layer_8cpp_source.xhtml#l00133">CLFullyConnectedLayer.cpp:133</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ae69217acf0f0b5d4de030a09ad50a0bc"><div class="ttname"><a href="namespacearm__compute.xhtml#ae69217acf0f0b5d4de030a09ad50a0bc">arm_compute::get_min_max</a></div><div class="ttdeci">std::tuple&lt; PixelValue, PixelValue &gt; get_min_max(DataType dt)</div><div class="ttdoc">Compute the mininum and maximum values a data type can take.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_utils_8h_source.xhtml#l00558">Utils.h:558</a></div></div>
<div class="ttc" id="_validate_8h_xhtml"><div class="ttname"><a href="_validate_8h.xhtml">Validate.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_weights_manager_xhtml_a9b3e3aff065fafe490a5e190bf530ada"><div class="ttname"><a href="classarm__compute_1_1_i_weights_manager.xhtml#a9b3e3aff065fafe490a5e190bf530ada">arm_compute::IWeightsManager::acquire</a></div><div class="ttdeci">ITensor * acquire(const ITensor *weights, ITransformWeights *weights_transform)</div><div class="ttdoc">Acquire the requested reshape tensor of the selected weights.</div><div class="ttdef"><b>Definition:</b> <a href="_i_weights_manager_8cpp_source.xhtml#l00117">IWeightsManager.cpp:117</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_transpose_kernel_xhtml_a968b23a6ef327fcfb5b99d58e3fbe883"><div class="ttname"><a href="classarm__compute_1_1_c_l_transpose_kernel.xhtml#a968b23a6ef327fcfb5b99d58e3fbe883">arm_compute::CLTransposeKernel::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *input, const ITensorInfo *output)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of CLTransposeKernel.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_transpose_kernel_8cpp_source.xhtml#l00101">CLTransposeKernel.cpp:101</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_tensor.xhtml">arm_compute::CLTensor</a></div><div class="ttdoc">Basic implementation of the OpenCL tensor interface.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tensor_8h_source.xhtml#l00041">CLTensor.h:41</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_bf9f26469d00835ba20ff8d80ee5a804.xhtml">runtime</a></li><li class="navelem"><a class="el" href="dir_43c3fdbf778d1fd99e2e38f09fddd920.xhtml">CL</a></li><li class="navelem"><a class="el" href="dir_0304d3529340c629ae0050036d07056a.xhtml">functions</a></li><li class="navelem"><a class="el" href="_c_l_fully_connected_layer_8cpp.xhtml">CLFullyConnectedLayer.cpp</a></li>
    <li class="footer">Generated on Fri Feb 21 2020 11:10:16 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
