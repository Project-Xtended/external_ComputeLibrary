<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: Framework Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classarm__compute_1_1test_1_1framework_1_1_framework.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">Framework Class Reference<span class="mlabels"><span class="mlabel">final</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p>Main framework class.  
 <a href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_framework_8h_source.xhtml">Framework.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a6f786ac52185e75dfb58b386d006c078"><td class="memItemLeft" align="right" valign="top">std::set&lt; <a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml#a2a9beba9ddfcbb1d1d7f695c9d86296e">InstrumentsDescription</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a6f786ac52185e75dfb58b386d006c078">available_instruments</a> () const</td></tr>
<tr class="memdesc:a6f786ac52185e75dfb58b386d006c078"><td class="mdescLeft">&#160;</td><td class="mdescRight">Supported instrument types for benchmarking.  <a href="#a6f786ac52185e75dfb58b386d006c078">More...</a><br /></td></tr>
<tr class="separator:a6f786ac52185e75dfb58b386d006c078"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a01e3aa67ceaeae837e9a68050d850724"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a01e3aa67ceaeae837e9a68050d850724">init</a> (const <a class="el" href="structarm__compute_1_1test_1_1framework_1_1_framework_config.xhtml">FrameworkConfig</a> &amp;config)</td></tr>
<tr class="memdesc:a01e3aa67ceaeae837e9a68050d850724"><td class="mdescLeft">&#160;</td><td class="mdescRight">Init the framework.  <a href="#a01e3aa67ceaeae837e9a68050d850724">More...</a><br /></td></tr>
<tr class="separator:a01e3aa67ceaeae837e9a68050d850724"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3893bc1fbad02227b78bbce22bcff1ba"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a3893bc1fbad02227b78bbce22bcff1ba">push_suite</a> (std::string name)</td></tr>
<tr class="memdesc:a3893bc1fbad02227b78bbce22bcff1ba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add a new test suite.  <a href="#a3893bc1fbad02227b78bbce22bcff1ba">More...</a><br /></td></tr>
<tr class="separator:a3893bc1fbad02227b78bbce22bcff1ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aedbe6ac82569518fedc4a08718f8aa93"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#aedbe6ac82569518fedc4a08718f8aa93">pop_suite</a> ()</td></tr>
<tr class="memdesc:aedbe6ac82569518fedc4a08718f8aa93"><td class="mdescLeft">&#160;</td><td class="mdescRight">Remove innermost test suite.  <a href="#aedbe6ac82569518fedc4a08718f8aa93">More...</a><br /></td></tr>
<tr class="separator:aedbe6ac82569518fedc4a08718f8aa93"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad8e7764125fcd790e0b151d26cfe949c"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ad8e7764125fcd790e0b151d26cfe949c"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#ad8e7764125fcd790e0b151d26cfe949c">add_test_case</a> (std::string test_name, <a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml#a7edf31944a6144ffd493d2f9a7bfb5cf">DatasetMode</a> mode, <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">TestCaseFactory::Status</a> status)</td></tr>
<tr class="memdesc:ad8e7764125fcd790e0b151d26cfe949c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add a test case to the framework.  <a href="#ad8e7764125fcd790e0b151d26cfe949c">More...</a><br /></td></tr>
<tr class="separator:ad8e7764125fcd790e0b151d26cfe949c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aff39a3b89865624b6579d6980fb88654"><td class="memTemplParams" colspan="2">template&lt;typename T , typename D &gt; </td></tr>
<tr class="memitem:aff39a3b89865624b6579d6980fb88654"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#aff39a3b89865624b6579d6980fb88654">add_data_test_case</a> (std::string test_name, <a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml#a7edf31944a6144ffd493d2f9a7bfb5cf">DatasetMode</a> mode, <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">TestCaseFactory::Status</a> status, std::string description, D &amp;&amp;data)</td></tr>
<tr class="memdesc:aff39a3b89865624b6579d6980fb88654"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add a data test case to the framework.  <a href="#aff39a3b89865624b6579d6980fb88654">More...</a><br /></td></tr>
<tr class="separator:aff39a3b89865624b6579d6980fb88654"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab5eae10e0a4067cff9e87fdcb186eca8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#ab5eae10e0a4067cff9e87fdcb186eca8">add_test_info</a> (std::string info)</td></tr>
<tr class="memdesc:ab5eae10e0a4067cff9e87fdcb186eca8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add info string for the next expectation/assertion.  <a href="#ab5eae10e0a4067cff9e87fdcb186eca8">More...</a><br /></td></tr>
<tr class="separator:ab5eae10e0a4067cff9e87fdcb186eca8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb6a973ccd27225a87d59d93ca458720"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#afb6a973ccd27225a87d59d93ca458720">clear_test_info</a> ()</td></tr>
<tr class="memdesc:afb6a973ccd27225a87d59d93ca458720"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clear the collected test info.  <a href="#afb6a973ccd27225a87d59d93ca458720">More...</a><br /></td></tr>
<tr class="separator:afb6a973ccd27225a87d59d93ca458720"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ad85a69f028cf3f5030666babd7e8e7"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a6ad85a69f028cf3f5030666babd7e8e7">has_test_info</a> () const</td></tr>
<tr class="memdesc:a6ad85a69f028cf3f5030666babd7e8e7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if any info has been registered.  <a href="#a6ad85a69f028cf3f5030666babd7e8e7">More...</a><br /></td></tr>
<tr class="separator:a6ad85a69f028cf3f5030666babd7e8e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2899d3c2cd558569c0fd015419fe7a20"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a2899d3c2cd558569c0fd015419fe7a20">print_test_info</a> (std::ostream &amp;os) const</td></tr>
<tr class="memdesc:a2899d3c2cd558569c0fd015419fe7a20"><td class="mdescLeft">&#160;</td><td class="mdescRight">Print test info.  <a href="#a2899d3c2cd558569c0fd015419fe7a20">More...</a><br /></td></tr>
<tr class="separator:a2899d3c2cd558569c0fd015419fe7a20"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af8135a21178dd34ec3b334b83381269a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#af8135a21178dd34ec3b334b83381269a">log_test_start</a> (const <a class="el" href="structarm__compute_1_1test_1_1framework_1_1_test_info.xhtml">TestInfo</a> &amp;info)</td></tr>
<tr class="memdesc:af8135a21178dd34ec3b334b83381269a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tell the framework that execution of a test starts.  <a href="#af8135a21178dd34ec3b334b83381269a">More...</a><br /></td></tr>
<tr class="separator:af8135a21178dd34ec3b334b83381269a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5a2d19934af27623634c5ab3c47a9446"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a5a2d19934af27623634c5ab3c47a9446">log_test_skipped</a> (const <a class="el" href="structarm__compute_1_1test_1_1framework_1_1_test_info.xhtml">TestInfo</a> &amp;info)</td></tr>
<tr class="memdesc:a5a2d19934af27623634c5ab3c47a9446"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tell the framework that a test case is skipped.  <a href="#a5a2d19934af27623634c5ab3c47a9446">More...</a><br /></td></tr>
<tr class="separator:a5a2d19934af27623634c5ab3c47a9446"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab2cd8b6e8e0aac442fc1e35ad9e1ac45"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#ab2cd8b6e8e0aac442fc1e35ad9e1ac45">log_test_end</a> (const <a class="el" href="structarm__compute_1_1test_1_1framework_1_1_test_info.xhtml">TestInfo</a> &amp;info)</td></tr>
<tr class="memdesc:ab2cd8b6e8e0aac442fc1e35ad9e1ac45"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tell the framework that a test case finished.  <a href="#ab2cd8b6e8e0aac442fc1e35ad9e1ac45">More...</a><br /></td></tr>
<tr class="separator:ab2cd8b6e8e0aac442fc1e35ad9e1ac45"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0128e62cd67888b56078dac05dd59761"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a0128e62cd67888b56078dac05dd59761">log_failed_expectation</a> (const <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_test_error.xhtml">TestError</a> &amp;error)</td></tr>
<tr class="memdesc:a0128e62cd67888b56078dac05dd59761"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tell the framework that the currently running test case failed a non-fatal expectation.  <a href="#a0128e62cd67888b56078dac05dd59761">More...</a><br /></td></tr>
<tr class="separator:a0128e62cd67888b56078dac05dd59761"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a60b060774255916807ef1cca44bfbfe1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a60b060774255916807ef1cca44bfbfe1">log_info</a> (const std::string &amp;info)</td></tr>
<tr class="memdesc:a60b060774255916807ef1cca44bfbfe1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Print the debug information that has already been logged.  <a href="#a60b060774255916807ef1cca44bfbfe1">More...</a><br /></td></tr>
<tr class="separator:a60b060774255916807ef1cca44bfbfe1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab803db44aeb4ad8cd93193be5eaf0fb7"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#ab803db44aeb4ad8cd93193be5eaf0fb7">num_iterations</a> () const</td></tr>
<tr class="memdesc:ab803db44aeb4ad8cd93193be5eaf0fb7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Number of iterations per test case.  <a href="#ab803db44aeb4ad8cd93193be5eaf0fb7">More...</a><br /></td></tr>
<tr class="separator:ab803db44aeb4ad8cd93193be5eaf0fb7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae0b69f2142100651d022d5af576f42cf"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#ae0b69f2142100651d022d5af576f42cf">set_num_iterations</a> (int <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#ab803db44aeb4ad8cd93193be5eaf0fb7">num_iterations</a>)</td></tr>
<tr class="memdesc:ae0b69f2142100651d022d5af576f42cf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set number of iterations per test case.  <a href="#ae0b69f2142100651d022d5af576f42cf">More...</a><br /></td></tr>
<tr class="separator:ae0b69f2142100651d022d5af576f42cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af2086722b11ed9e777db00a74cdecfc1"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#af2086722b11ed9e777db00a74cdecfc1">throw_errors</a> () const</td></tr>
<tr class="memdesc:af2086722b11ed9e777db00a74cdecfc1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Should errors be caught or thrown by the framework.  <a href="#af2086722b11ed9e777db00a74cdecfc1">More...</a><br /></td></tr>
<tr class="separator:af2086722b11ed9e777db00a74cdecfc1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e61ba4403f0d2bd4f755f59193af692"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a5e61ba4403f0d2bd4f755f59193af692">set_throw_errors</a> (bool <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#af2086722b11ed9e777db00a74cdecfc1">throw_errors</a>)</td></tr>
<tr class="memdesc:a5e61ba4403f0d2bd4f755f59193af692"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set whether errors are caught or thrown by the framework.  <a href="#a5e61ba4403f0d2bd4f755f59193af692">More...</a><br /></td></tr>
<tr class="separator:a5e61ba4403f0d2bd4f755f59193af692"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0fa5f7d6bcff8bfd18ec2aadf660a489"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a0fa5f7d6bcff8bfd18ec2aadf660a489">stop_on_error</a> () const</td></tr>
<tr class="memdesc:a0fa5f7d6bcff8bfd18ec2aadf660a489"><td class="mdescLeft">&#160;</td><td class="mdescRight">Indicates if test execution is stopped after the first failed test.  <a href="#a0fa5f7d6bcff8bfd18ec2aadf660a489">More...</a><br /></td></tr>
<tr class="separator:a0fa5f7d6bcff8bfd18ec2aadf660a489"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab4b7e9757ad7e9d23b608b617c5dffa6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#ab4b7e9757ad7e9d23b608b617c5dffa6">set_stop_on_error</a> (bool <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a0fa5f7d6bcff8bfd18ec2aadf660a489">stop_on_error</a>)</td></tr>
<tr class="memdesc:ab4b7e9757ad7e9d23b608b617c5dffa6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set whether to abort execution after the first failed test.  <a href="#ab4b7e9757ad7e9d23b608b617c5dffa6">More...</a><br /></td></tr>
<tr class="separator:ab4b7e9757ad7e9d23b608b617c5dffa6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a41183a1a8909c9f852acd99d3b69626d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a41183a1a8909c9f852acd99d3b69626d">error_on_missing_assets</a> () const</td></tr>
<tr class="memdesc:a41183a1a8909c9f852acd99d3b69626d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Indicates if a test should be marked as failed when its assets are missing.  <a href="#a41183a1a8909c9f852acd99d3b69626d">More...</a><br /></td></tr>
<tr class="separator:a41183a1a8909c9f852acd99d3b69626d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a46a0cefc3b9a13645548ec705f438ce9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a46a0cefc3b9a13645548ec705f438ce9">set_error_on_missing_assets</a> (bool <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a41183a1a8909c9f852acd99d3b69626d">error_on_missing_assets</a>)</td></tr>
<tr class="memdesc:a46a0cefc3b9a13645548ec705f438ce9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set whether a test should be considered as failed if its assets cannot be found.  <a href="#a46a0cefc3b9a13645548ec705f438ce9">More...</a><br /></td></tr>
<tr class="separator:a46a0cefc3b9a13645548ec705f438ce9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a149ad6701e3e2414cb566bb414029841"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a149ad6701e3e2414cb566bb414029841">run</a> ()</td></tr>
<tr class="memdesc:a149ad6701e3e2414cb566bb414029841"><td class="mdescLeft">&#160;</td><td class="mdescRight">Run all enabled test cases.  <a href="#a149ad6701e3e2414cb566bb414029841">More...</a><br /></td></tr>
<tr class="separator:a149ad6701e3e2414cb566bb414029841"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4494f098cda45f40105c454d0ffa9147"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a4494f098cda45f40105c454d0ffa9147">set_test_result</a> (<a class="el" href="structarm__compute_1_1test_1_1framework_1_1_test_info.xhtml">TestInfo</a> info, <a class="el" href="structarm__compute_1_1test_1_1framework_1_1_test_result.xhtml">TestResult</a> result)</td></tr>
<tr class="memdesc:a4494f098cda45f40105c454d0ffa9147"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the result for an executed test case.  <a href="#a4494f098cda45f40105c454d0ffa9147">More...</a><br /></td></tr>
<tr class="separator:a4494f098cda45f40105c454d0ffa9147"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2fac8e2013fb935c058fb09ffd972b54"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a2fac8e2013fb935c058fb09ffd972b54">print_test_results</a> (<a class="el" href="classarm__compute_1_1test_1_1framework_1_1_printer.xhtml">Printer</a> &amp;printer) const</td></tr>
<tr class="memdesc:a2fac8e2013fb935c058fb09ffd972b54"><td class="mdescLeft">&#160;</td><td class="mdescRight">Use the specified printer to output test results from the last run.  <a href="#a2fac8e2013fb935c058fb09ffd972b54">More...</a><br /></td></tr>
<tr class="separator:a2fac8e2013fb935c058fb09ffd972b54"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a47e7a1a6baab80560c11a9ee8f8a0636"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_profiler.xhtml">Profiler</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a47e7a1a6baab80560c11a9ee8f8a0636">get_profiler</a> () const</td></tr>
<tr class="memdesc:a47e7a1a6baab80560c11a9ee8f8a0636"><td class="mdescLeft">&#160;</td><td class="mdescRight">Factory method to obtain a configured profiler.  <a href="#a47e7a1a6baab80560c11a9ee8f8a0636">More...</a><br /></td></tr>
<tr class="separator:a47e7a1a6baab80560c11a9ee8f8a0636"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5f16ced78873ee3a193490197fbf57a5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a5f16ced78873ee3a193490197fbf57a5">add_printer</a> (<a class="el" href="classarm__compute_1_1test_1_1framework_1_1_printer.xhtml">Printer</a> *printer)</td></tr>
<tr class="memdesc:a5f16ced78873ee3a193490197fbf57a5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the printer used for the output of test results.  <a href="#a5f16ced78873ee3a193490197fbf57a5">More...</a><br /></td></tr>
<tr class="separator:a5f16ced78873ee3a193490197fbf57a5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aacd94676ebb33ecba00dfebe12c9392d"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="structarm__compute_1_1test_1_1framework_1_1_test_info.xhtml">TestInfo</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#aacd94676ebb33ecba00dfebe12c9392d">test_infos</a> () const</td></tr>
<tr class="memdesc:aacd94676ebb33ecba00dfebe12c9392d"><td class="mdescLeft">&#160;</td><td class="mdescRight">List of <a class="el" href="structarm__compute_1_1test_1_1framework_1_1_test_info.xhtml">TestInfo</a>'s.  <a href="#aacd94676ebb33ecba00dfebe12c9392d">More...</a><br /></td></tr>
<tr class="separator:aacd94676ebb33ecba00dfebe12c9392d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a621f62a02364fc584cf86a8f221e715d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9">LogLevel</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a621f62a02364fc584cf86a8f221e715d">log_level</a> () const</td></tr>
<tr class="memdesc:a621f62a02364fc584cf86a8f221e715d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the current logging level.  <a href="#a621f62a02364fc584cf86a8f221e715d">More...</a><br /></td></tr>
<tr class="separator:a621f62a02364fc584cf86a8f221e715d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a755837a8f4938f8013f4251014a958e4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a755837a8f4938f8013f4251014a958e4">set_instruments_info</a> (<a class="el" href="structarm__compute_1_1test_1_1framework_1_1_instruments_info.xhtml">InstrumentsInfo</a> instr_info)</td></tr>
<tr class="memdesc:a755837a8f4938f8013f4251014a958e4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets instruments info.  <a href="#a755837a8f4938f8013f4251014a958e4">More...</a><br /></td></tr>
<tr class="separator:a755837a8f4938f8013f4251014a958e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:af8fbb8b386d3cce307a89002bcdbcfc9"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml">Framework</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#af8fbb8b386d3cce307a89002bcdbcfc9">get</a> ()</td></tr>
<tr class="memdesc:af8fbb8b386d3cce307a89002bcdbcfc9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Access to the singleton.  <a href="#af8fbb8b386d3cce307a89002bcdbcfc9">More...</a><br /></td></tr>
<tr class="separator:af8fbb8b386d3cce307a89002bcdbcfc9"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Main framework class. </p>
<p>Keeps track of the global state, owns all test cases and collects results. </p>

<p class="definition">Definition at line <a class="el" href="_framework_8h_source.xhtml#l00095">95</a> of file <a class="el" href="_framework_8h_source.xhtml">Framework.h</a>.</p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="aff39a3b89865624b6579d6980fb88654"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aff39a3b89865624b6579d6980fb88654">&#9670;&nbsp;</a></span>add_data_test_case()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void add_data_test_case </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>test_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml#a7edf31944a6144ffd493d2f9a7bfb5cf">DatasetMode</a>&#160;</td>
          <td class="paramname"><em>mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">TestCaseFactory::Status</a>&#160;</td>
          <td class="paramname"><em>status</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>description</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">D &amp;&amp;&#160;</td>
          <td class="paramname"><em>data</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Add a data test case to the framework. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">test_name</td><td>Name of the new test case. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">mode</td><td>Mode in which to include the test. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">status</td><td><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> of the test case. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">description</td><td>Description of <code>data</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data</td><td>Data that will be used as input to the test. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_framework_8h_source.xhtml#l00363">363</a> of file <a class="el" href="_framework_8h_source.xhtml">Framework.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;{</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    <span class="comment">// WORKAROUND for GCC 4.9</span></div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    <span class="comment">// The function should get *it which is tuple but that seems to trigger a</span></div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    <span class="comment">// bug in the compiler.</span></div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    <span class="keyword">auto</span> tmp = std::unique_ptr&lt;DataTestCaseFactory&lt;T, decltype(*std::declval&lt;D&gt;())&gt;&gt;(<span class="keyword">new</span> DataTestCaseFactory&lt;T, decltype(*std::declval&lt;D&gt;())&gt;(current_suite_name(), std::move(test_name), mode, status,</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;                                                                                     std::move(description), *data));</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    _test_factories.emplace_back(std::move(tmp));</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;}</div></div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_registrars_8h_source.xhtml#l00087">TestCaseRegistrar&lt; T &gt;::TestCaseRegistrar()</a>.</p>

</div>
</div>
<a id="a5f16ced78873ee3a193490197fbf57a5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5f16ced78873ee3a193490197fbf57a5">&#9670;&nbsp;</a></span>add_printer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void add_printer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_printer.xhtml">Printer</a> *&#160;</td>
          <td class="paramname"><em>printer</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the printer used for the output of test results. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">printer</td><td>Pointer to a printer. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00666">666</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;{</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;    _printers.push_back(printer);</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;}</div></div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="main_8cpp_source.xhtml#l00093">main()</a>.</p>

</div>
</div>
<a id="ad8e7764125fcd790e0b151d26cfe949c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad8e7764125fcd790e0b151d26cfe949c">&#9670;&nbsp;</a></span>add_test_case()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void add_test_case </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>test_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml#a7edf31944a6144ffd493d2f9a7bfb5cf">DatasetMode</a>&#160;</td>
          <td class="paramname"><em>mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">TestCaseFactory::Status</a>&#160;</td>
          <td class="paramname"><em>status</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Add a test case to the framework. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">test_name</td><td>Name of the new test case. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">mode</td><td>Mode in which to include the test. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">status</td><td><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> of the test case. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_framework_8h_source.xhtml#l00357">357</a> of file <a class="el" href="_framework_8h_source.xhtml">Framework.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;{</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    _test_factories.emplace_back(<a class="code" href="namespacearm__compute_1_1support_1_1cpp14.xhtml#a1d95a84d1a4610af6a128ad96c907e8b">support::cpp14::make_unique</a>&lt;SimpleTestCaseFactory&lt;T&gt;&gt;(current_suite_name(), std::move(test_name), mode, status));</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1support_1_1cpp14_xhtml_a1d95a84d1a4610af6a128ad96c907e8b"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp14.xhtml#a1d95a84d1a4610af6a128ad96c907e8b">arm_compute::support::cpp14::make_unique</a></div><div class="ttdeci">_Unique_if&lt; T &gt;::_Single_object make_unique(Args &amp;&amp;... args)</div><div class="ttdoc">Construct a single object and return a unique pointer to it.</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00480">ToolchainSupport.h:480</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_toolchain_support_8h_source.xhtml#l00480">arm_compute::support::cpp14::make_unique()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_registrars_8h_source.xhtml#l00080">TestCaseRegistrar&lt; T &gt;::TestCaseRegistrar()</a>.</p>

</div>
</div>
<a id="ab5eae10e0a4067cff9e87fdcb186eca8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab5eae10e0a4067cff9e87fdcb186eca8">&#9670;&nbsp;</a></span>add_test_info()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void add_test_info </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add info string for the next expectation/assertion. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td>Info string. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00153">153</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;{</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    _test_info.emplace_back(std::move(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>));</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a4f4125dba5283887b34f889b1c615c0c"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">arm_compute::test::validation::info</a></div><div class="ttdeci">info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00182">ConvolutionLayer.cpp:182</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00182">arm_compute::test::validation::info</a>.</p>

</div>
</div>
<a id="a6f786ac52185e75dfb58b386d006c078"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6f786ac52185e75dfb58b386d006c078">&#9670;&nbsp;</a></span>available_instruments()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::set&lt; <a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml#a2a9beba9ddfcbb1d1d7f695c9d86296e">InstrumentsDescription</a> &gt; available_instruments </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Supported instrument types for benchmarking. </p>
<dl class="section return"><dt>Returns</dt><dd>Set of all available instrument types. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00098">98</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;{</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    std::set&lt;InstrumentsDescription&gt; types;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;instrument : _available_instruments)</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    {</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        types.emplace(instrument.first);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    }</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keywordflow">return</span> types;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;}</div></div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_common_options_8cpp_source.xhtml#l00038">CommonOptions::CommonOptions()</a>.</p>

</div>
</div>
<a id="afb6a973ccd27225a87d59d93ca458720"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afb6a973ccd27225a87d59d93ca458720">&#9670;&nbsp;</a></span>clear_test_info()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void clear_test_info </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Clear the collected test info. </p>

<p class="definition">Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00158">158</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;{</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    _test_info.clear();</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;}</div></div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_asserts_8h_source.xhtml#l00057">arm_compute::test::framework::ARM_COMPUTE_PRINT_INFO()</a>.</p>

</div>
</div>
<a id="a41183a1a8909c9f852acd99d3b69626d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a41183a1a8909c9f852acd99d3b69626d">&#9670;&nbsp;</a></span>error_on_missing_assets()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool error_on_missing_assets </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Indicates if a test should be marked as failed when its assets are missing. </p>
<dl class="section return"><dt>Returns</dt><dd>True if a test should be marked as failed when its assets are missing. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00286">286</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;{</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    <span class="keywordflow">return</span> _error_on_missing_assets;</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;}</div></div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_framework_8cpp_source.xhtml#l00281">Framework::set_error_on_missing_assets()</a>.</p>

</div>
</div>
<a id="af8fbb8b386d3cce307a89002bcdbcfc9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af8fbb8b386d3cce307a89002bcdbcfc9">&#9670;&nbsp;</a></span>get()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml">Framework</a> &amp; get </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Access to the singleton. </p>
<dl class="section return"><dt>Returns</dt><dd>Unique instance of the framework class. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00122">122</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;{</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keyword">static</span> Framework instance;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="keywordflow">return</span> instance;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;}</div></div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_asserts_8h_source.xhtml#l00057">arm_compute::test::framework::ARM_COMPUTE_PRINT_INFO()</a>, <a class="el" href="_common_options_8cpp_source.xhtml#l00038">CommonOptions::CommonOptions()</a>, <a class="el" href="main_8cpp_source.xhtml#l00093">main()</a>, <a class="el" href="benchmark__examples_2_run_example_8cpp_source.xhtml#l00096">arm_compute::utils::run_example()</a>, <a class="el" href="_registrars_8h_source.xhtml#l00080">TestCaseRegistrar&lt; T &gt;::TestCaseRegistrar()</a>, and <a class="el" href="_registrars_8h_source.xhtml#l00100">TestSuiteRegistrar::TestSuiteRegistrar()</a>.</p>

</div>
</div>
<a id="a47e7a1a6baab80560c11a9ee8f8a0636"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a47e7a1a6baab80560c11a9ee8f8a0636">&#9670;&nbsp;</a></span>get_profiler()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_profiler.xhtml">Profiler</a> get_profiler </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Factory method to obtain a configured profiler. </p>
<p>The profiler enables all instruments that have been passed to the <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a01e3aa67ceaeae837e9a68050d850724">init</a> method.</p>
<dl class="section return"><dt>Returns</dt><dd>Configured profiler to collect benchmark results. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00637">637</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;{</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;    Profiler profiler;</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> all_instruments = std::any_of(</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;                                     _instruments.begin(),</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;                                     _instruments.end(),</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;                                     [](<a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#a2a9beba9ddfcbb1d1d7f695c9d86296e">InstrumentsDescription</a> <a class="code" href="namespace_gemm_tuner.xhtml#a7aead736a07eaf25623ad7bfa1f0ee2d">type</a>) -&gt; <span class="keywordtype">bool</span> { <span class="keywordflow">return</span> <a class="code" href="namespace_gemm_tuner.xhtml#a7aead736a07eaf25623ad7bfa1f0ee2d">type</a>.first == <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#a7edf31944a6144ffd493d2f9a7bfb5cfa5fb1f955b45e38e31789286a1790398d">InstrumentType::ALL</a>; });</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;    <span class="keyword">auto</span> is_selected = [&amp;](<a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#a2a9beba9ddfcbb1d1d7f695c9d86296e">InstrumentsDescription</a> instrument) -&gt; <span class="keywordtype">bool</span></div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;    {</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;        <span class="keywordflow">return</span> std::find_if(_instruments.begin(), _instruments.end(), [&amp;](<a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#a2a9beba9ddfcbb1d1d7f695c9d86296e">InstrumentsDescription</a> <a class="code" href="namespace_gemm_tuner.xhtml#a7aead736a07eaf25623ad7bfa1f0ee2d">type</a>) -&gt; <span class="keywordtype">bool</span> {</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> group = static_cast&lt;InstrumentType&gt;(static_cast&lt;uint64_t&gt;(<a class="code" href="namespace_gemm_tuner.xhtml#a7aead736a07eaf25623ad7bfa1f0ee2d">type</a>.first) &amp; 0xFF00);</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;            <span class="keywordflow">return</span> (group == instrument.first) &amp;&amp; (instrument.second == <a class="code" href="namespace_gemm_tuner.xhtml#a7aead736a07eaf25623ad7bfa1f0ee2d">type</a>.second);</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;        })</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;        != _instruments.end();</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;    };</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;instrument : _available_instruments)</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;    {</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;        <span class="keywordflow">if</span>(all_instruments || is_selected(instrument.first))</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;        {</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;            profiler.add(instrument.second());</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;        }</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;    }</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;    <span class="keywordflow">return</span> profiler;</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1framework_xhtml_a2a9beba9ddfcbb1d1d7f695c9d86296e"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#a2a9beba9ddfcbb1d1d7f695c9d86296e">arm_compute::test::framework::InstrumentsDescription</a></div><div class="ttdeci">std::pair&lt; InstrumentType, ScaleFactor &gt; InstrumentsDescription</div><div class="ttdef"><b>Definition:</b> <a href="_instruments_8h_source.xhtml#l00069">Instruments.h:69</a></div></div>
<div class="ttc" id="namespace_gemm_tuner_xhtml_a7aead736a07eaf25623ad7bfa1f0ee2d"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a7aead736a07eaf25623ad7bfa1f0ee2d">GemmTuner.type</a></div><div class="ttdeci">type</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00527">GemmTuner.py:527</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1framework_xhtml_a7edf31944a6144ffd493d2f9a7bfb5cfa5fb1f955b45e38e31789286a1790398d"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#a7edf31944a6144ffd493d2f9a7bfb5cfa5fb1f955b45e38e31789286a1790398d">arm_compute::test::framework::DatasetMode::ALL</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_profiler_8cpp_source.xhtml#l00035">Profiler::add()</a>, <a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml#a7edf31944a6144ffd493d2f9a7bfb5cfa5fb1f955b45e38e31789286a1790398d">arm_compute::test::framework::ALL</a>, and <a class="el" href="_gemm_tuner_8py_source.xhtml#l00527">GemmTuner::type</a>.</p>

<p class="reference">Referenced by <a class="el" href="main_8cpp_source.xhtml#l00093">main()</a>.</p>

</div>
</div>
<a id="a6ad85a69f028cf3f5030666babd7e8e7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6ad85a69f028cf3f5030666babd7e8e7">&#9670;&nbsp;</a></span>has_test_info()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool has_test_info </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if any info has been registered. </p>
<dl class="section return"><dt>Returns</dt><dd>True if there is test info. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00163">163</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;{</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keywordflow">return</span> !_test_info.empty();</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a01e3aa67ceaeae837e9a68050d850724"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a01e3aa67ceaeae837e9a68050d850724">&#9670;&nbsp;</a></span>init()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void init </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1test_1_1framework_1_1_framework_config.xhtml">FrameworkConfig</a> &amp;&#160;</td>
          <td class="paramname"><em>config</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Init the framework. </p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_test_filter.xhtml#a6c1c1828685702cd5b6a577d568d629c" title="Default constructor.">TestFilter::TestFilter</a> for the format of the string to filter ids.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">config</td><td><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml" title="Main framework class.">Framework</a> configuration meta-data. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00128">128</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;{</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    _test_filter    = TestFilter(config.mode, config.name_filter, config.id_filter);</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    _num_iterations = config.num_iterations;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    _log_level      = config.log_level;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    _cooldown_sec   = config.cooldown_sec;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    _instruments = std::set&lt;framework::InstrumentsDescription&gt;(std::begin(config.instruments), std::end(config.instruments));</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;}</div></div><!-- fragment -->
<p class="reference">References <a class="el" href="_framework_8h_source.xhtml#l00065">FrameworkConfig::cooldown_sec</a>, <a class="el" href="_framework_8h_source.xhtml#l00062">FrameworkConfig::id_filter</a>, <a class="el" href="_framework_8h_source.xhtml#l00060">FrameworkConfig::instruments</a>, <a class="el" href="_framework_8h_source.xhtml#l00066">FrameworkConfig::log_level</a>, <a class="el" href="_framework_8h_source.xhtml#l00063">FrameworkConfig::mode</a>, <a class="el" href="_framework_8h_source.xhtml#l00061">FrameworkConfig::name_filter</a>, and <a class="el" href="_framework_8h_source.xhtml#l00064">FrameworkConfig::num_iterations</a>.</p>

<p class="reference">Referenced by <a class="el" href="main_8cpp_source.xhtml#l00093">main()</a>.</p>

</div>
</div>
<a id="a0128e62cd67888b56078dac05dd59761"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0128e62cd67888b56078dac05dd59761">&#9670;&nbsp;</a></span>log_failed_expectation()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void log_failed_expectation </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_test_error.xhtml">TestError</a> &amp;&#160;</td>
          <td class="paramname"><em>error</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Tell the framework that the currently running test case failed a non-fatal expectation. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">error</td><td>Description of the error. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00222">222</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;{</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(_current_test_info == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(_current_test_result == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_expected_failure = _current_test_info-&gt;<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_test_info.xhtml#a9e590b7d913d38286ab0916c38bb600f">status</a> == <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70babdb2c34681be3432a08e0450b707a014">TestCaseFactory::Status::EXPECTED_FAILURE</a>;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <span class="keywordflow">if</span>(_log_level &gt;= error.level())</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    {</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        func_on_all_printers([&amp;](Printer * p)</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        {</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;            p-&gt;print_error(error, is_expected_failure);</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        });</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    }</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    _current_test_result-&gt;<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_test_result.xhtml#ae29aa2d4ae440022daaed1107eb306b3">status</a> = <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_test_result.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bab9e14d9b2886bcff408b85aefa780419">TestResult::Status::FAILED</a>;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_test_case_factory_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70babdb2c34681be3432a08e0450b707a014"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70babdb2c34681be3432a08e0450b707a014">arm_compute::test::framework::TestCaseFactory::Status::EXPECTED_FAILURE</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1framework_1_1_test_result_xhtml_ae29aa2d4ae440022daaed1107eb306b3"><div class="ttname"><a href="structarm__compute_1_1test_1_1framework_1_1_test_result.xhtml#ae29aa2d4ae440022daaed1107eb306b3">arm_compute::test::framework::TestResult::status</a></div><div class="ttdeci">Status status</div><div class="ttdoc">Execution status.</div><div class="ttdef"><b>Definition:</b> <a href="_test_result_8h_source.xhtml#l00074">TestResult.h:74</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1framework_1_1_test_info_xhtml_a9e590b7d913d38286ab0916c38bb600f"><div class="ttname"><a href="structarm__compute_1_1test_1_1framework_1_1_test_info.xhtml#a9e590b7d913d38286ab0916c38bb600f">arm_compute::test::framework::TestInfo::status</a></div><div class="ttdeci">TestCaseFactory::Status status</div><div class="ttdoc">Test status.</div><div class="ttdef"><b>Definition:</b> <a href="_framework_8h_source.xhtml#l00083">Framework.h:83</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1framework_1_1_test_result_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70bab9e14d9b2886bcff408b85aefa780419"><div class="ttname"><a href="structarm__compute_1_1test_1_1framework_1_1_test_result.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bab9e14d9b2886bcff408b85aefa780419">arm_compute::test::framework::TestResult::Status::FAILED</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70babdb2c34681be3432a08e0450b707a014">TestCaseFactory::EXPECTED_FAILURE</a>, <a class="el" href="structarm__compute_1_1test_1_1framework_1_1_test_result.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bab9e14d9b2886bcff408b85aefa780419">TestResult::FAILED</a>, <a class="el" href="_exceptions_8cpp_source.xhtml#l00121">TestError::level()</a>, <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_printer.xhtml#a8b879125822f4f7e70d563c4f1672942">Printer::print_error()</a>, <a class="el" href="_test_result_8h_source.xhtml#l00074">TestResult::status</a>, and <a class="el" href="_framework_8h_source.xhtml#l00083">TestInfo::status</a>.</p>

</div>
</div>
<a id="a60b060774255916807ef1cca44bfbfe1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a60b060774255916807ef1cca44bfbfe1">&#9670;&nbsp;</a></span>log_info()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void log_info </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Print the debug information that has already been logged. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td>Description of the log info. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00240">240</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;{</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <span class="keywordflow">if</span>(_log_level &gt;= <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9adc30ec20708ef7b0f641ef78b7880a15">LogLevel::DEBUG</a>)</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    {</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        func_on_all_printers([&amp;](Printer * p)</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        {</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;            p-&gt;print_info(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>);</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        });</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    }</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1framework_xhtml_aca1fd1d8935433e6ba2e3918214e07f9adc30ec20708ef7b0f641ef78b7880a15"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9adc30ec20708ef7b0f641ef78b7880a15">arm_compute::test::framework::LogLevel::DEBUG</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a4f4125dba5283887b34f889b1c615c0c"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">arm_compute::test::validation::info</a></div><div class="ttdeci">info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00182">ConvolutionLayer.cpp:182</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9adc30ec20708ef7b0f641ef78b7880a15">arm_compute::test::framework::DEBUG</a>, <a class="el" href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00182">arm_compute::test::validation::info</a>, and <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_printer.xhtml#a24f328af2266d153ab2ddd1ada7b02e2">Printer::print_info()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_asserts_8h_source.xhtml#l00057">arm_compute::test::framework::ARM_COMPUTE_PRINT_INFO()</a>.</p>

</div>
</div>
<a id="a621f62a02364fc584cf86a8f221e715d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a621f62a02364fc584cf86a8f221e715d">&#9670;&nbsp;</a></span>log_level()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9">LogLevel</a> log_level </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the current logging level. </p>
<dl class="section return"><dt>Returns</dt><dd>The current logging level. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00692">692</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;{</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;    <span class="keywordflow">return</span> _log_level;</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ab2cd8b6e8e0aac442fc1e35ad9e1ac45"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab2cd8b6e8e0aac442fc1e35ad9e1ac45">&#9670;&nbsp;</a></span>log_test_end()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void log_test_end </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1test_1_1framework_1_1_test_info.xhtml">TestInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Tell the framework that a test case finished. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td>Test info. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00203">203</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;{</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <span class="keywordflow">if</span>(_log_level &gt;= <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a9632e44563b724240d9299f0ab14aae8">LogLevel::MEASUREMENTS</a>)</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    {</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        func_on_all_printers([&amp;](Printer * p)</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        {</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;            p-&gt;print_measurements(_test_results.at(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>).measurements);</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        });</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    }</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="keywordflow">if</span>(_log_level &gt;= <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9ac769ef7bddc01ed21a9f7c5fecbe2430">LogLevel::TESTS</a>)</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    {</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        func_on_all_printers([](Printer * p)</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        {</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;            p-&gt;print_test_footer();</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        });</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    }</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1framework_xhtml_aca1fd1d8935433e6ba2e3918214e07f9a9632e44563b724240d9299f0ab14aae8"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a9632e44563b724240d9299f0ab14aae8">arm_compute::test::framework::LogLevel::MEASUREMENTS</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1framework_xhtml_aca1fd1d8935433e6ba2e3918214e07f9ac769ef7bddc01ed21a9f7c5fecbe2430"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9ac769ef7bddc01ed21a9f7c5fecbe2430">arm_compute::test::framework::LogLevel::TESTS</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a4f4125dba5283887b34f889b1c615c0c"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">arm_compute::test::validation::info</a></div><div class="ttdeci">info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00182">ConvolutionLayer.cpp:182</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00182">arm_compute::test::validation::info</a>, <a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a9632e44563b724240d9299f0ab14aae8">arm_compute::test::framework::MEASUREMENTS</a>, <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_printer.xhtml#a93693778c8458ce21b0fc41b85467dd6">Printer::print_measurements()</a>, <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_printer.xhtml#a983ccd98b01612e3415a74981ec7d8ab">Printer::print_test_footer()</a>, and <a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9ac769ef7bddc01ed21a9f7c5fecbe2430">arm_compute::test::framework::TESTS</a>.</p>

</div>
</div>
<a id="a5a2d19934af27623634c5ab3c47a9446"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5a2d19934af27623634c5ab3c47a9446">&#9670;&nbsp;</a></span>log_test_skipped()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void log_test_skipped </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1test_1_1framework_1_1_test_info.xhtml">TestInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Tell the framework that a test case is skipped. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td>Test info. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00198">198</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;{</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    static_cast&lt;void&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>);</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a4f4125dba5283887b34f889b1c615c0c"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">arm_compute::test::validation::info</a></div><div class="ttdeci">info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00182">ConvolutionLayer.cpp:182</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00182">arm_compute::test::validation::info</a>.</p>

</div>
</div>
<a id="af8135a21178dd34ec3b334b83381269a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af8135a21178dd34ec3b334b83381269a">&#9670;&nbsp;</a></span>log_test_start()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void log_test_start </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1test_1_1framework_1_1_test_info.xhtml">TestInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Tell the framework that execution of a test starts. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td>Test info. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00187">187</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;{</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="keywordflow">if</span>(_log_level &gt;= <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9ac769ef7bddc01ed21a9f7c5fecbe2430">LogLevel::TESTS</a>)</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    {</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        func_on_all_printers([&amp;](Printer * p)</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        {</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;            p-&gt;print_test_header(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>);</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        });</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    }</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1framework_xhtml_aca1fd1d8935433e6ba2e3918214e07f9ac769ef7bddc01ed21a9f7c5fecbe2430"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9ac769ef7bddc01ed21a9f7c5fecbe2430">arm_compute::test::framework::LogLevel::TESTS</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a4f4125dba5283887b34f889b1c615c0c"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">arm_compute::test::validation::info</a></div><div class="ttdeci">info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00182">ConvolutionLayer.cpp:182</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00182">arm_compute::test::validation::info</a>, <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_printer.xhtml#a5c0a4b9fd162ee32e0e6231947b6e9b0">Printer::print_test_header()</a>, and <a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9ac769ef7bddc01ed21a9f7c5fecbe2430">arm_compute::test::framework::TESTS</a>.</p>

</div>
</div>
<a id="ab803db44aeb4ad8cd93193be5eaf0fb7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab803db44aeb4ad8cd93193be5eaf0fb7">&#9670;&nbsp;</a></span>num_iterations()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int num_iterations </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Number of iterations per test case. </p>
<dl class="section return"><dt>Returns</dt><dd>Number of iterations per test case. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00251">251</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;{</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="keywordflow">return</span> _num_iterations;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;}</div></div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_framework_8cpp_source.xhtml#l00256">Framework::set_num_iterations()</a>.</p>

</div>
</div>
<a id="aedbe6ac82569518fedc4a08718f8aa93"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aedbe6ac82569518fedc4a08718f8aa93">&#9670;&nbsp;</a></span>pop_suite()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pop_suite </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Remove innermost test suite. </p>
<dl class="section warning"><dt>Warning</dt><dd>Cannot be used at execution time. It can only be used for registering test cases. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00148">148</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;{</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    _test_suite_name.pop_back();</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;}</div></div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_registrars_8h_source.xhtml#l00100">TestSuiteRegistrar::TestSuiteRegistrar()</a>.</p>

</div>
</div>
<a id="a2899d3c2cd558569c0fd015419fe7a20"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2899d3c2cd558569c0fd015419fe7a20">&#9670;&nbsp;</a></span>print_test_info()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void print_test_info </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Print test info. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00168">168</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;{</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="keywordflow">if</span>(!_test_info.empty())</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    {</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        os &lt;&lt; <span class="stringliteral">&quot;CONTEXT:\n&quot;</span>;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;str : _test_info)</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        {</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;    &quot;</span> &lt;&lt; str &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        }</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    }</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;}</div></div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_asserts_8h_source.xhtml#l00057">arm_compute::test::framework::ARM_COMPUTE_PRINT_INFO()</a>.</p>

</div>
</div>
<a id="a2fac8e2013fb935c058fb09ffd972b54"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2fac8e2013fb935c058fb09ffd972b54">&#9670;&nbsp;</a></span>print_test_results()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void print_test_results </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_printer.xhtml">Printer</a> &amp;&#160;</td>
          <td class="paramname"><em>printer</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Use the specified printer to output test results from the last run. </p>
<p>This method can be used if the test results need to be obtained using a different printer than the one managed by the framework.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">printer</td><td><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_printer.xhtml" title="Abstract printer class used by the Framework to present output.">Printer</a> used to output results. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00623">623</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;{</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;    printer.print_run_header();</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;test : _test_results)</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;    {</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;        printer.print_test_header(test.first);</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;        printer.print_measurements(test.second.measurements);</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;        printer.print_test_footer();</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;    }</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    printer.print_run_footer();</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;}</div></div><!-- fragment -->
<p class="reference">References <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_printer.xhtml#a93693778c8458ce21b0fc41b85467dd6">Printer::print_measurements()</a>, <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_printer.xhtml#a2551b01adb00e6af451202a3aa2fe30a">Printer::print_run_footer()</a>, <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_printer.xhtml#aa8974e876a9d2e4ed49aeab9b0a18a96">Printer::print_run_header()</a>, <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_printer.xhtml#a983ccd98b01612e3415a74981ec7d8ab">Printer::print_test_footer()</a>, and <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_printer.xhtml#a5c0a4b9fd162ee32e0e6231947b6e9b0">Printer::print_test_header()</a>.</p>

</div>
</div>
<a id="a3893bc1fbad02227b78bbce22bcff1ba"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3893bc1fbad02227b78bbce22bcff1ba">&#9670;&nbsp;</a></span>push_suite()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void push_suite </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>name</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add a new test suite. </p>
<dl class="section warning"><dt>Warning</dt><dd>Cannot be used at execution time. It can only be used for registering test cases.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">name</td><td>Name of the added test suite.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Name of the current test suite. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00143">143</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;{</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    _test_suite_name.emplace_back(std::move(name));</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;}</div></div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_registrars_8h_source.xhtml#l00105">TestSuiteRegistrar::TestSuiteRegistrar()</a>.</p>

</div>
</div>
<a id="a149ad6701e3e2414cb566bb414029841"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a149ad6701e3e2414cb566bb414029841">&#9670;&nbsp;</a></span>run()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool run </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Run all enabled test cases. </p>
<dl class="section return"><dt>Returns</dt><dd>True if all test cases executed successful. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00538">538</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;{</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;    <span class="comment">// Clear old test results</span></div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;    _test_results.clear();</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;    <span class="keywordflow">if</span>(_log_level &gt;= <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9ac769ef7bddc01ed21a9f7c5fecbe2430">LogLevel::TESTS</a>)</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;    {</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;        func_on_all_printers([](Printer * p)</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;        {</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;            p-&gt;print_run_header();</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;        });</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;    }</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;    <span class="keyword">const</span> std::chrono::time_point&lt;std::chrono::high_resolution_clock&gt; start = std::chrono::high_resolution_clock::now();</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;    <span class="keywordtype">int</span> <span class="keywordtype">id</span>          = 0;</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;    <span class="keywordtype">int</span> id_run_test = 0;</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;test_factory : _test_factories)</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;    {</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;        <span class="keyword">const</span> std::string test_case_name = test_factory-&gt;name();</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;        <span class="keyword">const</span> TestInfo    test_info{ id, test_case_name, test_factory-&gt;mode(), test_factory-&gt;status() };</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;        <span class="keywordflow">if</span>(_test_filter.<a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_filter.xhtml#aa1631aec5fb0586629d6f634ffe6f8b4">is_selected</a>(test_info))</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;        {</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;<span class="preprocessor">#ifdef ARM_COMPUTE_CL</span></div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;            <span class="comment">// Every 100 tests, reset the OpenCL context to release the allocated memory</span></div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;            <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute.xhtml#a5f49decb4b0a74d5361686ab45db8961">opencl_is_available</a>() &amp;&amp; (id_run_test % 100) == 0)</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;            {</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;                <span class="keyword">auto</span> ctx_properties   = <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a86409f541991c3ac377c2a6b7d1f832d">context</a>().getInfo&lt;CL_CONTEXT_PROPERTIES&gt;(<span class="keyword">nullptr</span>);</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;                <span class="keyword">auto</span> queue_properties = <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a398a2582c746d28fc125487a44c9ed74">queue</a>().getInfo&lt;CL_QUEUE_PROPERTIES&gt;(<span class="keyword">nullptr</span>);</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;                cl::Context      new_ctx   = cl::Context(CL_DEVICE_TYPE_DEFAULT, ctx_properties.data());</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;                cl::CommandQueue new_queue = cl::CommandQueue(new_ctx, <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">CLKernelLibrary::get</a>().get_device(), queue_properties);</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;                <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">CLKernelLibrary::get</a>().<a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a0ad613086cc79a2e32d5b87bcefc7488">clear_programs_cache</a>();</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;                <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a293edc1bbcbddffb7228ac97917ed107">set_context</a>(new_ctx);</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;                <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9608e5af9f3a199f69ca6aa41b94359a">set_queue</a>(new_queue);</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;            }</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;<span class="preprocessor">#endif // ARM_COMPUTE_CL</span></div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;            run_test(test_info, *test_factory);</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;            ++id_run_test;</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;            <span class="comment">// Run test delay</span></div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#a9d63b2b6033b19236853f5f21d990b5b">sleep_in_seconds</a>(_cooldown_sec);</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;        }</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;        ++id;</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;    }</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;    <span class="keyword">const</span> std::chrono::time_point&lt;std::chrono::high_resolution_clock&gt; end = std::chrono::high_resolution_clock::now();</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;    <span class="keywordflow">if</span>(_log_level &gt;= <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9ac769ef7bddc01ed21a9f7c5fecbe2430">LogLevel::TESTS</a>)</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;    {</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;        func_on_all_printers([](Printer * p)</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;        {</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;            p-&gt;print_run_footer();</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;        });</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;    }</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;    <span class="keyword">auto</span> runtime = std::chrono::duration_cast&lt;std::chrono::seconds&gt;(end - start);</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;    std::map&lt;TestResult::Status, int&gt; results = count_test_results();</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;    <span class="keywordflow">if</span>(_log_level &gt; <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9ab50339a10e1de285ac99d4c3990b8693">LogLevel::NONE</a>)</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;    {</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;Executed &quot;</span> &lt;&lt; _test_results.size() &lt;&lt; <span class="stringliteral">&quot; test(s) (&quot;</span></div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;                  &lt;&lt; results[<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_test_result.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bad0749aaba8b833466dfcbb0428e4f89c">TestResult::Status::SUCCESS</a>] &lt;&lt; <span class="stringliteral">&quot; passed, &quot;</span></div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;                  &lt;&lt; results[<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_test_result.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70babdb2c34681be3432a08e0450b707a014">TestResult::Status::EXPECTED_FAILURE</a>] &lt;&lt; <span class="stringliteral">&quot; expected failures, &quot;</span></div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;                  &lt;&lt; results[<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_test_result.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bab9e14d9b2886bcff408b85aefa780419">TestResult::Status::FAILED</a>] &lt;&lt; <span class="stringliteral">&quot; failed, &quot;</span></div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;                  &lt;&lt; results[<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_test_result.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba9c51674930e03c276344d19f9e4398fb">TestResult::Status::CRASHED</a>] &lt;&lt; <span class="stringliteral">&quot; crashed, &quot;</span></div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;                  &lt;&lt; results[<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_test_result.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba055c1a591abb0e8cd86dc969727bcc0b">TestResult::Status::DISABLED</a>] &lt;&lt; <span class="stringliteral">&quot; disabled) in &quot;</span> &lt;&lt; runtime.count() &lt;&lt; <span class="stringliteral">&quot; second(s)\n&quot;</span>;</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;    }</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;    <span class="keywordtype">int</span> num_successful_tests = results[<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_test_result.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bad0749aaba8b833466dfcbb0428e4f89c">TestResult::Status::SUCCESS</a>] + results[<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_test_result.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70babdb2c34681be3432a08e0450b707a014">TestResult::Status::EXPECTED_FAILURE</a>] + results[<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_test_result.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba055c1a591abb0e8cd86dc969727bcc0b">TestResult::Status::DISABLED</a>];</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;    <span class="keywordflow">return</span> (static_cast&lt;unsigned int&gt;(num_successful_tests) == _test_results.size());</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a9b58d0eb9a2af8e6d7908695e1557d6c"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">arm_compute::CLScheduler::get</a></div><div class="ttdeci">static CLScheduler &amp; get()</div><div class="ttdoc">Access the scheduler singleton.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00099">CLScheduler.cpp:99</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a293edc1bbcbddffb7228ac97917ed107"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a293edc1bbcbddffb7228ac97917ed107">arm_compute::CLScheduler::set_context</a></div><div class="ttdeci">void set_context(cl::Context context)</div><div class="ttdoc">Accessor to set the CL context to be used by the scheduler.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00139">CLScheduler.cpp:139</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_acba005f5ce2c62cbf3f94d074d9007aa"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">arm_compute::CLKernelLibrary::get</a></div><div class="ttdeci">static CLKernelLibrary &amp; get()</div><div class="ttdoc">Access the KernelLibrary singleton.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8cpp_source.xhtml#l01072">CLKernelLibrary.cpp:1072</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1framework_xhtml_aca1fd1d8935433e6ba2e3918214e07f9ab50339a10e1de285ac99d4c3990b8693"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9ab50339a10e1de285ac99d4c3990b8693">arm_compute::test::framework::LogLevel::NONE</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1framework_xhtml_aca1fd1d8935433e6ba2e3918214e07f9ac769ef7bddc01ed21a9f7c5fecbe2430"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9ac769ef7bddc01ed21a9f7c5fecbe2430">arm_compute::test::framework::LogLevel::TESTS</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_a0ad613086cc79a2e32d5b87bcefc7488"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#a0ad613086cc79a2e32d5b87bcefc7488">arm_compute::CLKernelLibrary::clear_programs_cache</a></div><div class="ttdeci">void clear_programs_cache()</div><div class="ttdoc">Clear the library's cache of binary programs.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8cpp_source.xhtml#l01187">CLKernelLibrary.cpp:1187</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a86409f541991c3ac377c2a6b7d1f832d"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a86409f541991c3ac377c2a6b7d1f832d">arm_compute::CLScheduler::context</a></div><div class="ttdeci">cl::Context &amp; context()</div><div class="ttdoc">Accessor for the associated CL context.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00034">CLScheduler.cpp:34</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a398a2582c746d28fc125487a44c9ed74"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a398a2582c746d28fc125487a44c9ed74">arm_compute::CLScheduler::queue</a></div><div class="ttdeci">cl::CommandQueue &amp; queue()</div><div class="ttdoc">Accessor for the associated CL command queue.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00041">CLScheduler.cpp:41</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1framework_1_1_test_result_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70bad0749aaba8b833466dfcbb0428e4f89c"><div class="ttname"><a href="structarm__compute_1_1test_1_1framework_1_1_test_result.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bad0749aaba8b833466dfcbb0428e4f89c">arm_compute::test::framework::TestResult::Status::SUCCESS</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a9608e5af9f3a199f69ca6aa41b94359a"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a9608e5af9f3a199f69ca6aa41b94359a">arm_compute::CLScheduler::set_queue</a></div><div class="ttdeci">void set_queue(cl::CommandQueue queue)</div><div class="ttdoc">Accessor to set the CL command queue to be used by the scheduler.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00052">CLScheduler.cpp:52</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1framework_1_1_test_result_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70ba9c51674930e03c276344d19f9e4398fb"><div class="ttname"><a href="structarm__compute_1_1test_1_1framework_1_1_test_result.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba9c51674930e03c276344d19f9e4398fb">arm_compute::test::framework::TestResult::Status::CRASHED</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1framework_xhtml_a9d63b2b6033b19236853f5f21d990b5b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#a9d63b2b6033b19236853f5f21d990b5b">arm_compute::test::framework::sleep_in_seconds</a></div><div class="ttdeci">void sleep_in_seconds(float seconds)</div><div class="ttdoc">Makes the calling thread to sleep for a specified number of seconds.</div><div class="ttdef"><b>Definition:</b> <a href="tests_2framework_2_utils_8cpp_source.xhtml#l00038">Utils.cpp:38</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1framework_1_1_test_result_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70ba055c1a591abb0e8cd86dc969727bcc0b"><div class="ttname"><a href="structarm__compute_1_1test_1_1framework_1_1_test_result.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba055c1a591abb0e8cd86dc969727bcc0b">arm_compute::test::framework::TestResult::Status::DISABLED</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_test_filter_xhtml_aa1631aec5fb0586629d6f634ffe6f8b4"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_test_filter.xhtml#aa1631aec5fb0586629d6f634ffe6f8b4">arm_compute::test::framework::TestFilter::is_selected</a></div><div class="ttdeci">bool is_selected(const TestInfo &amp;info) const</div><div class="ttdoc">Check if a test case is selected to be executed.</div><div class="ttdef"><b>Definition:</b> <a href="_test_filter_8cpp_source.xhtml#l00043">TestFilter.cpp:43</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1framework_1_1_test_result_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70bab9e14d9b2886bcff408b85aefa780419"><div class="ttname"><a href="structarm__compute_1_1test_1_1framework_1_1_test_result.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bab9e14d9b2886bcff408b85aefa780419">arm_compute::test::framework::TestResult::Status::FAILED</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1framework_1_1_test_result_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70babdb2c34681be3432a08e0450b707a014"><div class="ttname"><a href="structarm__compute_1_1test_1_1framework_1_1_test_result.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70babdb2c34681be3432a08e0450b707a014">arm_compute::test::framework::TestResult::Status::EXPECTED_FAILURE</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5f49decb4b0a74d5361686ab45db8961"><div class="ttname"><a href="namespacearm__compute.xhtml#a5f49decb4b0a74d5361686ab45db8961">arm_compute::opencl_is_available</a></div><div class="ttdeci">bool opencl_is_available()</div><div class="ttdoc">Check if OpenCL is available.</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8cpp_source.xhtml#l00142">OpenCL.cpp:142</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_kernel_library_8cpp_source.xhtml#l01187">CLKernelLibrary::clear_programs_cache()</a>, <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00034">CLScheduler::context()</a>, <a class="el" href="structarm__compute_1_1test_1_1framework_1_1_test_result.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba9c51674930e03c276344d19f9e4398fb">TestResult::CRASHED</a>, <a class="el" href="structarm__compute_1_1test_1_1framework_1_1_test_result.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba055c1a591abb0e8cd86dc969727bcc0b">TestResult::DISABLED</a>, <a class="el" href="structarm__compute_1_1test_1_1framework_1_1_test_result.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70babdb2c34681be3432a08e0450b707a014">TestResult::EXPECTED_FAILURE</a>, <a class="el" href="structarm__compute_1_1test_1_1framework_1_1_test_result.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bab9e14d9b2886bcff408b85aefa780419">TestResult::FAILED</a>, <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00099">CLScheduler::get()</a>, <a class="el" href="_c_l_kernel_library_8cpp_source.xhtml#l01072">CLKernelLibrary::get()</a>, <a class="el" href="_test_filter_8cpp_source.xhtml#l00043">TestFilter::is_selected()</a>, <a class="el" href="_test_case_factory_8h_source.xhtml#l00153">TestCaseFactory::mode()</a>, <a class="el" href="_test_case_factory_8h_source.xhtml#l00141">TestCaseFactory::name()</a>, <a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9ab50339a10e1de285ac99d4c3990b8693">arm_compute::test::framework::NONE</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00142">arm_compute::opencl_is_available()</a>, <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_printer.xhtml#a2551b01adb00e6af451202a3aa2fe30a">Printer::print_run_footer()</a>, <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_printer.xhtml#aa8974e876a9d2e4ed49aeab9b0a18a96">Printer::print_run_header()</a>, <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00041">CLScheduler::queue()</a>, <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00139">CLScheduler::set_context()</a>, <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00052">CLScheduler::set_queue()</a>, <a class="el" href="tests_2framework_2_utils_8cpp_source.xhtml#l00038">arm_compute::test::framework::sleep_in_seconds()</a>, <a class="el" href="_test_case_factory_8h_source.xhtml#l00158">TestCaseFactory::status()</a>, <a class="el" href="structarm__compute_1_1test_1_1framework_1_1_test_result.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bad0749aaba8b833466dfcbb0428e4f89c">TestResult::SUCCESS</a>, and <a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9ac769ef7bddc01ed21a9f7c5fecbe2430">arm_compute::test::framework::TESTS</a>.</p>

<p class="reference">Referenced by <a class="el" href="main_8cpp_source.xhtml#l00093">main()</a>.</p>

</div>
</div>
<a id="a46a0cefc3b9a13645548ec705f438ce9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a46a0cefc3b9a13645548ec705f438ce9">&#9670;&nbsp;</a></span>set_error_on_missing_assets()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void set_error_on_missing_assets </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>error_on_missing_assets</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set whether a test should be considered as failed if its assets cannot be found. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">error_on_missing_assets</td><td>True if a test should be marked as failed when its assets are missing. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00281">281</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;{</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    _error_on_missing_assets = <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a41183a1a8909c9f852acd99d3b69626d">error_on_missing_assets</a>;</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_framework_xhtml_a41183a1a8909c9f852acd99d3b69626d"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a41183a1a8909c9f852acd99d3b69626d">arm_compute::test::framework::Framework::error_on_missing_assets</a></div><div class="ttdeci">bool error_on_missing_assets() const</div><div class="ttdoc">Indicates if a test should be marked as failed when its assets are missing.</div><div class="ttdef"><b>Definition:</b> <a href="_framework_8cpp_source.xhtml#l00286">Framework.cpp:286</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_framework_8cpp_source.xhtml#l00286">Framework::error_on_missing_assets()</a>.</p>

<p class="reference">Referenced by <a class="el" href="main_8cpp_source.xhtml#l00093">main()</a>.</p>

</div>
</div>
<a id="a755837a8f4938f8013f4251014a958e4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a755837a8f4938f8013f4251014a958e4">&#9670;&nbsp;</a></span>set_instruments_info()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void set_instruments_info </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1test_1_1framework_1_1_instruments_info.xhtml">InstrumentsInfo</a>&#160;</td>
          <td class="paramname"><em>instr_info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets instruments info. </p>
<dl class="section note"><dt>Note</dt><dd>TODO(COMPMID-2638) : Remove once instruments are transferred outside the framework.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">instr_info</td><td>Instruments info to set </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00697">697</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;{</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#adeaa0a402395806e538066d09bcd668b">instruments_info</a> == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;    *<a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#adeaa0a402395806e538066d09bcd668b">instruments_info</a> = instr_info;</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1framework_xhtml_adeaa0a402395806e538066d09bcd668b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#adeaa0a402395806e538066d09bcd668b">arm_compute::test::framework::instruments_info</a></div><div class="ttdeci">std::unique_ptr&lt; InstrumentsInfo &gt; instruments_info</div><div class="ttdef"><b>Definition:</b> <a href="_framework_8cpp_source.xhtml#l00049">Framework.cpp:49</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, and <a class="el" href="_framework_8cpp_source.xhtml#l00049">arm_compute::test::framework::instruments_info</a>.</p>

<p class="reference">Referenced by <a class="el" href="main_8cpp_source.xhtml#l00093">main()</a>.</p>

</div>
</div>
<a id="ae0b69f2142100651d022d5af576f42cf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae0b69f2142100651d022d5af576f42cf">&#9670;&nbsp;</a></span>set_num_iterations()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void set_num_iterations </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>num_iterations</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set number of iterations per test case. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">num_iterations</td><td>Number of iterations per test case. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00256">256</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;{</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    _num_iterations = <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#ab803db44aeb4ad8cd93193be5eaf0fb7">num_iterations</a>;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_framework_xhtml_ab803db44aeb4ad8cd93193be5eaf0fb7"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#ab803db44aeb4ad8cd93193be5eaf0fb7">arm_compute::test::framework::Framework::num_iterations</a></div><div class="ttdeci">int num_iterations() const</div><div class="ttdoc">Number of iterations per test case.</div><div class="ttdef"><b>Definition:</b> <a href="_framework_8cpp_source.xhtml#l00251">Framework.cpp:251</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_framework_8cpp_source.xhtml#l00251">Framework::num_iterations()</a>.</p>

</div>
</div>
<a id="ab4b7e9757ad7e9d23b608b617c5dffa6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab4b7e9757ad7e9d23b608b617c5dffa6">&#9670;&nbsp;</a></span>set_stop_on_error()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void set_stop_on_error </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>stop_on_error</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set whether to abort execution after the first failed test. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">stop_on_error</td><td>True if execution is going to be aborted after first failed test. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00271">271</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;{</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    _stop_on_error = <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a0fa5f7d6bcff8bfd18ec2aadf660a489">stop_on_error</a>;</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_framework_xhtml_a0fa5f7d6bcff8bfd18ec2aadf660a489"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a0fa5f7d6bcff8bfd18ec2aadf660a489">arm_compute::test::framework::Framework::stop_on_error</a></div><div class="ttdeci">bool stop_on_error() const</div><div class="ttdoc">Indicates if test execution is stopped after the first failed test.</div><div class="ttdef"><b>Definition:</b> <a href="_framework_8cpp_source.xhtml#l00276">Framework.cpp:276</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_framework_8cpp_source.xhtml#l00276">Framework::stop_on_error()</a>.</p>

<p class="reference">Referenced by <a class="el" href="main_8cpp_source.xhtml#l00093">main()</a>.</p>

</div>
</div>
<a id="a4494f098cda45f40105c454d0ffa9147"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4494f098cda45f40105c454d0ffa9147">&#9670;&nbsp;</a></span>set_test_result()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void set_test_result </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1test_1_1framework_1_1_test_info.xhtml">TestInfo</a>&#160;</td>
          <td class="paramname"><em>info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1test_1_1framework_1_1_test_result.xhtml">TestResult</a>&#160;</td>
          <td class="paramname"><em>result</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the result for an executed test case. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td>Test info. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">result</td><td>Execution result. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00618">618</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;{</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;    _test_results.emplace(std::move(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>), std::move(result));</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a4f4125dba5283887b34f889b1c615c0c"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">arm_compute::test::validation::info</a></div><div class="ttdeci">info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00182">ConvolutionLayer.cpp:182</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00182">arm_compute::test::validation::info</a>.</p>

</div>
</div>
<a id="a5e61ba4403f0d2bd4f755f59193af692"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5e61ba4403f0d2bd4f755f59193af692">&#9670;&nbsp;</a></span>set_throw_errors()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void set_throw_errors </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>throw_errors</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set whether errors are caught or thrown by the framework. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">throw_errors</td><td>True if errors should be thrown. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00261">261</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;{</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    _throw_errors = <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#af2086722b11ed9e777db00a74cdecfc1">throw_errors</a>;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_framework_xhtml_af2086722b11ed9e777db00a74cdecfc1"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#af2086722b11ed9e777db00a74cdecfc1">arm_compute::test::framework::Framework::throw_errors</a></div><div class="ttdeci">bool throw_errors() const</div><div class="ttdoc">Should errors be caught or thrown by the framework.</div><div class="ttdef"><b>Definition:</b> <a href="_framework_8cpp_source.xhtml#l00266">Framework.cpp:266</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_framework_8cpp_source.xhtml#l00266">Framework::throw_errors()</a>.</p>

<p class="reference">Referenced by <a class="el" href="main_8cpp_source.xhtml#l00093">main()</a>.</p>

</div>
</div>
<a id="a0fa5f7d6bcff8bfd18ec2aadf660a489"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0fa5f7d6bcff8bfd18ec2aadf660a489">&#9670;&nbsp;</a></span>stop_on_error()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool stop_on_error </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Indicates if test execution is stopped after the first failed test. </p>
<dl class="section return"><dt>Returns</dt><dd>True if the execution is going to be aborted after the first failed test. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00276">276</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;{</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    <span class="keywordflow">return</span> _stop_on_error;</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;}</div></div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_framework_8cpp_source.xhtml#l00271">Framework::set_stop_on_error()</a>.</p>

</div>
</div>
<a id="aacd94676ebb33ecba00dfebe12c9392d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aacd94676ebb33ecba00dfebe12c9392d">&#9670;&nbsp;</a></span>test_infos()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; <a class="el" href="structarm__compute_1_1test_1_1framework_1_1_test_info.xhtml">TestInfo</a> &gt; test_infos </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>List of <a class="el" href="structarm__compute_1_1test_1_1framework_1_1_test_info.xhtml">TestInfo</a>'s. </p>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="struct_vector.xhtml" title="Structure to hold Vector information.">Vector</a> with all test ids. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00671">671</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;{</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;    std::vector&lt;TestInfo&gt; ids;</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;    <span class="keywordtype">int</span> <span class="keywordtype">id</span> = 0;</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;factory : _test_factories)</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;    {</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;        TestInfo test_info{ id, factory-&gt;name(), factory-&gt;mode(), factory-&gt;status() };</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;        <span class="keywordflow">if</span>(_test_filter.<a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_filter.xhtml#aa1631aec5fb0586629d6f634ffe6f8b4">is_selected</a>(test_info))</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;        {</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;            ids.emplace_back(std::move(test_info));</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;        }</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;        ++id;</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;    }</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;    <span class="keywordflow">return</span> ids;</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_test_filter_xhtml_aa1631aec5fb0586629d6f634ffe6f8b4"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_test_filter.xhtml#aa1631aec5fb0586629d6f634ffe6f8b4">arm_compute::test::framework::TestFilter::is_selected</a></div><div class="ttdeci">bool is_selected(const TestInfo &amp;info) const</div><div class="ttdoc">Check if a test case is selected to be executed.</div><div class="ttdef"><b>Definition:</b> <a href="_test_filter_8cpp_source.xhtml#l00043">TestFilter.cpp:43</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_test_filter_8cpp_source.xhtml#l00043">TestFilter::is_selected()</a>, and <a class="el" href="_framework_8h_source.xhtml#l00081">TestInfo::name</a>.</p>

<p class="reference">Referenced by <a class="el" href="main_8cpp_source.xhtml#l00093">main()</a>.</p>

</div>
</div>
<a id="af2086722b11ed9e777db00a74cdecfc1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af2086722b11ed9e777db00a74cdecfc1">&#9670;&nbsp;</a></span>throw_errors()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool throw_errors </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Should errors be caught or thrown by the framework. </p>
<dl class="section return"><dt>Returns</dt><dd>True if errors are thrown. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00266">266</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;{</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <span class="keywordflow">return</span> _throw_errors;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;}</div></div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_framework_8cpp_source.xhtml#l00261">Framework::set_throw_errors()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>tests/framework/<a class="el" href="_framework_8h_source.xhtml">Framework.h</a></li>
<li>tests/framework/<a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1test.xhtml">test</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml">framework</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml">Framework</a></li>
    <li class="footer">Generated on Fri Feb 21 2020 11:10:32 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
