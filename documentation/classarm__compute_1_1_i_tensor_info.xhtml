<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: ITensorInfo Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.02.1</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classarm__compute_1_1_i_tensor_info.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">ITensorInfo Class Reference<span class="mlabels"><span class="mlabel">abstract</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p>Store the tensor's metadata.  
 <a href="classarm__compute_1_1_i_tensor_info.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_i_tensor_info_8h_source.xhtml">ITensorInfo.h</a>&gt;</code></p>
<div class="dynheader">
Collaboration diagram for ITensorInfo:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classarm__compute_1_1_i_tensor_info__coll__graph.svg" width="206" height="203"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ad998b50febf68540277e121a9c670bfa"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ad998b50febf68540277e121a9c670bfa">~ITensorInfo</a> ()=default</td></tr>
<tr class="memdesc:ad998b50febf68540277e121a9c670bfa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default virtual destructor.  <a href="#ad998b50febf68540277e121a9c670bfa">More...</a><br /></td></tr>
<tr class="separator:ad998b50febf68540277e121a9c670bfa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ebcdce876b4cd07736afa47d50154de"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a9ebcdce876b4cd07736afa47d50154de">set_data_type</a> (<a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>)=0</td></tr>
<tr class="memdesc:a9ebcdce876b4cd07736afa47d50154de"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the data type to the specified value.  <a href="#a9ebcdce876b4cd07736afa47d50154de">More...</a><br /></td></tr>
<tr class="separator:a9ebcdce876b4cd07736afa47d50154de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf74be25e2392705f29352ffaa4b1f9d"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#aaf74be25e2392705f29352ffaa4b1f9d">set_num_channels</a> (int <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ad7829ae79223ab87f9da4c0bd7d229ba">num_channels</a>)=0</td></tr>
<tr class="memdesc:aaf74be25e2392705f29352ffaa4b1f9d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the number of channels to the specified value.  <a href="#aaf74be25e2392705f29352ffaa4b1f9d">More...</a><br /></td></tr>
<tr class="separator:aaf74be25e2392705f29352ffaa4b1f9d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a17394f0f7aea22d9b2d4c6f33bfa69ca"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a17394f0f7aea22d9b2d4c6f33bfa69ca">set_format</a> (<a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a57360dd9ca408834c0ea1a8ef70a11f4">format</a>)=0</td></tr>
<tr class="memdesc:a17394f0f7aea22d9b2d4c6f33bfa69ca"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the format of an already initialized tensor.  <a href="#a17394f0f7aea22d9b2d4c6f33bfa69ca">More...</a><br /></td></tr>
<tr class="separator:a17394f0f7aea22d9b2d4c6f33bfa69ca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a12a4f1190952613e36b44846962e26bb"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a12a4f1190952613e36b44846962e26bb">set_tensor_shape</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape)=0</td></tr>
<tr class="memdesc:a12a4f1190952613e36b44846962e26bb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the shape of an already initialized tensor.  <a href="#a12a4f1190952613e36b44846962e26bb">More...</a><br /></td></tr>
<tr class="separator:a12a4f1190952613e36b44846962e26bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a575d37eaf8a905c8ca3c0250757c2b81"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a575d37eaf8a905c8ca3c0250757c2b81">set_quantization_info</a> (const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;<a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">quantization_info</a>)=0</td></tr>
<tr class="memdesc:a575d37eaf8a905c8ca3c0250757c2b81"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the quantization settings (scale and offset) of the tensor.  <a href="#a575d37eaf8a905c8ca3c0250757c2b81">More...</a><br /></td></tr>
<tr class="separator:a575d37eaf8a905c8ca3c0250757c2b81"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abb9481fe056b9749f9b4c08db101cc15"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#abb9481fe056b9749f9b4c08db101cc15">set_data_layout</a> (const <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> &amp;<a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">data_layout</a>)=0</td></tr>
<tr class="memdesc:abb9481fe056b9749f9b4c08db101cc15"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the data layout of the tensor.  <a href="#abb9481fe056b9749f9b4c08db101cc15">More...</a><br /></td></tr>
<tr class="separator:abb9481fe056b9749f9b4c08db101cc15"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afc135290818a7ae02d2195c013796fdd"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#afc135290818a7ae02d2195c013796fdd">reset_padding</a> ()=0</td></tr>
<tr class="memdesc:afc135290818a7ae02d2195c013796fdd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Resets the padding settings of the tensor.  <a href="#afc135290818a7ae02d2195c013796fdd">More...</a><br /></td></tr>
<tr class="separator:afc135290818a7ae02d2195c013796fdd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4f2d0ac983637a0459daf43bcd65cc38"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a4f2d0ac983637a0459daf43bcd65cc38">auto_padding</a> ()=0</td></tr>
<tr class="memdesc:a4f2d0ac983637a0459daf43bcd65cc38"><td class="mdescLeft">&#160;</td><td class="mdescRight">Update the offset to the first element and the strides to automatically computed values.  <a href="#a4f2d0ac983637a0459daf43bcd65cc38">More...</a><br /></td></tr>
<tr class="separator:a4f2d0ac983637a0459daf43bcd65cc38"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0cd5aea514f03afb48ebe22581ea4c66"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a0cd5aea514f03afb48ebe22581ea4c66">extend_padding</a> (const <a class="el" href="namespacearm__compute.xhtml#a4467b302fc9ec312c40580336ab783da">PaddingSize</a> &amp;<a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a07b929c34ad1dc823d8315876aa403ce">padding</a>)=0</td></tr>
<tr class="memdesc:a0cd5aea514f03afb48ebe22581ea4c66"><td class="mdescLeft">&#160;</td><td class="mdescRight">Update the offset to the first element, the strides and the total size.  <a href="#a0cd5aea514f03afb48ebe22581ea4c66">More...</a><br /></td></tr>
<tr class="separator:a0cd5aea514f03afb48ebe22581ea4c66"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a178f0d3d87f959e00a743328d95359d2"><td class="memItemLeft" align="right" valign="top">virtual size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a> (size_t index) const =0</td></tr>
<tr class="memdesc:a178f0d3d87f959e00a743328d95359d2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the size of the requested dimension.  <a href="#a178f0d3d87f959e00a743328d95359d2">More...</a><br /></td></tr>
<tr class="separator:a178f0d3d87f959e00a743328d95359d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae3372a4569b4702a881b1606b0c144c4"><td class="memItemLeft" align="right" valign="top">virtual size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ae3372a4569b4702a881b1606b0c144c4">dimension</a> (<a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02">DataLayoutDimension</a> dimension) const =0</td></tr>
<tr class="memdesc:ae3372a4569b4702a881b1606b0c144c4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the size of the requested data layout dimension.  <a href="#ae3372a4569b4702a881b1606b0c144c4">More...</a><br /></td></tr>
<tr class="separator:ae3372a4569b4702a881b1606b0c144c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6b14f175bf5281f57b561e2d4e4b1f1f"><td class="memItemLeft" align="right" valign="top">virtual const <a class="el" href="classarm__compute_1_1_strides.xhtml">Strides</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">strides_in_bytes</a> () const =0</td></tr>
<tr class="memdesc:a6b14f175bf5281f57b561e2d4e4b1f1f"><td class="mdescLeft">&#160;</td><td class="mdescRight">The strides in bytes for accessing each dimension of the tensor.  <a href="#a6b14f175bf5281f57b561e2d4e4b1f1f">More...</a><br /></td></tr>
<tr class="separator:a6b14f175bf5281f57b561e2d4e4b1f1f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0bd5cc32e7e4c0699eccba91e5de397"><td class="memItemLeft" align="right" valign="top">virtual size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ad0bd5cc32e7e4c0699eccba91e5de397">offset_first_element_in_bytes</a> () const =0</td></tr>
<tr class="memdesc:ad0bd5cc32e7e4c0699eccba91e5de397"><td class="mdescLeft">&#160;</td><td class="mdescRight">The offset from the beginning of the memory allocation to the first element of the tensor.  <a href="#ad0bd5cc32e7e4c0699eccba91e5de397">More...</a><br /></td></tr>
<tr class="separator:ad0bd5cc32e7e4c0699eccba91e5de397"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac80aea0e8c7c5c812ea8c7221fbfd4b2"><td class="memItemLeft" align="right" valign="top">virtual int32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ac80aea0e8c7c5c812ea8c7221fbfd4b2">offset_element_in_bytes</a> (const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;pos) const =0</td></tr>
<tr class="memdesc:ac80aea0e8c7c5c812ea8c7221fbfd4b2"><td class="mdescLeft">&#160;</td><td class="mdescRight">The offset in bytes from the beginning of the memory allocation to access the element at position (x, y, z ...)  <a href="#ac80aea0e8c7c5c812ea8c7221fbfd4b2">More...</a><br /></td></tr>
<tr class="separator:ac80aea0e8c7c5c812ea8c7221fbfd4b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa459796b5489eca8a9160cb5dcf1a103"><td class="memItemLeft" align="right" valign="top">virtual size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#aa459796b5489eca8a9160cb5dcf1a103">element_size</a> () const =0</td></tr>
<tr class="memdesc:aa459796b5489eca8a9160cb5dcf1a103"><td class="mdescLeft">&#160;</td><td class="mdescRight">Element size in bytes calculated as data_size() * <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ad7829ae79223ab87f9da4c0bd7d229ba" title="The number of channels for each tensor element.">num_channels()</a>  <a href="#aa459796b5489eca8a9160cb5dcf1a103">More...</a><br /></td></tr>
<tr class="separator:aa459796b5489eca8a9160cb5dcf1a103"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1f4e725b8e1ea36b30e09dc08ae6961d"><td class="memItemLeft" align="right" valign="top">virtual size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a1f4e725b8e1ea36b30e09dc08ae6961d">num_dimensions</a> () const =0</td></tr>
<tr class="memdesc:a1f4e725b8e1ea36b30e09dc08ae6961d"><td class="mdescLeft">&#160;</td><td class="mdescRight">The number of dimensions of the tensor (rank)  <a href="#a1f4e725b8e1ea36b30e09dc08ae6961d">More...</a><br /></td></tr>
<tr class="separator:a1f4e725b8e1ea36b30e09dc08ae6961d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad7829ae79223ab87f9da4c0bd7d229ba"><td class="memItemLeft" align="right" valign="top">virtual size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ad7829ae79223ab87f9da4c0bd7d229ba">num_channels</a> () const =0</td></tr>
<tr class="memdesc:ad7829ae79223ab87f9da4c0bd7d229ba"><td class="mdescLeft">&#160;</td><td class="mdescRight">The number of channels for each tensor element.  <a href="#ad7829ae79223ab87f9da4c0bd7d229ba">More...</a><br /></td></tr>
<tr class="separator:ad7829ae79223ab87f9da4c0bd7d229ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7c66505457d00ece3aa4b34cab80757d"><td class="memItemLeft" align="right" valign="top">virtual const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a> () const =0</td></tr>
<tr class="memdesc:a7c66505457d00ece3aa4b34cab80757d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Size for each dimension of the tensor.  <a href="#a7c66505457d00ece3aa4b34cab80757d">More...</a><br /></td></tr>
<tr class="separator:a7c66505457d00ece3aa4b34cab80757d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7cfb31af63202568efef5214acfbf3ba"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a> () const =0</td></tr>
<tr class="memdesc:a7cfb31af63202568efef5214acfbf3ba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Data type used for each element of the tensor.  <a href="#a7cfb31af63202568efef5214acfbf3ba">More...</a><br /></td></tr>
<tr class="separator:a7cfb31af63202568efef5214acfbf3ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a57360dd9ca408834c0ea1a8ef70a11f4"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a57360dd9ca408834c0ea1a8ef70a11f4">format</a> () const =0</td></tr>
<tr class="memdesc:a57360dd9ca408834c0ea1a8ef70a11f4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Colour format of the image.  <a href="#a57360dd9ca408834c0ea1a8ef70a11f4">More...</a><br /></td></tr>
<tr class="separator:a57360dd9ca408834c0ea1a8ef70a11f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a18064e0011c3869d884653e9e7c47b66"><td class="memItemLeft" align="right" valign="top">virtual size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a18064e0011c3869d884653e9e7c47b66">total_size</a> () const =0</td></tr>
<tr class="memdesc:a18064e0011c3869d884653e9e7c47b66"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the total size of the tensor in bytes.  <a href="#a18064e0011c3869d884653e9e7c47b66">More...</a><br /></td></tr>
<tr class="separator:a18064e0011c3869d884653e9e7c47b66"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a07b929c34ad1dc823d8315876aa403ce"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespacearm__compute.xhtml#a4467b302fc9ec312c40580336ab783da">PaddingSize</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a07b929c34ad1dc823d8315876aa403ce">padding</a> () const =0</td></tr>
<tr class="memdesc:a07b929c34ad1dc823d8315876aa403ce"><td class="mdescLeft">&#160;</td><td class="mdescRight">Padding of tensor.  <a href="#a07b929c34ad1dc823d8315876aa403ce">More...</a><br /></td></tr>
<tr class="separator:a07b929c34ad1dc823d8315876aa403ce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac394d6570ab3325810a3532d39091a52"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ac394d6570ab3325810a3532d39091a52">has_padding</a> () const =0</td></tr>
<tr class="memdesc:ac394d6570ab3325810a3532d39091a52"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks if the tensor has been allocated with padding or not.  <a href="#ac394d6570ab3325810a3532d39091a52">More...</a><br /></td></tr>
<tr class="separator:ac394d6570ab3325810a3532d39091a52"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af555338f11d1d28f258f259ac3da743b"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#af555338f11d1d28f258f259ac3da743b">is_resizable</a> () const =0</td></tr>
<tr class="memdesc:af555338f11d1d28f258f259ac3da743b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Flag indicating whether the size of the tensor can be changed.  <a href="#af555338f11d1d28f258f259ac3da743b">More...</a><br /></td></tr>
<tr class="separator:af555338f11d1d28f258f259ac3da743b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5b65f0a62b9fad74cd3024ff983dd313"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a5b65f0a62b9fad74cd3024ff983dd313">is_dynamic</a> () const =0</td></tr>
<tr class="memdesc:a5b65f0a62b9fad74cd3024ff983dd313"><td class="mdescLeft">&#160;</td><td class="mdescRight">Flag indicating whether the shape of the tensor is dynamic, meaning that it can change on kernel/function execution.  <a href="#a5b65f0a62b9fad74cd3024ff983dd313">More...</a><br /></td></tr>
<tr class="separator:a5b65f0a62b9fad74cd3024ff983dd313"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9273842d8e5dc1a3c7fab727176fd7fe"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a9273842d8e5dc1a3c7fab727176fd7fe">set_is_resizable</a> (bool <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#af555338f11d1d28f258f259ac3da743b">is_resizable</a>)=0</td></tr>
<tr class="memdesc:a9273842d8e5dc1a3c7fab727176fd7fe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the flag whether the tensor size can be changed.  <a href="#a9273842d8e5dc1a3c7fab727176fd7fe">More...</a><br /></td></tr>
<tr class="separator:a9273842d8e5dc1a3c7fab727176fd7fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af5304ca721ea07fa71ea5cce02b796fa"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#af5304ca721ea07fa71ea5cce02b796fa">set_is_dynamic</a> (bool <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a5b65f0a62b9fad74cd3024ff983dd313">is_dynamic</a>)=0</td></tr>
<tr class="memdesc:af5304ca721ea07fa71ea5cce02b796fa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the flag whether the tensor size is dynamic.  <a href="#af5304ca721ea07fa71ea5cce02b796fa">More...</a><br /></td></tr>
<tr class="separator:af5304ca721ea07fa71ea5cce02b796fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a74dfd07380a290c34fe7c8e065029b95"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a74dfd07380a290c34fe7c8e065029b95">valid_region</a> () const =0</td></tr>
<tr class="memdesc:a74dfd07380a290c34fe7c8e065029b95"><td class="mdescLeft">&#160;</td><td class="mdescRight">Valid region of the tensor.  <a href="#a74dfd07380a290c34fe7c8e065029b95">More...</a><br /></td></tr>
<tr class="separator:a74dfd07380a290c34fe7c8e065029b95"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9586081a29fceb532ab270bd843abee6"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a9586081a29fceb532ab270bd843abee6">set_valid_region</a> (const <a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &amp;<a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a74dfd07380a290c34fe7c8e065029b95">valid_region</a>)=0</td></tr>
<tr class="memdesc:a9586081a29fceb532ab270bd843abee6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the valid region of the tensor.  <a href="#a9586081a29fceb532ab270bd843abee6">More...</a><br /></td></tr>
<tr class="separator:a9586081a29fceb532ab270bd843abee6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f3e1a3200223e6a304a533b1016e749"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">quantization_info</a> () const =0</td></tr>
<tr class="memdesc:a3f3e1a3200223e6a304a533b1016e749"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the quantization settings (scale and offset) of the tensor.  <a href="#a3f3e1a3200223e6a304a533b1016e749">More...</a><br /></td></tr>
<tr class="separator:a3f3e1a3200223e6a304a533b1016e749"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a367b5090ab432bc7de2c32369e087ab1"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">data_layout</a> () const =0</td></tr>
<tr class="memdesc:a367b5090ab432bc7de2c32369e087ab1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the data layout of the tensor.  <a href="#a367b5090ab432bc7de2c32369e087ab1">More...</a><br /></td></tr>
<tr class="separator:a367b5090ab432bc7de2c32369e087ab1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarm__compute_1_1misc_1_1_i_cloneable"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarm__compute_1_1misc_1_1_i_cloneable')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarm__compute_1_1misc_1_1_i_cloneable.xhtml">ICloneable&lt; ITensorInfo &gt;</a></td></tr>
<tr class="memitem:a711fa7a27557369760fc1fd236deb51c inherit pub_methods_classarm__compute_1_1misc_1_1_i_cloneable"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1misc_1_1_i_cloneable.xhtml#a711fa7a27557369760fc1fd236deb51c">~ICloneable</a> ()=default</td></tr>
<tr class="memdesc:a711fa7a27557369760fc1fd236deb51c inherit pub_methods_classarm__compute_1_1misc_1_1_i_cloneable"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default virtual desctructor.  <a href="classarm__compute_1_1misc_1_1_i_cloneable.xhtml#a711fa7a27557369760fc1fd236deb51c">More...</a><br /></td></tr>
<tr class="separator:a711fa7a27557369760fc1fd236deb51c inherit pub_methods_classarm__compute_1_1misc_1_1_i_cloneable"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4d10e5012a872e7f78f2b539b673049d inherit pub_methods_classarm__compute_1_1misc_1_1_i_cloneable"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1misc_1_1_i_cloneable.xhtml#a4d10e5012a872e7f78f2b539b673049d">clone</a> () const=0</td></tr>
<tr class="memdesc:a4d10e5012a872e7f78f2b539b673049d inherit pub_methods_classarm__compute_1_1misc_1_1_i_cloneable"><td class="mdescLeft">&#160;</td><td class="mdescRight">Provide a clone of the current object of class T.  <a href="classarm__compute_1_1misc_1_1_i_cloneable.xhtml#a4d10e5012a872e7f78f2b539b673049d">More...</a><br /></td></tr>
<tr class="separator:a4d10e5012a872e7f78f2b539b673049d inherit pub_methods_classarm__compute_1_1misc_1_1_i_cloneable"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:ae056a42fb510e2fa170a74ab06ee31da"><td class="memTemplParams" colspan="2">template&lt;typename... Infos&gt; </td></tr>
<tr class="memitem:ae056a42fb510e2fa170a74ab06ee31da"><td class="memTemplItemLeft" align="right" valign="top">static std::pair&lt; <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>, <a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ae056a42fb510e2fa170a74ab06ee31da">broadcast_shape_and_valid_region</a> (const Infos &amp;... infos)</td></tr>
<tr class="memdesc:ae056a42fb510e2fa170a74ab06ee31da"><td class="mdescLeft">&#160;</td><td class="mdescRight">If infos are broadcast compatible tensor info's, return the broadcasted shape and the intersection of the broadcasted valid regions of the tensors.  <a href="#ae056a42fb510e2fa170a74ab06ee31da">More...</a><br /></td></tr>
<tr class="separator:ae056a42fb510e2fa170a74ab06ee31da"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Store the tensor's metadata. </p>

<p class="definition">Definition at line <a class="el" href="_i_tensor_info_8h_source.xhtml#l00040">40</a> of file <a class="el" href="_i_tensor_info_8h_source.xhtml">ITensorInfo.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="ad998b50febf68540277e121a9c670bfa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad998b50febf68540277e121a9c670bfa">&#9670;&nbsp;</a></span>~ITensorInfo()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual ~<a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default virtual destructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a4f2d0ac983637a0459daf43bcd65cc38"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4f2d0ac983637a0459daf43bcd65cc38">&#9670;&nbsp;</a></span>auto_padding()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool auto_padding </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Update the offset to the first element and the strides to automatically computed values. </p>
<dl class="section note"><dt>Note</dt><dd>The padding used by this method is really conservative so that the tensor can be used for most functions.</dd></dl>
<dl class="section return"><dt>Returns</dt><dd>True if the strides or the offset to the first element have changed. </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a907f837b924945ad1981c8fe8eca61e4">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a907f837b924945ad1981c8fe8eca61e4">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00114">SubTensorInfo::auto_padding()</a>, and <a class="el" href="_access_window_auto_padding_8cpp_source.xhtml#l00073">AccessWindowAutoPadding::update_padding_if_needed()</a>.</p>

</div>
</div>
<a id="ae056a42fb510e2fa170a74ab06ee31da"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae056a42fb510e2fa170a74ab06ee31da">&#9670;&nbsp;</a></span>broadcast_shape_and_valid_region()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static std::pair&lt;<a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>, <a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a>&gt; broadcast_shape_and_valid_region </td>
          <td>(</td>
          <td class="paramtype">const Infos &amp;...&#160;</td>
          <td class="paramname"><em>infos</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>If infos are broadcast compatible tensor info's, return the broadcasted shape and the intersection of the broadcasted valid regions of the tensors. </p>
<p>Two tensor info's are broadcast compatible if their shapes are broadcast compatible.</p>
<p>Two tensor shapes are broadcast compatible if for each dimension, they're equal or one of them is 1.</p>
<p>If two shapes are compatible, each dimension in the broadcasted shape is the max of the original dimensions.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">infos</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> info's.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The broadcasted shape and valid region, or an empty shape and valid region if the info's are not broadcast compatible. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_i_tensor_info_8h_source.xhtml#l00259">259</a> of file <a class="el" href="_i_tensor_info_8h_source.xhtml">ITensorInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    {</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        TensorShape bc_shape = <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#a244a32cac2f5011bd0fc49700bf3d5de">TensorShape::broadcast_shape</a>(infos.tensor_shape()...);</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        ValidRegion bc_valid_region{ Coordinates(), bc_shape };</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        <span class="keyword">auto</span> broadcast_valid_region = [&amp;bc_valid_region](<span class="keyword">const</span> ITensorInfo &amp; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>)</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        {</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;            <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.num_dimensions() != 0)</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;            {</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> d = 0; d &lt; bc_valid_region.shape.num_dimensions(); ++d)</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                {</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_broadcast = (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.tensor_shape()[d] == 1);</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">int</span>    anchor_max = std::max(bc_valid_region.anchor[d], <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.valid_region().anchor[d]);</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">size_t</span> valid_min  = std::min(bc_valid_region.shape[d], <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.valid_region().shape[d]);</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                    <span class="keywordflow">if</span>(!is_broadcast || (valid_min == 0))</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                    {</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                        bc_valid_region.anchor.set(d, anchor_max);</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;                        bc_valid_region.shape.set(d, valid_min);</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;                    }</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;                }</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;            }</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;        };</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;        <a class="code" href="namespacearm__compute_1_1utility.xhtml#a067ebd28103d827b6ec17032e2344064">utility::for_each</a>(broadcast_valid_region, infos...);</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;        <span class="keywordflow">return</span> std::pair&lt;TensorShape, ValidRegion&gt;(bc_shape, bc_valid_region);</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    }</div><div class="ttc" id="classarm__compute_1_1_tensor_shape_xhtml_a244a32cac2f5011bd0fc49700bf3d5de"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml#a244a32cac2f5011bd0fc49700bf3d5de">arm_compute::TensorShape::broadcast_shape</a></div><div class="ttdeci">static TensorShape broadcast_shape(const Shapes &amp;... shapes)</div><div class="ttdoc">If shapes are broadcast compatible, return the broadcasted shape.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00210">TensorShape.h:210</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1utility_xhtml_a067ebd28103d827b6ec17032e2344064"><div class="ttname"><a href="namespacearm__compute_1_1utility.xhtml#a067ebd28103d827b6ec17032e2344064">arm_compute::utility::for_each</a></div><div class="ttdeci">void for_each(F &amp;&amp;)</div><div class="ttdoc">Base case of for_each.</div><div class="ttdef"><b>Definition:</b> <a href="_utility_8h_source.xhtml#l00108">Utility.h:108</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a4f4125dba5283887b34f889b1c615c0c"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">arm_compute::test::validation::info</a></div><div class="ttdeci">info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00182">ConvolutionLayer.cpp:182</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_tensor_shape_8h_source.xhtml#l00210">TensorShape::broadcast_shape()</a>, <a class="el" href="_utility_8h_source.xhtml#l00108">arm_compute::utility::for_each()</a>, <a class="el" href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00182">arm_compute::test::validation::info</a>, and <a class="el" href="_tensor_shape_8h_source.xhtml#l00078">TensorShape::set()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_n_e_elementwise_unary_kernel_8cpp_source.xhtml#l00182">NEElementwiseUnaryKernel::configure()</a>.</p>

</div>
</div>
<a id="a367b5090ab432bc7de2c32369e087ab1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a367b5090ab432bc7de2c32369e087ab1">&#9670;&nbsp;</a></span>data_layout()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> data_layout </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the data layout of the tensor. </p>
<dl class="section return"><dt>Returns</dt><dd>A DataLayout containing the layout data information. </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a5f63b63606dbbbe54474e6e970a6738c">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a5f63b63606dbbbe54474e6e970a6738c">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_utils_8cpp_source.xhtml#l00258">ImageAccessor::access_tensor()</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00331">ValidationInputAccessor::access_tensor()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00220">arm_compute::auto_init_if_empty()</a>, <a class="el" href="_c_l_scale_kernel_8cpp_source.xhtml#l00182">CLScaleKernel::configure()</a>, <a class="el" href="_c_l_comparison_kernel_8cpp_source.xhtml#l00108">CLComparisonKernel::configure()</a>, <a class="el" href="_c_l_instance_normalization_layer_kernel_8cpp_source.xhtml#l00078">CLInstanceNormalizationLayerKernel::configure()</a>, <a class="el" href="_c_l_prior_box_layer_kernel_8cpp_source.xhtml#l00103">CLPriorBoxLayerKernel::configure()</a>, <a class="el" href="_n_e_y_o_l_o_layer_kernel_8cpp_source.xhtml#l00203">NEYOLOLayerKernel::configure()</a>, <a class="el" href="_c_l_fuse_batch_normalization_kernel_8cpp_source.xhtml#l00107">CLFuseBatchNormalizationKernel::configure()</a>, <a class="el" href="_n_e_fuse_batch_normalization_kernel_8cpp_source.xhtml#l00422">NEFuseBatchNormalizationKernel::configure()</a>, <a class="el" href="_n_e_generate_proposals_layer_8cpp_source.xhtml#l00065">NEGenerateProposalsLayer::configure()</a>, <a class="el" href="_c_l_generate_proposals_layer_8cpp_source.xhtml#l00065">CLGenerateProposalsLayer::configure()</a>, <a class="el" href="_accessor_8h_source.xhtml#l00106">Accessor::data_layout()</a>, <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00225">SubTensorInfo::data_layout()</a>, <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00124">SubTensorInfo::dimension()</a>, <a class="el" href="_validate_8h_source.xhtml#l00709">arm_compute::error_on_data_layout_not_in()</a>, <a class="el" href="_validate_8h_source.xhtml#l00457">arm_compute::error_on_mismatching_data_layouts()</a>, <a class="el" href="_c_p_p_flip_weights_kernel_8cpp_source.xhtml#l00045">CPPFlipWeightsKernel::flip_weights()</a>, <a class="el" href="_n_e_channel_shuffle_layer_kernel_8cpp_source.xhtml#l00169">NEChannelShuffleLayerKernel::run()</a>, <a class="el" href="_c_l_instance_normalization_layer_kernel_8cpp_source.xhtml#l00118">CLInstanceNormalizationLayerKernel::run()</a>, <a class="el" href="_n_e_reorg_layer_kernel_8cpp_source.xhtml#l00101">NEReorgLayerKernel::run()</a>, <a class="el" href="_n_e_winograd_convolution_layer_8cpp_source.xhtml#l00552">NEWinogradConvolutionLayer::run()</a>, <a class="el" href="_c_l_r_o_i_align_layer_kernel_8cpp_source.xhtml#l00162">CLROIAlignLayerKernel::run()</a>, <a class="el" href="_n_e_direct_convolution_layer_kernel_8cpp_source.xhtml#l01518">NEDirectConvolutionLayerKernel::run()</a>, <a class="el" href="_n_e_batch_to_space_layer_kernel_8cpp_source.xhtml#l00137">NEBatchToSpaceLayerKernel::run()</a>, <a class="el" href="_n_e_r_o_i_align_layer_kernel_8cpp_source.xhtml#l00281">NEROIAlignLayerKernel::run()</a>, <a class="el" href="_n_e_space_to_batch_layer_kernel_8cpp_source.xhtml#l00144">NESpaceToBatchLayerKernel::run()</a>, <a class="el" href="_n_e_generate_proposals_layer_8cpp_source.xhtml#l00204">NEGenerateProposalsLayer::validate()</a>, and <a class="el" href="_c_l_generate_proposals_layer_8cpp_source.xhtml#l00193">CLGenerateProposalsLayer::validate()</a>.</p>

</div>
</div>
<a id="a7cfb31af63202568efef5214acfbf3ba"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7cfb31af63202568efef5214acfbf3ba">&#9670;&nbsp;</a></span>data_type()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> data_type </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Data type used for each element of the tensor. </p>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> data type </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a9a3e72153aeb3ed212e9c3698774e881">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a9a3e72153aeb3ed212e9c3698774e881">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_utils_8cpp_source.xhtml#l00206">NumPyAccessor::access_tensor()</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00411">ValidationOutputAccessor::access_tensor()</a>, <a class="el" href="graph__validate__utils_8h_source.xhtml#l00363">VerifyAccessor&lt; D &gt;::access_tensor()</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00552">DetectionOutputAccessor::access_tensor()</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00625">TopNPredictionsAccessor::access_tensor()</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00677">RandomAccessor::access_tensor()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00220">arm_compute::auto_init_if_empty()</a>, <a class="el" href="_c_l_scale_kernel_8cpp_source.xhtml#l00182">CLScaleKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_matrix_accumulate_biases_kernel_8cpp_source.xhtml#l00079">CLGEMMMatrixAccumulateBiasesKernel::configure()</a>, <a class="el" href="_g_c_g_e_m_m_matrix_accumulate_biases_kernel_8cpp_source.xhtml#l00044">GCGEMMMatrixAccumulateBiasesKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_matrix_vector_multiply_kernel_8cpp_source.xhtml#l00083">CLGEMMMatrixVectorMultiplyKernel::configure()</a>, <a class="el" href="_c_l_dequantization_layer_kernel_8cpp_source.xhtml#l00077">CLDequantizationLayerKernel::configure()</a>, <a class="el" href="_n_e_g_e_m_m_lowp_assembly_matrix_multiply_core_8cpp_source.xhtml#l00046">NEGEMMLowpAssemblyMatrixMultiplyCore::configure()</a>, <a class="el" href="_c_l_canny_edge_kernel_8cpp_source.xhtml#l00040">CLGradientKernel::configure()</a>, <a class="el" href="_c_l_generate_proposals_layer_kernel_8cpp_source.xhtml#l00073">CLComputeAllAnchorsKernel::configure()</a>, <a class="el" href="_c_l_space_to_depth_layer_kernel_8cpp_source.xhtml#l00068">CLSpaceToDepthLayerKernel::configure()</a>, <a class="el" href="_c_l_locally_connected_matrix_multiply_kernel_8cpp_source.xhtml#l00084">CLLocallyConnectedMatrixMultiplyKernel::configure()</a>, <a class="el" href="_n_e_g_e_m_m_matrix_vector_multiply_kernel_8cpp_source.xhtml#l00332">NEGEMMMatrixVectorMultiplyKernel::configure()</a>, <a class="el" href="_c_l_depth_convert_layer_kernel_8cpp_source.xhtml#l00074">CLDepthConvertLayerKernel::configure()</a>, <a class="el" href="_c_l_memset_kernel_8cpp_source.xhtml#l00042">CLMemsetKernel::configure()</a>, <a class="el" href="_n_e_table_lookup_kernel_8cpp_source.xhtml#l00109">NETableLookupKernel::configure()</a>, <a class="el" href="_c_l_comparison_kernel_8cpp_source.xhtml#l00108">CLComparisonKernel::configure()</a>, <a class="el" href="_c_l_h_o_g_descriptor_kernel_8cpp_source.xhtml#l00048">CLHOGOrientationBinningKernel::configure()</a>, <a class="el" href="_c_l_pixel_wise_multiplication_kernel_8cpp_source.xhtml#l00149">CLPixelWiseMultiplicationKernel::configure()</a>, <a class="el" href="_c_l_quantization_layer_kernel_8cpp_source.xhtml#l00081">CLQuantizationLayerKernel::configure()</a>, <a class="el" href="_c_l_fill_border_kernel_8cpp_source.xhtml#l00062">CLFillBorderKernel::configure()</a>, <a class="el" href="_c_l_width_concatenate2_tensors_kernel_8cpp_source.xhtml#l00097">CLWidthConcatenate2TensorsKernel::configure()</a>, <a class="el" href="_g_c_fill_border_kernel_8cpp_source.xhtml#l00060">GCFillBorderKernel::configure()</a>, <a class="el" href="_c_l_absolute_difference_kernel_8cpp_source.xhtml#l00047">CLAbsoluteDifferenceKernel::configure()</a>, <a class="el" href="_c_l_prior_box_layer_kernel_8cpp_source.xhtml#l00103">CLPriorBoxLayerKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_matrix_multiply_native_kernel_8cpp_source.xhtml#l00173">CLGEMMLowpMatrixMultiplyNativeKernel::configure()</a>, <a class="el" href="_n_e_generate_proposals_layer_kernel_8cpp_source.xhtml#l00071">NEComputeAllAnchorsKernel::configure()</a>, <a class="el" href="_c_l_magnitude_phase_kernel_8cpp_source.xhtml#l00046">CLMagnitudePhaseKernel::configure()</a>, <a class="el" href="_c_l_bounding_box_transform_kernel_8cpp_source.xhtml#l00090">CLBoundingBoxTransformKernel::configure()</a>, <a class="el" href="_c_l_range_kernel_8cpp_source.xhtml#l00093">CLRangeKernel::configure()</a>, <a class="el" href="_c_l_reduction_operation_kernel_8cpp_source.xhtml#l00137">CLReductionOperationKernel::configure()</a>, <a class="el" href="_c_l_width_concatenate4_tensors_kernel_8cpp_source.xhtml#l00115">CLWidthConcatenate4TensorsKernel::configure()</a>, <a class="el" href="_n_e_instance_normalization_layer_kernel_8cpp_source.xhtml#l00182">NEInstanceNormalizationLayerKernel::configure()</a>, <a class="el" href="_c_l_select_kernel_8cpp_source.xhtml#l00105">CLSelectKernel::configure()</a>, <a class="el" href="_n_e_normalization_layer_kernel_8cpp_source.xhtml#l00115">NENormalizationLayerKernel::configure()</a>, <a class="el" href="_n_e_y_o_l_o_layer_kernel_8cpp_source.xhtml#l00203">NEYOLOLayerKernel::configure()</a>, <a class="el" href="_c_l_arg_min_max_layer_8cpp_source.xhtml#l00107">CLArgMinMaxLayer::configure()</a>, <a class="el" href="_c_l_integral_image_kernel_8cpp_source.xhtml#l00085">CLIntegralImageVertKernel::configure()</a>, <a class="el" href="_n_e_quantization_layer_kernel_8cpp_source.xhtml#l00100">NEQuantizationLayerKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_matrix_multiply_reshaped_only_r_h_s_kernel_8cpp_source.xhtml#l00173">CLGEMMLowpMatrixMultiplyReshapedOnlyRHSKernel::configure()</a>, <a class="el" href="_c_p_p_box_with_non_maxima_suppression_limit_8cpp_source.xhtml#l00119">CPPBoxWithNonMaximaSuppressionLimit::configure()</a>, <a class="el" href="_n_e_absolute_difference_kernel_8cpp_source.xhtml#l00133">NEAbsoluteDifferenceKernel::configure()</a>, <a class="el" href="_n_e_min_max_location_kernel_8cpp_source.xhtml#l00049">NEMinMaxKernel::configure()</a>, <a class="el" href="_c_l_fuse_batch_normalization_kernel_8cpp_source.xhtml#l00107">CLFuseBatchNormalizationKernel::configure()</a>, <a class="el" href="_n_e_range_kernel_8cpp_source.xhtml#l00114">NERangeKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_matrix_multiply_native_kernel_8cpp_source.xhtml#l00213">CLGEMMMatrixMultiplyNativeKernel::configure()</a>, <a class="el" href="_c_l_deconvolution_layer_upsample_8cpp_source.xhtml#l00045">CLDeconvolutionLayerUpsample::configure()</a>, <a class="el" href="_n_e_canny_edge_kernel_8cpp_source.xhtml#l00877">NEGradientKernel::configure()</a>, <a class="el" href="_c_l_arg_min_max_layer_kernel_8cpp_source.xhtml#l00117">CLArgMinMaxLayerKernel::configure()</a>, <a class="el" href="_n_e_fill_border_kernel_8cpp_source.xhtml#l00098">NEFillBorderKernel::configure()</a>, <a class="el" href="_c_l_harris_corners_kernel_8cpp_source.xhtml#l00054">CLHarrisScoreKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00168">CLGEMMLowpMatrixMultiplyReshapedKernel::configure()</a>, <a class="el" href="_g_c_g_e_m_m_matrix_multiply_kernel_8cpp_source.xhtml#l00185">GCGEMMMatrixMultiplyKernel::configure()</a>, <a class="el" href="_n_e_direct_convolution_layer_output_stage_kernel_8cpp_source.xhtml#l00340">NEDirectConvolutionLayerOutputStageKernel::configure()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_native_kernel_8cpp_source.xhtml#l00194">CLDepthwiseConvolutionLayerNativeKernel::configure()</a>, <a class="el" href="_n_e_gather_kernel_8cpp_source.xhtml#l00133">NEGatherKernel::configure()</a>, <a class="el" href="_n_e_select_kernel_8cpp_source.xhtml#l00167">NESelectKernel::configure()</a>, <a class="el" href="_c_p_p_detection_post_process_layer_8cpp_source.xhtml#l00191">CPPDetectionPostProcessLayer::configure()</a>, <a class="el" href="_c_l_g_e_m_m_matrix_multiply_reshaped_only_r_h_s_kernel_8cpp_source.xhtml#l00216">CLGEMMMatrixMultiplyReshapedOnlyRHSKernel::configure()</a>, <a class="el" href="_n_e_fuse_batch_normalization_kernel_8cpp_source.xhtml#l00422">NEFuseBatchNormalizationKernel::configure()</a>, <a class="el" href="_c_l_softmax_layer_8cpp_source.xhtml#l00075">CLSoftmaxLayerGeneric&lt; IS_LOG &gt;::configure()</a>, <a class="el" href="_n_e_detection_post_process_layer_8cpp_source.xhtml#l00042">NEDetectionPostProcessLayer::configure()</a>, <a class="el" href="_c_l_g_e_m_m_matrix_multiply_kernel_8cpp_source.xhtml#l00305">CLGEMMMatrixMultiplyKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_quantize_down_int32_to_int8_scale_by_fixed_point_kernel_8cpp_source.xhtml#l00118">CLGEMMLowpQuantizeDownInt32ToInt8ScaleByFixedPointKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_quantize_down_int32_to_uint8_scale_by_fixed_point_kernel_8cpp_source.xhtml#l00118">CLGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel::configure()</a>, <a class="el" href="_n_e_depthwise_convolution_layer_native_kernel_8cpp_source.xhtml#l00508">NEDepthwiseConvolutionLayerNativeKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_offset_contribution_output_stage_kernel_8cpp_source.xhtml#l00196">CLGEMMLowpOffsetContributionOutputStageKernel::configure()</a>, <a class="el" href="_n_e_winograd_convolution_layer_8cpp_source.xhtml#l00270">NEWinogradConvolutionLayer::configure()</a>, <a class="el" href="_n_e_g_e_m_m_assembly_dispatch_8cpp_source.xhtml#l00541">NEGEMMAssemblyDispatch::configure()</a>, <a class="el" href="_n_e_softmax_layer_8cpp_source.xhtml#l00074">NESoftmaxLayerGeneric&lt; IS_LOG &gt;::configure()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_matrix_multiply_core_8cpp_source.xhtml#l00083">CLGEMMLowpMatrixMultiplyCore::configure()</a>, <a class="el" href="_n_e_generate_proposals_layer_8cpp_source.xhtml#l00065">NEGenerateProposalsLayer::configure()</a>, <a class="el" href="_c_l_generate_proposals_layer_8cpp_source.xhtml#l00065">CLGenerateProposalsLayer::configure()</a>, <a class="el" href="_n_e_g_e_m_m_lowp_matrix_multiply_core_8cpp_source.xhtml#l00051">NEGEMMLowpMatrixMultiplyCore::configure()</a>, <a class="el" href="_c_l_canny_edge_kernel_8cpp_source.xhtml#l00120">CLEdgeNonMaxSuppressionKernel::configure()</a>, <a class="el" href="_n_e_deconvolution_layer_8cpp_source.xhtml#l00112">NEDeconvolutionLayer::configure()</a>, <a class="el" href="_c_l_canny_edge_kernel_8cpp_source.xhtml#l00194">CLEdgeTraceKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_8cpp_source.xhtml#l00537">CLGEMM::configure()</a>, <a class="el" href="_c_l_convolution_kernel_8cpp_source.xhtml#l00281">CLConvolutionRectangleKernel::configure()</a>, <a class="el" href="_n_e_g_e_m_m_lowp_output_stage_8cpp_source.xhtml#l00086">NEGEMMLowpOutputStage::configure()</a>, <a class="el" href="_c_l_functions_factory_8cpp_source.xhtml#l00120">arm_compute::graph::backends::detail::create_detection_output_layer&lt; CPPDetectionOutputLayer, CLTargetInfo &gt;()</a>, <a class="el" href="_c_l_functions_factory_8cpp_source.xhtml#l00164">arm_compute::graph::backends::detail::create_detection_post_process_layer&lt; CPPDetectionPostProcessLayer, CLTargetInfo &gt;()</a>, <a class="el" href="_accessor_8h_source.xhtml#l00111">Accessor::data_type()</a>, <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00159">SubTensorInfo::data_type()</a>, <a class="el" href="_validate_8h_source.xhtml#l00657">arm_compute::error_on_data_type_not_in()</a>, <a class="el" href="_validate_8h_source.xhtml#l00508">arm_compute::error_on_mismatching_data_types()</a>, <a class="el" href="_validate_8h_source.xhtml#l00562">arm_compute::error_on_mismatching_quantization_info()</a>, <a class="el" href="_c_p_p_2_validate_8h_source.xhtml#l00040">arm_compute::error_on_unsupported_cpu_fp16()</a>, <a class="el" href="_validate_8h_source.xhtml#l00805">arm_compute::error_on_unsupported_fp16()</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00110">CaffePreproccessor::preprocess()</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00069">TFPreproccessor::preprocess()</a>, <a class="el" href="_n_e_min_max_location_kernel_8cpp_source.xhtml#l00094">NEMinMaxKernel::reset()</a>, <a class="el" href="_c_l_min_max_location_kernel_8cpp_source.xhtml#l00124">CLMinMaxKernel::run()</a>, <a class="el" href="_c_l_dequantization_layer_kernel_8cpp_source.xhtml#l00132">CLDequantizationLayerKernel::run()</a>, <a class="el" href="_c_p_p_upsample_kernel_8cpp_source.xhtml#l00068">CPPUpsampleKernel::run()</a>, <a class="el" href="_n_e_fill_inner_border_kernel_8cpp_source.xhtml#l00064">NEFillInnerBorderKernel::run()</a>, <a class="el" href="_n_e_g_e_m_m_matrix_accumulate_biases_kernel_8cpp_source.xhtml#l00108">NEGEMMMatrixAccumulateBiasesKernel::run()</a>, <a class="el" href="_n_e_non_maxima_suppression3x3_kernel_8cpp_source.xhtml#l00498">NENonMaximaSuppression3x3Kernel::run()</a>, <a class="el" href="_n_e_dequantization_layer_kernel_8cpp_source.xhtml#l00391">NEDequantizationLayerKernel::run()</a>, <a class="el" href="_n_e_locally_connected_matrix_multiply_kernel_8cpp_source.xhtml#l00365">NELocallyConnectedMatrixMultiplyKernel::run()</a>, <a class="el" href="_n_e_fill_border_kernel_8cpp_source.xhtml#l00118">NEFillBorderKernel::run()</a>, <a class="el" href="_n_e_h_o_g_detector_kernel_8cpp_source.xhtml#l00095">NEHOGDetectorKernel::run()</a>, <a class="el" href="_n_e_reverse_kernel_8cpp_source.xhtml#l00179">NEReverseKernel::run()</a>, <a class="el" href="_c_p_p_box_with_non_maxima_suppression_limit_kernel_8cpp_source.xhtml#l00398">CPPBoxWithNonMaximaSuppressionLimitKernel::run()</a>, <a class="el" href="_n_e_generate_proposals_layer_kernel_8cpp_source.xhtml#l00167">NEComputeAllAnchorsKernel::run()</a>, <a class="el" href="_n_e_pooling_layer_kernel_8cpp_source.xhtml#l02043">NEPoolingLayerKernel::run()</a>, <a class="el" href="_c_p_p_top_k_v_kernel_8cpp_source.xhtml#l00131">CPPTopKVKernel::run()</a>, <a class="el" href="_c_l_reduction_operation_kernel_8cpp_source.xhtml#l00255">CLReductionOperationKernel::run()</a>, <a class="el" href="_n_e_width_concatenate_layer_kernel_8cpp_source.xhtml#l00105">NEWidthConcatenateLayerKernel::run()</a>, <a class="el" href="_n_e_height_concatenate_layer_kernel_8cpp_source.xhtml#l00105">NEHeightConcatenateLayerKernel::run()</a>, <a class="el" href="_n_e_depthwise_convolution_layer3x3_kernel_8cpp_source.xhtml#l00292">NEDepthwiseConvolutionLayer3x3Kernel::run()</a>, <a class="el" href="_n_e_bounding_box_transform_kernel_8cpp_source.xhtml#l00244">NEBoundingBoxTransformKernel::run()</a>, <a class="el" href="_n_e_depth_convert_layer_kernel_8cpp_source.xhtml#l00143">NEDepthConvertLayerKernel::run()</a>, <a class="el" href="_n_e_direct_convolution_layer_kernel_8cpp_source.xhtml#l01518">NEDirectConvolutionLayerKernel::run()</a>, <a class="el" href="_n_e_r_o_i_align_layer_kernel_8cpp_source.xhtml#l00281">NEROIAlignLayerKernel::run()</a>, <a class="el" href="_n_e_l_s_t_m_layer_8cpp_source.xhtml#l00611">NELSTMLayer::run()</a>, <a class="el" href="_n_e_convolution_kernel_8cpp_source.xhtml#l01471">NEConvolutionRectangleKernel::run()</a>, <a class="el" href="_sub_tensor_info_8cpp_source.xhtml#l00095">SubTensorInfo::set_tensor_shape()</a>, <a class="el" href="_n_e_elementwise_operators_8cpp_source.xhtml#l00042">NEElementwiseMax::validate()</a>, <a class="el" href="_n_e_reduction_operation_8cpp_source.xhtml#l00061">NEReductionOperation::validate()</a>, <a class="el" href="_c_l_arg_min_max_layer_8cpp_source.xhtml#l00041">CLArgMinMaxLayer::validate()</a>, <a class="el" href="_c_l_reduction_operation_8cpp_source.xhtml#l00047">CLReductionOperation::validate()</a>, <a class="el" href="_n_e_select_kernel_8cpp_source.xhtml#l00230">NESelectKernel::validate()</a>, <a class="el" href="_n_e_elementwise_operators_8cpp_source.xhtml#l00059">NEElementwiseMin::validate()</a>, <a class="el" href="_n_e_detection_post_process_layer_8cpp_source.xhtml#l00073">NEDetectionPostProcessLayer::validate()</a>, <a class="el" href="_n_e_g_e_m_m_assembly_dispatch_8cpp_source.xhtml#l00506">NEGEMMAssemblyDispatch::validate()</a>, <a class="el" href="_n_e_direct_convolution_layer_8cpp_source.xhtml#l00074">NEDirectConvolutionLayer::validate()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_matrix_multiply_core_8cpp_source.xhtml#l00274">CLGEMMLowpMatrixMultiplyCore::validate()</a>, <a class="el" href="_n_e_g_e_m_m_lowp_matrix_multiply_core_8cpp_source.xhtml#l00281">NEGEMMLowpMatrixMultiplyCore::validate()</a>, <a class="el" href="_n_e_generate_proposals_layer_8cpp_source.xhtml#l00204">NEGenerateProposalsLayer::validate()</a>, <a class="el" href="_c_l_generate_proposals_layer_8cpp_source.xhtml#l00193">CLGenerateProposalsLayer::validate()</a>, <a class="el" href="_c_l_g_e_m_m_8cpp_source.xhtml#l00592">CLGEMM::validate()</a>, <a class="el" href="_c_p_p_box_with_non_maxima_suppression_limit_8cpp_source.xhtml#l00196">arm_compute::validate()</a>, and <a class="el" href="_n_e_g_e_m_m_lowp_output_stage_8cpp_source.xhtml#l00142">NEGEMMLowpOutputStage::validate()</a>.</p>

</div>
</div>
<a id="a178f0d3d87f959e00a743328d95359d2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a178f0d3d87f959e00a743328d95359d2">&#9670;&nbsp;</a></span>dimension() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual size_t dimension </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return the size of the requested dimension. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">index</td><td>Index of the dimension</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Dimension of the requested dimension </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a8813441b655b97c00139c6a5a6390e97">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a8813441b655b97c00139c6a5a6390e97">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_utils_8cpp_source.xhtml#l00206">NumPyAccessor::access_tensor()</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00625">TopNPredictionsAccessor::access_tensor()</a>, <a class="el" href="_c_l_elementwise_operation_kernel_8cpp_source.xhtml#l00313">CLElementwiseOperationKernel::border_size()</a>, <a class="el" href="_c_l_comparison_kernel_8cpp_source.xhtml#l00214">CLComparisonKernel::border_size()</a>, <a class="el" href="_c_l_pixel_wise_multiplication_kernel_8cpp_source.xhtml#l00302">CLPixelWiseMultiplicationKernel::border_size()</a>, <a class="el" href="_c_l_pixel_wise_multiplication_kernel_8cpp_source.xhtml#l00437">CLComplexPixelWiseMultiplicationKernel::border_size()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00260">arm_compute::misc::shape_calculator::compute_interleaved_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00180">arm_compute::misc::shape_calculator::compute_lhs_reshaped_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00858">arm_compute::misc::shape_calculator::compute_mm_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00374">arm_compute::misc::shape_calculator::compute_reductionB_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00224">arm_compute::misc::shape_calculator::compute_rhs_reshaped_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00820">arm_compute::misc::shape_calculator::compute_roi_align_shape()</a>, <a class="el" href="_c_l_integral_image_kernel_8cpp_source.xhtml#l00039">CLIntegralImageHorKernel::configure()</a>, <a class="el" href="_c_l_median3x3_kernel_8cpp_source.xhtml#l00039">CLMedian3x3Kernel::configure()</a>, <a class="el" href="_c_l_warp_affine_kernel_8cpp_source.xhtml#l00061">CLWarpAffineKernel::configure()</a>, <a class="el" href="_g_c_transpose_kernel_8cpp_source.xhtml#l00040">GCTransposeKernel::configure()</a>, <a class="el" href="_g_c_scale_kernel_8cpp_source.xhtml#l00047">GCScaleKernel::configure()</a>, <a class="el" href="_c_l_comparison_8cpp_source.xhtml#l00033">CLComparison::configure()</a>, <a class="el" href="_c_l_scale_kernel_8cpp_source.xhtml#l00182">CLScaleKernel::configure()</a>, <a class="el" href="_c_l_pixel_wise_multiplication_8cpp_source.xhtml#l00034">CLPixelWiseMultiplication::configure()</a>, <a class="el" href="_g_c_g_e_m_m_matrix_accumulate_biases_kernel_8cpp_source.xhtml#l00044">GCGEMMMatrixAccumulateBiasesKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_matrix_vector_multiply_kernel_8cpp_source.xhtml#l00083">CLGEMMMatrixVectorMultiplyKernel::configure()</a>, <a class="el" href="_n_e_arithmetic_subtraction_8cpp_source.xhtml#l00034">NEArithmeticSubtraction::configure()</a>, <a class="el" href="_n_e_pixel_wise_multiplication_8cpp_source.xhtml#l00034">NEPixelWiseMultiplication::configure()</a>, <a class="el" href="_c_l_r_n_n_layer_8cpp_source.xhtml#l00069">CLRNNLayer::configure()</a>, <a class="el" href="_n_e_g_e_m_m_lowp_assembly_matrix_multiply_core_8cpp_source.xhtml#l00046">NEGEMMLowpAssemblyMatrixMultiplyCore::configure()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_reshape_weights_kernel_8cpp_source.xhtml#l00088">CLDepthwiseConvolutionLayerReshapeWeightsKernel::configure()</a>, <a class="el" href="_c_l_flatten_layer_kernel_8cpp_source.xhtml#l00083">CLFlattenLayerKernel::configure()</a>, <a class="el" href="_c_p_p_detection_output_layer_8cpp_source.xhtml#l00391">CPPDetectionOutputLayer::configure()</a>, <a class="el" href="_c_l_channel_shuffle_layer_kernel_8cpp_source.xhtml#l00092">CLChannelShuffleLayerKernel::configure()</a>, <a class="el" href="_c_l_gaussian_pyramid_kernel_8cpp_source.xhtml#l00044">CLGaussianPyramidHorKernel::configure()</a>, <a class="el" href="_c_l_canny_edge_kernel_8cpp_source.xhtml#l00040">CLGradientKernel::configure()</a>, <a class="el" href="_c_l_space_to_depth_layer_kernel_8cpp_source.xhtml#l00068">CLSpaceToDepthLayerKernel::configure()</a>, <a class="el" href="_c_l_generate_proposals_layer_kernel_8cpp_source.xhtml#l00073">CLComputeAllAnchorsKernel::configure()</a>, <a class="el" href="_c_l_space_to_batch_layer_kernel_8cpp_source.xhtml#l00091">CLSpaceToBatchLayerKernel::configure()</a>, <a class="el" href="_c_l_tile_kernel_8cpp_source.xhtml#l00069">CLTileKernel::configure()</a>, <a class="el" href="_c_l_upsample_layer_kernel_8cpp_source.xhtml#l00066">CLUpsampleLayerKernel::configure()</a>, <a class="el" href="_c_l_depthwise_convolution_layer3x3_n_c_h_w_kernel_8cpp_source.xhtml#l00244">CLDepthwiseConvolutionLayer3x3NCHWKernel::configure()</a>, <a class="el" href="_c_l_locally_connected_matrix_multiply_kernel_8cpp_source.xhtml#l00084">CLLocallyConnectedMatrixMultiplyKernel::configure()</a>, <a class="el" href="_n_e_g_e_m_m_matrix_vector_multiply_kernel_8cpp_source.xhtml#l00332">NEGEMMMatrixVectorMultiplyKernel::configure()</a>, <a class="el" href="_c_l_gather_kernel_8cpp_source.xhtml#l00089">CLGatherKernel::configure()</a>, <a class="el" href="_c_l_depth_convert_layer_kernel_8cpp_source.xhtml#l00074">CLDepthConvertLayerKernel::configure()</a>, <a class="el" href="_c_l_depthwise_convolution_layer3x3_n_h_w_c_kernel_8cpp_source.xhtml#l00197">CLDepthwiseConvolutionLayer3x3NHWCKernel::configure()</a>, <a class="el" href="_g_c_depthwise_convolution_layer3x3_kernel_8cpp_source.xhtml#l00051">GCDepthwiseConvolutionLayer3x3Kernel::configure()</a>, <a class="el" href="_c_l_comparison_kernel_8cpp_source.xhtml#l00108">CLComparisonKernel::configure()</a>, <a class="el" href="_c_l_width_concatenate2_tensors_kernel_8cpp_source.xhtml#l00097">CLWidthConcatenate2TensorsKernel::configure()</a>, <a class="el" href="_n_e_scale_8cpp_source.xhtml#l00106">NEScale::configure()</a>, <a class="el" href="_c_l_h_o_g_descriptor_kernel_8cpp_source.xhtml#l00048">CLHOGOrientationBinningKernel::configure()</a>, <a class="el" href="_g_c_g_e_m_m_matrix_addition_kernel_8cpp_source.xhtml#l00043">GCGEMMMatrixAdditionKernel::configure()</a>, <a class="el" href="_c_l_fill_border_kernel_8cpp_source.xhtml#l00062">CLFillBorderKernel::configure()</a>, <a class="el" href="_n_e_gaussian_pyramid_kernel_8cpp_source.xhtml#l00053">NEGaussianPyramidHorKernel::configure()</a>, <a class="el" href="_c_l_pooling_layer_kernel_8cpp_source.xhtml#l00177">CLPoolingLayerKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_matrix_multiply_native_kernel_8cpp_source.xhtml#l00173">CLGEMMLowpMatrixMultiplyNativeKernel::configure()</a>, <a class="el" href="_c_l_prior_box_layer_kernel_8cpp_source.xhtml#l00103">CLPriorBoxLayerKernel::configure()</a>, <a class="el" href="_g_c_convolution_layer_8cpp_source.xhtml#l00044">GCConvolutionLayerReshapeWeights::configure()</a>, <a class="el" href="_c_l_range_kernel_8cpp_source.xhtml#l00093">CLRangeKernel::configure()</a>, <a class="el" href="_c_l_width_concatenate4_tensors_kernel_8cpp_source.xhtml#l00115">CLWidthConcatenate4TensorsKernel::configure()</a>, <a class="el" href="_c_p_p_top_k_v_kernel_8cpp_source.xhtml#l00101">CPPTopKVKernel::configure()</a>, <a class="el" href="_c_l_magnitude_phase_kernel_8cpp_source.xhtml#l00046">CLMagnitudePhaseKernel::configure()</a>, <a class="el" href="_n_e_generate_proposals_layer_kernel_8cpp_source.xhtml#l00071">NEComputeAllAnchorsKernel::configure()</a>, <a class="el" href="_c_l_select_kernel_8cpp_source.xhtml#l00105">CLSelectKernel::configure()</a>, <a class="el" href="_c_l_stack_layer_kernel_8cpp_source.xhtml#l00083">CLStackLayerKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_reshape_l_h_s_matrix_kernel_8cpp_source.xhtml#l00121">CLGEMMReshapeLHSMatrixKernel::configure()</a>, <a class="el" href="_g_c_depth_concatenate_layer_kernel_8cpp_source.xhtml#l00044">GCDepthConcatenateLayerKernel::configure()</a>, <a class="el" href="_n_e_h_o_g_descriptor_kernel_8cpp_source.xhtml#l00632">NEHOGOrientationBinningKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_matrix_multiply_reshaped_only_r_h_s_kernel_8cpp_source.xhtml#l00173">CLGEMMLowpMatrixMultiplyReshapedOnlyRHSKernel::configure()</a>, <a class="el" href="_c_l_winograd_input_transform_kernel_8cpp_source.xhtml#l00111">CLWinogradInputTransformKernel::configure()</a>, <a class="el" href="_n_e_r_n_n_layer_8cpp_source.xhtml#l00067">NERNNLayer::configure()</a>, <a class="el" href="_c_l_integral_image_kernel_8cpp_source.xhtml#l00085">CLIntegralImageVertKernel::configure()</a>, <a class="el" href="_c_l_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00073">CLROIPoolingLayerKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_matrix_multiply_native_kernel_8cpp_source.xhtml#l00213">CLGEMMMatrixMultiplyNativeKernel::configure()</a>, <a class="el" href="_c_l_fuse_batch_normalization_kernel_8cpp_source.xhtml#l00107">CLFuseBatchNormalizationKernel::configure()</a>, <a class="el" href="_c_l_r_o_i_align_layer_kernel_8cpp_source.xhtml#l00105">CLROIAlignLayerKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00168">CLGEMMLowpMatrixMultiplyReshapedKernel::configure()</a>, <a class="el" href="_c_l_harris_corners_kernel_8cpp_source.xhtml#l00054">CLHarrisScoreKernel::configure()</a>, <a class="el" href="_g_c_g_e_m_m_matrix_multiply_kernel_8cpp_source.xhtml#l00185">GCGEMMMatrixMultiplyKernel::configure()</a>, <a class="el" href="_c_l_arg_min_max_layer_kernel_8cpp_source.xhtml#l00117">CLArgMinMaxLayerKernel::configure()</a>, <a class="el" href="_c_p_p_detection_post_process_layer_8cpp_source.xhtml#l00191">CPPDetectionPostProcessLayer::configure()</a>, <a class="el" href="_c_p_p_non_maximum_suppression_kernel_8cpp_source.xhtml#l00061">CPPNonMaximumSuppressionKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_matrix_multiply_reshaped_only_r_h_s_kernel_8cpp_source.xhtml#l00216">CLGEMMMatrixMultiplyReshapedOnlyRHSKernel::configure()</a>, <a class="el" href="_c_l_winograd_output_transform_kernel_8cpp_source.xhtml#l00138">CLWinogradOutputTransformKernel::configure()</a>, <a class="el" href="_c_p_p_box_with_non_maxima_suppression_limit_kernel_8cpp_source.xhtml#l00349">CPPBoxWithNonMaximaSuppressionLimitKernel::configure()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_native_kernel_8cpp_source.xhtml#l00194">CLDepthwiseConvolutionLayerNativeKernel::configure()</a>, <a class="el" href="_c_l_fast_corners_kernel_8cpp_source.xhtml#l00050">CLFastCornersKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_matrix_multiply_kernel_8cpp_source.xhtml#l00305">CLGEMMMatrixMultiplyKernel::configure()</a>, <a class="el" href="_n_e_g_e_m_m_matrix_multiply_kernel_8cpp_source.xhtml#l00962">NEGEMMMatrixMultiplyKernel::configure()</a>, <a class="el" href="_n_e_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00046">NEROIPoolingLayerKernel::configure()</a>, <a class="el" href="_c_l_deconvolution_reshape_output_kernel_8cpp_source.xhtml#l00115">CLDeconvolutionReshapeOutputKernel::configure()</a>, <a class="el" href="_c_l_laplacian_pyramid_8cpp_source.xhtml#l00050">CLLaplacianPyramid::configure()</a>, <a class="el" href="_n_e_laplacian_pyramid_8cpp_source.xhtml#l00072">NELaplacianPyramid::configure()</a>, <a class="el" href="_c_l_direct_convolution_layer_kernel_8cpp_source.xhtml#l00424">CLDirectConvolutionLayerKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_offset_contribution_kernel_8cpp_source.xhtml#l00145">CLGEMMLowpOffsetContributionKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_offset_contribution_output_stage_kernel_8cpp_source.xhtml#l00196">CLGEMMLowpOffsetContributionOutputStageKernel::configure()</a>, <a class="el" href="_n_e_depthwise_convolution_layer_native_kernel_8cpp_source.xhtml#l00508">NEDepthwiseConvolutionLayerNativeKernel::configure()</a>, <a class="el" href="_n_e_scale_kernel_8cpp_source.xhtml#l00356">NEScaleKernel::configure()</a>, <a class="el" href="_n_e_winograd_convolution_layer_8cpp_source.xhtml#l00270">NEWinogradConvolutionLayer::configure()</a>, <a class="el" href="_c_l_col2_im_kernel_8cpp_source.xhtml#l00091">CLCol2ImKernel::configure()</a>, <a class="el" href="_c_l_comparison_8cpp_source.xhtml#l00056">CLComparisonStatic&lt; COP &gt;::configure()</a>, <a class="el" href="_g_c_g_e_m_m_8cpp_source.xhtml#l00081">GCGEMM::configure()</a>, <a class="el" href="_c_l_laplacian_reconstruct_8cpp_source.xhtml#l00045">CLLaplacianReconstruct::configure()</a>, <a class="el" href="_n_e_laplacian_reconstruct_8cpp_source.xhtml#l00045">NELaplacianReconstruct::configure()</a>, <a class="el" href="_g_c_weights_reshape_kernel_8cpp_source.xhtml#l00046">GCWeightsReshapeKernel::configure()</a>, <a class="el" href="_c_l_pixel_wise_multiplication_8cpp_source.xhtml#l00058">CLComplexPixelWiseMultiplication::configure()</a>, <a class="el" href="_n_e_optical_flow_8cpp_source.xhtml#l00055">NEOpticalFlow::configure()</a>, <a class="el" href="_g_c_im2_col_kernel_8cpp_source.xhtml#l00067">GCIm2ColKernel::configure()</a>, <a class="el" href="_c_l_im2_col_kernel_8cpp_source.xhtml#l00295">CLIm2ColKernel::configure()</a>, <a class="el" href="_n_e_pixel_wise_multiplication_8cpp_source.xhtml#l00055">NEComplexPixelWiseMultiplication::configure()</a>, <a class="el" href="_g_c_fully_connected_layer_8cpp_source.xhtml#l00082">GCFullyConnectedLayer::configure()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_matrix_multiply_core_8cpp_source.xhtml#l00083">CLGEMMLowpMatrixMultiplyCore::configure()</a>, <a class="el" href="_n_e_g_e_m_m_8cpp_source.xhtml#l00051">NEGEMM::configure()</a>, <a class="el" href="_c_l_gaussian_pyramid_kernel_8cpp_source.xhtml#l00150">CLGaussianPyramidVertKernel::configure()</a>, <a class="el" href="_c_l_histogram_kernel_8cpp_source.xhtml#l00158">CLHistogramBorderKernel::configure()</a>, <a class="el" href="_n_e_generate_proposals_layer_8cpp_source.xhtml#l00065">NEGenerateProposalsLayer::configure()</a>, <a class="el" href="_c_l_optical_flow_8cpp_source.xhtml#l00060">CLOpticalFlow::configure()</a>, <a class="el" href="_c_l_generate_proposals_layer_8cpp_source.xhtml#l00065">CLGenerateProposalsLayer::configure()</a>, <a class="el" href="_n_e_g_e_m_m_lowp_matrix_multiply_core_8cpp_source.xhtml#l00051">NEGEMMLowpMatrixMultiplyCore::configure()</a>, <a class="el" href="_c_l_canny_edge_kernel_8cpp_source.xhtml#l00120">CLEdgeNonMaxSuppressionKernel::configure()</a>, <a class="el" href="_c_l_h_o_g_descriptor_kernel_8cpp_source.xhtml#l00139">CLHOGBlockNormalizationKernel::configure()</a>, <a class="el" href="_n_e_gaussian_pyramid_kernel_8cpp_source.xhtml#l00161">NEGaussianPyramidVertKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_deconvolution_layer_8cpp_source.xhtml#l00195">CLGEMMDeconvolutionLayer::configure()</a>, <a class="el" href="_g_c_convolution_layer_8cpp_source.xhtml#l00090">GCConvolutionLayer::configure()</a>, <a class="el" href="_c_l_canny_edge_kernel_8cpp_source.xhtml#l00194">CLEdgeTraceKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_8cpp_source.xhtml#l00537">CLGEMM::configure()</a>, <a class="el" href="_n_e_fully_connected_layer_8cpp_source.xhtml#l00141">NEFullyConnectedLayer::configure()</a>, <a class="el" href="_c_l_fully_connected_layer_8cpp_source.xhtml#l00213">CLFullyConnectedLayer::configure()</a>, <a class="el" href="_n_e_g_e_m_m_convolution_layer_8cpp_source.xhtml#l00240">NEGEMMConvolutionLayer::configure()</a>, <a class="el" href="_c_l_g_e_m_m_convolution_layer_8cpp_source.xhtml#l00181">CLGEMMConvolutionLayer::configure()</a>, <a class="el" href="_n_e_crop_kernel_8cpp_source.xhtml#l00296">NECropKernel::configure_output_shape()</a>, <a class="el" href="_i_tensor_8cpp_source.xhtml#l00035">ITensor::copy_from()</a>, <a class="el" href="_c_p_p_flip_weights_kernel_8cpp_source.xhtml#l00045">CPPFlipWeightsKernel::flip_weights()</a>, <a class="el" href="_c_l_convolution_layer_8cpp_source.xhtml#l00136">CLConvolutionLayer::get_convolution_method()</a>, <a class="el" href="_n_e_convolution_layer_8cpp_source.xhtml#l00120">NEConvolutionLayer::get_convolution_method()</a>, <a class="el" href="_c_l_histogram_kernel_8cpp_source.xhtml#l00122">CLHistogramKernel::run()</a>, <a class="el" href="_c_l_g_e_m_m_matrix_vector_multiply_kernel_8cpp_source.xhtml#l00136">CLGEMMMatrixVectorMultiplyKernel::run()</a>, <a class="el" href="_c_p_p_upsample_kernel_8cpp_source.xhtml#l00068">CPPUpsampleKernel::run()</a>, <a class="el" href="_c_l_integral_image_kernel_8cpp_source.xhtml#l00119">CLIntegralImageVertKernel::run()</a>, <a class="el" href="_c_l_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00127">CLROIPoolingLayerKernel::run()</a>, <a class="el" href="_n_e_tile_kernel_8cpp_source.xhtml#l00090">NETileKernel::run()</a>, <a class="el" href="_c_l_deconvolution_layer_upsample_kernel_8cpp_source.xhtml#l00098">CLDeconvolutionLayerUpsampleKernel::run()</a>, <a class="el" href="_n_e_mean_std_dev_kernel_8cpp_source.xhtml#l00123">NEMeanStdDevKernel::run()</a>, <a class="el" href="_n_e_g_e_m_m_matrix_vector_multiply_kernel_8cpp_source.xhtml#l00381">NEGEMMMatrixVectorMultiplyKernel::run()</a>, <a class="el" href="_n_e_copy_kernel_8cpp_source.xhtml#l00118">NECopyKernel::run()</a>, <a class="el" href="_c_l_upsample_layer_kernel_8cpp_source.xhtml#l00133">CLUpsampleLayerKernel::run()</a>, <a class="el" href="_c_l_mean_std_dev_normalization_kernel_8cpp_source.xhtml#l00130">CLMeanStdDevNormalizationKernel::run()</a>, <a class="el" href="_c_l_pooling_layer_kernel_8cpp_source.xhtml#l00341">CLPoolingLayerKernel::run()</a>, <a class="el" href="_n_e_depth_to_space_layer_kernel_8cpp_source.xhtml#l00098">NEDepthToSpaceLayerKernel::run()</a>, <a class="el" href="_n_e_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00097">NEROIPoolingLayerKernel::run()</a>, <a class="el" href="_n_e_space_to_depth_layer_kernel_8cpp_source.xhtml#l00099">NESpaceToDepthLayerKernel::run()</a>, <a class="el" href="_c_l_instance_normalization_layer_kernel_8cpp_source.xhtml#l00118">CLInstanceNormalizationLayerKernel::run()</a>, <a class="el" href="_c_l_prior_box_layer_kernel_8cpp_source.xhtml#l00200">CLPriorBoxLayerKernel::run()</a>, <a class="el" href="_n_e_flatten_layer_kernel_8cpp_source.xhtml#l00102">NEFlattenLayerKernel::run()</a>, <a class="el" href="_n_e_pooling_layer_kernel_8cpp_source.xhtml#l02043">NEPoolingLayerKernel::run()</a>, <a class="el" href="_c_l_mean_std_dev_kernel_8cpp_source.xhtml#l00112">CLMeanStdDevKernel::run()</a>, <a class="el" href="_c_l_reduction_operation_kernel_8cpp_source.xhtml#l00255">CLReductionOperationKernel::run()</a>, <a class="el" href="_g_c_col2_im_kernel_8cpp_source.xhtml#l00097">GCCol2ImKernel::run()</a>, <a class="el" href="_n_e_f_f_t_radix_stage_kernel_8cpp_source.xhtml#l01040">NEFFTRadixStageKernel::run()</a>, <a class="el" href="_c_l_arg_min_max_layer_kernel_8cpp_source.xhtml#l00183">CLArgMinMaxLayerKernel::run()</a>, <a class="el" href="_c_l_r_o_i_align_layer_kernel_8cpp_source.xhtml#l00162">CLROIAlignLayerKernel::run()</a>, <a class="el" href="_n_e_direct_convolution_layer_kernel_8cpp_source.xhtml#l01518">NEDirectConvolutionLayerKernel::run()</a>, <a class="el" href="_n_e_batch_to_space_layer_kernel_8cpp_source.xhtml#l00137">NEBatchToSpaceLayerKernel::run()</a>, <a class="el" href="_n_e_space_to_batch_layer_kernel_8cpp_source.xhtml#l00144">NESpaceToBatchLayerKernel::run()</a>, <a class="el" href="_c_l_weights_reshape_kernel_8cpp_source.xhtml#l00119">CLWeightsReshapeKernel::run()</a>, <a class="el" href="_n_e_weights_reshape_kernel_8cpp_source.xhtml#l00127">NEWeightsReshapeKernel::run()</a>, <a class="el" href="_c_l_softmax_layer_kernel_8cpp_source.xhtml#l00306">CLLogits1DMaxShiftExpSumKernel::run()</a>, <a class="el" href="_c_p_p_box_with_non_maxima_suppression_limit_kernel_8cpp_source.xhtml#l00198">CPPBoxWithNonMaximaSuppressionLimitKernel::run_nmslimit()</a>, <a class="el" href="_n_e_reverse_kernel_8cpp_source.xhtml#l00099">arm_compute::run_reverse()</a>, <a class="el" href="_c_l_deconvolution_layer_upsample_kernel_8cpp_source.xhtml#l00042">CLDeconvolutionLayerUpsampleKernel::validate()</a>, <a class="el" href="_c_l_upsample_layer_kernel_8cpp_source.xhtml#l00044">CLUpsampleLayerKernel::validate()</a>, <a class="el" href="_c_l_r_n_n_layer_8cpp_source.xhtml#l00044">CLRNNLayer::validate()</a>, <a class="el" href="_n_e_upsample_layer_kernel_8cpp_source.xhtml#l00098">NEUpsampleLayerKernel::validate()</a>, <a class="el" href="_n_e_scale_8cpp_source.xhtml#l00188">NEScale::validate()</a>, <a class="el" href="_c_l_g_e_m_m_convolution_layer_8cpp_source.xhtml#l00066">CLConvolutionLayerReshapeWeights::validate()</a>, <a class="el" href="_n_e_r_n_n_layer_8cpp_source.xhtml#l00042">NERNNLayer::validate()</a>, <a class="el" href="_n_e_g_e_m_m_convolution_layer_8cpp_source.xhtml#l00060">NEConvolutionLayerReshapeWeights::validate()</a>, <a class="el" href="_c_p_p_detection_post_process_layer_8cpp_source.xhtml#l00241">CPPDetectionPostProcessLayer::validate()</a>, <a class="el" href="_c_l_locally_connected_layer_8cpp_source.xhtml#l00086">CLLocallyConnectedLayer::validate()</a>, <a class="el" href="_n_e_locally_connected_layer_8cpp_source.xhtml#l00080">NELocallyConnectedLayer::validate()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_matrix_multiply_core_8cpp_source.xhtml#l00274">CLGEMMLowpMatrixMultiplyCore::validate()</a>, <a class="el" href="_n_e_g_e_m_m_8cpp_source.xhtml#l00172">NEGEMM::validate()</a>, <a class="el" href="_n_e_g_e_m_m_lowp_matrix_multiply_core_8cpp_source.xhtml#l00281">NEGEMMLowpMatrixMultiplyCore::validate()</a>, <a class="el" href="_n_e_generate_proposals_layer_8cpp_source.xhtml#l00204">NEGenerateProposalsLayer::validate()</a>, <a class="el" href="_c_l_generate_proposals_layer_8cpp_source.xhtml#l00193">CLGenerateProposalsLayer::validate()</a>, <a class="el" href="_n_e_deconvolution_layer_8cpp_source.xhtml#l00057">NEDeconvolutionLayer::validate()</a>, <a class="el" href="_c_l_direct_deconvolution_layer_8cpp_source.xhtml#l00052">CLDirectDeconvolutionLayer::validate()</a>, <a class="el" href="_n_e_l_s_t_m_layer_8cpp_source.xhtml#l00381">NELSTMLayer::validate()</a>, <a class="el" href="_c_l_l_s_t_m_layer_8cpp_source.xhtml#l00388">CLLSTMLayer::validate()</a>, <a class="el" href="_c_l_g_e_m_m_8cpp_source.xhtml#l00592">CLGEMM::validate()</a>, <a class="el" href="_n_e_fully_connected_layer_8cpp_source.xhtml#l00275">NEFullyConnectedLayer::validate()</a>, <a class="el" href="_c_l_fully_connected_layer_8cpp_source.xhtml#l00309">CLFullyConnectedLayer::validate()</a>, <a class="el" href="_n_e_g_e_m_m_convolution_layer_8cpp_source.xhtml#l00390">NEGEMMConvolutionLayer::validate()</a>, <a class="el" href="_c_l_g_e_m_m_convolution_layer_8cpp_source.xhtml#l00396">CLGEMMConvolutionLayer::validate()</a>, and <a class="el" href="_n_e_reduce_mean_8cpp_source.xhtml#l00043">arm_compute::validate_config()</a>.</p>

</div>
</div>
<a id="ae3372a4569b4702a881b1606b0c144c4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae3372a4569b4702a881b1606b0c144c4">&#9670;&nbsp;</a></span>dimension() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual size_t dimension </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02">DataLayoutDimension</a>&#160;</td>
          <td class="paramname"><em>dimension</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return the size of the requested data layout dimension. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dimension</td><td>DataLayoutDimension of the dimension</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Dimension of the requested dimension </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a650247f9a828d1ef60135b01f8f77765">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a650247f9a828d1ef60135b01f8f77765">SubTensorInfo</a>.</p>

</div>
</div>
<a id="aa459796b5489eca8a9160cb5dcf1a103"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa459796b5489eca8a9160cb5dcf1a103">&#9670;&nbsp;</a></span>element_size()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual size_t element_size </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Element size in bytes calculated as data_size() * <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ad7829ae79223ab87f9da4c0bd7d229ba" title="The number of channels for each tensor element.">num_channels()</a> </p>
<dl class="section return"><dt>Returns</dt><dd>The size of one element in bytes </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a62b67b578f684c4d516843c9dea86a23">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a62b67b578f684c4d516843c9dea86a23">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_element_wise_unary_layer_kernel_8cpp_source.xhtml#l00052">CLElementWiseUnaryLayerKernel::configure()</a>, <a class="el" href="_c_l_dequantization_layer_kernel_8cpp_source.xhtml#l00077">CLDequantizationLayerKernel::configure()</a>, <a class="el" href="_n_e_g_e_m_m_matrix_vector_multiply_kernel_8cpp_source.xhtml#l00332">NEGEMMMatrixVectorMultiplyKernel::configure()</a>, <a class="el" href="_c_l_memset_kernel_8cpp_source.xhtml#l00042">CLMemsetKernel::configure()</a>, <a class="el" href="_c_l_width_concatenate2_tensors_kernel_8cpp_source.xhtml#l00097">CLWidthConcatenate2TensorsKernel::configure()</a>, <a class="el" href="_c_l_width_concatenate4_tensors_kernel_8cpp_source.xhtml#l00115">CLWidthConcatenate4TensorsKernel::configure()</a>, <a class="el" href="_n_e_upsample_layer_kernel_8cpp_source.xhtml#l00186">NEUpsampleLayerKernel::configure()</a>, <a class="el" href="_c_l_select_kernel_8cpp_source.xhtml#l00105">CLSelectKernel::configure()</a>, <a class="el" href="_n_e_pad_layer_kernel_8cpp_source.xhtml#l00184">NEPadLayerKernel::configure()</a>, <a class="el" href="_i_tensor_8cpp_source.xhtml#l00035">ITensor::copy_from()</a>, <a class="el" href="_accessor_8h_source.xhtml#l00091">Accessor::element_size()</a>, <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00140">SubTensorInfo::element_size()</a>, <a class="el" href="_n_e_depthwise_convolution_assembly_dispatch_8cpp_source.xhtml#l00542">NEDepthwiseConvolutionAssemblyDispatch::prepare()</a>, <a class="el" href="_n_e_memset_kernel_8cpp_source.xhtml#l00051">NEMemsetKernel::run()</a>, <a class="el" href="_c_p_p_upsample_kernel_8cpp_source.xhtml#l00068">CPPUpsampleKernel::run()</a>, <a class="el" href="_n_e_tile_kernel_8cpp_source.xhtml#l00090">NETileKernel::run()</a>, <a class="el" href="_n_e_copy_kernel_8cpp_source.xhtml#l00118">NECopyKernel::run()</a>, <a class="el" href="_n_e_depth_to_space_layer_kernel_8cpp_source.xhtml#l00098">NEDepthToSpaceLayerKernel::run()</a>, <a class="el" href="_n_e_space_to_depth_layer_kernel_8cpp_source.xhtml#l00099">NESpaceToDepthLayerKernel::run()</a>, <a class="el" href="_n_e_flatten_layer_kernel_8cpp_source.xhtml#l00102">NEFlattenLayerKernel::run()</a>, <a class="el" href="_n_e_reorg_layer_kernel_8cpp_source.xhtml#l00101">NEReorgLayerKernel::run()</a>, <a class="el" href="_c_l_reduction_operation_kernel_8cpp_source.xhtml#l00255">CLReductionOperationKernel::run()</a>, <a class="el" href="_n_e_convert_fully_connected_weights_kernel_8cpp_source.xhtml#l00102">NEConvertFullyConnectedWeightsKernel::run()</a>, <a class="el" href="_c_l_arg_min_max_layer_kernel_8cpp_source.xhtml#l00183">CLArgMinMaxLayerKernel::run()</a>, <a class="el" href="_n_e_stack_layer_kernel_8cpp_source.xhtml#l00116">NEStackLayerKernel::run()</a>, <a class="el" href="_n_e_batch_to_space_layer_kernel_8cpp_source.xhtml#l00137">NEBatchToSpaceLayerKernel::run()</a>, <a class="el" href="_n_e_space_to_batch_layer_kernel_8cpp_source.xhtml#l00144">NESpaceToBatchLayerKernel::run()</a>, <a class="el" href="_n_e_weights_reshape_kernel_8cpp_source.xhtml#l00127">NEWeightsReshapeKernel::run()</a>, <a class="el" href="_n_e_depthwise_convolution_assembly_dispatch_8cpp_source.xhtml#l00511">NEDepthwiseConvolutionAssemblyDispatch::run()</a>, <a class="el" href="_n_e_l_s_t_m_layer_8cpp_source.xhtml#l00611">NELSTMLayer::run()</a>, and <a class="el" href="_n_e_g_e_m_m_assembly_dispatch_8cpp_source.xhtml#l00506">NEGEMMAssemblyDispatch::validate()</a>.</p>

</div>
</div>
<a id="a0cd5aea514f03afb48ebe22581ea4c66"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0cd5aea514f03afb48ebe22581ea4c66">&#9670;&nbsp;</a></span>extend_padding()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool extend_padding </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a4467b302fc9ec312c40580336ab783da">PaddingSize</a> &amp;&#160;</td>
          <td class="paramname"><em>padding</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Update the offset to the first element, the strides and the total size. </p>
<dl class="section note"><dt>Note</dt><dd>This function can only increase the offset, strides and total size.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">padding</td><td>Padding around the XY plane in number of elements.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the strides, offset and total size have changed. </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#af53d8203ecc37896ca4579d1ee3fdffc">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#af53d8203ecc37896ca4579d1ee3fdffc">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="_sub_tensor_info_8cpp_source.xhtml#l00116">SubTensorInfo::extend_padding()</a>, <a class="el" href="tests_2validation_2_n_e_o_n_2_u_n_i_t_2_tensor_allocator_8cpp_source.xhtml#l00145">arm_compute::test::validation::TEST_CASE()</a>, <a class="el" href="_access_window_static_8cpp_source.xhtml#l00160">AccessWindowStatic::update_padding_if_needed()</a>, and <a class="el" href="_i_access_window_8cpp_source.xhtml#l00212">AccessWindowRectangle::update_padding_if_needed()</a>.</p>

</div>
</div>
<a id="a57360dd9ca408834c0ea1a8ef70a11f4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a57360dd9ca408834c0ea1a8ef70a11f4">&#9670;&nbsp;</a></span>format()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> format </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Colour format of the image. </p>
<dl class="section return"><dt>Returns</dt><dd>Colour format of the image </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_color_convert_kernel_8cpp_source.xhtml#l00048">CLColorConvertKernel::configure()</a>, <a class="el" href="_c_l_channel_combine_kernel_8cpp_source.xhtml#l00054">CLChannelCombineKernel::configure()</a>, <a class="el" href="_n_e_color_convert_kernel_8cpp_source.xhtml#l00045">NEColorConvertKernel::configure()</a>, <a class="el" href="_n_e_channel_combine_kernel_8cpp_source.xhtml#l00052">NEChannelCombineKernel::configure()</a>, <a class="el" href="_c_l_canny_edge_kernel_8cpp_source.xhtml#l00194">CLEdgeTraceKernel::configure()</a>, <a class="el" href="_accessor_8h_source.xhtml#l00101">Accessor::format()</a>, <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00164">SubTensorInfo::format()</a>, <a class="el" href="_n_e_h_o_g_descriptor_kernel_8cpp_source.xhtml#l00678">NEHOGOrientationBinningKernel::run()</a>, <a class="el" href="_n_e_sobel7x7_kernel_8cpp_source.xhtml#l00355">NESobel7x7VertKernel::run()</a>, and <a class="el" href="_sub_tensor_info_8cpp_source.xhtml#l00095">SubTensorInfo::set_tensor_shape()</a>.</p>

</div>
</div>
<a id="ac394d6570ab3325810a3532d39091a52"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac394d6570ab3325810a3532d39091a52">&#9670;&nbsp;</a></span>has_padding()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool has_padding </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Checks if the tensor has been allocated with padding or not. </p>
<dl class="section return"><dt>Returns</dt><dd>True if padding is allocated in the tensor, otherwise false. </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#aa2ca251f99c56767719e991a26371603">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#aa2ca251f99c56767719e991a26371603">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="_n_e_pad_layer_kernel_8cpp_source.xhtml#l00184">NEPadLayerKernel::configure()</a>, <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00179">SubTensorInfo::has_padding()</a>, <a class="el" href="_n_e_crop_kernel_8cpp_source.xhtml#l00386">NECropKernel::run()</a>, and <a class="el" href="_n_e_crop_kernel_8cpp_source.xhtml#l00275">NECropKernel::validate()</a>.</p>

</div>
</div>
<a id="a5b65f0a62b9fad74cd3024ff983dd313"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5b65f0a62b9fad74cd3024ff983dd313">&#9670;&nbsp;</a></span>is_dynamic()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool is_dynamic </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Flag indicating whether the shape of the tensor is dynamic, meaning that it can change on kernel/function execution. </p>
<dl class="section return"><dt>Returns</dt><dd>True if its dynamic else false </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a7e890c9c5d4143d64a83b4ac19f4d3e4">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a7e890c9c5d4143d64a83b4ac19f4d3e4">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00189">SubTensorInfo::is_dynamic()</a>.</p>

</div>
</div>
<a id="af555338f11d1d28f258f259ac3da743b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af555338f11d1d28f258f259ac3da743b">&#9670;&nbsp;</a></span>is_resizable()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool is_resizable </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Flag indicating whether the size of the tensor can be changed. </p>
<dl class="section return"><dt>Returns</dt><dd>True if the tensor size can be changed. </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#aaee6555ace43b03173844b1a228a3fc3">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#aaee6555ace43b03173844b1a228a3fc3">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="_n_e_o_n_2_g_e_m_m_lowp_8cpp_source.xhtml#l00082">arm_compute::test::validation::DATA_TEST_CASE()</a>, <a class="el" href="_sub_tensor_info_8cpp_source.xhtml#l00116">SubTensorInfo::extend_padding()</a>, <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00184">SubTensorInfo::is_resizable()</a>, <a class="el" href="tests_2validation_2_n_e_o_n_2_u_n_i_t_2_runtime_context_8cpp_source.xhtml#l00099">arm_compute::test::validation::TEST_CASE()</a>, <a class="el" href="_access_window_auto_padding_8cpp_source.xhtml#l00073">AccessWindowAutoPadding::update_padding_if_needed()</a>, <a class="el" href="_access_window_static_8cpp_source.xhtml#l00160">AccessWindowStatic::update_padding_if_needed()</a>, <a class="el" href="_i_access_window_8cpp_source.xhtml#l00212">AccessWindowRectangle::update_padding_if_needed()</a>, <a class="el" href="_access_window_static_8cpp_source.xhtml#l00084">AccessWindowStatic::update_window_if_needed()</a>, and <a class="el" href="_i_access_window_8cpp_source.xhtml#l00097">AccessWindowRectangle::update_window_if_needed()</a>.</p>

</div>
</div>
<a id="ad7829ae79223ab87f9da4c0bd7d229ba"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad7829ae79223ab87f9da4c0bd7d229ba">&#9670;&nbsp;</a></span>num_channels()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual size_t num_channels </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The number of channels for each tensor element. </p>
<dl class="section return"><dt>Returns</dt><dd>The number of channels for each tensor element </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a6f13b974eeb528acde66de8d9b3fd95c">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a6f13b974eeb528acde66de8d9b3fd95c">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="_helpers_8inl_source.xhtml#l00220">arm_compute::auto_init_if_empty()</a>, <a class="el" href="_c_l_f_f_t_scale_kernel_8cpp_source.xhtml#l00078">CLFFTScaleKernel::configure()</a>, <a class="el" href="_c_l_f_f_t1_d_8cpp_source.xhtml#l00038">CLFFT1D::configure()</a>, <a class="el" href="_c_l_fill_border_kernel_8cpp_source.xhtml#l00062">CLFillBorderKernel::configure()</a>, <a class="el" href="_n_e_f_f_t1_d_8cpp_source.xhtml#l00038">NEFFT1D::configure()</a>, <a class="el" href="_g_c_fill_border_kernel_8cpp_source.xhtml#l00060">GCFillBorderKernel::configure()</a>, <a class="el" href="_c_l_h_o_g_descriptor_kernel_8cpp_source.xhtml#l00139">CLHOGBlockNormalizationKernel::configure()</a>, <a class="el" href="_i_tensor_8cpp_source.xhtml#l00035">ITensor::copy_from()</a>, <a class="el" href="_validate_8h_source.xhtml#l00762">arm_compute::error_on_data_type_channel_not_in()</a>, <a class="el" href="_accessor_8h_source.xhtml#l00116">Accessor::num_channels()</a>, <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00149">SubTensorInfo::num_channels()</a>, <a class="el" href="_c_l_f_f_t1_d_8cpp_source.xhtml#l00100">CLFFT1D::validate()</a>, and <a class="el" href="_n_e_f_f_t1_d_8cpp_source.xhtml#l00101">NEFFT1D::validate()</a>.</p>

</div>
</div>
<a id="a1f4e725b8e1ea36b30e09dc08ae6961d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1f4e725b8e1ea36b30e09dc08ae6961d">&#9670;&nbsp;</a></span>num_dimensions()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual size_t num_dimensions </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The number of dimensions of the tensor (rank) </p>
<dl class="section return"><dt>Returns</dt><dd>The number of dimensions of the tensor (rank) </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a13622133d9b41900a6a3e8f89e59a78b">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a13622133d9b41900a6a3e8f89e59a78b">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="_shape_calculator_8h_source.xhtml#l00858">arm_compute::misc::shape_calculator::compute_mm_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l01357">arm_compute::misc::shape_calculator::compute_stack_shape()</a>, <a class="el" href="_access_window_static_8cpp_source.xhtml#l00045">AccessWindowStatic::compute_valid_region()</a>, <a class="el" href="_i_access_window_8cpp_source.xhtml#l00037">AccessWindowRectangle::compute_valid_region()</a>, <a class="el" href="_g_c_g_e_m_m_matrix_accumulate_biases_kernel_8cpp_source.xhtml#l00044">GCGEMMMatrixAccumulateBiasesKernel::configure()</a>, <a class="el" href="_c_l_flatten_layer_kernel_8cpp_source.xhtml#l00083">CLFlattenLayerKernel::configure()</a>, <a class="el" href="_c_p_p_detection_output_layer_8cpp_source.xhtml#l00391">CPPDetectionOutputLayer::configure()</a>, <a class="el" href="_c_l_permute_kernel_8cpp_source.xhtml#l00078">CLPermuteKernel::configure()</a>, <a class="el" href="_g_c_depthwise_convolution_layer3x3_kernel_8cpp_source.xhtml#l00051">GCDepthwiseConvolutionLayer3x3Kernel::configure()</a>, <a class="el" href="_c_p_p_flip_weights_kernel_8cpp_source.xhtml#l00069">CPPFlipWeightsKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_matrix_multiply_native_kernel_8cpp_source.xhtml#l00173">CLGEMMLowpMatrixMultiplyNativeKernel::configure()</a>, <a class="el" href="_n_e_channel_shuffle_layer_kernel_8cpp_source.xhtml#l00139">NEChannelShuffleLayerKernel::configure()</a>, <a class="el" href="_g_c_convolution_layer_8cpp_source.xhtml#l00044">GCConvolutionLayerReshapeWeights::configure()</a>, <a class="el" href="_c_p_p_upsample_kernel_8cpp_source.xhtml#l00049">CPPUpsampleKernel::configure()</a>, <a class="el" href="_c_p_p_permute_kernel_8cpp_source.xhtml#l00108">CPPPermuteKernel::configure()</a>, <a class="el" href="_n_e_quantization_layer_kernel_8cpp_source.xhtml#l00100">NEQuantizationLayerKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_matrix_multiply_reshaped_only_r_h_s_kernel_8cpp_source.xhtml#l00173">CLGEMMLowpMatrixMultiplyReshapedOnlyRHSKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_matrix_multiply_native_kernel_8cpp_source.xhtml#l00213">CLGEMMMatrixMultiplyNativeKernel::configure()</a>, <a class="el" href="_c_l_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00073">CLROIPoolingLayerKernel::configure()</a>, <a class="el" href="_n_e_permute_kernel_8cpp_source.xhtml#l00237">NEPermuteKernel::configure()</a>, <a class="el" href="_g_c_g_e_m_m_matrix_multiply_kernel_8cpp_source.xhtml#l00185">GCGEMMMatrixMultiplyKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00168">CLGEMMLowpMatrixMultiplyReshapedKernel::configure()</a>, <a class="el" href="_n_e_pad_layer_kernel_8cpp_source.xhtml#l00184">NEPadLayerKernel::configure()</a>, <a class="el" href="_c_l_strided_slice_kernel_8cpp_source.xhtml#l00100">CLStridedSliceKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_matrix_multiply_reshaped_only_r_h_s_kernel_8cpp_source.xhtml#l00216">CLGEMMMatrixMultiplyReshapedOnlyRHSKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_matrix_multiply_kernel_8cpp_source.xhtml#l00305">CLGEMMMatrixMultiplyKernel::configure()</a>, <a class="el" href="_n_e_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00046">NEROIPoolingLayerKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_offset_contribution_output_stage_kernel_8cpp_source.xhtml#l00196">CLGEMMLowpOffsetContributionOutputStageKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_offset_contribution_kernel_8cpp_source.xhtml#l00145">CLGEMMLowpOffsetContributionKernel::configure()</a>, <a class="el" href="_g_c_weights_reshape_kernel_8cpp_source.xhtml#l00046">GCWeightsReshapeKernel::configure()</a>, <a class="el" href="_c_l_laplacian_reconstruct_8cpp_source.xhtml#l00045">CLLaplacianReconstruct::configure()</a>, <a class="el" href="_n_e_laplacian_reconstruct_8cpp_source.xhtml#l00045">NELaplacianReconstruct::configure()</a>, <a class="el" href="_n_e_gaussian_pyramid_8cpp_source.xhtml#l00057">NEGaussianPyramidHalf::configure()</a>, <a class="el" href="_g_c_convolution_layer_8cpp_source.xhtml#l00090">GCConvolutionLayer::configure()</a>, <a class="el" href="_n_e_gaussian_pyramid_8cpp_source.xhtml#l00139">NEGaussianPyramidOrb::configure()</a>, <a class="el" href="_i_tensor_8cpp_source.xhtml#l00035">ITensor::copy_from()</a>, <a class="el" href="_validate_8cpp_source.xhtml#l00092">arm_compute::error_on_tensor_not_2d()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_matrix_multiply_kernel_8cpp_source.xhtml#l00249">CLGEMMLowpMatrixMultiplyKernel::run()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_matrix_multiply_native_kernel_8cpp_source.xhtml#l00267">CLGEMMLowpMatrixMultiplyNativeKernel::run()</a>, <a class="el" href="_c_l_color_convert_kernel_8cpp_source.xhtml#l00432">CLColorConvertKernel::run()</a>, <a class="el" href="_g_c_g_e_m_m_matrix_multiply_kernel_8cpp_source.xhtml#l00303">GCGEMMMatrixMultiplyKernel::run()</a>, <a class="el" href="_n_e_stack_layer_kernel_8cpp_source.xhtml#l00116">NEStackLayerKernel::run()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_matrix_multiply_reshaped_only_r_h_s_kernel_8cpp_source.xhtml#l00274">CLGEMMLowpMatrixMultiplyReshapedOnlyRHSKernel::run()</a>, <a class="el" href="_n_e_g_e_m_m_lowp_offset_contribution_kernel_8cpp_source.xhtml#l00390">NEGEMMLowpOffsetContributionKernel::run()</a>, <a class="el" href="_c_l_g_e_m_m_matrix_multiply_native_kernel_8cpp_source.xhtml#l00330">CLGEMMMatrixMultiplyNativeKernel::run()</a>, <a class="el" href="_c_l_g_e_m_m_matrix_multiply_kernel_8cpp_source.xhtml#l00476">CLGEMMMatrixMultiplyKernel::run()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00265">CLGEMMLowpMatrixMultiplyReshapedKernel::run()</a>, <a class="el" href="_c_l_g_e_m_m_matrix_multiply_reshaped_only_r_h_s_kernel_8cpp_source.xhtml#l00340">CLGEMMMatrixMultiplyReshapedOnlyRHSKernel::run()</a>, <a class="el" href="_c_l_g_e_m_m_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00334">CLGEMMMatrixMultiplyReshapedKernel::run()</a>, <a class="el" href="_access_window_static_8cpp_source.xhtml#l00084">AccessWindowStatic::update_window_if_needed()</a>, <a class="el" href="_i_access_window_8cpp_source.xhtml#l00097">AccessWindowRectangle::update_window_if_needed()</a>, <a class="el" href="_c_l_crop_kernel_8cpp_source.xhtml#l00091">CLCropKernel::validate()</a>, <a class="el" href="_c_l_g_e_m_m_convolution_layer_8cpp_source.xhtml#l00066">CLConvolutionLayerReshapeWeights::validate()</a>, <a class="el" href="_n_e_g_e_m_m_convolution_layer_8cpp_source.xhtml#l00060">NEConvolutionLayerReshapeWeights::validate()</a>, <a class="el" href="_n_e_crop_kernel_8cpp_source.xhtml#l00275">NECropKernel::validate()</a>, <a class="el" href="_n_e_locally_connected_layer_8cpp_source.xhtml#l00080">NELocallyConnectedLayer::validate()</a>, <a class="el" href="_c_l_locally_connected_layer_8cpp_source.xhtml#l00086">CLLocallyConnectedLayer::validate()</a>, <a class="el" href="_n_e_generate_proposals_layer_8cpp_source.xhtml#l00204">NEGenerateProposalsLayer::validate()</a>, <a class="el" href="_c_l_generate_proposals_layer_8cpp_source.xhtml#l00193">CLGenerateProposalsLayer::validate()</a>, <a class="el" href="_c_l_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00256">CLLSTMLayerQuantized::validate()</a>, <a class="el" href="_n_e_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00235">NELSTMLayerQuantized::validate()</a>, <a class="el" href="_n_e_l_s_t_m_layer_8cpp_source.xhtml#l00381">NELSTMLayer::validate()</a>, <a class="el" href="_c_l_l_s_t_m_layer_8cpp_source.xhtml#l00388">CLLSTMLayer::validate()</a>, <a class="el" href="_n_e_g_e_m_m_convolution_layer_8cpp_source.xhtml#l00390">NEGEMMConvolutionLayer::validate()</a>, and <a class="el" href="_c_l_g_e_m_m_convolution_layer_8cpp_source.xhtml#l00396">CLGEMMConvolutionLayer::validate()</a>.</p>

</div>
</div>
<a id="ac80aea0e8c7c5c812ea8c7221fbfd4b2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac80aea0e8c7c5c812ea8c7221fbfd4b2">&#9670;&nbsp;</a></span>offset_element_in_bytes()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual int32_t offset_element_in_bytes </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;&#160;</td>
          <td class="paramname"><em>pos</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The offset in bytes from the beginning of the memory allocation to access the element at position (x, y, z ...) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pos</td><td><a class="el" href="struct_vector.xhtml" title="Structure to hold Vector information.">Vector</a> with the coordinates of the element to access. The size of this vector must be equal to the number of dimensions of the tensor</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Offset in bytes from the beginning of the memory allocation to access the element (x, y, z, ...) </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a7888888b7f18215ae83fd3660d38eccb">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a7888888b7f18215ae83fd3660d38eccb">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="utils_2_utils_8cpp_source.xhtml#l00124">arm_compute::utils::draw_detection_rectangle()</a>, <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00134">SubTensorInfo::offset_first_element_in_bytes()</a>, <a class="el" href="_i_tensor_8h_source.xhtml#l00063">ITensor::ptr_to_element()</a>, and <a class="el" href="_n_e_reorg_layer_kernel_8cpp_source.xhtml#l00101">NEReorgLayerKernel::run()</a>.</p>

</div>
</div>
<a id="ad0bd5cc32e7e4c0699eccba91e5de397"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad0bd5cc32e7e4c0699eccba91e5de397">&#9670;&nbsp;</a></span>offset_first_element_in_bytes()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual size_t offset_first_element_in_bytes </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The offset from the beginning of the memory allocation to the first element of the tensor. </p>
<p>This can be used to access efficiently elements in a 2D tensor</p>
<dl class="section return"><dt>Returns</dt><dd>The offset in bytes to access the first element of the tensor. </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ab54246abe670b06f5624add7e7022904">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#ab54246abe670b06f5624add7e7022904">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="_n_e_depthwise_convolution_assembly_dispatch_8cpp_source.xhtml#l00542">NEDepthwiseConvolutionAssemblyDispatch::prepare()</a>, <a class="el" href="_n_e_width_concatenate_layer_kernel_8cpp_source.xhtml#l00105">NEWidthConcatenateLayerKernel::run()</a>, <a class="el" href="_n_e_height_concatenate_layer_kernel_8cpp_source.xhtml#l00105">NEHeightConcatenateLayerKernel::run()</a>, <a class="el" href="_n_e_depthwise_convolution_assembly_dispatch_8cpp_source.xhtml#l00511">NEDepthwiseConvolutionAssemblyDispatch::run()</a>, <a class="el" href="_access_window_static_8cpp_source.xhtml#l00084">AccessWindowStatic::update_window_if_needed()</a>, and <a class="el" href="_i_access_window_8cpp_source.xhtml#l00097">AccessWindowRectangle::update_window_if_needed()</a>.</p>

</div>
</div>
<a id="a07b929c34ad1dc823d8315876aa403ce"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a07b929c34ad1dc823d8315876aa403ce">&#9670;&nbsp;</a></span>padding()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespacearm__compute.xhtml#a4467b302fc9ec312c40580336ab783da">PaddingSize</a> padding </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Padding of tensor. </p>
<dl class="section return"><dt>Returns</dt><dd>Padding. </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a79e20eacb1e963e24a21ebd7369effd7">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a79e20eacb1e963e24a21ebd7369effd7">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_fill_border_kernel_8cpp_source.xhtml#l00062">CLFillBorderKernel::configure()</a>, <a class="el" href="_g_c_fill_border_kernel_8cpp_source.xhtml#l00060">GCFillBorderKernel::configure()</a>, <a class="el" href="_n_e_fill_border_kernel_8cpp_source.xhtml#l00098">NEFillBorderKernel::configure()</a>, <a class="el" href="_g_c_tensor_shift_kernel_8cpp_source.xhtml#l00045">GCTensorShiftKernel::configure()</a>, <a class="el" href="_c_l_2_accumulate_8cpp_source.xhtml#l00056">arm_compute::test::validation::DATA_TEST_CASE()</a>, <a class="el" href="_accessor_8h_source.xhtml#l00126">Accessor::padding()</a>, <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00174">SubTensorInfo::padding()</a>, <a class="el" href="_g_c_scale_kernel_8cpp_source.xhtml#l00145">GCScaleKernel::run()</a>, <a class="el" href="_g_c_depthwise_convolution_layer3x3_kernel_8cpp_source.xhtml#l00205">GCDepthwiseConvolutionLayer3x3Kernel::run()</a>, <a class="el" href="_g_c_activation_layer_kernel_8cpp_source.xhtml#l00104">GCActivationLayerKernel::run()</a>, <a class="el" href="_g_c_pooling_layer_kernel_8cpp_source.xhtml#l00331">GCPoolingLayerKernel::run()</a>, <a class="el" href="_g_c_arithmetic_addition_kernel_8cpp_source.xhtml#l00131">GCArithmeticAdditionKernel::run()</a>, <a class="el" href="_g_c_normalize_planar_y_u_v_layer_kernel_8cpp_source.xhtml#l00132">GCNormalizePlanarYUVLayerKernel::run()</a>, <a class="el" href="_g_c_tensor_shift_kernel_8cpp_source.xhtml#l00077">GCTensorShiftKernel::run()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_matrix_multiply_kernel_8cpp_source.xhtml#l00249">CLGEMMLowpMatrixMultiplyKernel::run()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_matrix_multiply_native_kernel_8cpp_source.xhtml#l00267">CLGEMMLowpMatrixMultiplyNativeKernel::run()</a>, <a class="el" href="_c_l_g_e_m_m_reshape_l_h_s_matrix_kernel_8cpp_source.xhtml#l00185">CLGEMMReshapeLHSMatrixKernel::run()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_matrix_multiply_reshaped_only_r_h_s_kernel_8cpp_source.xhtml#l00274">CLGEMMLowpMatrixMultiplyReshapedOnlyRHSKernel::run()</a>, <a class="el" href="_g_c_batch_normalization_layer_kernel_8cpp_source.xhtml#l00205">GCBatchNormalizationLayerKernel::run()</a>, <a class="el" href="_c_l_g_e_m_m_matrix_multiply_kernel_8cpp_source.xhtml#l00476">CLGEMMMatrixMultiplyKernel::run()</a>, <a class="el" href="_c_l_g_e_m_m_matrix_multiply_native_kernel_8cpp_source.xhtml#l00330">CLGEMMMatrixMultiplyNativeKernel::run()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00265">CLGEMMLowpMatrixMultiplyReshapedKernel::run()</a>, <a class="el" href="_c_l_g_e_m_m_matrix_multiply_reshaped_only_r_h_s_kernel_8cpp_source.xhtml#l00340">CLGEMMMatrixMultiplyReshapedOnlyRHSKernel::run()</a>, <a class="el" href="tests_2validation_2_n_e_o_n_2_u_n_i_t_2_tensor_allocator_8cpp_source.xhtml#l00145">arm_compute::test::validation::TEST_CASE()</a>, and <a class="el" href="_i_access_window_8cpp_source.xhtml#l00097">AccessWindowRectangle::update_window_if_needed()</a>.</p>

</div>
</div>
<a id="a3f3e1a3200223e6a304a533b1016e749"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3f3e1a3200223e6a304a533b1016e749">&#9670;&nbsp;</a></span>quantization_info()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> quantization_info </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the quantization settings (scale and offset) of the tensor. </p>
<dl class="section return"><dt>Returns</dt><dd>A <a class="el" href="classarm__compute_1_1_quantization_info.xhtml" title="Quantization information.">QuantizationInfo</a> containing the scale and offset. </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ac74736e3863207232a23b7181c1d0f44">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#ac74736e3863207232a23b7181c1d0f44">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="_helpers_8inl_source.xhtml#l00220">arm_compute::auto_init_if_empty()</a>, <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00174">arm_compute::quantization::compute_quantized_multipliers_and_shifts()</a>, <a class="el" href="_c_l_scale_kernel_8cpp_source.xhtml#l00182">CLScaleKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_matrix_vector_multiply_kernel_8cpp_source.xhtml#l00083">CLGEMMMatrixVectorMultiplyKernel::configure()</a>, <a class="el" href="_c_l_generate_proposals_layer_kernel_8cpp_source.xhtml#l00073">CLComputeAllAnchorsKernel::configure()</a>, <a class="el" href="_c_l_comparison_kernel_8cpp_source.xhtml#l00108">CLComparisonKernel::configure()</a>, <a class="el" href="_c_l_activation_layer_kernel_8cpp_source.xhtml#l00122">CLActivationLayerKernel::configure()</a>, <a class="el" href="_c_l_pooling_layer_kernel_8cpp_source.xhtml#l00177">CLPoolingLayerKernel::configure()</a>, <a class="el" href="_c_l_quantization_layer_kernel_8cpp_source.xhtml#l00081">CLQuantizationLayerKernel::configure()</a>, <a class="el" href="_c_l_width_concatenate2_tensors_kernel_8cpp_source.xhtml#l00097">CLWidthConcatenate2TensorsKernel::configure()</a>, <a class="el" href="_c_l_pixel_wise_multiplication_kernel_8cpp_source.xhtml#l00149">CLPixelWiseMultiplicationKernel::configure()</a>, <a class="el" href="_c_l_width_concatenate_layer_kernel_8cpp_source.xhtml#l00093">CLWidthConcatenateLayerKernel::configure()</a>, <a class="el" href="_c_l_height_concatenate_layer_kernel_8cpp_source.xhtml#l00092">CLHeightConcatenateLayerKernel::configure()</a>, <a class="el" href="_c_l_range_kernel_8cpp_source.xhtml#l00093">CLRangeKernel::configure()</a>, <a class="el" href="_c_l_width_concatenate4_tensors_kernel_8cpp_source.xhtml#l00115">CLWidthConcatenate4TensorsKernel::configure()</a>, <a class="el" href="_c_l_bounding_box_transform_kernel_8cpp_source.xhtml#l00090">CLBoundingBoxTransformKernel::configure()</a>, <a class="el" href="_n_e_generate_proposals_layer_kernel_8cpp_source.xhtml#l00071">NEComputeAllAnchorsKernel::configure()</a>, <a class="el" href="_c_l_depth_concatenate_layer_kernel_8cpp_source.xhtml#l00085">CLDepthConcatenateLayerKernel::configure()</a>, <a class="el" href="_c_l_batch_concatenate_layer_kernel_8cpp_source.xhtml#l00087">CLBatchConcatenateLayerKernel::configure()</a>, <a class="el" href="_c_l_r_o_i_align_layer_kernel_8cpp_source.xhtml#l00105">CLROIAlignLayerKernel::configure()</a>, <a class="el" href="_c_l_deconvolution_layer_upsample_8cpp_source.xhtml#l00045">CLDeconvolutionLayerUpsample::configure()</a>, <a class="el" href="_n_e_depthwise_convolution_assembly_dispatch_8cpp_source.xhtml#l00346">NEDepthwiseConvolutionAssemblyDispatch::configure()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_native_kernel_8cpp_source.xhtml#l00194">CLDepthwiseConvolutionLayerNativeKernel::configure()</a>, <a class="el" href="_c_l_direct_convolution_layer_kernel_8cpp_source.xhtml#l00424">CLDirectConvolutionLayerKernel::configure()</a>, <a class="el" href="_n_e_depthwise_convolution_layer_native_kernel_8cpp_source.xhtml#l00508">NEDepthwiseConvolutionLayerNativeKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_matrix_multiply_core_8cpp_source.xhtml#l00083">CLGEMMLowpMatrixMultiplyCore::configure()</a>, <a class="el" href="_n_e_generate_proposals_layer_8cpp_source.xhtml#l00065">NEGenerateProposalsLayer::configure()</a>, <a class="el" href="_c_l_generate_proposals_layer_8cpp_source.xhtml#l00065">CLGenerateProposalsLayer::configure()</a>, <a class="el" href="_n_e_g_e_m_m_lowp_matrix_multiply_core_8cpp_source.xhtml#l00051">NEGEMMLowpMatrixMultiplyCore::configure()</a>, <a class="el" href="_n_e_deconvolution_layer_8cpp_source.xhtml#l00112">NEDeconvolutionLayer::configure()</a>, <a class="el" href="_c_l_g_e_m_m_deconvolution_layer_8cpp_source.xhtml#l00195">CLGEMMDeconvolutionLayer::configure()</a>, <a class="el" href="_n_e_fully_connected_layer_8cpp_source.xhtml#l00141">NEFullyConnectedLayer::configure()</a>, <a class="el" href="_n_e_g_e_m_m_convolution_layer_8cpp_source.xhtml#l00240">NEGEMMConvolutionLayer::configure()</a>, <a class="el" href="_c_l_g_e_m_m_convolution_layer_8cpp_source.xhtml#l00181">CLGEMMConvolutionLayer::configure()</a>, <a class="el" href="_validate_8h_source.xhtml#l00562">arm_compute::error_on_mismatching_quantization_info()</a>, <a class="el" href="_accessor_8h_source.xhtml#l00131">Accessor::quantization_info()</a>, <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00220">SubTensorInfo::quantization_info()</a>, <a class="el" href="_c_p_p_upsample_kernel_8cpp_source.xhtml#l00068">CPPUpsampleKernel::run()</a>, <a class="el" href="_n_e_width_concatenate_layer_kernel_8cpp_source.xhtml#l00105">NEWidthConcatenateLayerKernel::run()</a>, <a class="el" href="_n_e_height_concatenate_layer_kernel_8cpp_source.xhtml#l00105">NEHeightConcatenateLayerKernel::run()</a>, <a class="el" href="_c_p_p_detection_post_process_layer_8cpp_source.xhtml#l00257">CPPDetectionPostProcessLayer::run()</a>, <a class="el" href="tensor__info_8h_source.xhtml#l00044">arm_compute::helpers::tensor_info::tensors_have_different_quantization_info()</a>, <a class="el" href="_n_e_depthwise_convolution_assembly_dispatch_8cpp_source.xhtml#l00399">NEDepthwiseConvolutionAssemblyDispatch::validate()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_matrix_multiply_core_8cpp_source.xhtml#l00274">CLGEMMLowpMatrixMultiplyCore::validate()</a>, <a class="el" href="_n_e_g_e_m_m_lowp_matrix_multiply_core_8cpp_source.xhtml#l00281">NEGEMMLowpMatrixMultiplyCore::validate()</a>, <a class="el" href="_n_e_generate_proposals_layer_8cpp_source.xhtml#l00204">NEGenerateProposalsLayer::validate()</a>, <a class="el" href="_c_l_generate_proposals_layer_8cpp_source.xhtml#l00193">CLGenerateProposalsLayer::validate()</a>, <a class="el" href="_c_l_g_e_m_m_deconvolution_layer_8cpp_source.xhtml#l00093">CLGEMMDeconvolutionLayer::validate()</a>, <a class="el" href="_n_e_fully_connected_layer_8cpp_source.xhtml#l00275">NEFullyConnectedLayer::validate()</a>, <a class="el" href="_c_p_p_box_with_non_maxima_suppression_limit_8cpp_source.xhtml#l00196">arm_compute::validate()</a>, <a class="el" href="_n_e_g_e_m_m_convolution_layer_8cpp_source.xhtml#l00390">NEGEMMConvolutionLayer::validate()</a>, and <a class="el" href="_c_l_g_e_m_m_convolution_layer_8cpp_source.xhtml#l00396">CLGEMMConvolutionLayer::validate()</a>.</p>

</div>
</div>
<a id="afc135290818a7ae02d2195c013796fdd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afc135290818a7ae02d2195c013796fdd">&#9670;&nbsp;</a></span>reset_padding()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>&amp; reset_padding </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Resets the padding settings of the tensor. </p>
<dl class="section return"><dt>Returns</dt><dd>Reference to this <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml" title="Store the tensor&#39;s metadata.">ITensorInfo</a> object </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a5a80b3a6ae624417617d6a8d3209add5">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#ad29c039b6f3c4534928ed99aa9f53027">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00108">SubTensorInfo::reset_padding()</a>.</p>

</div>
</div>
<a id="abb9481fe056b9749f9b4c08db101cc15"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abb9481fe056b9749f9b4c08db101cc15">&#9670;&nbsp;</a></span>set_data_layout()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>&amp; set_data_layout </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> &amp;&#160;</td>
          <td class="paramname"><em>data_layout</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the data layout of the tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">data_layout</td><td>DataLayout containing the layout data information.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference to this <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml" title="Store the tensor&#39;s metadata.">ITensorInfo</a> object </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a70b6e1495b94818cce4981dbac6bdd66">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a16d275e5270f2c36a04764c863d852b6">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="_helpers_8inl_source.xhtml#l00220">arm_compute::auto_init_if_empty()</a>, <a class="el" href="_c_l_upsample_layer_kernel_8cpp_source.xhtml#l00066">CLUpsampleLayerKernel::configure()</a>, <a class="el" href="_n_e_instance_normalization_layer_8cpp_source.xhtml#l00036">NEInstanceNormalizationLayer::configure()</a>, <a class="el" href="_n_e_upsample_layer_kernel_8cpp_source.xhtml#l00186">NEUpsampleLayerKernel::configure()</a>, <a class="el" href="_n_e_f_f_t_convolution_layer_8cpp_source.xhtml#l00097">NEFFTConvolutionLayer::configure()</a>, <a class="el" href="_n_e_deconvolution_layer_8cpp_source.xhtml#l00112">NEDeconvolutionLayer::configure()</a>, and <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00083">SubTensorInfo::set_data_layout()</a>.</p>

</div>
</div>
<a id="a9ebcdce876b4cd07736afa47d50154de"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9ebcdce876b4cd07736afa47d50154de">&#9670;&nbsp;</a></span>set_data_type()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>&amp; set_data_type </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>data_type</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the data type to the specified value. </p>
<dl class="section warning"><dt>Warning</dt><dd>This resets the format to UNKNOWN.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">data_type</td><td>The new data type.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference to this <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml" title="Store the tensor&#39;s metadata.">ITensorInfo</a> object </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a0a9053e6c4729ac5201b58068050c319">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a613528bd0feb15ee8d6df06cbdb629f8">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="_helpers_8inl_source.xhtml#l00220">arm_compute::auto_init_if_empty()</a>, <a class="el" href="_g_c_functions_factory_8cpp_source.xhtml#l00073">arm_compute::graph::backends::detail::create_convolution_layer&lt; GCConvolutionLayerFunctions, GCTargetInfo &gt;()</a>, <a class="el" href="_g_c_functions_factory_8cpp_source.xhtml#l00126">arm_compute::graph::backends::detail::create_depthwise_convolution_layer&lt; GCDepthwiseConvolutionLayerFunctions, GCTargetInfo &gt;()</a>, <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00077">SubTensorInfo::set_data_type()</a>, and <a class="el" href="_validate_helpers_8h_source.xhtml#l00114">arm_compute::graph::backends::detail::validate_convolution_layer()</a>.</p>

</div>
</div>
<a id="a17394f0f7aea22d9b2d4c6f33bfa69ca"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a17394f0f7aea22d9b2d4c6f33bfa69ca">&#9670;&nbsp;</a></span>set_format()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>&amp; set_format </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a>&#160;</td>
          <td class="paramname"><em>format</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the format of an already initialized tensor. </p>
<dl class="section note"><dt>Note</dt><dd>If the data type has already been configured (i.e. not UNKNOWN) it must match the new format. If data type hasn't been configured it will be based on the format.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">format</td><td>Single-plane format of the tensor.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference to this <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml" title="Store the tensor&#39;s metadata.">ITensorInfo</a> object </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a523a68398c1a8161daa4238c15e065fa">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#af501bc12f51874e786b0f28016a99ff7">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="_schaar_8cpp_source.xhtml#l00047">arm_compute::test::validation::DATA_TEST_CASE()</a>, and <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00095">SubTensorInfo::set_format()</a>.</p>

</div>
</div>
<a id="af5304ca721ea07fa71ea5cce02b796fa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af5304ca721ea07fa71ea5cce02b796fa">&#9670;&nbsp;</a></span>set_is_dynamic()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>&amp; set_is_dynamic </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>is_dynamic</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the flag whether the tensor size is dynamic. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">is_dynamic</td><td>Flag that marks the tensor if it's dynamic.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference to this <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml" title="Store the tensor&#39;s metadata.">ITensorInfo</a> object </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a3028bed2da89f8932312b1203723cb66">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a3028bed2da89f8932312b1203723cb66">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00200">SubTensorInfo::set_is_dynamic()</a>.</p>

</div>
</div>
<a id="a9273842d8e5dc1a3c7fab727176fd7fe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9273842d8e5dc1a3c7fab727176fd7fe">&#9670;&nbsp;</a></span>set_is_resizable()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>&amp; set_is_resizable </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>is_resizable</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the flag whether the tensor size can be changed. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">is_resizable</td><td>Flag that marks the tensor if it can be changed or not.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference to this <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml" title="Store the tensor&#39;s metadata.">ITensorInfo</a> object </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a78bf77b2d9b959259f77a32b9a412184">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a78bf77b2d9b959259f77a32b9a412184">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00194">SubTensorInfo::set_is_resizable()</a>.</p>

</div>
</div>
<a id="aaf74be25e2392705f29352ffaa4b1f9d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaf74be25e2392705f29352ffaa4b1f9d">&#9670;&nbsp;</a></span>set_num_channels()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>&amp; set_num_channels </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>num_channels</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the number of channels to the specified value. </p>
<dl class="section warning"><dt>Warning</dt><dd>This resets the format to UNKNOWN.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">num_channels</td><td>New number of channels.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference to this <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml" title="Store the tensor&#39;s metadata.">ITensorInfo</a> object </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ad03af3eeb6f3666d6282ca689c1b2ce8">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a5b0a9fd674f8748506b6944c030bc47e">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="_helpers_8inl_source.xhtml#l00220">arm_compute::auto_init_if_empty()</a>, <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00089">SubTensorInfo::set_num_channels()</a>, <a class="el" href="_n_e_reduction_operation_8cpp_source.xhtml#l00061">NEReductionOperation::validate()</a>, <a class="el" href="_c_l_arg_min_max_layer_8cpp_source.xhtml#l00041">CLArgMinMaxLayer::validate()</a>, and <a class="el" href="_c_l_reduction_operation_8cpp_source.xhtml#l00047">CLReductionOperation::validate()</a>.</p>

</div>
</div>
<a id="a575d37eaf8a905c8ca3c0250757c2b81"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a575d37eaf8a905c8ca3c0250757c2b81">&#9670;&nbsp;</a></span>set_quantization_info()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>&amp; set_quantization_info </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>quantization_info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the quantization settings (scale and offset) of the tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">quantization_info</td><td><a class="el" href="classarm__compute_1_1_quantization_info.xhtml" title="Quantization information.">QuantizationInfo</a> containing the scale and offset</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference to this <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml" title="Store the tensor&#39;s metadata.">ITensorInfo</a> object </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a78839e7861ba8ffed52ca55da2745761">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#acda9036ad24c455f67f2fea388a0ae13">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="_helpers_8inl_source.xhtml#l00220">arm_compute::auto_init_if_empty()</a>, <a class="el" href="_c_l_g_e_m_m_convolution_layer_8cpp_source.xhtml#l00049">CLConvolutionLayerReshapeWeights::configure()</a>, <a class="el" href="_n_e_g_e_m_m_convolution_layer_8cpp_source.xhtml#l00045">NEConvolutionLayerReshapeWeights::configure()</a>, <a class="el" href="_n_e_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00057">NELSTMLayerQuantized::configure()</a>, <a class="el" href="_n_e_deconvolution_layer_8cpp_source.xhtml#l00112">NEDeconvolutionLayer::configure()</a>, <a class="el" href="_n_e_o_n_2_g_e_m_m_lowp_8cpp_source.xhtml#l00082">arm_compute::test::validation::DATA_TEST_CASE()</a>, <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00102">SubTensorInfo::set_quantization_info()</a>, <a class="el" href="_n_e_reduction_operation_8cpp_source.xhtml#l00061">NEReductionOperation::validate()</a>, <a class="el" href="_c_l_arg_min_max_layer_8cpp_source.xhtml#l00041">CLArgMinMaxLayer::validate()</a>, <a class="el" href="_c_l_reduction_operation_8cpp_source.xhtml#l00047">CLReductionOperation::validate()</a>, <a class="el" href="_n_e_generate_proposals_layer_8cpp_source.xhtml#l00204">NEGenerateProposalsLayer::validate()</a>, <a class="el" href="_c_l_generate_proposals_layer_8cpp_source.xhtml#l00193">CLGenerateProposalsLayer::validate()</a>, <a class="el" href="_c_l_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00256">CLLSTMLayerQuantized::validate()</a>, and <a class="el" href="_n_e_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00235">NELSTMLayerQuantized::validate()</a>.</p>

</div>
</div>
<a id="a12a4f1190952613e36b44846962e26bb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a12a4f1190952613e36b44846962e26bb">&#9670;&nbsp;</a></span>set_tensor_shape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>&amp; set_tensor_shape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>shape</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the shape of an already initialized tensor. </p>
<dl class="section warning"><dt>Warning</dt><dd>Changing the shape requires to recompute the strides and is therefore only possible if the tensor hasn't been allocated yet.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">shape</td><td>New tensor shape.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference to this <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml" title="Store the tensor&#39;s metadata.">ITensorInfo</a> object </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a2d7e8b8e05c3318b2d90c40d781745d2">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a2d7e8b8e05c3318b2d90c40d781745d2">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="_helpers_8inl_source.xhtml#l00220">arm_compute::auto_init_if_empty()</a>, <a class="el" href="_n_e_crop_kernel_8cpp_source.xhtml#l00296">NECropKernel::configure_output_shape()</a>, <a class="el" href="_sub_tensor_info_8cpp_source.xhtml#l00095">SubTensorInfo::set_tensor_shape()</a>, <a class="el" href="_n_e_l2_normalize_layer_8cpp_source.xhtml#l00055">NEL2NormalizeLayer::validate()</a>, <a class="el" href="_n_e_reduction_operation_8cpp_source.xhtml#l00061">NEReductionOperation::validate()</a>, <a class="el" href="_c_l_l2_normalize_layer_8cpp_source.xhtml#l00064">CLL2NormalizeLayer::validate()</a>, <a class="el" href="_c_l_arg_min_max_layer_8cpp_source.xhtml#l00041">CLArgMinMaxLayer::validate()</a>, and <a class="el" href="_c_l_reduction_operation_8cpp_source.xhtml#l00047">CLReductionOperation::validate()</a>.</p>

</div>
</div>
<a id="a9586081a29fceb532ab270bd843abee6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9586081a29fceb532ab270bd843abee6">&#9670;&nbsp;</a></span>set_valid_region()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void set_valid_region </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &amp;&#160;</td>
          <td class="paramname"><em>valid_region</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the valid region of the tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">valid_region</td><td>Valid region to set. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a43e45363267b6bce4bb6770febe9ce11">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a43e45363267b6bce4bb6770febe9ce11">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="_n_e_reshape_layer_kernel_8cpp_source.xhtml#l00074">NEReshapeLayerKernel::configure()</a>, <a class="el" href="_c_l_gaussian_pyramid_kernel_8cpp_source.xhtml#l00044">CLGaussianPyramidHorKernel::configure()</a>, <a class="el" href="_c_l_reshape_layer_kernel_8cpp_source.xhtml#l00065">CLReshapeLayerKernel::configure()</a>, <a class="el" href="_c_p_p_detection_output_layer_8cpp_source.xhtml#l00391">CPPDetectionOutputLayer::configure()</a>, <a class="el" href="_c_l_reorg_layer_kernel_8cpp_source.xhtml#l00072">CLReorgLayerKernel::configure()</a>, <a class="el" href="_c_l_permute_kernel_8cpp_source.xhtml#l00078">CLPermuteKernel::configure()</a>, <a class="el" href="_c_p_p_flip_weights_kernel_8cpp_source.xhtml#l00069">CPPFlipWeightsKernel::configure()</a>, <a class="el" href="_c_l_h_o_g_descriptor_kernel_8cpp_source.xhtml#l00048">CLHOGOrientationBinningKernel::configure()</a>, <a class="el" href="_c_l_width_concatenate2_tensors_kernel_8cpp_source.xhtml#l00097">CLWidthConcatenate2TensorsKernel::configure()</a>, <a class="el" href="_n_e_gaussian_pyramid_kernel_8cpp_source.xhtml#l00053">NEGaussianPyramidHorKernel::configure()</a>, <a class="el" href="_c_l_height_concatenate_layer_kernel_8cpp_source.xhtml#l00092">CLHeightConcatenateLayerKernel::configure()</a>, <a class="el" href="_n_e_channel_shuffle_layer_kernel_8cpp_source.xhtml#l00139">NEChannelShuffleLayerKernel::configure()</a>, <a class="el" href="_c_l_width_concatenate_layer_kernel_8cpp_source.xhtml#l00093">CLWidthConcatenateLayerKernel::configure()</a>, <a class="el" href="_n_e_reorg_layer_kernel_8cpp_source.xhtml#l00071">NEReorgLayerKernel::configure()</a>, <a class="el" href="_g_c_g_e_m_m_transpose1x_w_kernel_8cpp_source.xhtml#l00041">GCGEMMTranspose1xWKernel::configure()</a>, <a class="el" href="_c_l_width_concatenate4_tensors_kernel_8cpp_source.xhtml#l00115">CLWidthConcatenate4TensorsKernel::configure()</a>, <a class="el" href="_c_p_p_upsample_kernel_8cpp_source.xhtml#l00049">CPPUpsampleKernel::configure()</a>, <a class="el" href="_c_p_p_permute_kernel_8cpp_source.xhtml#l00108">CPPPermuteKernel::configure()</a>, <a class="el" href="_c_l_batch_concatenate_layer_kernel_8cpp_source.xhtml#l00087">CLBatchConcatenateLayerKernel::configure()</a>, <a class="el" href="_g_c_activation_layer_kernel_8cpp_source.xhtml#l00047">GCActivationLayerKernel::configure()</a>, <a class="el" href="_c_l_depth_concatenate_layer_kernel_8cpp_source.xhtml#l00085">CLDepthConcatenateLayerKernel::configure()</a>, <a class="el" href="_n_e_quantization_layer_kernel_8cpp_source.xhtml#l00100">NEQuantizationLayerKernel::configure()</a>, <a class="el" href="_n_e_height_concatenate_layer_kernel_8cpp_source.xhtml#l00079">NEHeightConcatenateLayerKernel::configure()</a>, <a class="el" href="_n_e_width_concatenate_layer_kernel_8cpp_source.xhtml#l00079">NEWidthConcatenateLayerKernel::configure()</a>, <a class="el" href="_n_e_permute_kernel_8cpp_source.xhtml#l00237">NEPermuteKernel::configure()</a>, <a class="el" href="_g_c_dropout_layer_kernel_8cpp_source.xhtml#l00048">GCDropoutLayerKernel::configure()</a>, <a class="el" href="_n_e_pad_layer_kernel_8cpp_source.xhtml#l00184">NEPadLayerKernel::configure()</a>, <a class="el" href="_n_e_depth_concatenate_layer_kernel_8cpp_source.xhtml#l00132">NEDepthConcatenateLayerKernel::configure()</a>, <a class="el" href="_n_e_gather_kernel_8cpp_source.xhtml#l00133">NEGatherKernel::configure()</a>, <a class="el" href="_n_e_fuse_batch_normalization_kernel_8cpp_source.xhtml#l00422">NEFuseBatchNormalizationKernel::configure()</a>, <a class="el" href="_g_c_g_e_m_m_interleave4x4_kernel_8cpp_source.xhtml#l00044">GCGEMMInterleave4x4Kernel::configure()</a>, <a class="el" href="_g_c_weights_reshape_kernel_8cpp_source.xhtml#l00046">GCWeightsReshapeKernel::configure()</a>, <a class="el" href="_g_c_im2_col_kernel_8cpp_source.xhtml#l00067">GCIm2ColKernel::configure()</a>, <a class="el" href="_c_l_weights_reshape_kernel_8cpp_source.xhtml#l00079">CLWeightsReshapeKernel::configure()</a>, <a class="el" href="_c_l_gaussian_pyramid_kernel_8cpp_source.xhtml#l00150">CLGaussianPyramidVertKernel::configure()</a>, <a class="el" href="_n_e_gaussian_pyramid_kernel_8cpp_source.xhtml#l00161">NEGaussianPyramidVertKernel::configure()</a>, <a class="el" href="_i_tensor_8cpp_source.xhtml#l00035">ITensor::copy_from()</a>, <a class="el" href="_c_p_p_detection_output_layer_8cpp_source.xhtml#l00444">CPPDetectionOutputLayer::run()</a>, <a class="el" href="_sub_tensor_info_8cpp_source.xhtml#l00095">SubTensorInfo::set_tensor_shape()</a>, <a class="el" href="_access_window_auto_padding_8cpp_source.xhtml#l00056">AccessWindowAutoPadding::set_valid_region()</a>, <a class="el" href="_access_window_static_8cpp_source.xhtml#l00076">AccessWindowStatic::set_valid_region()</a>, and <a class="el" href="_i_access_window_8cpp_source.xhtml#l00089">AccessWindowRectangle::set_valid_region()</a>.</p>

</div>
</div>
<a id="a6b14f175bf5281f57b561e2d4e4b1f1f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6b14f175bf5281f57b561e2d4e4b1f1f">&#9670;&nbsp;</a></span>strides_in_bytes()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual const <a class="el" href="classarm__compute_1_1_strides.xhtml">Strides</a>&amp; strides_in_bytes </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The strides in bytes for accessing each dimension of the tensor. </p>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_strides.xhtml" title="Strides of an item in bytes.">Strides</a> in bytes for each tensor dimension </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a5f1ca9d674346287cae57a6c5b5c24ec">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a5f1ca9d674346287cae57a6c5b5c24ec">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00073">CLROIPoolingLayerKernel::configure()</a>, <a class="el" href="utils_2_utils_8cpp_source.xhtml#l00124">arm_compute::utils::draw_detection_rectangle()</a>, <a class="el" href="_n_e_depthwise_convolution_assembly_dispatch_8cpp_source.xhtml#l00542">NEDepthwiseConvolutionAssemblyDispatch::prepare()</a>, <a class="el" href="_n_e_h_o_g_descriptor_kernel_8cpp_source.xhtml#l00678">NEHOGOrientationBinningKernel::run()</a>, <a class="el" href="_c_l_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00127">CLROIPoolingLayerKernel::run()</a>, <a class="el" href="_n_e_non_maxima_suppression3x3_kernel_8cpp_source.xhtml#l00498">NENonMaximaSuppression3x3Kernel::run()</a>, <a class="el" href="_n_e_h_o_g_detector_kernel_8cpp_source.xhtml#l00095">NEHOGDetectorKernel::run()</a>, <a class="el" href="_c_l_depth_concatenate_layer_kernel_8cpp_source.xhtml#l00133">CLDepthConcatenateLayerKernel::run()</a>, <a class="el" href="_c_l_batch_concatenate_layer_kernel_8cpp_source.xhtml#l00149">CLBatchConcatenateLayerKernel::run()</a>, <a class="el" href="_n_e_width_concatenate_layer_kernel_8cpp_source.xhtml#l00105">NEWidthConcatenateLayerKernel::run()</a>, <a class="el" href="_n_e_height_concatenate_layer_kernel_8cpp_source.xhtml#l00105">NEHeightConcatenateLayerKernel::run()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_matrix_multiply_kernel_8cpp_source.xhtml#l00249">CLGEMMLowpMatrixMultiplyKernel::run()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_matrix_multiply_native_kernel_8cpp_source.xhtml#l00267">CLGEMMLowpMatrixMultiplyNativeKernel::run()</a>, <a class="el" href="_n_e_min_max_layer_kernel_8cpp_source.xhtml#l00117">NEMinMaxLayerKernel::run()</a>, <a class="el" href="_g_c_col2_im_kernel_8cpp_source.xhtml#l00097">GCCol2ImKernel::run()</a>, <a class="el" href="_n_e_stack_layer_kernel_8cpp_source.xhtml#l00116">NEStackLayerKernel::run()</a>, <a class="el" href="_c_l_r_o_i_align_layer_kernel_8cpp_source.xhtml#l00162">CLROIAlignLayerKernel::run()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_matrix_multiply_reshaped_only_r_h_s_kernel_8cpp_source.xhtml#l00274">CLGEMMLowpMatrixMultiplyReshapedOnlyRHSKernel::run()</a>, <a class="el" href="_c_l_winograd_input_transform_kernel_8cpp_source.xhtml#l00228">CLWinogradInputTransformKernel::run()</a>, <a class="el" href="_c_l_direct_convolution_layer_kernel_8cpp_source.xhtml#l00591">CLDirectConvolutionLayerKernel::run()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00265">CLGEMMLowpMatrixMultiplyReshapedKernel::run()</a>, <a class="el" href="_c_l_g_e_m_m_matrix_multiply_kernel_8cpp_source.xhtml#l00476">CLGEMMMatrixMultiplyKernel::run()</a>, <a class="el" href="_c_l_g_e_m_m_matrix_multiply_native_kernel_8cpp_source.xhtml#l00330">CLGEMMMatrixMultiplyNativeKernel::run()</a>, <a class="el" href="_n_e_g_e_m_m_transpose1x_w_kernel_8cpp_source.xhtml#l00122">NEGEMMTranspose1xWKernel::run()</a>, <a class="el" href="_c_l_g_e_m_m_matrix_multiply_reshaped_only_r_h_s_kernel_8cpp_source.xhtml#l00340">CLGEMMMatrixMultiplyReshapedOnlyRHSKernel::run()</a>, <a class="el" href="_c_l_winograd_output_transform_kernel_8cpp_source.xhtml#l00222">CLWinogradOutputTransformKernel::run()</a>, <a class="el" href="_c_l_weights_reshape_kernel_8cpp_source.xhtml#l00119">CLWeightsReshapeKernel::run()</a>, <a class="el" href="_c_l_im2_col_kernel_8cpp_source.xhtml#l00355">CLIm2ColKernel::run()</a>, <a class="el" href="_n_e_weights_reshape_kernel_8cpp_source.xhtml#l00127">NEWeightsReshapeKernel::run()</a>, <a class="el" href="_n_e_depthwise_convolution_assembly_dispatch_8cpp_source.xhtml#l00511">NEDepthwiseConvolutionAssemblyDispatch::run()</a>, <a class="el" href="_c_l_g_e_m_m_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00334">CLGEMMMatrixMultiplyReshapedKernel::run()</a>, <a class="el" href="_n_e_sobel7x7_kernel_8cpp_source.xhtml#l00355">NESobel7x7VertKernel::run()</a>, <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00129">SubTensorInfo::strides_in_bytes()</a>, <a class="el" href="_access_window_static_8cpp_source.xhtml#l00084">AccessWindowStatic::update_window_if_needed()</a>, and <a class="el" href="_i_access_window_8cpp_source.xhtml#l00097">AccessWindowRectangle::update_window_if_needed()</a>.</p>

</div>
</div>
<a id="a7c66505457d00ece3aa4b34cab80757d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7c66505457d00ece3aa4b34cab80757d">&#9670;&nbsp;</a></span>tensor_shape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&amp; tensor_shape </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Size for each dimension of the tensor. </p>
<dl class="section return"><dt>Returns</dt><dd>A vector with the size for each dimension of the tensor </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_utils_8cpp_source.xhtml#l00258">ImageAccessor::access_tensor()</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00331">ValidationInputAccessor::access_tensor()</a>, <a class="el" href="graph__validate__utils_8h_source.xhtml#l00363">VerifyAccessor&lt; D &gt;::access_tensor()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00220">arm_compute::auto_init_if_empty()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00795">arm_compute::utils::compare_tensor()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00260">arm_compute::misc::shape_calculator::compute_interleaved_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00180">arm_compute::misc::shape_calculator::compute_lhs_reshaped_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00858">arm_compute::misc::shape_calculator::compute_mm_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00374">arm_compute::misc::shape_calculator::compute_reductionB_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00224">arm_compute::misc::shape_calculator::compute_rhs_reshaped_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l01357">arm_compute::misc::shape_calculator::compute_stack_shape()</a>, <a class="el" href="_access_window_auto_padding_8cpp_source.xhtml#l00046">AccessWindowAutoPadding::compute_valid_region()</a>, <a class="el" href="_access_window_static_8cpp_source.xhtml#l00045">AccessWindowStatic::compute_valid_region()</a>, <a class="el" href="_g_c_softmax_layer_kernel_8cpp_source.xhtml#l00042">GCLogits1DMaxKernel::configure()</a>, <a class="el" href="_c_l_warp_perspective_kernel_8cpp_source.xhtml#l00061">CLWarpPerspectiveKernel::configure()</a>, <a class="el" href="_c_l_element_wise_unary_layer_kernel_8cpp_source.xhtml#l00052">CLElementWiseUnaryLayerKernel::configure()</a>, <a class="el" href="_g_c_transpose_kernel_8cpp_source.xhtml#l00040">GCTransposeKernel::configure()</a>, <a class="el" href="_c_l_warp_affine_kernel_8cpp_source.xhtml#l00061">CLWarpAffineKernel::configure()</a>, <a class="el" href="_g_c_scale_kernel_8cpp_source.xhtml#l00047">GCScaleKernel::configure()</a>, <a class="el" href="_n_e_reshape_layer_kernel_8cpp_source.xhtml#l00074">NEReshapeLayerKernel::configure()</a>, <a class="el" href="_n_e_g_e_m_m_lowp_assembly_matrix_multiply_core_8cpp_source.xhtml#l00046">NEGEMMLowpAssemblyMatrixMultiplyCore::configure()</a>, <a class="el" href="_c_l_dequantization_layer_kernel_8cpp_source.xhtml#l00077">CLDequantizationLayerKernel::configure()</a>, <a class="el" href="_c_l_gaussian_pyramid_kernel_8cpp_source.xhtml#l00044">CLGaussianPyramidHorKernel::configure()</a>, <a class="el" href="_c_p_p_detection_output_layer_8cpp_source.xhtml#l00391">CPPDetectionOutputLayer::configure()</a>, <a class="el" href="_c_l_reshape_layer_kernel_8cpp_source.xhtml#l00065">CLReshapeLayerKernel::configure()</a>, <a class="el" href="_c_l_deconvolution_layer_upsample_kernel_8cpp_source.xhtml#l00070">CLDeconvolutionLayerUpsampleKernel::configure()</a>, <a class="el" href="_c_l_remap_kernel_8cpp_source.xhtml#l00050">CLRemapKernel::configure()</a>, <a class="el" href="_c_l_reorg_layer_kernel_8cpp_source.xhtml#l00072">CLReorgLayerKernel::configure()</a>, <a class="el" href="_g_c_depthwise_convolution_layer3x3_kernel_8cpp_source.xhtml#l00051">GCDepthwiseConvolutionLayer3x3Kernel::configure()</a>, <a class="el" href="_g_c_pixel_wise_multiplication_kernel_8cpp_source.xhtml#l00047">GCPixelWiseMultiplicationKernel::configure()</a>, <a class="el" href="_c_l_permute_kernel_8cpp_source.xhtml#l00078">CLPermuteKernel::configure()</a>, <a class="el" href="_c_p_p_flip_weights_kernel_8cpp_source.xhtml#l00069">CPPFlipWeightsKernel::configure()</a>, <a class="el" href="_c_l_h_o_g_descriptor_kernel_8cpp_source.xhtml#l00048">CLHOGOrientationBinningKernel::configure()</a>, <a class="el" href="_g_c_fill_border_kernel_8cpp_source.xhtml#l00060">GCFillBorderKernel::configure()</a>, <a class="el" href="_c_l_pooling_layer_kernel_8cpp_source.xhtml#l00177">CLPoolingLayerKernel::configure()</a>, <a class="el" href="_n_e_gaussian_pyramid_kernel_8cpp_source.xhtml#l00053">NEGaussianPyramidHorKernel::configure()</a>, <a class="el" href="_c_l_width_concatenate2_tensors_kernel_8cpp_source.xhtml#l00097">CLWidthConcatenate2TensorsKernel::configure()</a>, <a class="el" href="_c_l_fill_border_kernel_8cpp_source.xhtml#l00062">CLFillBorderKernel::configure()</a>, <a class="el" href="_n_e_warp_kernel_8cpp_source.xhtml#l00067">INEWarpKernel::configure()</a>, <a class="el" href="_c_l_channel_extract_kernel_8cpp_source.xhtml#l00050">CLChannelExtractKernel::configure()</a>, <a class="el" href="_c_l_height_concatenate_layer_kernel_8cpp_source.xhtml#l00092">CLHeightConcatenateLayerKernel::configure()</a>, <a class="el" href="_n_e_channel_shuffle_layer_kernel_8cpp_source.xhtml#l00139">NEChannelShuffleLayerKernel::configure()</a>, <a class="el" href="_c_l_width_concatenate_layer_kernel_8cpp_source.xhtml#l00093">CLWidthConcatenateLayerKernel::configure()</a>, <a class="el" href="_c_p_p_top_k_v_kernel_8cpp_source.xhtml#l00101">CPPTopKVKernel::configure()</a>, <a class="el" href="_g_c_arithmetic_addition_kernel_8cpp_source.xhtml#l00091">GCArithmeticAdditionKernel::configure()</a>, <a class="el" href="_g_c_g_e_m_m_transpose1x_w_kernel_8cpp_source.xhtml#l00041">GCGEMMTranspose1xWKernel::configure()</a>, <a class="el" href="_n_e_bitwise_and_kernel_8cpp_source.xhtml#l00061">NEBitwiseAndKernel::configure()</a>, <a class="el" href="_n_e_bitwise_or_kernel_8cpp_source.xhtml#l00057">NEBitwiseOrKernel::configure()</a>, <a class="el" href="_n_e_bitwise_xor_kernel_8cpp_source.xhtml#l00057">NEBitwiseXorKernel::configure()</a>, <a class="el" href="_c_l_width_concatenate4_tensors_kernel_8cpp_source.xhtml#l00115">CLWidthConcatenate4TensorsKernel::configure()</a>, <a class="el" href="_n_e_reorg_layer_kernel_8cpp_source.xhtml#l00071">NEReorgLayerKernel::configure()</a>, <a class="el" href="_c_p_p_upsample_kernel_8cpp_source.xhtml#l00049">CPPUpsampleKernel::configure()</a>, <a class="el" href="_c_l_channel_combine_kernel_8cpp_source.xhtml#l00054">CLChannelCombineKernel::configure()</a>, <a class="el" href="_c_l_select_kernel_8cpp_source.xhtml#l00105">CLSelectKernel::configure()</a>, <a class="el" href="_c_p_p_permute_kernel_8cpp_source.xhtml#l00108">CPPPermuteKernel::configure()</a>, <a class="el" href="_g_c_activation_layer_kernel_8cpp_source.xhtml#l00047">GCActivationLayerKernel::configure()</a>, <a class="el" href="_g_c_depth_concatenate_layer_kernel_8cpp_source.xhtml#l00044">GCDepthConcatenateLayerKernel::configure()</a>, <a class="el" href="_g_c_direct_convolution_layer_kernel_8cpp_source.xhtml#l00053">GCDirectConvolutionLayerKernel&lt; kernel_size &gt;::configure()</a>, <a class="el" href="_c_l_depth_concatenate_layer_kernel_8cpp_source.xhtml#l00085">CLDepthConcatenateLayerKernel::configure()</a>, <a class="el" href="_c_l_batch_concatenate_layer_kernel_8cpp_source.xhtml#l00087">CLBatchConcatenateLayerKernel::configure()</a>, <a class="el" href="_n_e_space_to_batch_layer_8cpp_source.xhtml#l00040">NESpaceToBatchLayer::configure()</a>, <a class="el" href="_n_e_absolute_difference_kernel_8cpp_source.xhtml#l00133">NEAbsoluteDifferenceKernel::configure()</a>, <a class="el" href="_n_e_quantization_layer_kernel_8cpp_source.xhtml#l00100">NEQuantizationLayerKernel::configure()</a>, <a class="el" href="_c_l_space_to_batch_layer_8cpp_source.xhtml#l00040">CLSpaceToBatchLayer::configure()</a>, <a class="el" href="_n_e_channel_extract_kernel_8cpp_source.xhtml#l00052">NEChannelExtractKernel::configure()</a>, <a class="el" href="_n_e_fill_inner_border_kernel_8cpp_source.xhtml#l00049">NEFillInnerBorderKernel::configure()</a>, <a class="el" href="_n_e_height_concatenate_layer_kernel_8cpp_source.xhtml#l00079">NEHeightConcatenateLayerKernel::configure()</a>, <a class="el" href="_n_e_width_concatenate_layer_kernel_8cpp_source.xhtml#l00079">NEWidthConcatenateLayerKernel::configure()</a>, <a class="el" href="_g_c_dropout_layer_kernel_8cpp_source.xhtml#l00048">GCDropoutLayerKernel::configure()</a>, <a class="el" href="_g_c_softmax_layer_kernel_8cpp_source.xhtml#l00107">GCLogits1DShiftExpSumKernel::configure()</a>, <a class="el" href="_n_e_canny_edge_kernel_8cpp_source.xhtml#l00877">NEGradientKernel::configure()</a>, <a class="el" href="_n_e_permute_kernel_8cpp_source.xhtml#l00237">NEPermuteKernel::configure()</a>, <a class="el" href="_c_l_color_convert_kernel_8cpp_source.xhtml#l00139">CLColorConvertKernel::configure()</a>, <a class="el" href="_n_e_channel_combine_kernel_8cpp_source.xhtml#l00052">NEChannelCombineKernel::configure()</a>, <a class="el" href="_n_e_depth_concatenate_layer_kernel_8cpp_source.xhtml#l00132">NEDepthConcatenateLayerKernel::configure()</a>, <a class="el" href="_c_l_strided_slice_kernel_8cpp_source.xhtml#l00100">CLStridedSliceKernel::configure()</a>, <a class="el" href="_n_e_pad_layer_kernel_8cpp_source.xhtml#l00184">NEPadLayerKernel::configure()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_native_kernel_8cpp_source.xhtml#l00194">CLDepthwiseConvolutionLayerNativeKernel::configure()</a>, <a class="el" href="_n_e_gather_kernel_8cpp_source.xhtml#l00133">NEGatherKernel::configure()</a>, <a class="el" href="_n_e_select_kernel_8cpp_source.xhtml#l00167">NESelectKernel::configure()</a>, <a class="el" href="_c_l_winograd_output_transform_kernel_8cpp_source.xhtml#l00138">CLWinogradOutputTransformKernel::configure()</a>, <a class="el" href="_c_l_softmax_layer_8cpp_source.xhtml#l00075">CLSoftmaxLayerGeneric&lt; IS_LOG &gt;::configure()</a>, <a class="el" href="_n_e_g_e_m_m_lowp_matrix_multiply_kernel_8cpp_source.xhtml#l00802">NEGEMMLowpMatrixMultiplyKernel::configure()</a>, <a class="el" href="_n_e_g_e_m_m_matrix_multiply_kernel_8cpp_source.xhtml#l00962">NEGEMMMatrixMultiplyKernel::configure()</a>, <a class="el" href="_n_e_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00046">NEROIPoolingLayerKernel::configure()</a>, <a class="el" href="_g_c_g_e_m_m_interleave4x4_kernel_8cpp_source.xhtml#l00044">GCGEMMInterleave4x4Kernel::configure()</a>, <a class="el" href="_n_e_crop_resize_8cpp_source.xhtml#l00054">NECropResize::configure()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_offset_contribution_kernel_8cpp_source.xhtml#l00145">CLGEMMLowpOffsetContributionKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_offset_contribution_output_stage_kernel_8cpp_source.xhtml#l00196">CLGEMMLowpOffsetContributionOutputStageKernel::configure()</a>, <a class="el" href="_c_l_crop_resize_8cpp_source.xhtml#l00190">CLCropResize::configure()</a>, <a class="el" href="_n_e_g_e_m_m_lowp_offset_contribution_kernel_8cpp_source.xhtml#l00343">NEGEMMLowpOffsetContributionKernel::configure()</a>, <a class="el" href="_n_e_color_convert_kernel_8cpp_source.xhtml#l00253">NEColorConvertKernel::configure()</a>, <a class="el" href="_n_e_softmax_layer_8cpp_source.xhtml#l00074">NESoftmaxLayerGeneric&lt; IS_LOG &gt;::configure()</a>, <a class="el" href="_n_e_laplacian_reconstruct_8cpp_source.xhtml#l00045">NELaplacianReconstruct::configure()</a>, <a class="el" href="_g_c_weights_reshape_kernel_8cpp_source.xhtml#l00046">GCWeightsReshapeKernel::configure()</a>, <a class="el" href="_c_l_laplacian_reconstruct_8cpp_source.xhtml#l00045">CLLaplacianReconstruct::configure()</a>, <a class="el" href="_g_c_col2_im_kernel_8cpp_source.xhtml#l00044">GCCol2ImKernel::configure()</a>, <a class="el" href="_g_c_im2_col_kernel_8cpp_source.xhtml#l00067">GCIm2ColKernel::configure()</a>, <a class="el" href="_c_l_weights_reshape_kernel_8cpp_source.xhtml#l00079">CLWeightsReshapeKernel::configure()</a>, <a class="el" href="_g_c_fully_connected_layer_8cpp_source.xhtml#l00082">GCFullyConnectedLayer::configure()</a>, <a class="el" href="_n_e_g_e_m_m_8cpp_source.xhtml#l00051">NEGEMM::configure()</a>, <a class="el" href="_n_e_f_f_t_convolution_layer_8cpp_source.xhtml#l00097">NEFFTConvolutionLayer::configure()</a>, <a class="el" href="_c_l_gaussian_pyramid_kernel_8cpp_source.xhtml#l00150">CLGaussianPyramidVertKernel::configure()</a>, <a class="el" href="_n_e_l_s_t_m_layer_8cpp_source.xhtml#l00056">NELSTMLayer::configure()</a>, <a class="el" href="_n_e_generate_proposals_layer_8cpp_source.xhtml#l00065">NEGenerateProposalsLayer::configure()</a>, <a class="el" href="_n_e_g_e_m_m_lowp_matrix_multiply_core_8cpp_source.xhtml#l00051">NEGEMMLowpMatrixMultiplyCore::configure()</a>, <a class="el" href="_n_e_g_e_m_m_lowp_offset_contribution_output_stage_kernel_8cpp_source.xhtml#l00950">NEGEMMLowpOffsetContributionOutputStageKernel::configure()</a>, <a class="el" href="_c_l_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00058">CLLSTMLayerQuantized::configure()</a>, <a class="el" href="_c_l_h_o_g_descriptor_kernel_8cpp_source.xhtml#l00139">CLHOGBlockNormalizationKernel::configure()</a>, <a class="el" href="_n_e_gaussian_pyramid_kernel_8cpp_source.xhtml#l00161">NEGaussianPyramidVertKernel::configure()</a>, <a class="el" href="_n_e_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00057">NELSTMLayerQuantized::configure()</a>, <a class="el" href="_c_l_l_s_t_m_layer_8cpp_source.xhtml#l00056">CLLSTMLayer::configure()</a>, <a class="el" href="_c_l_softmax_layer_kernel_8cpp_source.xhtml#l00220">CLLogits1DMaxShiftExpSumKernel::configure()</a>, <a class="el" href="_n_e_fully_connected_layer_8cpp_source.xhtml#l00141">NEFullyConnectedLayer::configure()</a>, <a class="el" href="_c_l_fully_connected_layer_8cpp_source.xhtml#l00213">CLFullyConnectedLayer::configure()</a>, <a class="el" href="_n_e_g_e_m_m_convolution_layer_8cpp_source.xhtml#l00240">NEGEMMConvolutionLayer::configure()</a>, <a class="el" href="_n_e_crop_kernel_8cpp_source.xhtml#l00296">NECropKernel::configure_output_shape()</a>, <a class="el" href="_i_tensor_8cpp_source.xhtml#l00035">ITensor::copy_from()</a>, <a class="el" href="_c_l_functions_factory_8cpp_source.xhtml#l00120">arm_compute::graph::backends::detail::create_detection_output_layer&lt; CPPDetectionOutputLayer, CLTargetInfo &gt;()</a>, <a class="el" href="_c_l_functions_factory_8cpp_source.xhtml#l00164">arm_compute::graph::backends::detail::create_detection_post_process_layer&lt; CPPDetectionPostProcessLayer, CLTargetInfo &gt;()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l01274">arm_compute::misc::shape_calculator::extract_shape()</a>, <a class="el" href="_accessor_8h_source.xhtml#l00121">Accessor::num_elements()</a>, <a class="el" href="graph__validate__utils_8h_source.xhtml#l00420">VerifyAccessor&lt; D &gt;::output_shape()</a>, <a class="el" href="_c_l_min_max_layer_kernel_8cpp_source.xhtml#l00119">CLMinMaxLayerKernel::reset()</a>, <a class="el" href="_n_e_min_max_layer_kernel_8cpp_source.xhtml#l00192">NEMinMaxLayerKernel::reset()</a>, <a class="el" href="_c_l_elementwise_operation_kernel_8cpp_source.xhtml#l00267">CLElementwiseOperationKernel::run()</a>, <a class="el" href="_g_c_depthwise_convolution_layer3x3_kernel_8cpp_source.xhtml#l00205">GCDepthwiseConvolutionLayer3x3Kernel::run()</a>, <a class="el" href="_c_l_flatten_layer_kernel_8cpp_source.xhtml#l00129">CLFlattenLayerKernel::run()</a>, <a class="el" href="_c_l_locally_connected_matrix_multiply_kernel_8cpp_source.xhtml#l00129">CLLocallyConnectedMatrixMultiplyKernel::run()</a>, <a class="el" href="_n_e_tile_kernel_8cpp_source.xhtml#l00090">NETileKernel::run()</a>, <a class="el" href="_c_l_pooling_layer_kernel_8cpp_source.xhtml#l00341">CLPoolingLayerKernel::run()</a>, <a class="el" href="_c_l_comparison_kernel_8cpp_source.xhtml#l00168">CLComparisonKernel::run()</a>, <a class="el" href="_n_e_reorg_layer_kernel_8cpp_source.xhtml#l00101">NEReorgLayerKernel::run()</a>, <a class="el" href="_c_l_pixel_wise_multiplication_kernel_8cpp_source.xhtml#l00259">CLPixelWiseMultiplicationKernel::run()</a>, <a class="el" href="_c_l_crop_kernel_8cpp_source.xhtml#l00115">CLCropKernel::run()</a>, <a class="el" href="_c_l_stack_layer_kernel_8cpp_source.xhtml#l00118">CLStackLayerKernel::run()</a>, <a class="el" href="_n_e_min_max_layer_kernel_8cpp_source.xhtml#l00117">NEMinMaxLayerKernel::run()</a>, <a class="el" href="_g_c_weights_reshape_kernel_8cpp_source.xhtml#l00101">GCWeightsReshapeKernel::run()</a>, <a class="el" href="_n_e_stack_layer_kernel_8cpp_source.xhtml#l00116">NEStackLayerKernel::run()</a>, <a class="el" href="_n_e_pixel_wise_multiplication_kernel_8cpp_source.xhtml#l00719">NEPixelWiseMultiplicationKernel::run()</a>, <a class="el" href="_c_l_col2_im_kernel_8cpp_source.xhtml#l00142">CLCol2ImKernel::run()</a>, <a class="el" href="_c_l_winograd_filter_transform_kernel_8cpp_source.xhtml#l00141">CLWinogradFilterTransformKernel::run()</a>, <a class="el" href="_c_l_direct_convolution_layer_kernel_8cpp_source.xhtml#l00591">CLDirectConvolutionLayerKernel::run()</a>, <a class="el" href="_n_e_g_e_m_m_lowp_offset_contribution_kernel_8cpp_source.xhtml#l00390">NEGEMMLowpOffsetContributionKernel::run()</a>, <a class="el" href="_c_l_winograd_output_transform_kernel_8cpp_source.xhtml#l00222">CLWinogradOutputTransformKernel::run()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_native_kernel_8cpp_source.xhtml#l00321">CLDepthwiseConvolutionLayerNativeKernel::run()</a>, <a class="el" href="_c_l_weights_reshape_kernel_8cpp_source.xhtml#l00119">CLWeightsReshapeKernel::run()</a>, <a class="el" href="_c_l_im2_col_kernel_8cpp_source.xhtml#l00355">CLIm2ColKernel::run()</a>, <a class="el" href="_c_l_pixel_wise_multiplication_kernel_8cpp_source.xhtml#l00394">CLComplexPixelWiseMultiplicationKernel::run()</a>, <a class="el" href="_n_e_pixel_wise_multiplication_kernel_8cpp_source.xhtml#l00899">NEComplexPixelWiseMultiplicationKernel::run()</a>, <a class="el" href="_sub_tensor_info_8cpp_source.xhtml#l00095">SubTensorInfo::set_tensor_shape()</a>, <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00210">SubTensorInfo::set_valid_region()</a>, <a class="el" href="_accessor_8h_source.xhtml#l00086">Accessor::shape()</a>, <a class="el" href="tests_2validation_2_n_e_o_n_2_u_n_i_t_2_runtime_context_8cpp_source.xhtml#l00099">arm_compute::test::validation::TEST_CASE()</a>, <a class="el" href="_access_window_static_8cpp_source.xhtml#l00160">AccessWindowStatic::update_padding_if_needed()</a>, <a class="el" href="_access_window_static_8cpp_source.xhtml#l00084">AccessWindowStatic::update_window_if_needed()</a>, <a class="el" href="_i_access_window_8cpp_source.xhtml#l00097">AccessWindowRectangle::update_window_if_needed()</a>, <a class="el" href="_c_l_r_n_n_layer_8cpp_source.xhtml#l00044">CLRNNLayer::validate()</a>, <a class="el" href="_n_e_pad_layer_8cpp_source.xhtml#l00203">NEPadLayer::validate()</a>, <a class="el" href="_c_l_pad_layer_8cpp_source.xhtml#l00052">CLPadLayer::validate()</a>, <a class="el" href="_n_e_r_n_n_layer_8cpp_source.xhtml#l00042">NERNNLayer::validate()</a>, <a class="el" href="_n_e_select_kernel_8cpp_source.xhtml#l00230">NESelectKernel::validate()</a>, <a class="el" href="_n_e_depthwise_convolution_assembly_dispatch_8cpp_source.xhtml#l00399">NEDepthwiseConvolutionAssemblyDispatch::validate()</a>, <a class="el" href="_n_e_crop_kernel_8cpp_source.xhtml#l00275">NECropKernel::validate()</a>, <a class="el" href="_n_e_crop_resize_8cpp_source.xhtml#l00037">NECropResize::validate()</a>, <a class="el" href="_c_l_crop_resize_8cpp_source.xhtml#l00171">CLCropResize::validate()</a>, <a class="el" href="_n_e_f_f_t_convolution_layer_8cpp_source.xhtml#l00252">NEFFTConvolutionLayer::validate()</a>, <a class="el" href="_n_e_g_e_m_m_lowp_matrix_multiply_core_8cpp_source.xhtml#l00281">NEGEMMLowpMatrixMultiplyCore::validate()</a>, <a class="el" href="_c_l_f_f_t_convolution_layer_8cpp_source.xhtml#l00253">CLFFTConvolutionLayer::validate()</a>, <a class="el" href="_n_e_deconvolution_layer_8cpp_source.xhtml#l00057">NEDeconvolutionLayer::validate()</a>, <a class="el" href="_c_l_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00256">CLLSTMLayerQuantized::validate()</a>, <a class="el" href="_n_e_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00235">NELSTMLayerQuantized::validate()</a>, <a class="el" href="_n_e_fully_connected_layer_8cpp_source.xhtml#l00275">NEFullyConnectedLayer::validate()</a>, <a class="el" href="_c_l_fully_connected_layer_8cpp_source.xhtml#l00309">CLFullyConnectedLayer::validate()</a>, <a class="el" href="_n_e_g_e_m_m_convolution_layer_8cpp_source.xhtml#l00390">NEGEMMConvolutionLayer::validate()</a>, <a class="el" href="_c_l_g_e_m_m_convolution_layer_8cpp_source.xhtml#l00396">CLGEMMConvolutionLayer::validate()</a>, and <a class="el" href="_n_e_reduce_mean_8cpp_source.xhtml#l00043">arm_compute::validate_config()</a>.</p>

</div>
</div>
<a id="a18064e0011c3869d884653e9e7c47b66"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a18064e0011c3869d884653e9e7c47b66">&#9670;&nbsp;</a></span>total_size()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual size_t total_size </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the total size of the tensor in bytes. </p>
<dl class="section return"><dt>Returns</dt><dd>Total size of the tensor in bytes. </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#af398466b602a02b42d8df19fb66a6c60">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#af398466b602a02b42d8df19fb66a6c60">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00073">CLROIPoolingLayerKernel::configure()</a>, <a class="el" href="_n_e_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00046">NEROIPoolingLayerKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_convolution_layer_8cpp_source.xhtml#l00181">CLGEMMConvolutionLayer::configure()</a>, <a class="el" href="_sub_tensor_info_8cpp_source.xhtml#l00116">SubTensorInfo::extend_padding()</a>, <a class="el" href="_c_p_p_upsample_kernel_8cpp_source.xhtml#l00068">CPPUpsampleKernel::run()</a>, <a class="el" href="_n_e_canny_edge_8cpp_source.xhtml#l00162">NECannyEdge::run()</a>, <a class="el" href="_c_l_winograd_output_transform_kernel_8cpp_source.xhtml#l00222">CLWinogradOutputTransformKernel::run()</a>, <a class="el" href="_n_e_l_s_t_m_layer_8cpp_source.xhtml#l00611">NELSTMLayer::run()</a>, <a class="el" href="_accessor_8h_source.xhtml#l00096">Accessor::size()</a>, <a class="el" href="tests_2validation_2_n_e_o_n_2_u_n_i_t_2_tensor_allocator_8cpp_source.xhtml#l00145">arm_compute::test::validation::TEST_CASE()</a>, <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00169">SubTensorInfo::total_size()</a>, <a class="el" href="_access_window_static_8cpp_source.xhtml#l00084">AccessWindowStatic::update_window_if_needed()</a>, <a class="el" href="_i_access_window_8cpp_source.xhtml#l00097">AccessWindowRectangle::update_window_if_needed()</a>, <a class="el" href="_c_l_f_f_t2_d_8cpp_source.xhtml#l00057">CLFFT2D::validate()</a>, <a class="el" href="_n_e_f_f_t2_d_8cpp_source.xhtml#l00057">NEFFT2D::validate()</a>, <a class="el" href="_c_l_f_f_t1_d_8cpp_source.xhtml#l00100">CLFFT1D::validate()</a>, <a class="el" href="_n_e_f_f_t1_d_8cpp_source.xhtml#l00101">NEFFT1D::validate()</a>, <a class="el" href="_c_l_convert_fully_connected_weights_kernel_8cpp_source.xhtml#l00079">CLConvertFullyConnectedWeightsKernel::validate()</a>, <a class="el" href="_n_e_upsample_layer_kernel_8cpp_source.xhtml#l00098">NEUpsampleLayerKernel::validate()</a>, <a class="el" href="_c_l_arg_min_max_layer_8cpp_source.xhtml#l00041">CLArgMinMaxLayer::validate()</a>, <a class="el" href="_c_l_crop_kernel_8cpp_source.xhtml#l00091">CLCropKernel::validate()</a>, <a class="el" href="_c_l_g_e_m_m_convolution_layer_8cpp_source.xhtml#l00066">CLConvolutionLayerReshapeWeights::validate()</a>, <a class="el" href="_c_l_reduction_operation_8cpp_source.xhtml#l00047">CLReductionOperation::validate()</a>, <a class="el" href="_n_e_convert_fully_connected_weights_kernel_8cpp_source.xhtml#l00066">NEConvertFullyConnectedWeightsKernel::validate()</a>, <a class="el" href="_n_e_pad_layer_8cpp_source.xhtml#l00203">NEPadLayer::validate()</a>, <a class="el" href="_n_e_select_kernel_8cpp_source.xhtml#l00230">NESelectKernel::validate()</a>, <a class="el" href="_n_e_g_e_m_m_convolution_layer_8cpp_source.xhtml#l00060">NEConvolutionLayerReshapeWeights::validate()</a>, <a class="el" href="_n_e_depthwise_convolution_assembly_dispatch_8cpp_source.xhtml#l00399">NEDepthwiseConvolutionAssemblyDispatch::validate()</a>, <a class="el" href="_n_e_crop_kernel_8cpp_source.xhtml#l00275">NECropKernel::validate()</a>, <a class="el" href="_n_e_crop_resize_8cpp_source.xhtml#l00037">NECropResize::validate()</a>, <a class="el" href="_c_l_crop_resize_8cpp_source.xhtml#l00171">CLCropResize::validate()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_matrix_multiply_core_8cpp_source.xhtml#l00274">CLGEMMLowpMatrixMultiplyCore::validate()</a>, <a class="el" href="_n_e_g_e_m_m_8cpp_source.xhtml#l00172">NEGEMM::validate()</a>, <a class="el" href="_n_e_f_f_t_convolution_layer_8cpp_source.xhtml#l00252">NEFFTConvolutionLayer::validate()</a>, <a class="el" href="_c_l_f_f_t_convolution_layer_8cpp_source.xhtml#l00253">CLFFTConvolutionLayer::validate()</a>, <a class="el" href="_n_e_generate_proposals_layer_8cpp_source.xhtml#l00204">NEGenerateProposalsLayer::validate()</a>, <a class="el" href="_c_l_generate_proposals_layer_8cpp_source.xhtml#l00193">CLGenerateProposalsLayer::validate()</a>, <a class="el" href="_c_l_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00256">CLLSTMLayerQuantized::validate()</a>, <a class="el" href="_n_e_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00235">NELSTMLayerQuantized::validate()</a>, <a class="el" href="_c_l_g_e_m_m_convolution_layer_8cpp_source.xhtml#l00396">CLGEMMConvolutionLayer::validate()</a>, and <a class="el" href="_n_e_reduce_mean_8cpp_source.xhtml#l00043">arm_compute::validate_config()</a>.</p>

</div>
</div>
<a id="a74dfd07380a290c34fe7c8e065029b95"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a74dfd07380a290c34fe7c8e065029b95">&#9670;&nbsp;</a></span>valid_region()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> valid_region </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Valid region of the tensor. </p>
<p>All elements in the valid region have defined values, i.e. are not undefined.</p>
<dl class="section return"><dt>Returns</dt><dd>The valid region. </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a3c20d908342087484d883574d55dd482">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a3c20d908342087484d883574d55dd482">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="_g_c_transpose_kernel_8cpp_source.xhtml#l00040">GCTransposeKernel::configure()</a>, <a class="el" href="_c_l_canny_edge_kernel_8cpp_source.xhtml#l00040">CLGradientKernel::configure()</a>, <a class="el" href="_c_l_bitwise_or_kernel_8cpp_source.xhtml#l00041">CLBitwiseOrKernel::configure()</a>, <a class="el" href="_c_l_bitwise_xor_kernel_8cpp_source.xhtml#l00041">CLBitwiseXorKernel::configure()</a>, <a class="el" href="_c_l_bitwise_and_kernel_8cpp_source.xhtml#l00040">CLBitwiseAndKernel::configure()</a>, <a class="el" href="_g_c_pixel_wise_multiplication_kernel_8cpp_source.xhtml#l00047">GCPixelWiseMultiplicationKernel::configure()</a>, <a class="el" href="_g_c_fill_border_kernel_8cpp_source.xhtml#l00060">GCFillBorderKernel::configure()</a>, <a class="el" href="_c_l_fill_border_kernel_8cpp_source.xhtml#l00062">CLFillBorderKernel::configure()</a>, <a class="el" href="_g_c_absolute_difference_kernel_8cpp_source.xhtml#l00047">GCAbsoluteDifferenceKernel::configure()</a>, <a class="el" href="_c_l_absolute_difference_kernel_8cpp_source.xhtml#l00047">CLAbsoluteDifferenceKernel::configure()</a>, <a class="el" href="_c_l_magnitude_phase_kernel_8cpp_source.xhtml#l00046">CLMagnitudePhaseKernel::configure()</a>, <a class="el" href="_c_l_channel_combine_kernel_8cpp_source.xhtml#l00054">CLChannelCombineKernel::configure()</a>, <a class="el" href="_c_l_integral_image_kernel_8cpp_source.xhtml#l00085">CLIntegralImageVertKernel::configure()</a>, <a class="el" href="_n_e_magnitude_phase_kernel_8cpp_source.xhtml#l00250">NEMagnitudePhaseKernel&lt; mag_type, phase_type &gt;::configure()</a>, <a class="el" href="_n_e_canny_edge_kernel_8cpp_source.xhtml#l00877">NEGradientKernel::configure()</a>, <a class="el" href="_c_l_channel_extract_kernel_8cpp_source.xhtml#l00107">CLChannelExtractKernel::configure()</a>, <a class="el" href="_c_l_harris_corners_kernel_8cpp_source.xhtml#l00054">CLHarrisScoreKernel::configure()</a>, <a class="el" href="_n_e_select_kernel_8cpp_source.xhtml#l00167">NESelectKernel::configure()</a>, <a class="el" href="_n_e_fuse_batch_normalization_kernel_8cpp_source.xhtml#l00422">NEFuseBatchNormalizationKernel::configure()</a>, <a class="el" href="_g_c_col2_im_kernel_8cpp_source.xhtml#l00044">GCCol2ImKernel::configure()</a>, <a class="el" href="_c_l_canny_edge_kernel_8cpp_source.xhtml#l00120">CLEdgeNonMaxSuppressionKernel::configure()</a>, <a class="el" href="_c_l_fast_corners_kernel_8cpp_source.xhtml#l00133">CLCopyToArrayKernel::configure()</a>, <a class="el" href="_c_l_canny_edge_kernel_8cpp_source.xhtml#l00194">CLEdgeTraceKernel::configure()</a>, <a class="el" href="_c_l_l_k_tracker_kernel_8cpp_source.xhtml#l00123">CLLKTrackerStage0Kernel::configure()</a>, <a class="el" href="_c_l_l_k_tracker_kernel_8cpp_source.xhtml#l00213">CLLKTrackerStage1Kernel::configure()</a>, <a class="el" href="_n_e_o_n_2_g_e_m_m_lowp_8cpp_source.xhtml#l00587">arm_compute::test::validation::DATA_TEST_CASE()</a>, <a class="el" href="_n_e_memset_kernel_8cpp_source.xhtml#l00051">NEMemsetKernel::run()</a>, and <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00210">SubTensorInfo::set_valid_region()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>arm_compute/core/<a class="el" href="_i_tensor_info_8h_source.xhtml">ITensorInfo.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a></li>
    <li class="footer">Generated on Thu Mar 5 2020 16:07:14 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
