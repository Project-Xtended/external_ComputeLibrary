<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: support/ToolchainSupport.h File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('_toolchain_support_8h.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#namespaces">Namespaces</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">ToolchainSupport.h File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;algorithm&gt;</code><br />
<code>#include &lt;cassert&gt;</code><br />
<code>#include &lt;cmath&gt;</code><br />
<code>#include &lt;cstddef&gt;</code><br />
<code>#include &lt;limits&gt;</code><br />
<code>#include &lt;memory&gt;</code><br />
<code>#include &lt;numeric&gt;</code><br />
<code>#include &lt;sstream&gt;</code><br />
<code>#include &lt;string&gt;</code><br />
<code>#include &lt;type_traits&gt;</code><br />
<code>#include &quot;<a class="el" href="_half_8h_source.xhtml">support/Half.h</a>&quot;</code><br />
</div>
<p><a href="_toolchain_support_8h_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1support_1_1cpp14_1_1___unique__if.xhtml">_Unique_if&lt; T &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">make_unique is missing in CPP11.  <a href="structarm__compute_1_1support_1_1cpp14_1_1___unique__if.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1support_1_1cpp14_1_1___unique__if_3_01_t[]_4.xhtml">_Unique_if&lt; T[]&gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Template for array.  <a href="structarm__compute_1_1support_1_1cpp14_1_1___unique__if_3_01_t[]_4.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1support_1_1cpp14_1_1___unique__if_3_01_t[_n]_4.xhtml">_Unique_if&lt; T[N]&gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Template for array with known bounds (to throw an error).  <a href="structarm__compute_1_1support_1_1cpp14_1_1___unique__if_3_01_t[_n]_4.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="namespaces"></a>
Namespaces</h2></td></tr>
<tr class="memitem:namespacearm__compute"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></td></tr>
<tr class="memdesc:namespacearm__compute"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copyright (c) 2017-2020 ARM Limited. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1support"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support.xhtml">arm_compute::support</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1support_1_1cpp11"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml">arm_compute::support::cpp11</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1support_1_1cpp14"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp14.xhtml">arm_compute::support::cpp14</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:aebc1ea57c14482b68dac0c0dab766126"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aebc1ea57c14482b68dac0c0dab766126">NumericBase</a> { <a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aebc1ea57c14482b68dac0c0dab766126a329acff975f3cc434528bec43bd5b6aa">BASE_10</a>, 
<a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aebc1ea57c14482b68dac0c0dab766126a027219c7702304969c898aeffed504af">BASE_16</a>
 }</td></tr>
<tr class="separator:aebc1ea57c14482b68dac0c0dab766126"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:abdba606a789b8d664774f17d18f45cfe"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#abdba606a789b8d664774f17d18f45cfe">stoi</a> (const std::string &amp;str, std::size_t *pos=0, NumericBase base=NumericBase::BASE_10)</td></tr>
<tr class="memdesc:abdba606a789b8d664774f17d18f45cfe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert string values to integer.  <a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#abdba606a789b8d664774f17d18f45cfe">More...</a><br /></td></tr>
<tr class="separator:abdba606a789b8d664774f17d18f45cfe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae7b85c41ac94d98f07b1cef18b33d2d1"><td class="memItemLeft" align="right" valign="top">unsigned long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ae7b85c41ac94d98f07b1cef18b33d2d1">stoul</a> (const std::string &amp;str, std::size_t *pos=0, NumericBase base=NumericBase::BASE_10)</td></tr>
<tr class="memdesc:ae7b85c41ac94d98f07b1cef18b33d2d1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert string values to unsigned long.  <a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ae7b85c41ac94d98f07b1cef18b33d2d1">More...</a><br /></td></tr>
<tr class="separator:ae7b85c41ac94d98f07b1cef18b33d2d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc5dddee1cbe93a4eaf0a9f74ee96bb7"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:acc5dddee1cbe93a4eaf0a9f74ee96bb7"><td class="memTemplItemLeft" align="right" valign="top">std::string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">to_string</a> (T &amp;&amp;value)</td></tr>
<tr class="memdesc:acc5dddee1cbe93a4eaf0a9f74ee96bb7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert integer and float values to string.  <a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">More...</a><br /></td></tr>
<tr class="separator:acc5dddee1cbe93a4eaf0a9f74ee96bb7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac26a2b6f5d8e0c60e67684eea7e71e7c"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ac26a2b6f5d8e0c60e67684eea7e71e7c"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ac26a2b6f5d8e0c60e67684eea7e71e7c">nearbyint</a> (T value)</td></tr>
<tr class="memdesc:ac26a2b6f5d8e0c60e67684eea7e71e7c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Rounds the floating-point argument arg to an integer value in floating-point format, using the current rounding mode.  <a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ac26a2b6f5d8e0c60e67684eea7e71e7c">More...</a><br /></td></tr>
<tr class="separator:ac26a2b6f5d8e0c60e67684eea7e71e7c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1df10cffb9f2dea9f3b007ce411e105f"><td class="memTemplParams" colspan="2">template&lt;typename... Ts&gt; </td></tr>
<tr class="memitem:a1df10cffb9f2dea9f3b007ce411e105f"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a1df10cffb9f2dea9f3b007ce411e105f">stof</a> (Ts &amp;&amp;... args)</td></tr>
<tr class="memdesc:a1df10cffb9f2dea9f3b007ce411e105f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert string values to float.  <a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a1df10cffb9f2dea9f3b007ce411e105f">More...</a><br /></td></tr>
<tr class="separator:a1df10cffb9f2dea9f3b007ce411e105f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab71c35ca207b916a9f8b0336ab88484e"><td class="memTemplParams" colspan="2">template&lt;typename T , typename  = typename std::enable_if&lt;std::is_floating_point&lt;T&gt;::value&gt;::type&gt; </td></tr>
<tr class="memitem:ab71c35ca207b916a9f8b0336ab88484e"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ab71c35ca207b916a9f8b0336ab88484e">round</a> (T value)</td></tr>
<tr class="memdesc:ab71c35ca207b916a9f8b0336ab88484e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Round floating-point value with half value rounding away from zero.  <a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ab71c35ca207b916a9f8b0336ab88484e">More...</a><br /></td></tr>
<tr class="separator:ab71c35ca207b916a9f8b0336ab88484e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae04d407202e3d50ce6a4c79ac00a5d59"><td class="memTemplParams" colspan="2">template&lt;typename T , typename  = typename std::enable_if&lt;std::is_floating_point&lt;T&gt;::value&gt;::type&gt; </td></tr>
<tr class="memitem:ae04d407202e3d50ce6a4c79ac00a5d59"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ae04d407202e3d50ce6a4c79ac00a5d59">trunc</a> (T value)</td></tr>
<tr class="memdesc:ae04d407202e3d50ce6a4c79ac00a5d59"><td class="mdescLeft">&#160;</td><td class="mdescRight">Truncate floating-point value.  <a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ae04d407202e3d50ce6a4c79ac00a5d59">More...</a><br /></td></tr>
<tr class="separator:ae04d407202e3d50ce6a4c79ac00a5d59"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a28096f8372c0ad762864c790917375e2"><td class="memTemplParams" colspan="2">template&lt;typename T , typename  = typename std::enable_if&lt;std::is_floating_point&lt;T&gt;::value&gt;::type&gt; </td></tr>
<tr class="memitem:a28096f8372c0ad762864c790917375e2"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a28096f8372c0ad762864c790917375e2">copysign</a> (T x, T y)</td></tr>
<tr class="memdesc:a28096f8372c0ad762864c790917375e2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Composes a floating point value with the magnitude of <code>x</code> and the sign of <code>y</code>.  <a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a28096f8372c0ad762864c790917375e2">More...</a><br /></td></tr>
<tr class="separator:a28096f8372c0ad762864c790917375e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af399bedeaeb8dc177d3a301a12c3a5d0"><td class="memTemplParams" colspan="2">template&lt;typename T , typename  = typename std::enable_if &lt; std::is_floating_point&lt;T&gt;::value                                                             &gt;::type&gt; </td></tr>
<tr class="memitem:af399bedeaeb8dc177d3a301a12c3a5d0"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#af399bedeaeb8dc177d3a301a12c3a5d0">fma</a> (T x, T y, T z)</td></tr>
<tr class="memdesc:af399bedeaeb8dc177d3a301a12c3a5d0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Computes (x*y) + z as if to infinite precision and rounded only once to fit the result type.  <a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#af399bedeaeb8dc177d3a301a12c3a5d0">More...</a><br /></td></tr>
<tr class="separator:af399bedeaeb8dc177d3a301a12c3a5d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9429515817425d10f4b662eaa069cc5c"><td class="memTemplParams" colspan="2">template&lt;typename... Ts&gt; </td></tr>
<tr class="memitem:a9429515817425d10f4b662eaa069cc5c"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a9429515817425d10f4b662eaa069cc5c">snprintf</a> (char *s, std::size_t n, const char *fmt, Ts &amp;&amp;... args)</td></tr>
<tr class="memdesc:a9429515817425d10f4b662eaa069cc5c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Loads the data from the given location, converts them to character string equivalents and writes the result to a character string buffer.  <a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a9429515817425d10f4b662eaa069cc5c">More...</a><br /></td></tr>
<tr class="separator:a9429515817425d10f4b662eaa069cc5c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae1437f4a38c4ada64e7a2586aa35bf8"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aae1437f4a38c4ada64e7a2586aa35bf8">to_string</a> (bool value)</td></tr>
<tr class="separator:aae1437f4a38c4ada64e7a2586aa35bf8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e51e04e3f86c823883757ef22d4f39a"><td class="memItemLeft" align="right" valign="top">void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a9e51e04e3f86c823883757ef22d4f39a">align</a> (std::size_t alignment, std::size_t size, void *&amp;ptr, std::size_t &amp;space)</td></tr>
<tr class="separator:a9e51e04e3f86c823883757ef22d4f39a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a73e352c61baaf9c1178da2d30105b04e"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a73e352c61baaf9c1178da2d30105b04e"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">lowest</a> ()</td></tr>
<tr class="separator:a73e352c61baaf9c1178da2d30105b04e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a079a0ecb5fc05e0a107785f2573bc854"><td class="memTemplParams" colspan="2">template&lt;typename T , typename  = typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt; </td></tr>
<tr class="memitem:a079a0ecb5fc05e0a107785f2573bc854"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a079a0ecb5fc05e0a107785f2573bc854">isfinite</a> (T value)</td></tr>
<tr class="separator:a079a0ecb5fc05e0a107785f2573bc854"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a81dc1c64fed4ed4e9e4f4bf32cb8ba46"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a81dc1c64fed4ed4e9e4f4bf32cb8ba46">isfinite</a> (half_float::half value)</td></tr>
<tr class="separator:a81dc1c64fed4ed4e9e4f4bf32cb8ba46"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d95a84d1a4610af6a128ad96c907e8b"><td class="memTemplParams" colspan="2">template&lt;class T , class... Args&gt; </td></tr>
<tr class="memitem:a1d95a84d1a4610af6a128ad96c907e8b"><td class="memTemplItemLeft" align="right" valign="top">_Unique_if&lt; T &gt;::_Single_object&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp14.xhtml#a1d95a84d1a4610af6a128ad96c907e8b">make_unique</a> (Args &amp;&amp;... args)</td></tr>
<tr class="memdesc:a1d95a84d1a4610af6a128ad96c907e8b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct a single object and return a unique pointer to it.  <a href="namespacearm__compute_1_1support_1_1cpp14.xhtml#a1d95a84d1a4610af6a128ad96c907e8b">More...</a><br /></td></tr>
<tr class="separator:a1d95a84d1a4610af6a128ad96c907e8b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9497f049c3bfd9fcebdec84397fff2b9"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:a9497f049c3bfd9fcebdec84397fff2b9"><td class="memTemplItemLeft" align="right" valign="top">_Unique_if&lt; T &gt;::_Unknown_bound&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp14.xhtml#a9497f049c3bfd9fcebdec84397fff2b9">make_unique</a> (size_t n)</td></tr>
<tr class="memdesc:a9497f049c3bfd9fcebdec84397fff2b9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct an array of objects and return a unique pointer to it.  <a href="namespacearm__compute_1_1support_1_1cpp14.xhtml#a9497f049c3bfd9fcebdec84397fff2b9">More...</a><br /></td></tr>
<tr class="separator:a9497f049c3bfd9fcebdec84397fff2b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ccfba86a91625f5bc79156f2a598a6d"><td class="memTemplParams" colspan="2">template&lt;class T , class... Args&gt; </td></tr>
<tr class="memitem:a2ccfba86a91625f5bc79156f2a598a6d"><td class="memTemplItemLeft" align="right" valign="top">_Unique_if&lt; T &gt;::_Known_bound&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp14.xhtml#a2ccfba86a91625f5bc79156f2a598a6d">make_unique</a> (Args &amp;&amp;...)=delete</td></tr>
<tr class="memdesc:a2ccfba86a91625f5bc79156f2a598a6d"><td class="mdescLeft">&#160;</td><td class="mdescRight">It is invalid to attempt to make_unique an array with known bounds.  <a href="namespacearm__compute_1_1support_1_1cpp14.xhtml#a2ccfba86a91625f5bc79156f2a598a6d">More...</a><br /></td></tr>
<tr class="separator:a2ccfba86a91625f5bc79156f2a598a6d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_5815af820a9cc9481f1d0990a0d60286.xhtml">support</a></li><li class="navelem"><a class="el" href="_toolchain_support_8h.xhtml">ToolchainSupport.h</a></li>
    <li class="footer">Generated on Fri Feb 21 2020 11:10:22 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
