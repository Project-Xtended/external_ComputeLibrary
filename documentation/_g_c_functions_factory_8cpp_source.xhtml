<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/graph/backends/GLES/GCFunctionsFactory.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('_g_c_functions_factory_8cpp_source.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">GCFunctionsFactory.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_g_c_functions_factory_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2018-2020 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_g_c_function_factory_8h.xhtml">arm_compute/graph/backends/GLES/GCFunctionFactory.h</a>&quot;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_cast_8h.xhtml">arm_compute/core/utils/misc/Cast.h</a>&quot;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="graph_2_graph_8h.xhtml">arm_compute/graph/Graph.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_graph_context_8h.xhtml">arm_compute/graph/GraphContext.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_function_helpers_8h.xhtml">arm_compute/graph/backends/FunctionHelpers.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_g_c_functions_8h.xhtml">arm_compute/runtime/GLES_COMPUTE/GCFunctions.h</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml">arm_compute::utils::cast</a>;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="keyword">namespace </span>graph</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword">namespace </span>backends</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{<span class="comment"></span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment">/** Target specific information structure used to pass information to the layer templates */</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="keyword">struct </span>GCTargetInfo</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keyword">using</span> TensorType = <a class="code" href="classarm__compute_1_1_i_g_c_tensor.xhtml">arm_compute::IGCTensor</a>;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keyword">static</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">Target</a> TargetType;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;};</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<a class="code" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">Target</a> GCTargetInfo::TargetType = Target::GC;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment">/** Collection of GC convolution functions */</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="keyword">struct </span>GCConvolutionLayerFunctions</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;{</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keyword">using</span> GenericConvolutionLayer = GCConvolutionLayer;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keyword">using</span> GEMMConvolutionLayer    = GCConvolutionLayer;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keyword">using</span> DirectConvolutionLayer  = GCDirectConvolutionLayer;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;};</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment">/** Collection of GC depthwise convolution functions */</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="keyword">struct </span>GCDepthwiseConvolutionLayerFunctions</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;{</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keyword">using</span> DepthwiseConvolutionLayer3x3 = GCDepthwiseConvolutionLayer3x3;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;};</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment">/** Collection of GC element-wise functions */</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="keyword">struct </span>GCEltwiseFunctions</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;{</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keyword">using</span> Addition       = GCArithmeticAddition;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keyword">using</span> Multiplication = GCPixelWiseMultiplication;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;};</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="keyword">namespace </span>detail</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;{</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00073"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a5c80e4e51582453953cc94742f25438c">   73</a></span>&#160;std::unique_ptr&lt;IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a5c80e4e51582453953cc94742f25438c">create_convolution_layer&lt;GCConvolutionLayerFunctions, GCTargetInfo&gt;</a>(<a class="code" href="classarm__compute_1_1graph_1_1_convolution_layer_node.xhtml">ConvolutionLayerNode</a> &amp;node, <a class="code" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;ctx)</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;{</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    validate_node&lt;GCTargetInfo&gt;(node, 3 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <a class="code" href="classarm__compute_1_1_i_g_c_tensor.xhtml">GCTargetInfo::TensorType</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>   = get_backing_tensor&lt;GCTargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <a class="code" href="classarm__compute_1_1_i_g_c_tensor.xhtml">GCTargetInfo::TensorType</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a> = get_backing_tensor&lt;GCTargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(1));</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <a class="code" href="classarm__compute_1_1_i_g_c_tensor.xhtml">GCTargetInfo::TensorType</a> *biases  = get_backing_tensor&lt;GCTargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(2));</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <a class="code" href="classarm__compute_1_1_i_g_c_tensor.xhtml">GCTargetInfo::TensorType</a> *output  = get_backing_tensor&lt;GCTargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute.xhtml#a14f46283f316e7f0fad301d5c1507e9f">is_data_type_quantized_asymmetric</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()))</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    {</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        biases-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a9ebcdce876b4cd07736afa47d50154de">set_data_type</a>(<a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>);</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    }</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a>       <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>      = node.<a class="code" href="classarm__compute_1_1graph_1_1_convolution_layer_node.xhtml#ad087f1f9aa1e444236911adf6c57df04">convolution_info</a>();</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517d">ConvolutionMethod</a>   conv_algorithm = node.<a class="code" href="classarm__compute_1_1graph_1_1_convolution_layer_node.xhtml#a16b2c6652c4cee5b566daf018f768a42">convolution_method</a>();</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> fused_act      = node.<a class="code" href="classarm__compute_1_1graph_1_1_convolution_layer_node.xhtml#a32186582e0a6e02ed7ac3944f60b9c62">fused_activation</a>();</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="comment">// Create and configure function (we assume that functions have been validated before creation)</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    std::shared_ptr&lt;IMemoryManager&gt; mm = <a class="code" href="namespacearm__compute_1_1graph_1_1backends.xhtml#a8919c520c1cb9086dd1116de509bd481">get_memory_manager</a>(ctx, GCTargetInfo::TargetType);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    std::unique_ptr&lt;IFunction&gt;      func;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    std::string                     func_name;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keywordflow">if</span>(conv_algorithm == ConvolutionMethod::Direct)</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    {</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        std::tie(func, func_name) = create_named_function&lt;GCConvolutionLayerFunctions::DirectConvolutionLayer&gt;(</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                                        std::string(<span class="stringliteral">&quot;DirectConvolutionLayer&quot;</span>),</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                                        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, biases, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, fused_act);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    }</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    {</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        std::tie(func, func_name) = create_named_memory_managed_function&lt;GCConvolutionLayerFunctions::GenericConvolutionLayer&gt;(</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                                        std::string(<span class="stringliteral">&quot;ConvolutionLayer&quot;</span>), mm,</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                                        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, biases, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, <a class="code" href="classarm__compute_1_1_weights_info.xhtml">WeightsInfo</a>(), <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>(1<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a2ea3d1fc01a3a442900249ca182ffa5e">U</a>, 1<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a2ea3d1fc01a3a442900249ca182ffa5e">U</a>), fused_act);</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    }</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="comment">// Log info</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                               &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>()</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; func_name</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input QuantInfo: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;quantization_info()</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Weights QuantInfo: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#ac74736e3863207232a23b7181c1d0f44">quantization_info</a>()</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Weights shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">tensor_shape</a>()</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                               &lt;&lt; (fused_act.<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#af5a8385102f8f8dd6c5957eac08b04c2">enabled</a>() ? <span class="stringliteral">&quot; &quot;</span> + <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(fused_act.<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a9e0fb1d1462557f28966ae19988532c2">activation</a>()) : <span class="stringliteral">&quot;&quot;</span>)</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keywordflow">return</span> func;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;}</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00126"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a08ab53b1d15e738a39f29d778a91a512">  126</a></span>&#160;std::unique_ptr&lt;IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a08ab53b1d15e738a39f29d778a91a512">create_depthwise_convolution_layer&lt;GCDepthwiseConvolutionLayerFunctions, GCTargetInfo&gt;</a>(<a class="code" href="classarm__compute_1_1graph_1_1_depthwise_convolution_layer_node.xhtml">DepthwiseConvolutionLayerNode</a> &amp;node)</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;{</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    validate_node&lt;GCTargetInfo&gt;(node, 3 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <a class="code" href="classarm__compute_1_1_i_g_c_tensor.xhtml">GCTargetInfo::TensorType</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>   = get_backing_tensor&lt;GCTargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <a class="code" href="classarm__compute_1_1_i_g_c_tensor.xhtml">GCTargetInfo::TensorType</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a> = get_backing_tensor&lt;GCTargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(1));</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <a class="code" href="classarm__compute_1_1_i_g_c_tensor.xhtml">GCTargetInfo::TensorType</a> *biases  = get_backing_tensor&lt;GCTargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(2));</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <a class="code" href="classarm__compute_1_1_i_g_c_tensor.xhtml">GCTargetInfo::TensorType</a> *output  = get_backing_tensor&lt;GCTargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute.xhtml#a14f46283f316e7f0fad301d5c1507e9f">is_data_type_quantized_asymmetric</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()))</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    {</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        biases-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a9ebcdce876b4cd07736afa47d50154de">set_data_type</a>(<a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>);</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    }</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a>              <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>        = node.<a class="code" href="classarm__compute_1_1graph_1_1_depthwise_convolution_layer_node.xhtml#ad087f1f9aa1e444236911adf6c57df04">convolution_info</a>();</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a75ce9b1baad4303a53124d6f0795821f">DepthwiseConvolutionMethod</a> dwc_algorithm    = node.<a class="code" href="classarm__compute_1_1graph_1_1_depthwise_convolution_layer_node.xhtml#a8cefd89d2de49691e778c8d5a08ac92f">depthwise_convolution_method</a>();</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>        fused_act        = node.<a class="code" href="classarm__compute_1_1graph_1_1_depthwise_convolution_layer_node.xhtml#a32186582e0a6e02ed7ac3944f60b9c62">fused_activation</a>();</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>                        depth_multiplier = node.<a class="code" href="classarm__compute_1_1graph_1_1_depthwise_convolution_layer_node.xhtml#a88e38a50a2e964b19521fe8f2e9a144f">depth_multiplier</a>();</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="comment">// Create and configure function (we assume that functions have been validated before creation)</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    std::unique_ptr&lt;IFunction&gt; func;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    std::string                func_name;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keywordflow">if</span>(dwc_algorithm == DepthwiseConvolutionMethod::Optimized3x3)</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    {</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        std::tie(func, func_name) = create_named_function&lt;GCDepthwiseConvolutionLayerFunctions::DepthwiseConvolutionLayer3x3&gt;(</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                                        std::string(<span class="stringliteral">&quot;DepthwiseConvolutionLayer3x3&quot;</span>),</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                                        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>, biases, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, depth_multiplier, fused_act);</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    }</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    {</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Generic DepthwiseConvolutionLayer is not supported in GLES backend&quot;</span>);</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    }</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="comment">// Log info</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                               &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>()</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; func_name</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target &quot;</span> &lt;&lt; GCTargetInfo::TargetType</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input QuantInfo: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;quantization_info()</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Weights QuantInfo: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#ac74736e3863207232a23b7181c1d0f44">quantization_info</a>()</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Weights shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">tensor_shape</a>()</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Depth multiplier: &quot;</span> &lt;&lt; depth_multiplier</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                               &lt;&lt; (fused_act.<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#af5a8385102f8f8dd6c5957eac08b04c2">enabled</a>() ? <span class="stringliteral">&quot; &quot;</span> + <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(fused_act.<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a9e0fb1d1462557f28966ae19988532c2">activation</a>()) : <span class="stringliteral">&quot;&quot;</span>)</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="keywordflow">return</span> func;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;}</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00178"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a863bcac2c361e883edf7f9abb4abd9a7">  178</a></span>&#160;std::unique_ptr&lt;IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a863bcac2c361e883edf7f9abb4abd9a7">create_eltwise_layer&lt;GCEltwiseFunctions, GCTargetInfo&gt;</a>(<a class="code" href="classarm__compute_1_1graph_1_1_eltwise_layer_node.xhtml">EltwiseLayerNode</a> &amp;node)</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;{</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        <span class="stringliteral">&quot;Creating GC EltwiseLayer node with ID : &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5ea90a25ef8059df2d2e51b82991ebf3">id</a>() &lt;&lt; <span class="stringliteral">&quot; and Name: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>() &lt;&lt; std::endl);</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#abe0cb3e4411a1c289e3e40e3f9d79fec">num_inputs</a>() != 2);</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a75d7c8bdf0059bb235880f8ef8d190bc">num_outputs</a>() != 1);</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <a class="code" href="classarm__compute_1_1_i_g_c_tensor.xhtml">GCTargetInfo::TensorType</a> *input1         = get_backing_tensor&lt;GCTargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <a class="code" href="classarm__compute_1_1_i_g_c_tensor.xhtml">GCTargetInfo::TensorType</a> *input2         = get_backing_tensor&lt;GCTargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(1));</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <a class="code" href="classarm__compute_1_1_i_g_c_tensor.xhtml">GCTargetInfo::TensorType</a> *output         = get_backing_tensor&lt;GCTargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4">EltwiseOperation</a>    eltwise_op     = node.<a class="code" href="classarm__compute_1_1graph_1_1_eltwise_layer_node.xhtml#acda6687f669fe87581d7bff8fcd82ebc">eltwise_operation</a>();</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a>       <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5d58c32bff63e4c34b3234f884a4da58">convert_policy</a> = node.<a class="code" href="classarm__compute_1_1graph_1_1_eltwise_layer_node.xhtml#aa7b3781f10fc0ac73a9a4f748e22d3d4">convert_policy</a>();</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(input1 == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(input2 == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    std::unique_ptr&lt;IFunction&gt; func = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    std::string                func_name;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="keywordflow">if</span>(eltwise_op == EltwiseOperation::Add)</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    {</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        std::tie(func, func_name) = create_named_function&lt;GCEltwiseFunctions::Addition&gt;(</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                                        std::string(<span class="stringliteral">&quot;GCArithmeticAddition&quot;</span>),</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                                        input1, input2, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5d58c32bff63e4c34b3234f884a4da58">convert_policy</a>);</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    }</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(eltwise_op == EltwiseOperation::Sub)</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    {</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Arithmetic subtraction is not supported in GLES backend&quot;</span>);</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    }</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(eltwise_op == EltwiseOperation::Mul)</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    {</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        std::tie(func, func_name) = create_named_function&lt;GCEltwiseFunctions::Multiplication&gt;(</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                                        std::string(<span class="stringliteral">&quot;PixelWiseMultiplication&quot;</span>),</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                                        input1, input2, output, 1.f);</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    }</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    {</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported element-wise operation!&quot;</span>);</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    }</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <span class="comment">// Log info</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                               &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>()</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_eltwise_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">type</a>()</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; GCTargetInfo::TargetType</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Operation: &quot;</span> &lt;&lt; func_name</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; input1-&gt;info()-&gt;data_type()</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Shape: &quot;</span> &lt;&lt; input1-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="keywordflow">return</span> func;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;}</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;} <span class="comment">//namespace detail</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div><div class="line"><a name="l00232"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1backends_1_1_g_c_function_factory.xhtml#aa7ac6bf065e64181f3c92fee4b3b5c79">  232</a></span>&#160;std::unique_ptr&lt;IFunction&gt; GCFunctionFactory::create(<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> *node, <a class="code" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;ctx)</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;{</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <span class="keywordflow">if</span>(node == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    {</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    }</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16">NodeType</a> <a class="code" href="namespace_gemm_tuner.xhtml#a7aead736a07eaf25623ad7bfa1f0ee2d">type</a> = node-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a6b2d83e561886647467f86c20ce39bec">type</a>();</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="keywordflow">switch</span>(<a class="code" href="namespace_gemm_tuner.xhtml#a7aead736a07eaf25623ad7bfa1f0ee2d">type</a>)</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    {</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        <span class="keywordflow">case</span> NodeType::ActivationLayer:</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;            <span class="keywordflow">return</span> detail::create_activation_layer&lt;GCActivationLayer, GCTargetInfo&gt;(*polymorphic_downcast&lt;ActivationLayerNode *&gt;(node));</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        <span class="keywordflow">case</span> NodeType::BatchNormalizationLayer:</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;            <span class="keywordflow">return</span> detail::create_batch_normalization_layer&lt;GCBatchNormalizationLayer, GCTargetInfo&gt;(*polymorphic_downcast&lt;BatchNormalizationLayerNode *&gt;(node));</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        <span class="keywordflow">case</span> NodeType::ConvolutionLayer:</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a5c80e4e51582453953cc94742f25438c">detail::create_convolution_layer&lt;GCConvolutionLayerFunctions, GCTargetInfo&gt;</a>(*polymorphic_downcast&lt;ConvolutionLayerNode *&gt;(node), ctx);</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        <span class="keywordflow">case</span> NodeType::ConcatenateLayer:</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;            <span class="keywordflow">return</span> detail::create_concatenate_layer&lt;GCConcatenateLayer, GCTargetInfo&gt;(*polymorphic_downcast&lt;ConcatenateLayerNode *&gt;(node));</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        <span class="keywordflow">case</span> NodeType::DepthwiseConvolutionLayer:</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a08ab53b1d15e738a39f29d778a91a512">detail::create_depthwise_convolution_layer&lt;GCDepthwiseConvolutionLayerFunctions, GCTargetInfo&gt;</a>(*polymorphic_downcast&lt;DepthwiseConvolutionLayerNode *&gt;(node));</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        <span class="keywordflow">case</span> NodeType::EltwiseLayer:</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a863bcac2c361e883edf7f9abb4abd9a7">detail::create_eltwise_layer&lt;GCEltwiseFunctions, GCTargetInfo&gt;</a>(*polymorphic_downcast&lt;EltwiseLayerNode *&gt;(node));</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        <span class="keywordflow">case</span> NodeType::FullyConnectedLayer:</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;            <span class="keywordflow">return</span> detail::create_fully_connected_layer&lt;GCFullyConnectedLayer, GCTargetInfo&gt;(*polymorphic_downcast&lt;FullyConnectedLayerNode *&gt;(node), ctx);</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        <span class="keywordflow">case</span> NodeType::NormalizationLayer:</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;            <span class="keywordflow">return</span> detail::create_normalization_layer&lt;GCNormalizationLayer, GCTargetInfo&gt;(*polymorphic_downcast&lt;NormalizationLayerNode *&gt;(node), ctx);</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        <span class="keywordflow">case</span> NodeType::NormalizePlanarYUVLayer:</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;            <span class="keywordflow">return</span> detail::create_normalize_planar_yuv_layer&lt;GCNormalizePlanarYUVLayer, GCTargetInfo&gt;(*polymorphic_downcast&lt;NormalizePlanarYUVLayerNode *&gt;(node));</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        <span class="keywordflow">case</span> NodeType::PoolingLayer:</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;            <span class="keywordflow">return</span> detail::create_pooling_layer&lt;GCPoolingLayer, GCTargetInfo&gt;(*polymorphic_downcast&lt;PoolingLayerNode *&gt;(node));</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        <span class="keywordflow">case</span> NodeType::PrintLayer:</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;            <span class="keywordflow">return</span> detail::create_print_layer&lt;GCTargetInfo&gt;(*polymorphic_downcast&lt;PrintLayerNode *&gt;(node));</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        <span class="keywordflow">case</span> NodeType::ResizeLayer:</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;            <span class="keywordflow">return</span> detail::create_resize_layer&lt;GCScale, GCTargetInfo&gt;(*polymorphic_downcast&lt;ResizeLayerNode *&gt;(node));</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        <span class="keywordflow">case</span> NodeType::SoftmaxLayer:</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;            <span class="keywordflow">return</span> detail::create_softmax_layer&lt;GCSoftmaxLayer, GCTargetInfo&gt;(*polymorphic_downcast&lt;SoftmaxLayerNode *&gt;(node), ctx);</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    }</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;}</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;} <span class="comment">// namespace backends</span></div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;} <span class="comment">// namespace graph</span></div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a1d89c28bd42ba9a52da008bb69367171"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">arm_compute::graph::INode::name</a></div><div class="ttdeci">std::string name() const</div><div class="ttdoc">Returns node's name.</div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00107">INode.cpp:107</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab75d8ff29ba9b398d5740b3efd156e71"><div class="ttname"><a href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">arm_compute::to_string</a></div><div class="ttdeci">std::string to_string(const arm_compute::GradientDimension &amp;type)</div><div class="ttdoc">Formatted output of the GradientDimension type.</div><div class="ttdef"><b>Definition:</b> <a href="tests_2_type_printer_8h_source.xhtml#l00064">TypePrinter.h:64</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_eltwise_layer_node_xhtml_a65d13dc93e2df5e8ab725263cf9f4ac5"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_eltwise_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">arm_compute::graph::EltwiseLayerNode::type</a></div><div class="ttdeci">NodeType type() const override</div><div class="ttdoc">Returns node's type.</div><div class="ttdef"><b>Definition:</b> <a href="_eltwise_layer_node_8cpp_source.xhtml#l00077">EltwiseLayerNode.cpp:77</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_eltwise_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_eltwise_layer_node.xhtml">arm_compute::graph::EltwiseLayerNode</a></div><div class="ttdoc">Eltwise Layer node.</div><div class="ttdef"><b>Definition:</b> <a href="_eltwise_layer_node_8h_source.xhtml#l00034">EltwiseLayerNode.h:34</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_aa12973876c037bddff8e9ece94aca0e4"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4">arm_compute::graph::EltwiseOperation</a></div><div class="ttdeci">EltwiseOperation</div><div class="ttdoc">Supported Element-wise operations.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00100">Types.h:100</a></div></div>
<div class="ttc" id="_function_helpers_8h_xhtml"><div class="ttname"><a href="_function_helpers_8h.xhtml">FunctionHelpers.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tensor_xhtml_ad45f0c01a0713dfb6bd7232c7f396fc4"><div class="ttname"><a href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">arm_compute::CLTensor::info</a></div><div class="ttdeci">TensorInfo * info() const override</div><div class="ttdoc">Interface to be implemented by the child class to return the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tensor_8cpp_source.xhtml#l00041">CLTensor.cpp:41</a></div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml_af5a8385102f8f8dd6c5957eac08b04c2"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml#af5a8385102f8f8dd6c5957eac08b04c2">arm_compute::ActivationLayerInfo::enabled</a></div><div class="ttdeci">bool enabled() const</div><div class="ttdoc">Check if initialised.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01664">Types.h:1664</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_depthwise_convolution_layer_node_xhtml_a32186582e0a6e02ed7ac3944f60b9c62"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_depthwise_convolution_layer_node.xhtml#a32186582e0a6e02ed7ac3944f60b9c62">arm_compute::graph::DepthwiseConvolutionLayerNode::fused_activation</a></div><div class="ttdeci">ActivationLayerInfo fused_activation() const</div><div class="ttdoc">Returns fused activation.</div><div class="ttdef"><b>Definition:</b> <a href="_depthwise_convolution_layer_node_8cpp_source.xhtml#l00063">DepthwiseConvolutionLayerNode.cpp:63</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00352">Error.h:352</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_depthwise_convolution_layer_node_xhtml_a88e38a50a2e964b19521fe8f2e9a144f"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_depthwise_convolution_layer_node.xhtml#a88e38a50a2e964b19521fe8f2e9a144f">arm_compute::graph::DepthwiseConvolutionLayerNode::depth_multiplier</a></div><div class="ttdeci">int depth_multiplier() const</div><div class="ttdoc">Depth multiplier accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_depthwise_convolution_layer_node_8cpp_source.xhtml#l00043">DepthwiseConvolutionLayerNode.cpp:43</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1utils_1_1cast_xhtml"><div class="ttname"><a href="namespacearm__compute_1_1utils_1_1cast.xhtml">arm_compute::utils::cast</a></div><div class="ttdef"><b>Definition:</b> <a href="_cast_8h_source.xhtml#l00033">Cast.h:33</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a00525ff582f16038a1d3819aa44a23a3"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">arm_compute::test::validation::conv_info</a></div><div class="ttdeci">conv_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_winograd_8cpp_source.xhtml#l00597">Winograd.cpp:597</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a75d7c8bdf0059bb235880f8ef8d190bc"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a75d7c8bdf0059bb235880f8ef8d190bc">arm_compute::graph::INode::num_outputs</a></div><div class="ttdeci">size_t num_outputs() const</div><div class="ttdoc">Returns number of outputs of the node.</div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00183">INode.cpp:183</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml_ac74736e3863207232a23b7181c1d0f44"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#ac74736e3863207232a23b7181c1d0f44">arm_compute::TensorInfo::quantization_info</a></div><div class="ttdeci">QuantizationInfo quantization_info() const override</div><div class="ttdoc">Get the quantization settings (scale and offset) of the tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00311">TensorInfo.h:311</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_convolution_layer_node_xhtml_a32186582e0a6e02ed7ac3944f60b9c62"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_convolution_layer_node.xhtml#a32186582e0a6e02ed7ac3944f60b9c62">arm_compute::graph::ConvolutionLayerNode::fused_activation</a></div><div class="ttdeci">ActivationLayerInfo fused_activation() const</div><div class="ttdoc">Returns fused activation.</div><div class="ttdef"><b>Definition:</b> <a href="_convolution_layer_node_8cpp_source.xhtml#l00076">ConvolutionLayerNode.cpp:76</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a5d58c32bff63e4c34b3234f884a4da58"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a5d58c32bff63e4c34b3234f884a4da58">arm_compute::test::validation::convert_policy</a></div><div class="ttdeci">convert_policy</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_pixel_wise_multiplication_8cpp_source.xhtml#l00375">PixelWiseMultiplication.cpp:375</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_g_c_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_g_c_tensor.xhtml">arm_compute::IGCTensor</a></div><div class="ttdoc">Interface for GLES Compute tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_i_g_c_tensor_8h_source.xhtml#l00035">IGCTensor.h:35</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_depthwise_convolution_layer_node_xhtml_a8cefd89d2de49691e778c8d5a08ac92f"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_depthwise_convolution_layer_node.xhtml#a8cefd89d2de49691e778c8d5a08ac92f">arm_compute::graph::DepthwiseConvolutionLayerNode::depthwise_convolution_method</a></div><div class="ttdeci">DepthwiseConvolutionMethod depthwise_convolution_method() const</div><div class="ttdoc">Depthwise convolution layer method accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_depthwise_convolution_layer_node_8cpp_source.xhtml#l00053">DepthwiseConvolutionLayerNode.cpp:53</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_eltwise_layer_node_xhtml_acda6687f669fe87581d7bff8fcd82ebc"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_eltwise_layer_node.xhtml#acda6687f669fe87581d7bff8fcd82ebc">arm_compute::graph::EltwiseLayerNode::eltwise_operation</a></div><div class="ttdeci">EltwiseOperation eltwise_operation() const</div><div class="ttdoc">Eltwise operation accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_eltwise_layer_node_8cpp_source.xhtml#l00040">EltwiseLayerNode.cpp:40</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_context_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph_context.xhtml">arm_compute::graph::GraphContext</a></div><div class="ttdoc">Graph context.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_context_8h_source.xhtml#l00057">GraphContext.h:57</a></div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml">arm_compute::ActivationLayerInfo</a></div><div class="ttdoc">Activation Layer Information class.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01615">Types.h:1615</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_ab2d8baa35618bdad1d2814942355311e"><div class="ttname"><a href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_INFO(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00054">Logger.h:54</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2020 ARM Limited.</div><div class="ttdef"><b>Definition:</b> <a href="00__introduction_8dox_source.xhtml#l00024">00_introduction.dox:24</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
<div class="ttc" id="_cast_8h_xhtml"><div class="ttname"><a href="_cast_8h.xhtml">Cast.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_weights_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_weights_info.xhtml">arm_compute::WeightsInfo</a></div><div class="ttdoc">Convolution Layer Weights Information class.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01757">Types.h:1757</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::Format::S32</a></div><div class="ttdoc">1 channel, 1 S32 per channel</div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_convolution_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_convolution_layer_node.xhtml">arm_compute::graph::ConvolutionLayerNode</a></div><div class="ttdoc">Convolution Layer node.</div><div class="ttdef"><b>Definition:</b> <a href="_convolution_layer_node_8h_source.xhtml#l00034">ConvolutionLayerNode.h:34</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml">arm_compute::graph::INode</a></div><div class="ttdoc">Node interface.</div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8h_source.xhtml#l00045">INode.h:45</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a27369471d9b2ba47746e1e923f585b9f"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">arm_compute::graph::INode::output</a></div><div class="ttdeci">Tensor * output(size_t idx) const</div><div class="ttdoc">Returns the tensor of a given output of the node.</div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00158">INode.cpp:158</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a75ce9b1baad4303a53124d6f0795821f"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a75ce9b1baad4303a53124d6f0795821f">arm_compute::graph::DepthwiseConvolutionMethod</a></div><div class="ttdeci">DepthwiseConvolutionMethod</div><div class="ttdoc">Supported Depthwise Convolution layer methods.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00117">Types.h:117</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1utils_1_1cast_xhtml_a2ea3d1fc01a3a442900249ca182ffa5e"><div class="ttname"><a href="namespacearm__compute_1_1utils_1_1cast.xhtml#a2ea3d1fc01a3a442900249ca182ffa5e">arm_compute::utils::cast::U</a></div><div class="ttdeci">U</div><div class="ttdef"><b>Definition:</b> <a href="_saturate_cast_8h_source.xhtml#l00057">SaturateCast.h:57</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_depthwise_convolution_layer_node_xhtml_ad087f1f9aa1e444236911adf6c57df04"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_depthwise_convolution_layer_node.xhtml#ad087f1f9aa1e444236911adf6c57df04">arm_compute::graph::DepthwiseConvolutionLayerNode::convolution_info</a></div><div class="ttdeci">PadStrideInfo convolution_info() const</div><div class="ttdoc">Convolution metadata accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_depthwise_convolution_layer_node_8cpp_source.xhtml#l00058">DepthwiseConvolutionLayerNode.cpp:58</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a5ea90a25ef8059df2d2e51b82991ebf3"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5ea90a25ef8059df2d2e51b82991ebf3">arm_compute::graph::INode::id</a></div><div class="ttdeci">NodeID id() const</div><div class="ttdoc">Returns node's ID.</div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00102">INode.cpp:102</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml_a0e95dc1e53c361348314873b168ae237"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">arm_compute::ITensor::info</a></div><div class="ttdeci">virtual ITensorInfo * info() const =0</div><div class="ttdoc">Interface to be implemented by the child class to return the tensor's metadata.</div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16">arm_compute::graph::NodeType</a></div><div class="ttdeci">NodeType</div><div class="ttdoc">Supported nodes.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00132">Types.h:132</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_convolution_layer_node_xhtml_ad087f1f9aa1e444236911adf6c57df04"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_convolution_layer_node.xhtml#ad087f1f9aa1e444236911adf6c57df04">arm_compute::graph::ConvolutionLayerNode::convolution_info</a></div><div class="ttdeci">PadStrideInfo convolution_info() const</div><div class="ttdoc">Convolution metadata accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_convolution_layer_node_8cpp_source.xhtml#l00066">ConvolutionLayerNode.cpp:66</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pad_stride_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml">arm_compute::PadStrideInfo</a></div><div class="ttdoc">Padding and stride information class.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00686">Types.h:686</a></div></div>
<div class="ttc" id="_g_c_function_factory_8h_xhtml"><div class="ttname"><a href="_g_c_function_factory_8h.xhtml">GCFunctionFactory.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a08ab53b1d15e738a39f29d778a91a512"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a08ab53b1d15e738a39f29d778a91a512">arm_compute::graph::backends::detail::create_depthwise_convolution_layer&lt; GCDepthwiseConvolutionLayerFunctions, GCTargetInfo &gt;</a></div><div class="ttdeci">std::unique_ptr&lt; IFunction &gt; create_depthwise_convolution_layer&lt; GCDepthwiseConvolutionLayerFunctions, GCTargetInfo &gt;(DepthwiseConvolutionLayerNode &amp;node)</div><div class="ttdef"><b>Definition:</b> <a href="_g_c_functions_factory_8cpp_source.xhtml#l00126">GCFunctionsFactory.cpp:126</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a9ebcdce876b4cd07736afa47d50154de"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a9ebcdce876b4cd07736afa47d50154de">arm_compute::ITensorInfo::set_data_type</a></div><div class="ttdeci">virtual ITensorInfo &amp; set_data_type(DataType data_type)=0</div><div class="ttdoc">Set the data type to the specified value.</div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a31488d29805a596498c0234ae392d35d"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">arm_compute::graph::Target</a></div><div class="ttdeci">Target</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00091">Types.h:91</a></div></div>
<div class="ttc" id="_g_c_functions_8h_xhtml"><div class="ttname"><a href="_g_c_functions_8h.xhtml">GCFunctions.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a14f46283f316e7f0fad301d5c1507e9f"><div class="ttname"><a href="namespacearm__compute.xhtml#a14f46283f316e7f0fad301d5c1507e9f">arm_compute::is_data_type_quantized_asymmetric</a></div><div class="ttdeci">bool is_data_type_quantized_asymmetric(DataType dt)</div><div class="ttdoc">Check if a given data type is of asymmetric quantized type.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_utils_8h_source.xhtml#l01139">Utils.h:1139</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_convolution_layer_node_xhtml_a16b2c6652c4cee5b566daf018f768a42"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_convolution_layer_node.xhtml#a16b2c6652c4cee5b566daf018f768a42">arm_compute::graph::ConvolutionLayerNode::convolution_method</a></div><div class="ttdeci">ConvolutionMethod convolution_method() const</div><div class="ttdoc">Convolution layer method accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_convolution_layer_node_8cpp_source.xhtml#l00051">ConvolutionLayerNode.cpp:51</a></div></div>
<div class="ttc" id="namespace_gemm_tuner_xhtml_a7aead736a07eaf25623ad7bfa1f0ee2d"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a7aead736a07eaf25623ad7bfa1f0ee2d">GemmTuner.type</a></div><div class="ttdeci">type</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00527">GemmTuner.py:527</a></div></div>
<div class="ttc" id="classarm__compute_1_1_size2_d_xhtml"><div class="ttname"><a href="classarm__compute_1_1_size2_d.xhtml">arm_compute::Size2D</a></div><div class="ttdoc">Class for specifying the size of an image or rectangle.</div><div class="ttdef"><b>Definition:</b> <a href="_size2_d_8h_source.xhtml#l00034">Size2D.h:34</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_xhtml_a8919c520c1cb9086dd1116de509bd481"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends.xhtml#a8919c520c1cb9086dd1116de509bd481">arm_compute::graph::backends::get_memory_manager</a></div><div class="ttdeci">std::shared_ptr&lt; IMemoryManager &gt; get_memory_manager(GraphContext &amp;ctx, Target target)</div><div class="ttdoc">Returns the memory manager for a given target.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2backends_2_utils_8h_source.xhtml#l00089">Utils.h:89</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_a300d153929a99c7b571d4cda3f7987a5"><div class="ttname"><a href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_VERBOSE(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00050">Logger.h:50</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a683661ae75dcb7aef16b9c9bde31517d"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517d">arm_compute::graph::ConvolutionMethod</a></div><div class="ttdeci">ConvolutionMethod</div><div class="ttdoc">Supported Convolution layer methods.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00108">Types.h:108</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_abe0cb3e4411a1c289e3e40e3f9d79fec"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#abe0cb3e4411a1c289e3e40e3f9d79fec">arm_compute::graph::INode::num_inputs</a></div><div class="ttdeci">size_t num_inputs() const</div><div class="ttdoc">Returns number of inputs of the node.</div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00178">INode.cpp:178</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a64a08a9fec5aeee8650e7182b6d171d0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">arm_compute::test::validation::weights</a></div><div class="ttdeci">CLTensor weights</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00188">ConvolutionLayer.cpp:188</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_eltwise_layer_node_xhtml_aa7b3781f10fc0ac73a9a4f748e22d3d4"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_eltwise_layer_node.xhtml#aa7b3781f10fc0ac73a9a4f748e22d3d4">arm_compute::graph::EltwiseLayerNode::convert_policy</a></div><div class="ttdeci">ConvertPolicy convert_policy() const</div><div class="ttdoc">Convert policy accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_eltwise_layer_node_8cpp_source.xhtml#l00045">EltwiseLayerNode.cpp:45</a></div></div>
<div class="ttc" id="graph_2_graph_8h_xhtml"><div class="ttname"><a href="graph_2_graph_8h.xhtml">Graph.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a863bcac2c361e883edf7f9abb4abd9a7"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a863bcac2c361e883edf7f9abb4abd9a7">arm_compute::graph::backends::detail::create_eltwise_layer&lt; GCEltwiseFunctions, GCTargetInfo &gt;</a></div><div class="ttdeci">std::unique_ptr&lt; IFunction &gt; create_eltwise_layer&lt; GCEltwiseFunctions, GCTargetInfo &gt;(EltwiseLayerNode &amp;node)</div><div class="ttdef"><b>Definition:</b> <a href="_g_c_functions_factory_8cpp_source.xhtml#l00178">GCFunctionsFactory.cpp:178</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_depthwise_convolution_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_depthwise_convolution_layer_node.xhtml">arm_compute::graph::DepthwiseConvolutionLayerNode</a></div><div class="ttdoc">Depthwise Convolution Layer node.</div><div class="ttdef"><b>Definition:</b> <a href="_depthwise_convolution_layer_node_8h_source.xhtml#l00034">DepthwiseConvolutionLayerNode.h:34</a></div></div>
<div class="ttc" id="_graph_context_8h_xhtml"><div class="ttname"><a href="_graph_context_8h.xhtml">GraphContext.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml_a9e0fb1d1462557f28966ae19988532c2"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml#a9e0fb1d1462557f28966ae19988532c2">arm_compute::ActivationLayerInfo::activation</a></div><div class="ttdeci">ActivationFunction activation() const</div><div class="ttdoc">Get the type of activation function.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01649">Types.h:1649</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a6b2d83e561886647467f86c20ce39bec"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a6b2d83e561886647467f86c20ce39bec">arm_compute::graph::INode::type</a></div><div class="ttdeci">virtual NodeType type() const =0</div><div class="ttdoc">Returns node's type.</div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_ad7c09b0faaf3c808b0489012204852a9"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">arm_compute::graph::INode::input</a></div><div class="ttdeci">Tensor * input(size_t idx) const</div><div class="ttdoc">Returns the tensor of a given input of the node.</div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00150">INode.cpp:150</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml_a269b19ce3f357ac65f41f9951906e38e"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">arm_compute::TensorInfo::tensor_shape</a></div><div class="ttdeci">const TensorShape &amp; tensor_shape() const override</div><div class="ttdoc">Size for each dimension of the tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00261">TensorInfo.h:261</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a82b8ac759c804bc1fb4e2d21e178fb6f"><div class="ttname"><a href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">arm_compute::ConvertPolicy</a></div><div class="ttdeci">ConvertPolicy</div><div class="ttdoc">Policy to handle overflow.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00359">Types.h:359</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a5c80e4e51582453953cc94742f25438c"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a5c80e4e51582453953cc94742f25438c">arm_compute::graph::backends::detail::create_convolution_layer&lt; GCConvolutionLayerFunctions, GCTargetInfo &gt;</a></div><div class="ttdeci">std::unique_ptr&lt; IFunction &gt; create_convolution_layer&lt; GCConvolutionLayerFunctions, GCTargetInfo &gt;(ConvolutionLayerNode &amp;node, GraphContext &amp;ctx)</div><div class="ttdef"><b>Definition:</b> <a href="_g_c_functions_factory_8cpp_source.xhtml#l00073">GCFunctionsFactory.cpp:73</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_d182250f0c231765fc862e69db210731.xhtml">graph</a></li><li class="navelem"><a class="el" href="dir_39e772dac1f6529f21fb52deefa146ea.xhtml">backends</a></li><li class="navelem"><a class="el" href="dir_63622b7b1e2297c4b4fb2c5afb0cb755.xhtml">GLES</a></li><li class="navelem"><a class="el" href="_g_c_functions_factory_8cpp.xhtml">GCFunctionsFactory.cpp</a></li>
    <li class="footer">Generated on Fri Feb 21 2020 11:10:16 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
