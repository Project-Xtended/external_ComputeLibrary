<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: GemmHybrid&lt; strategy, To, Tr &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.02.1</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classarm__gemm_1_1_gemm_hybrid.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">GemmHybrid&lt; strategy, To, Tr &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="gemm__hybrid_8hpp_source.xhtml">gemm_hybrid.hpp</a>&gt;</code></p>
<div class="dynheader">
Collaboration diagram for GemmHybrid&lt; strategy, To, Tr &gt;:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classarm__gemm_1_1_gemm_hybrid__coll__graph.svg" width="198" height="127"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a67f91182afb2b1092518637116562440"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_hybrid.xhtml#a67f91182afb2b1092518637116562440">GemmHybrid</a> (<a class="el" href="classarm__gemm_1_1_gemm_hybrid.xhtml">GemmHybrid</a> &amp;)=delete</td></tr>
<tr class="separator:a67f91182afb2b1092518637116562440"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a82ec71716669b6765670e0ed242f5a47"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__gemm_1_1_gemm_hybrid.xhtml">GemmHybrid</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_hybrid.xhtml#a82ec71716669b6765670e0ed242f5a47">operator=</a> (<a class="el" href="classarm__gemm_1_1_gemm_hybrid.xhtml">GemmHybrid</a> &amp;)=delete</td></tr>
<tr class="separator:a82ec71716669b6765670e0ed242f5a47"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af1c4ba77e233f8d5451d71e9a7a9f6de"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_hybrid.xhtml#af1c4ba77e233f8d5451d71e9a7a9f6de">GemmHybrid</a> (const GemmArgs &amp;args)</td></tr>
<tr class="separator:af1c4ba77e233f8d5451d71e9a7a9f6de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9fe814165d032363ea4f9cfdd36dd5e2"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_hybrid.xhtml#a9fe814165d032363ea4f9cfdd36dd5e2">get_window_size</a> () const override</td></tr>
<tr class="separator:a9fe814165d032363ea4f9cfdd36dd5e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1bb76b8a32e09fb5ffffd66e04d7f741"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_hybrid.xhtml#a1bb76b8a32e09fb5ffffd66e04d7f741">supports_dynamic_scheduling</a> () const override</td></tr>
<tr class="separator:a1bb76b8a32e09fb5ffffd66e04d7f741"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0b21ce5febc3f7eed9c7b37c0b9a3560"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_hybrid.xhtml#a0b21ce5febc3f7eed9c7b37c0b9a3560">execute</a> (unsigned int start, unsigned int end, int threadid) override</td></tr>
<tr class="separator:a0b21ce5febc3f7eed9c7b37c0b9a3560"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac5dec5063a75604fdc60555f15577b94"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_hybrid.xhtml#ac5dec5063a75604fdc60555f15577b94">B_is_pretransposed</a> () const override</td></tr>
<tr class="separator:ac5dec5063a75604fdc60555f15577b94"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa7cfff39cbb2be65cd40042a75e5ae1c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_hybrid.xhtml#aa7cfff39cbb2be65cd40042a75e5ae1c">B_pretranspose_required</a> () const override</td></tr>
<tr class="separator:aa7cfff39cbb2be65cd40042a75e5ae1c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae9fc7380e533c43a1d91e48a7578e412"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_hybrid.xhtml#ae9fc7380e533c43a1d91e48a7578e412">get_B_pretransposed_array_size</a> () const override</td></tr>
<tr class="separator:ae9fc7380e533c43a1d91e48a7578e412"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae385dce1a98e03f0a3ca311f031e5110"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_hybrid.xhtml#ae385dce1a98e03f0a3ca311f031e5110">pretranspose_B_array</a> (void *in_buffer, const To *B, const int ldb, const int B_multi_stride) override</td></tr>
<tr class="separator:ae385dce1a98e03f0a3ca311f031e5110"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e76d099f51fc0ef7f48dbd7d00214ac"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_hybrid.xhtml#a6e76d099f51fc0ef7f48dbd7d00214ac">set_pretransposed_B_data</a> (void *in_buffer) override</td></tr>
<tr class="separator:a6e76d099f51fc0ef7f48dbd7d00214ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;typename strategy, typename To, typename Tr&gt;<br />
class arm_gemm::GemmHybrid&lt; strategy, To, Tr &gt;</h3>


<p class="definition">Definition at line <a class="el" href="gemm__hybrid_8hpp_source.xhtml#l00046">46</a> of file <a class="el" href="gemm__hybrid_8hpp_source.xhtml">gemm_hybrid.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a67f91182afb2b1092518637116562440"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a67f91182afb2b1092518637116562440">&#9670;&nbsp;</a></span>GemmHybrid() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__gemm_1_1_gemm_hybrid.xhtml">GemmHybrid</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__gemm_1_1_gemm_hybrid.xhtml">GemmHybrid</a>&lt; strategy, To, Tr &gt; &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="af1c4ba77e233f8d5451d71e9a7a9f6de"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af1c4ba77e233f8d5451d71e9a7a9f6de">&#9670;&nbsp;</a></span>GemmHybrid() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__gemm_1_1_gemm_hybrid.xhtml">GemmHybrid</a> </td>
          <td>(</td>
          <td class="paramtype">const GemmArgs &amp;&#160;</td>
          <td class="paramname"><em>args</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="gemm__hybrid_8hpp_source.xhtml#l00136">136</a> of file <a class="el" href="gemm__hybrid_8hpp_source.xhtml">gemm_hybrid.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;              : _ci(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._ci), _Msize(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Msize), _Nsize(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Nsize), _Ksize(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Ksize),</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                _nbatches(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._nbatches), _nmulti(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._nmulti), _trB(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._trB),</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                _act(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._act),</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                _k_block(compute_k_block(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>)), _n_block(compute_n_block(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>)),</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                _Mround(<a class="code" href="utils_8hpp.xhtml#a8f6fbf8b243a10af40ce8d47a1013384">roundup</a>(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Msize, strategy::out_height())),</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                _window_range(<a class="code" href="utils_8hpp.xhtml#aa4508679e1d089c2bdcf000f72357683">iceildiv</a>(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Msize, strategy::out_height()), _nbatches, <a class="code" href="utils_8hpp.xhtml#aa4508679e1d089c2bdcf000f72357683">iceildiv</a>(_Nsize, _n_block), _nmulti) { }</div><div class="ttc" id="utils_8hpp_xhtml_aa4508679e1d089c2bdcf000f72357683"><div class="ttname"><a href="utils_8hpp.xhtml#aa4508679e1d089c2bdcf000f72357683">iceildiv</a></div><div class="ttdeci">T iceildiv(const T a, const T b)</div><div class="ttdef"><b>Definition:</b> <a href="utils_8hpp_source.xhtml#l00038">utils.hpp:38</a></div></div>
<div class="ttc" id="namespace_gemm_tuner_xhtml_a8187411843a6284ffb964ef3fb9fcab3"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">GemmTuner.args</a></div><div class="ttdeci">args</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00555">GemmTuner.py:555</a></div></div>
<div class="ttc" id="utils_8hpp_xhtml_a8f6fbf8b243a10af40ce8d47a1013384"><div class="ttname"><a href="utils_8hpp.xhtml#a8f6fbf8b243a10af40ce8d47a1013384">roundup</a></div><div class="ttdeci">T roundup(const T a, const T b)</div><div class="ttdef"><b>Definition:</b> <a href="utils_8hpp_source.xhtml#l00043">utils.hpp:43</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="ac5dec5063a75604fdc60555f15577b94"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac5dec5063a75604fdc60555f15577b94">&#9670;&nbsp;</a></span>B_is_pretransposed()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool B_is_pretransposed </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="gemm__hybrid_8hpp_source.xhtml#l00219">219</a> of file <a class="el" href="gemm__hybrid_8hpp_source.xhtml">gemm_hybrid.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                                             {</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="aa7cfff39cbb2be65cd40042a75e5ae1c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa7cfff39cbb2be65cd40042a75e5ae1c">&#9670;&nbsp;</a></span>B_pretranspose_required()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool B_pretranspose_required </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="gemm__hybrid_8hpp_source.xhtml#l00223">223</a> of file <a class="el" href="gemm__hybrid_8hpp_source.xhtml">gemm_hybrid.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                                                  {</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        <span class="keywordflow">return</span> (_B_transposed==<span class="keyword">nullptr</span>);</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a0b21ce5febc3f7eed9c7b37c0b9a3560"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0b21ce5febc3f7eed9c7b37c0b9a3560">&#9670;&nbsp;</a></span>execute()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void execute </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>end</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>threadid</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="gemm__hybrid_8hpp_source.xhtml#l00155">155</a> of file <a class="el" href="gemm__hybrid_8hpp_source.xhtml">gemm_hybrid.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                                                                              {</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        <a class="code" href="utils_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(threadid);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="preprocessor">#ifdef CYCLE_PROFILING</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        profiler prof;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        strategy strat(_ci);</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        <span class="comment">/* Make sure we&#39;ve been set up correctly. */</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        assert(_B_transposed);</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        static_assert(std::is_same&lt;To, Toi&gt;::value, <span class="stringliteral">&quot;gemm_native: Operand types must be the same.&quot;</span>);</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        static_assert(std::is_same&lt;Tr, Tri&gt;::value, <span class="stringliteral">&quot;gemm_native: Result types must be the same.&quot;</span>);</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        <span class="comment">/* For now, each work item implies all the K for a given output</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment">         * pixel (so we don&#39;t need to synchronize access to the output</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment">         * array).  So separate the loop over K blocks here.  */</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k0=0; k0&lt;_Ksize; k0+=_k_block) {</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kmax   = std::min(k0 + _k_block, _Ksize);</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kern_k = <a class="code" href="utils_8hpp.xhtml#a8f6fbf8b243a10af40ce8d47a1013384">roundup</a>(kmax-k0, strategy::k_unroll());</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">bool</span> first_pass = (k0 == 0);</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">bool</span> last_pass = (kmax == _Ksize);</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;            <span class="keyword">auto</span> p = _window_range.<a class="code" href="classarm__gemm_1_1_n_d_range.xhtml#a78a5c697e8717cb27954513e8ad2a508">iterator</a>(start, end);</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;            <span class="keywordflow">if</span> (p.done()) {</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                <span class="keywordflow">return</span>;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;            }</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;            <span class="keywordflow">do</span> {</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m_start = p.dim(0) * strategy::out_height();</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m_end   = std::min(p.dim0_max() * strategy::out_height(), _Msize);</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batch   = p.dim(1);</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n0      = p.dim(2) * _n_block;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> nmax    = std::min(n0 + _n_block, _Nsize);</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> multi   = p.dim(3);</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                <span class="keyword">const</span> Toi *b_panel = _B_transposed +</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                                     (multi * <a class="code" href="utils_8hpp.xhtml#a8f6fbf8b243a10af40ce8d47a1013384">roundup</a>(_Nsize, strategy::out_width()) * <a class="code" href="utils_8hpp.xhtml#a8f6fbf8b243a10af40ce8d47a1013384">roundup</a>(_Ksize, strategy::k_unroll())) +</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                                     (k0 * <a class="code" href="utils_8hpp.xhtml#a8f6fbf8b243a10af40ce8d47a1013384">roundup</a>(_Nsize, strategy::out_width())) +</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                                     (n0 * kern_k);</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="preprocessor">#ifdef CYCLE_PROFILING</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                <span class="keyword">auto</span> p = prof.ScopedProfiler(PROFILE_KERNEL, (m_end - m_start) * kern_k * <a class="code" href="utils_8hpp.xhtml#a8f6fbf8b243a10af40ce8d47a1013384">roundup</a>(nmax-n0, strategy::out_width()));</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                strat.kernel(this-&gt;_Aptr + (multi * this-&gt;_A_multi_stride) + (batch * this-&gt;_A_batch_stride) + (m_start * this-&gt;_lda) + k0, this-&gt;_lda,</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                             b_panel,</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                             this-&gt;_Cptr + (multi * this-&gt;_C_multi_stride) + (batch * this-&gt;_C_batch_stride) + (m_start * this-&gt;_ldc) + n0, this-&gt;_ldc,</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                             (m_end - m_start), (nmax - n0), kmax-k0,</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                             (strategy::supports_bias() &amp;&amp; first_pass &amp;&amp; this-&gt;_bias) ? this-&gt;_bias + (multi * this-&gt;_bias_multi_stride) + n0 : <span class="keyword">nullptr</span>,</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                             last_pass ? _act : <a class="code" href="namespacearm__compute_1_1graph.xhtml#a5f9016ea3e28a033b7cc216bdda912be">Activation</a>(), !first_pass);</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                <span class="comment">// Add bias externally if needed</span></div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                <span class="keywordflow">if</span> (!strategy::supports_bias() &amp;&amp; this-&gt;_bias &amp;&amp; first_pass) {</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                    <a class="code" href="namespacearm__gemm.xhtml#a7450234a5b6959d08a3ddac191b3fe1f">bias_adder</a>(this-&gt;_Cptr + (multi * this-&gt;_C_multi_stride) + (batch * this-&gt;_C_batch_stride) + (m_start * this-&gt;_ldc) + n0, this-&gt;_ldc,</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                               this-&gt;_bias + (multi * this-&gt;_bias_multi_stride) + n0,</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                               (m_end - m_start), (nmax - n0));</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                }</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            } <span class="keywordflow">while</span> (p.next_dim1());</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        }</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    }</div><div class="ttc" id="classarm__gemm_1_1_n_d_range_xhtml_a78a5c697e8717cb27954513e8ad2a508"><div class="ttname"><a href="classarm__gemm_1_1_n_d_range.xhtml#a78a5c697e8717cb27954513e8ad2a508">arm_gemm::NDRange::iterator</a></div><div class="ttdeci">NDRangeIterator iterator(unsigned int start, unsigned int end) const</div><div class="ttdef"><b>Definition:</b> <a href="ndrange_8hpp_source.xhtml#l00095">ndrange.hpp:95</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a5f9016ea3e28a033b7cc216bdda912be"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a5f9016ea3e28a033b7cc216bdda912be">arm_compute::graph::Activation</a></div><div class="ttdeci">arm_compute::ActivationLayerInfo::ActivationFunction Activation</div><div class="ttdoc">Constant TensorID specifying an equivalent of null tensor.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00068">Types.h:68</a></div></div>
<div class="ttc" id="utils_8hpp_xhtml_a8f6fbf8b243a10af40ce8d47a1013384"><div class="ttname"><a href="utils_8hpp.xhtml#a8f6fbf8b243a10af40ce8d47a1013384">roundup</a></div><div class="ttdeci">T roundup(const T a, const T b)</div><div class="ttdef"><b>Definition:</b> <a href="utils_8hpp_source.xhtml#l00043">utils.hpp:43</a></div></div>
<div class="ttc" id="namespacearm__gemm_xhtml_a7450234a5b6959d08a3ddac191b3fe1f"><div class="ttname"><a href="namespacearm__gemm.xhtml#a7450234a5b6959d08a3ddac191b3fe1f">arm_gemm::bias_adder</a></div><div class="ttdeci">void bias_adder(T *out, unsigned int stride, const T *bias, unsigned int rows, unsigned int cols)</div><div class="ttdef"><b>Definition:</b> <a href="bias__adder_8hpp_source.xhtml#l00031">bias_adder.hpp:31</a></div></div>
<div class="ttc" id="utils_8hpp_xhtml_a86d500a34c624c2cae56bc25a31b12f3"><div class="ttname"><a href="utils_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a></div><div class="ttdeci">#define UNUSED(x)</div><div class="ttdef"><b>Definition:</b> <a href="utils_8hpp_source.xhtml#l00035">utils.hpp:35</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="utils_8hpp_source.xhtml#l00035">UNUSED</a>.</p>

</div>
</div>
<a id="ae9fc7380e533c43a1d91e48a7578e412"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae9fc7380e533c43a1d91e48a7578e412">&#9670;&nbsp;</a></span>get_B_pretransposed_array_size()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t get_B_pretransposed_array_size </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="gemm__hybrid_8hpp_source.xhtml#l00227">227</a> of file <a class="el" href="gemm__hybrid_8hpp_source.xhtml">gemm_hybrid.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                                                           {</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="utils_8hpp.xhtml#a8f6fbf8b243a10af40ce8d47a1013384">roundup</a>(_Nsize, strategy::out_width()) * <a class="code" href="utils_8hpp.xhtml#a8f6fbf8b243a10af40ce8d47a1013384">roundup</a>(_Ksize, strategy::k_unroll()) * _nmulti * <span class="keyword">sizeof</span>(Toi);</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    }</div><div class="ttc" id="utils_8hpp_xhtml_a8f6fbf8b243a10af40ce8d47a1013384"><div class="ttname"><a href="utils_8hpp.xhtml#a8f6fbf8b243a10af40ce8d47a1013384">roundup</a></div><div class="ttdeci">T roundup(const T a, const T b)</div><div class="ttdef"><b>Definition:</b> <a href="utils_8hpp_source.xhtml#l00043">utils.hpp:43</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="utils_8hpp_source.xhtml#l00043">roundup()</a>.</p>

</div>
</div>
<a id="a9fe814165d032363ea4f9cfdd36dd5e2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9fe814165d032363ea4f9cfdd36dd5e2">&#9670;&nbsp;</a></span>get_window_size()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int get_window_size </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="gemm__hybrid_8hpp_source.xhtml#l00145">145</a> of file <a class="el" href="gemm__hybrid_8hpp_source.xhtml">gemm_hybrid.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                                                  {</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        <span class="keywordflow">return</span> _window_range.<a class="code" href="classarm__gemm_1_1_n_d_range.xhtml#a2ee55bf0e2d8324a1360f6994a762e28">total_size</a>();</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    }</div><div class="ttc" id="classarm__gemm_1_1_n_d_range_xhtml_a2ee55bf0e2d8324a1360f6994a762e28"><div class="ttname"><a href="classarm__gemm_1_1_n_d_range.xhtml#a2ee55bf0e2d8324a1360f6994a762e28">arm_gemm::NDRange::total_size</a></div><div class="ttdeci">unsigned int total_size() const</div><div class="ttdef"><b>Definition:</b> <a href="ndrange_8hpp_source.xhtml#l00099">ndrange.hpp:99</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="ndrange_8hpp_source.xhtml#l00099">NDRange&lt; D &gt;::total_size()</a>.</p>

</div>
</div>
<a id="a82ec71716669b6765670e0ed242f5a47"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a82ec71716669b6765670e0ed242f5a47">&#9670;&nbsp;</a></span>operator=()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__gemm_1_1_gemm_hybrid.xhtml">GemmHybrid</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__gemm_1_1_gemm_hybrid.xhtml">GemmHybrid</a>&lt; strategy, To, Tr &gt; &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ae385dce1a98e03f0a3ca311f031e5110"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae385dce1a98e03f0a3ca311f031e5110">&#9670;&nbsp;</a></span>pretranspose_B_array()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void pretranspose_B_array </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>in_buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const To *&#160;</td>
          <td class="paramname"><em>B</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>ldb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>B_multi_stride</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="gemm__hybrid_8hpp_source.xhtml#l00231">231</a> of file <a class="el" href="gemm__hybrid_8hpp_source.xhtml">gemm_hybrid.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                                                                                                              {</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        Toi *buffer = reinterpret_cast&lt;Toi *&gt;(in_buffer);</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        _B_transposed = buffer;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        strategy strat(_ci);</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> multi=0; multi&lt;_nmulti; multi++) {</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k0=0; k0&lt;_Ksize; k0+=_k_block) {</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kmax = std::min(k0 + _k_block, _Ksize);</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k_size = <a class="code" href="utils_8hpp.xhtml#a8f6fbf8b243a10af40ce8d47a1013384">roundup</a>(kmax-k0, strategy::k_unroll());</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> x0=0; x0&lt;_Nsize; x0+=_n_block) {</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> xmax = std::min(x0+_n_block, _Nsize);</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> size = <a class="code" href="utils_8hpp.xhtml#a8f6fbf8b243a10af40ce8d47a1013384">roundup</a>(xmax-x0, strategy::out_width()) * k_size;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                    strat.transforms.PrepareB( buffer, B + (multi * B_multi_stride), ldb,</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                                               x0, xmax, k0, kmax, _trB);</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                    buffer += size;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                }</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;            }</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        }</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    }</div><div class="ttc" id="utils_8hpp_xhtml_a8f6fbf8b243a10af40ce8d47a1013384"><div class="ttname"><a href="utils_8hpp.xhtml#a8f6fbf8b243a10af40ce8d47a1013384">roundup</a></div><div class="ttdeci">T roundup(const T a, const T b)</div><div class="ttdef"><b>Definition:</b> <a href="utils_8hpp_source.xhtml#l00043">utils.hpp:43</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="utils_8hpp_source.xhtml#l00043">roundup()</a>.</p>

</div>
</div>
<a id="a6e76d099f51fc0ef7f48dbd7d00214ac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6e76d099f51fc0ef7f48dbd7d00214ac">&#9670;&nbsp;</a></span>set_pretransposed_B_data()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void set_pretransposed_B_data </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>in_buffer</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="gemm__hybrid_8hpp_source.xhtml#l00255">255</a> of file <a class="el" href="gemm__hybrid_8hpp_source.xhtml">gemm_hybrid.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                                                            {</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        _B_transposed = reinterpret_cast&lt;Toi *&gt;(in_buffer);</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a1bb76b8a32e09fb5ffffd66e04d7f741"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1bb76b8a32e09fb5ffffd66e04d7f741">&#9670;&nbsp;</a></span>supports_dynamic_scheduling()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool supports_dynamic_scheduling </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="gemm__hybrid_8hpp_source.xhtml#l00150">150</a> of file <a class="el" href="gemm__hybrid_8hpp_source.xhtml">gemm_hybrid.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                                                      {</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>src/core/NEON/kernels/arm_gemm/<a class="el" href="gemm__hybrid_8hpp_source.xhtml">gemm_hybrid.hpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__gemm.xhtml">arm_gemm</a></li><li class="navelem"><a class="el" href="classarm__gemm_1_1_gemm_hybrid.xhtml">GemmHybrid</a></li>
    <li class="footer">Generated on Thu Mar 5 2020 16:07:20 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
