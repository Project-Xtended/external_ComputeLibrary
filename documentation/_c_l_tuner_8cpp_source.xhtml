<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/runtime/CL/CLTuner.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('_c_l_tuner_8cpp_source.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">CLTuner.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_c_l_tuner_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017-2019 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_c_l_tuner_8h.xhtml">arm_compute/runtime/CL/CLTuner.h</a>&quot;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_c_l_l_w_s_list_8h.xhtml">arm_compute/runtime/CL/tuners/CLLWSList.h</a>&quot;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_c_l_kernel_8h.xhtml">arm_compute/core/CL/ICLKernel.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_error_8h.xhtml">arm_compute/core/Error.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_c_l_scheduler_8h.xhtml">arm_compute/runtime/CL/CLScheduler.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &lt;cerrno&gt;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &lt;fstream&gt;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &lt;limits&gt;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &lt;memory&gt;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{</div><div class="line"><a name="l00040"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_tuner.xhtml#ad551ac5b533cac7908910085117f5ca8">   40</a></span>&#160;<a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#ad551ac5b533cac7908910085117f5ca8">CLTuner::CLTuner</a>(<span class="keywordtype">bool</span> tune_new_kernels)</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    : real_clEnqueueNDRangeKernel(nullptr), _lws_table(), _kernel_event(), _tune_new_kernels(tune_new_kernels), _tuner_mode(<a class="code" href="namespacearm__compute.xhtml#ae76ef5bd3ad69f7380ebb3ac6033ec5c">CLTunerMode</a>::<a class="code" href="namespacearm__compute.xhtml#a4c9101ca1a1f72f48efff28b4b9a6495a1e23852820b9154316c7c06e2b7ba051">NORMAL</a>)</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;}</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_tuner.xhtml#ac6fe363cafdd1fcfb6179a7cceac7dad">   45</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#ac6fe363cafdd1fcfb6179a7cceac7dad">CLTuner::kernel_event_is_set</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keywordflow">return</span> _kernel_event() != <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;}</div><div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_tuner.xhtml#a7937dca7876064401bb14b4443bf5d8d">   49</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#a7937dca7876064401bb14b4443bf5d8d">CLTuner::set_cl_kernel_event</a>(cl_event kernel_event)</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;{</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    _kernel_event = kernel_event;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;}</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_tuner.xhtml#aba10acdb2d58e3e0a96364c487a71d40">   54</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#aba10acdb2d58e3e0a96364c487a71d40">CLTuner::set_tune_new_kernels</a>(<span class="keywordtype">bool</span> tune_new_kernels)</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;{</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    _tune_new_kernels = <a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#a362184f6651ae4acde05d5ce85cfd16f">tune_new_kernels</a>;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;}</div><div class="line"><a name="l00058"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_tuner.xhtml#a362184f6651ae4acde05d5ce85cfd16f">   58</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#a362184f6651ae4acde05d5ce85cfd16f">CLTuner::tune_new_kernels</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordflow">return</span> _tune_new_kernels;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;}</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_tuner.xhtml#aae485b24df65d39cb646e48317f49639">   63</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#aae485b24df65d39cb646e48317f49639">CLTuner::set_tuner_mode</a>(<a class="code" href="namespacearm__compute.xhtml#ae76ef5bd3ad69f7380ebb3ac6033ec5c">CLTunerMode</a> mode)</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;{</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    _tuner_mode = mode;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;}</div><div class="line"><a name="l00067"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_tuner.xhtml#a7476f2d243a36f5719a29bc8c758c62a">   67</a></span>&#160;<a class="code" href="namespacearm__compute.xhtml#ae76ef5bd3ad69f7380ebb3ac6033ec5c">CLTunerMode</a> <a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#a7476f2d243a36f5719a29bc8c758c62a">CLTuner::get_tuner_mode</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keywordflow">return</span> _tuner_mode;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;}</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_tuner.xhtml#a52f755d664bbdcb9346cdf5cc4a7e958">   72</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#a52f755d664bbdcb9346cdf5cc4a7e958">CLTuner::tune_kernel_static</a>(<a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml">ICLKernel</a> &amp;kernel)</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;{</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(kernel);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;}</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_tuner.xhtml#af073b532560e2105dd22d381f5888ce7">   77</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#af073b532560e2105dd22d381f5888ce7">CLTuner::tune_kernel_dynamic</a>(<a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml">ICLKernel</a> &amp;kernel)</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;{</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="comment">// Get the configuration ID from the kernel and append GPU target name and number of available compute units</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keyword">const</span> std::string config_id = kernel.<a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a8f7f6ab59fc0e601d750b83e75a398eb">config_id</a>() + <span class="stringliteral">&quot;_&quot;</span> + <a class="code" href="namespacearm__compute.xhtml#af7795707992825c309fe846740dc8cf8">string_from_target</a>(kernel.<a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#aa550ff0352ff2388e02f7b0a41bf5fe7">get_target</a>()) + <span class="stringliteral">&quot;_MP&quot;</span> + <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">support::cpp11::to_string</a>(<a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">CLKernelLibrary::get</a>().<a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a70696e3d56dcbcdc1f493dec744bc581">get_num_compute_units</a>());</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="comment">// Check if we need to find the Optimal LWS. If the kernel&#39;s config_id is equal to default_config_id, the kernel does not require to be tuned</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keywordflow">if</span>(kernel.<a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a8f7f6ab59fc0e601d750b83e75a398eb">config_id</a>() != arm_compute::default_config_id)</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    {</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        <span class="keyword">auto</span> p = _lws_table.find(config_id);</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <span class="keywordflow">if</span>(p == _lws_table.end())</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        {</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            <span class="keywordflow">if</span>(_tune_new_kernels)</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            {</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                <span class="comment">// Find the optimal LWS for the kernel</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                cl::NDRange opt_lws = find_optimal_lws(kernel);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                <span class="comment">// Insert the optimal LWS in the table</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                <a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#a7de8b49d3ae94affb80ba48945368a8a">add_lws_to_table</a>(config_id, opt_lws);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                <span class="comment">// Set Local-Workgroup-Size</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                kernel.<a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#ad356b88c8f61267d593d9ed99835bde9">set_lws_hint</a>(opt_lws);</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            }</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        }</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        {</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            <span class="comment">// Set Local-Workgroup-Size</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            kernel.<a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#ad356b88c8f61267d593d9ed99835bde9">set_lws_hint</a>(p-&gt;second);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        }</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    }</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;}</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_tuner.xhtml#a7de8b49d3ae94affb80ba48945368a8a">  109</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#a7de8b49d3ae94affb80ba48945368a8a">CLTuner::add_lws_to_table</a>(<span class="keyword">const</span> std::string &amp;kernel_id, cl::NDRange optimal_lws)</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;{</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    _lws_table.emplace(kernel_id, optimal_lws);</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;}</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;cl::NDRange CLTuner::find_optimal_lws(<a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml">ICLKernel</a> &amp;kernel)</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;{</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="comment">// Profiling queue</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    cl::CommandQueue queue_profiler;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="comment">// Extract real OpenCL function to intercept</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#a5baba955626e8da33ed5dd829a538974">real_clEnqueueNDRangeKernel</a> == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    {</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#a5baba955626e8da33ed5dd829a538974">real_clEnqueueNDRangeKernel</a> = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ab5c1d962dbe252b8d6a9a3414557d194">clEnqueueNDRangeKernel_ptr</a>;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    }</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="comment">// Get the default queue</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    cl::CommandQueue default_queue = <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a398a2582c746d28fc125487a44c9ed74">queue</a>();</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="comment">// Check if we can use the OpenCL timer with the default queue</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    cl_command_queue_properties props = default_queue.getInfo&lt;CL_QUEUE_PROPERTIES&gt;();</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="keywordflow">if</span>((props &amp; CL_QUEUE_PROFILING_ENABLE) == 0)</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    {</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        <span class="comment">// Set the queue for profiling</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        queue_profiler = cl::CommandQueue(<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().context(), props | CL_QUEUE_PROFILING_ENABLE);</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    }</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    {</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        queue_profiler = default_queue;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    }</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="comment">// Start intercepting enqueues:</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="keyword">auto</span> interceptor = [<span class="keyword">this</span>](cl_command_queue command_queue, cl_kernel kernel, cl_uint work_dim, <span class="keyword">const</span> <span class="keywordtype">size_t</span> *gwo, <span class="keyword">const</span> <span class="keywordtype">size_t</span> *gws, <span class="keyword">const</span> <span class="keywordtype">size_t</span> *lws, cl_uint num_events_in_wait_list,</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                              <span class="keyword">const</span> cl_event * event_wait_list, cl_event * event)</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    {</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        <span class="keywordflow">if</span>(this-&gt;<a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#ac6fe363cafdd1fcfb6179a7cceac7dad">kernel_event_is_set</a>())</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        {</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            <span class="comment">// If the event is already set it means the kernel enqueue is sliced: given that we only time the first slice we can save time by skipping the other enqueues.</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            <span class="keywordflow">return</span> CL_SUCCESS;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        }</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        cl_event tmp;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        cl_int   retval = this-&gt;<a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#a5baba955626e8da33ed5dd829a538974">real_clEnqueueNDRangeKernel</a>(command_queue, kernel, work_dim, gwo, gws, lws, num_events_in_wait_list, event_wait_list, &amp;tmp);</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        <span class="comment">// Set OpenCL event</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        this-&gt;<a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#a7937dca7876064401bb14b4443bf5d8d">set_cl_kernel_event</a>(tmp);</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        <span class="keywordflow">if</span>(event != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        {</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            <span class="comment">//return cl_event from the intercepted call</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;            <a class="code" href="_open_c_l_8cpp.xhtml#a434f9e0998ebb096bf09a0a6abdd5938">clRetainEvent</a>(tmp);</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;            *<span class="keyword">event</span> = tmp;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        }</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        <span class="keywordflow">return</span> retval;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    };</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ab5c1d962dbe252b8d6a9a3414557d194">clEnqueueNDRangeKernel_ptr</a> = interceptor;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    cl::NDRange gws = <a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a6c01790e4e3f22f70f69002f0cb1b913">ICLKernel::gws_from_window</a>(kernel.window());</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="comment">// Run the kernel with default lws to be used as baseline</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    kernel.run(kernel.window(), queue_profiler);</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    queue_profiler.finish();</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="keyword">const</span> cl_ulong start         = _kernel_event.getProfilingInfo&lt;CL_PROFILING_COMMAND_START&gt;();</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="keyword">const</span> cl_ulong end           = _kernel_event.getProfilingInfo&lt;CL_PROFILING_COMMAND_END&gt;();</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    cl_ulong       min_exec_time = end - start;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    _kernel_event                = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    cl::NDRange opt_lws = cl::NullRange;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <span class="comment">//Construct the list of LWS values to be tested based on the tuner mode.</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="keyword">auto</span> lws_list = <a class="code" href="classarm__compute_1_1cl__tuner_1_1_c_l_l_w_s_list_factory.xhtml#a76867f1522f705f751d39e3641d4e716">cl_tuner::CLLWSListFactory::get_lws_list</a>(_tuner_mode, gws);</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i = 0; i &lt; lws_list-&gt;size(); ++i)</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    {</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        cl::NDRange lws_test    = (*lws_list)[i];</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        <span class="keyword">auto</span>        x           = lws_test[0];</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        <span class="keyword">auto</span>        y           = lws_test[1];</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        <span class="keyword">auto</span>        z           = lws_test[2];</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span>  invalid_lws = (x * y * z &gt; kernel.get_max_workgroup_size()) || (x == 1 &amp;&amp; y == 1 &amp;&amp; z == 1);</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        <span class="keywordflow">if</span>(invalid_lws)</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        {</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;            <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        }</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        <span class="comment">//Set the Local-Workgroup-Size</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        kernel.set_lws_hint(lws_test);</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        <span class="comment">// Run the kernel</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        kernel.run(kernel.window(), queue_profiler);</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        queue_profiler.finish();</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        <span class="keyword">const</span> cl_ulong start = _kernel_event.getProfilingInfo&lt;CL_PROFILING_COMMAND_START&gt;();</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        <span class="keyword">const</span> cl_ulong end   = _kernel_event.getProfilingInfo&lt;CL_PROFILING_COMMAND_END&gt;();</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        <span class="keyword">const</span> cl_ulong diff  = end - start;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        _kernel_event        = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        <span class="comment">// Check the execution time</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        <span class="keywordflow">if</span>(diff &lt; min_exec_time)</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        {</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;            min_exec_time = diff;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;            opt_lws       = cl::NDRange(x, y, z);</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        }</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    }</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="comment">// Restore real function</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ab5c1d962dbe252b8d6a9a3414557d194">clEnqueueNDRangeKernel_ptr</a> = <a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#a5baba955626e8da33ed5dd829a538974">real_clEnqueueNDRangeKernel</a>;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="keywordflow">return</span> opt_lws;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;}</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;</div><div class="line"><a name="l00222"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_tuner.xhtml#aaf692ee51358d05ca65755a92591f815">  222</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#aaf692ee51358d05ca65755a92591f815">CLTuner::import_lws_table</a>(<span class="keyword">const</span> std::unordered_map&lt;std::string, cl::NDRange&gt; &amp;lws_table)</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;{</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    _lws_table.clear();</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    _lws_table = <a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#ab34f765d2b59b8f75dceafc6eb3bcb00">lws_table</a>;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;}</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div><div class="line"><a name="l00228"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_tuner.xhtml#ab34f765d2b59b8f75dceafc6eb3bcb00">  228</a></span>&#160;<span class="keyword">const</span> std::unordered_map&lt;std::string, cl::NDRange&gt; &amp;<a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#ab34f765d2b59b8f75dceafc6eb3bcb00">CLTuner::lws_table</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <span class="keywordflow">return</span> _lws_table;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;}</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;</div><div class="line"><a name="l00233"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_tuner.xhtml#a5ddfa449f78e4c4d8345e37f1719cc57">  233</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#a5ddfa449f78e4c4d8345e37f1719cc57">CLTuner::load_from_file</a>(<span class="keyword">const</span> std::string &amp;filename)</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;{</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    std::ifstream fs;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    fs.exceptions(std::ifstream::badbit);</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    fs.open(filename, std::ios::in);</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="keywordflow">if</span>(!fs.is_open())</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    {</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        <a class="code" href="_error_8h.xhtml#abd040a16dc0dbc75733e07aff93048a8">ARM_COMPUTE_ERROR_VAR</a>(<span class="stringliteral">&quot;Failed to open &#39;%s&#39; (%s [%d])&quot;</span>, filename.c_str(), strerror(errno), errno);</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    }</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    std::string line;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="keywordflow">while</span>(!std::getline(fs, line).fail())</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    {</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        std::istringstream ss(line);</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        std::string        token;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        <span class="keywordflow">if</span>(std::getline(ss, token, <span class="charliteral">&#39;;&#39;</span>).fail())</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        {</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;            <a class="code" href="_error_8h.xhtml#abd040a16dc0dbc75733e07aff93048a8">ARM_COMPUTE_ERROR_VAR</a>(<span class="stringliteral">&quot;Malformed row &#39;%s&#39; in %s (Should be of the form &#39;kernel_id;lws[0];lws[1];lws[2]&#39;)&quot;</span>, ss.str().c_str(), filename.c_str());</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        }</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        std::string kernel_id = token;</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        cl::NDRange lws(1, 1, 1);</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; 3; i++)</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        {</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;            <span class="keywordflow">if</span>(std::getline(ss, token, <span class="charliteral">&#39;;&#39;</span>).fail())</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;            {</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                <a class="code" href="_error_8h.xhtml#abd040a16dc0dbc75733e07aff93048a8">ARM_COMPUTE_ERROR_VAR</a>(<span class="stringliteral">&quot;Malformed row &#39;%s&#39; in %s (Should be of the form &#39;kernel_id;lws[0];lws[1];lws[2]&#39;)&quot;</span>, ss.str().c_str(), filename.c_str());</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;            }</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;            lws.get()[i] = <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#abdba606a789b8d664774f17d18f45cfe">support::cpp11::stoi</a>(token);</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        }</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        <span class="comment">// If all dimensions are 0: reset to NullRange (i.e nullptr)</span></div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        <span class="keywordflow">if</span>(lws[0] == 0 &amp;&amp; lws[1] == 0 &amp;&amp; lws[2] == 0)</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        {</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;            lws = cl::NullRange;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        }</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#a7de8b49d3ae94affb80ba48945368a8a">add_lws_to_table</a>(kernel_id, lws);</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    }</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    fs.close();</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;}</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;</div><div class="line"><a name="l00272"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_tuner.xhtml#a6bc110abab391dca6a6b0e977892020c">  272</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#a6bc110abab391dca6a6b0e977892020c">CLTuner::save_to_file</a>(<span class="keyword">const</span> std::string &amp;filename)<span class="keyword"> const</span></div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    std::ofstream fs;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    fs.exceptions(std::ifstream::failbit | std::ifstream::badbit);</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    fs.open(filename, std::ios::out);</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> <span class="keyword">const</span> &amp;kernel_data : _lws_table)</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    {</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        fs &lt;&lt; kernel_data.first &lt;&lt; <span class="stringliteral">&quot;;&quot;</span> &lt;&lt; kernel_data.second[0] &lt;&lt; <span class="stringliteral">&quot;;&quot;</span> &lt;&lt; kernel_data.second[1] &lt;&lt; <span class="stringliteral">&quot;;&quot;</span> &lt;&lt; kernel_data.second[2] &lt;&lt; std::endl;</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    }</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    fs.close();</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;}</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="ttc" id="classarm__compute_1_1_c_l_tuner_xhtml_a6bc110abab391dca6a6b0e977892020c"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuner.xhtml#a6bc110abab391dca6a6b0e977892020c">arm_compute::CLTuner::save_to_file</a></div><div class="ttdeci">void save_to_file(const std::string &amp;filename) const</div><div class="ttdoc">Save the content of the LWS table to file.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuner_8cpp_source.xhtml#l00272">CLTuner.cpp:272</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_kernel_xhtml_a6c01790e4e3f22f70f69002f0cb1b913"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_kernel.xhtml#a6c01790e4e3f22f70f69002f0cb1b913">arm_compute::ICLKernel::gws_from_window</a></div><div class="ttdeci">static cl::NDRange gws_from_window(const Window &amp;window)</div><div class="ttdoc">Get the global work size given an execution window.</div><div class="ttdef"><b>Definition:</b> <a href="_i_c_l_kernel_8cpp_source.xhtml#l00141">ICLKernel.cpp:141</a></div></div>
<div class="ttc" id="_c_l_l_w_s_list_8h_xhtml"><div class="ttname"><a href="_c_l_l_w_s_list_8h.xhtml">CLLWSList.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tuner_xhtml_aae485b24df65d39cb646e48317f49639"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuner.xhtml#aae485b24df65d39cb646e48317f49639">arm_compute::CLTuner::set_tuner_mode</a></div><div class="ttdeci">void set_tuner_mode(CLTunerMode mode)</div><div class="ttdoc">Set OpenCL tuner mode.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuner_8cpp_source.xhtml#l00063">CLTuner.cpp:63</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tuner_xhtml_a7937dca7876064401bb14b4443bf5d8d"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuner.xhtml#a7937dca7876064401bb14b4443bf5d8d">arm_compute::CLTuner::set_cl_kernel_event</a></div><div class="ttdeci">void set_cl_kernel_event(cl_event kernel_event)</div><div class="ttdoc">Set the OpenCL kernel event.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuner_8cpp_source.xhtml#l00049">CLTuner.cpp:49</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a9b58d0eb9a2af8e6d7908695e1557d6c"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">arm_compute::CLScheduler::get</a></div><div class="ttdeci">static CLScheduler &amp; get()</div><div class="ttdoc">Access the scheduler singleton.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00099">CLScheduler.cpp:99</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tuner_xhtml_a52f755d664bbdcb9346cdf5cc4a7e958"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuner.xhtml#a52f755d664bbdcb9346cdf5cc4a7e958">arm_compute::CLTuner::tune_kernel_static</a></div><div class="ttdeci">void tune_kernel_static(ICLKernel &amp;kernel) override</div><div class="ttdoc">Tune OpenCL kernel statically.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuner_8cpp_source.xhtml#l00072">CLTuner.cpp:72</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tuner_xhtml_af073b532560e2105dd22d381f5888ce7"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuner.xhtml#af073b532560e2105dd22d381f5888ce7">arm_compute::CLTuner::tune_kernel_dynamic</a></div><div class="ttdeci">void tune_kernel_dynamic(ICLKernel &amp;kernel) override</div><div class="ttdoc">Tune OpenCL kernel dynamically.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuner_8cpp_source.xhtml#l00077">CLTuner.cpp:77</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_kernel_xhtml_ad356b88c8f61267d593d9ed99835bde9"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_kernel.xhtml#ad356b88c8f61267d593d9ed99835bde9">arm_compute::ICLKernel::set_lws_hint</a></div><div class="ttdeci">void set_lws_hint(const cl::NDRange &amp;lws_hint)</div><div class="ttdoc">Set the Local-Workgroup-Size hint.</div><div class="ttdef"><b>Definition:</b> <a href="_i_c_l_kernel_8h_source.xhtml#l00237">ICLKernel.h:237</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_acc5dddee1cbe93a4eaf0a9f74ee96bb7"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">arm_compute::support::cpp11::to_string</a></div><div class="ttdeci">std::string to_string(T &amp;&amp;value)</div><div class="ttdoc">Convert integer and float values to string.</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00272">ToolchainSupport.h:272</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tuner_xhtml_a5ddfa449f78e4c4d8345e37f1719cc57"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuner.xhtml#a5ddfa449f78e4c4d8345e37f1719cc57">arm_compute::CLTuner::load_from_file</a></div><div class="ttdeci">void load_from_file(const std::string &amp;filename)</div><div class="ttdoc">Load the LWS table from file.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuner_8cpp_source.xhtml#l00233">CLTuner.cpp:233</a></div></div>
<div class="ttc" id="_error_8h_xhtml_abd040a16dc0dbc75733e07aff93048a8"><div class="ttname"><a href="_error_8h.xhtml#abd040a16dc0dbc75733e07aff93048a8">ARM_COMPUTE_ERROR_VAR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_VAR(msg,...)</div><div class="ttdoc">Print the given message then throw an std::runtime_error.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00346">Error.h:346</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_acba005f5ce2c62cbf3f94d074d9007aa"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">arm_compute::CLKernelLibrary::get</a></div><div class="ttdeci">static CLKernelLibrary &amp; get()</div><div class="ttdoc">Access the KernelLibrary singleton.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8cpp_source.xhtml#l01072">CLKernelLibrary.cpp:1072</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_af7795707992825c309fe846740dc8cf8"><div class="ttname"><a href="namespacearm__compute.xhtml#af7795707992825c309fe846740dc8cf8">arm_compute::string_from_target</a></div><div class="ttdeci">const std::string &amp; string_from_target(GPUTarget target)</div><div class="ttdoc">Translates a given gpu device target to string.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_g_p_u_target_8cpp_source.xhtml#l00115">GPUTarget.cpp:115</a></div></div>
<div class="ttc" id="_open_c_l_8cpp_xhtml_a434f9e0998ebb096bf09a0a6abdd5938"><div class="ttname"><a href="_open_c_l_8cpp.xhtml#a434f9e0998ebb096bf09a0a6abdd5938">clRetainEvent</a></div><div class="ttdeci">cl_int clRetainEvent(cl_event event)</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8cpp_source.xhtml#l00827">OpenCL.cpp:827</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_kernel_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_kernel.xhtml">arm_compute::ICLKernel</a></div><div class="ttdoc">Common interface for all the OpenCL kernels.</div><div class="ttdef"><b>Definition:</b> <a href="_i_c_l_kernel_8h_source.xhtml#l00043">ICLKernel.h:43</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2020 ARM Limited.</div><div class="ttdef"><b>Definition:</b> <a href="00__introduction_8dox_source.xhtml#l00024">00_introduction.dox:24</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tuner_xhtml_a5baba955626e8da33ed5dd829a538974"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuner.xhtml#a5baba955626e8da33ed5dd829a538974">arm_compute::CLTuner::real_clEnqueueNDRangeKernel</a></div><div class="ttdeci">std::function&lt; decltype(clEnqueueNDRangeKernel)&gt; real_clEnqueueNDRangeKernel</div><div class="ttdoc">clEnqueueNDRangeKernel symbol</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuner_8h_source.xhtml#l00102">CLTuner.h:102</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_a70696e3d56dcbcdc1f493dec744bc581"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#a70696e3d56dcbcdc1f493dec744bc581">arm_compute::CLKernelLibrary::get_num_compute_units</a></div><div class="ttdeci">cl_uint get_num_compute_units()</div><div class="ttdoc">Return the maximum number of compute units in the device.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8cpp_source.xhtml#l01346">CLKernelLibrary.cpp:1346</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tuner_xhtml_ab34f765d2b59b8f75dceafc6eb3bcb00"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuner.xhtml#ab34f765d2b59b8f75dceafc6eb3bcb00">arm_compute::CLTuner::lws_table</a></div><div class="ttdeci">const std::unordered_map&lt; std::string, cl::NDRange &gt; &amp; lws_table() const</div><div class="ttdoc">Give read access to the LWS table.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuner_8cpp_source.xhtml#l00228">CLTuner.cpp:228</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_kernel_xhtml_a8f7f6ab59fc0e601d750b83e75a398eb"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_kernel.xhtml#a8f7f6ab59fc0e601d750b83e75a398eb">arm_compute::ICLKernel::config_id</a></div><div class="ttdeci">const std::string &amp; config_id() const</div><div class="ttdoc">Get the configuration ID.</div><div class="ttdef"><b>Definition:</b> <a href="_i_c_l_kernel_8h_source.xhtml#l00262">ICLKernel.h:262</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tuner_xhtml_ac6fe363cafdd1fcfb6179a7cceac7dad"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuner.xhtml#ac6fe363cafdd1fcfb6179a7cceac7dad">arm_compute::CLTuner::kernel_event_is_set</a></div><div class="ttdeci">bool kernel_event_is_set() const</div><div class="ttdoc">Is the kernel_event set ?</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuner_8cpp_source.xhtml#l00045">CLTuner.cpp:45</a></div></div>
<div class="ttc" id="_c_l_scheduler_8h_xhtml"><div class="ttname"><a href="_c_l_scheduler_8h.xhtml">CLScheduler.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_symbols_xhtml_ab5c1d962dbe252b8d6a9a3414557d194"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#ab5c1d962dbe252b8d6a9a3414557d194">arm_compute::CLSymbols::clEnqueueNDRangeKernel_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clEnqueueNDRangeKernel)&gt; clEnqueueNDRangeKernel_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00097">OpenCL.h:97</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a4c9101ca1a1f72f48efff28b4b9a6495a1e23852820b9154316c7c06e2b7ba051"><div class="ttname"><a href="namespacearm__compute.xhtml#a4c9101ca1a1f72f48efff28b4b9a6495a1e23852820b9154316c7c06e2b7ba051">arm_compute::MemoryPolicy::NORMAL</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
<div class="ttc" id="classarm__compute_1_1cl__tuner_1_1_c_l_l_w_s_list_factory_xhtml_a76867f1522f705f751d39e3641d4e716"><div class="ttname"><a href="classarm__compute_1_1cl__tuner_1_1_c_l_l_w_s_list_factory.xhtml#a76867f1522f705f751d39e3641d4e716">arm_compute::cl_tuner::CLLWSListFactory::get_lws_list</a></div><div class="ttdeci">static std::unique_ptr&lt; ICLLWSList &gt; get_lws_list(CLTunerMode mode, const cl::NDRange &amp;gws)</div><div class="ttdoc">Construct an ICLLWSList object for the given tuner mode and gws configuration.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_l_w_s_list_8h_source.xhtml#l00196">CLLWSList.h:196</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tuner_xhtml_aba10acdb2d58e3e0a96364c487a71d40"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuner.xhtml#aba10acdb2d58e3e0a96364c487a71d40">arm_compute::CLTuner::set_tune_new_kernels</a></div><div class="ttdeci">void set_tune_new_kernels(bool tune_new_kernels)</div><div class="ttdoc">Setter for tune_new_kernels option.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuner_8cpp_source.xhtml#l00054">CLTuner.cpp:54</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_kernel_xhtml_aa550ff0352ff2388e02f7b0a41bf5fe7"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_kernel.xhtml#aa550ff0352ff2388e02f7b0a41bf5fe7">arm_compute::ICLKernel::get_target</a></div><div class="ttdeci">GPUTarget get_target() const</div><div class="ttdoc">Get the targeted GPU architecture.</div><div class="ttdef"><b>Definition:</b> <a href="_i_c_l_kernel_8h_source.xhtml#l00286">ICLKernel.h:286</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tuner_xhtml_aaf692ee51358d05ca65755a92591f815"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuner.xhtml#aaf692ee51358d05ca65755a92591f815">arm_compute::CLTuner::import_lws_table</a></div><div class="ttdeci">void import_lws_table(const std::unordered_map&lt; std::string, cl::NDRange &gt; &amp;lws_table)</div><div class="ttdoc">Import LWS table.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuner_8cpp_source.xhtml#l00222">CLTuner.cpp:222</a></div></div>
<div class="ttc" id="_c_l_tuner_8h_xhtml"><div class="ttname"><a href="_c_l_tuner_8h.xhtml">CLTuner.h</a></div></div>
<div class="ttc" id="_i_c_l_kernel_8h_xhtml"><div class="ttname"><a href="_i_c_l_kernel_8h.xhtml">ICLKernel.h</a></div></div>
<div class="ttc" id="_error_8h_xhtml"><div class="ttname"><a href="_error_8h.xhtml">Error.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a398a2582c746d28fc125487a44c9ed74"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a398a2582c746d28fc125487a44c9ed74">arm_compute::CLScheduler::queue</a></div><div class="ttdeci">cl::CommandQueue &amp; queue()</div><div class="ttdoc">Accessor for the associated CL command queue.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00041">CLScheduler.cpp:41</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_abdba606a789b8d664774f17d18f45cfe"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#abdba606a789b8d664774f17d18f45cfe">arm_compute::support::cpp11::stoi</a></div><div class="ttdeci">int stoi(const std::string &amp;str, std::size_t *pos=0, NumericBase base=NumericBase::BASE_10)</div><div class="ttdoc">Convert string values to integer.</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00067">ToolchainSupport.h:67</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tuner_xhtml_ad551ac5b533cac7908910085117f5ca8"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuner.xhtml#ad551ac5b533cac7908910085117f5ca8">arm_compute::CLTuner::CLTuner</a></div><div class="ttdeci">CLTuner(bool tune_new_kernels=true)</div><div class="ttdoc">Constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuner_8cpp_source.xhtml#l00040">CLTuner.cpp:40</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ae76ef5bd3ad69f7380ebb3ac6033ec5c"><div class="ttname"><a href="namespacearm__compute.xhtml#ae76ef5bd3ad69f7380ebb3ac6033ec5c">arm_compute::CLTunerMode</a></div><div class="ttdeci">CLTunerMode</div><div class="ttdoc">&lt; OpenCL tuner modes</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuner_types_8h_source.xhtml#l00035">CLTunerTypes.h:35</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tuner_xhtml_a362184f6651ae4acde05d5ce85cfd16f"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuner.xhtml#a362184f6651ae4acde05d5ce85cfd16f">arm_compute::CLTuner::tune_new_kernels</a></div><div class="ttdeci">bool tune_new_kernels() const</div><div class="ttdoc">Tune kernels that are not in the LWS table.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuner_8cpp_source.xhtml#l00058">CLTuner.cpp:58</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_symbols_xhtml_ac3d2ed16df8334b183d76d8a82dbf70f"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a></div><div class="ttdeci">static CLSymbols &amp; get()</div><div class="ttdoc">Get the static instance of CLSymbols.</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8cpp_source.xhtml#l00037">OpenCL.cpp:37</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tuner_xhtml_a7de8b49d3ae94affb80ba48945368a8a"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuner.xhtml#a7de8b49d3ae94affb80ba48945368a8a">arm_compute::CLTuner::add_lws_to_table</a></div><div class="ttdeci">void add_lws_to_table(const std::string &amp;kernel_id, cl::NDRange optimal_lws)</div><div class="ttdoc">Manually add a LWS for a kernel.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuner_8cpp_source.xhtml#l00109">CLTuner.cpp:109</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tuner_xhtml_a7476f2d243a36f5719a29bc8c758c62a"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuner.xhtml#a7476f2d243a36f5719a29bc8c758c62a">arm_compute::CLTuner::get_tuner_mode</a></div><div class="ttdeci">CLTunerMode get_tuner_mode() const</div><div class="ttdoc">Get the current OpenCL tuner mode.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuner_8cpp_source.xhtml#l00067">CLTuner.cpp:67</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_bf9f26469d00835ba20ff8d80ee5a804.xhtml">runtime</a></li><li class="navelem"><a class="el" href="dir_43c3fdbf778d1fd99e2e38f09fddd920.xhtml">CL</a></li><li class="navelem"><a class="el" href="_c_l_tuner_8cpp.xhtml">CLTuner.cpp</a></li>
    <li class="footer">Generated on Fri Feb 21 2020 11:10:16 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
