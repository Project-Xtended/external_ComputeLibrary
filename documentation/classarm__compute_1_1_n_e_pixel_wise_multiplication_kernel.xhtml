<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: NEPixelWiseMultiplicationKernel Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.02.1</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classarm__compute_1_1_n_e_pixel_wise_multiplication_kernel.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">NEPixelWiseMultiplicationKernel Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Interface for the kernel to perform addition between two tensors.  
 <a href="classarm__compute_1_1_n_e_pixel_wise_multiplication_kernel.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_n_e_pixel_wise_multiplication_kernel_8h_source.xhtml">NEPixelWiseMultiplicationKernel.h</a>&gt;</code></p>
<div class="dynheader">
Collaboration diagram for NEPixelWiseMultiplicationKernel:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classarm__compute_1_1_n_e_pixel_wise_multiplication_kernel__coll__graph.svg" width="192" height="202"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ab5656bb5b6334bdbe6e606c715872828"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_pixel_wise_multiplication_kernel.xhtml#ab5656bb5b6334bdbe6e606c715872828">name</a> () const override</td></tr>
<tr class="memdesc:ab5656bb5b6334bdbe6e606c715872828"><td class="mdescLeft">&#160;</td><td class="mdescRight">Name of the kernel.  <a href="#ab5656bb5b6334bdbe6e606c715872828">More...</a><br /></td></tr>
<tr class="separator:ab5656bb5b6334bdbe6e606c715872828"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a75e09a8ec40fb21b0f71421960b540a6"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_pixel_wise_multiplication_kernel.xhtml#a75e09a8ec40fb21b0f71421960b540a6">NEPixelWiseMultiplicationKernel</a> ()</td></tr>
<tr class="memdesc:a75e09a8ec40fb21b0f71421960b540a6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="#a75e09a8ec40fb21b0f71421960b540a6">More...</a><br /></td></tr>
<tr class="separator:a75e09a8ec40fb21b0f71421960b540a6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac23503429643fa0415fd64b1fc17e40c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_pixel_wise_multiplication_kernel.xhtml#ac23503429643fa0415fd64b1fc17e40c">NEPixelWiseMultiplicationKernel</a> (const <a class="el" href="classarm__compute_1_1_n_e_pixel_wise_multiplication_kernel.xhtml">NEPixelWiseMultiplicationKernel</a> &amp;)=delete</td></tr>
<tr class="memdesc:ac23503429643fa0415fd64b1fc17e40c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prevent instances of this class from being copied (As this class contains pointers)  <a href="#ac23503429643fa0415fd64b1fc17e40c">More...</a><br /></td></tr>
<tr class="separator:ac23503429643fa0415fd64b1fc17e40c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6685c2ffbda12dbf1e4706b85c688e19"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_n_e_pixel_wise_multiplication_kernel.xhtml">NEPixelWiseMultiplicationKernel</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_pixel_wise_multiplication_kernel.xhtml#a6685c2ffbda12dbf1e4706b85c688e19">operator=</a> (const <a class="el" href="classarm__compute_1_1_n_e_pixel_wise_multiplication_kernel.xhtml">NEPixelWiseMultiplicationKernel</a> &amp;)=delete</td></tr>
<tr class="memdesc:a6685c2ffbda12dbf1e4706b85c688e19"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prevent instances of this class from being copied (As this class contains pointers)  <a href="#a6685c2ffbda12dbf1e4706b85c688e19">More...</a><br /></td></tr>
<tr class="separator:a6685c2ffbda12dbf1e4706b85c688e19"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a032fb6504d12ca1244b2d7d82609f062"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_pixel_wise_multiplication_kernel.xhtml#a032fb6504d12ca1244b2d7d82609f062">NEPixelWiseMultiplicationKernel</a> (<a class="el" href="classarm__compute_1_1_n_e_pixel_wise_multiplication_kernel.xhtml">NEPixelWiseMultiplicationKernel</a> &amp;&amp;)=default</td></tr>
<tr class="memdesc:a032fb6504d12ca1244b2d7d82609f062"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be moved.  <a href="#a032fb6504d12ca1244b2d7d82609f062">More...</a><br /></td></tr>
<tr class="separator:a032fb6504d12ca1244b2d7d82609f062"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa5c44de29693435660b5c849c62e991"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_n_e_pixel_wise_multiplication_kernel.xhtml">NEPixelWiseMultiplicationKernel</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_pixel_wise_multiplication_kernel.xhtml#aaa5c44de29693435660b5c849c62e991">operator=</a> (<a class="el" href="classarm__compute_1_1_n_e_pixel_wise_multiplication_kernel.xhtml">NEPixelWiseMultiplicationKernel</a> &amp;&amp;)=default</td></tr>
<tr class="memdesc:aaa5c44de29693435660b5c849c62e991"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be moved.  <a href="#aaa5c44de29693435660b5c849c62e991">More...</a><br /></td></tr>
<tr class="separator:aaa5c44de29693435660b5c849c62e991"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab299ab73ca304f9e10359a54a763f4d3"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_pixel_wise_multiplication_kernel.xhtml#ab299ab73ca304f9e10359a54a763f4d3">~NEPixelWiseMultiplicationKernel</a> ()=default</td></tr>
<tr class="memdesc:ab299ab73ca304f9e10359a54a763f4d3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default destructor.  <a href="#ab299ab73ca304f9e10359a54a763f4d3">More...</a><br /></td></tr>
<tr class="separator:ab299ab73ca304f9e10359a54a763f4d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab214c0eb5acd40bde3f8a3fb6c0a6613"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_pixel_wise_multiplication_kernel.xhtml#ab214c0eb5acd40bde3f8a3fb6c0a6613">configure</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, float scale, <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> overflow_policy, <a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a> rounding_policy)</td></tr>
<tr class="memdesc:ab214c0eb5acd40bde3f8a3fb6c0a6613"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialise the kernel's input, output and border mode.  <a href="#ab214c0eb5acd40bde3f8a3fb6c0a6613">More...</a><br /></td></tr>
<tr class="separator:ab214c0eb5acd40bde3f8a3fb6c0a6613"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a112b35dd205c62ea6ed1447ef226da82"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_pixel_wise_multiplication_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">run</a> (const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;<a class="el" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>, const <a class="el" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;info) override</td></tr>
<tr class="memdesc:a112b35dd205c62ea6ed1447ef226da82"><td class="mdescLeft">&#160;</td><td class="mdescRight">Execute the kernel on the passed window.  <a href="#a112b35dd205c62ea6ed1447ef226da82">More...</a><br /></td></tr>
<tr class="separator:a112b35dd205c62ea6ed1447ef226da82"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a423f9a45a52983b4de5e2b347f4369c7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_pixel_wise_multiplication_kernel.xhtml#a423f9a45a52983b4de5e2b347f4369c7">border_size</a> () const override</td></tr>
<tr class="memdesc:a423f9a45a52983b4de5e2b347f4369c7"><td class="mdescLeft">&#160;</td><td class="mdescRight">The size of the border for that kernel.  <a href="#a423f9a45a52983b4de5e2b347f4369c7">More...</a><br /></td></tr>
<tr class="separator:a423f9a45a52983b4de5e2b347f4369c7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarm__compute_1_1_i_c_p_p_kernel"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarm__compute_1_1_i_c_p_p_kernel')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarm__compute_1_1_i_c_p_p_kernel.xhtml">ICPPKernel</a></td></tr>
<tr class="memitem:a033d17a97e07cea7fe83eefcf23540f6 inherit pub_methods_classarm__compute_1_1_i_c_p_p_kernel"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_p_p_kernel.xhtml#a033d17a97e07cea7fe83eefcf23540f6">~ICPPKernel</a> ()=default</td></tr>
<tr class="memdesc:a033d17a97e07cea7fe83eefcf23540f6 inherit pub_methods_classarm__compute_1_1_i_c_p_p_kernel"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default destructor.  <a href="classarm__compute_1_1_i_c_p_p_kernel.xhtml#a033d17a97e07cea7fe83eefcf23540f6">More...</a><br /></td></tr>
<tr class="separator:a033d17a97e07cea7fe83eefcf23540f6 inherit pub_methods_classarm__compute_1_1_i_c_p_p_kernel"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarm__compute_1_1_i_kernel"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarm__compute_1_1_i_kernel')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarm__compute_1_1_i_kernel.xhtml">IKernel</a></td></tr>
<tr class="memitem:a7250cb8cbaa4104a93a2d77155085507 inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_kernel.xhtml#a7250cb8cbaa4104a93a2d77155085507">IKernel</a> ()</td></tr>
<tr class="memdesc:a7250cb8cbaa4104a93a2d77155085507 inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor.  <a href="classarm__compute_1_1_i_kernel.xhtml#a7250cb8cbaa4104a93a2d77155085507">More...</a><br /></td></tr>
<tr class="separator:a7250cb8cbaa4104a93a2d77155085507 inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a341b60d15a5e12a5b8f3825194dd3b12 inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_kernel.xhtml#a341b60d15a5e12a5b8f3825194dd3b12">~IKernel</a> ()=default</td></tr>
<tr class="memdesc:a341b60d15a5e12a5b8f3825194dd3b12 inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor.  <a href="classarm__compute_1_1_i_kernel.xhtml#a341b60d15a5e12a5b8f3825194dd3b12">More...</a><br /></td></tr>
<tr class="separator:a341b60d15a5e12a5b8f3825194dd3b12 inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0466ee6ce6552c87595f0e88e73eeb1b inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_kernel.xhtml#a0466ee6ce6552c87595f0e88e73eeb1b">is_parallelisable</a> () const</td></tr>
<tr class="memdesc:a0466ee6ce6552c87595f0e88e73eeb1b inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="mdescLeft">&#160;</td><td class="mdescRight">Indicates whether or not the kernel is parallelisable.  <a href="classarm__compute_1_1_i_kernel.xhtml#a0466ee6ce6552c87595f0e88e73eeb1b">More...</a><br /></td></tr>
<tr class="separator:a0466ee6ce6552c87595f0e88e73eeb1b inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad34a46f53686c12a5c5e717cc9617fb6 inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a> () const</td></tr>
<tr class="memdesc:ad34a46f53686c12a5c5e717cc9617fb6 inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="mdescLeft">&#160;</td><td class="mdescRight">The maximum window the kernel can be executed on.  <a href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">More...</a><br /></td></tr>
<tr class="separator:ad34a46f53686c12a5c5e717cc9617fb6 inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a705182fc799dce8ee017368eea0ca539"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_pixel_wise_multiplication_kernel.xhtml#a705182fc799dce8ee017368eea0ca539">validate</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input1, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input2, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *output, float scale, <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> overflow_policy, <a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a> rounding_policy)</td></tr>
<tr class="memdesc:a705182fc799dce8ee017368eea0ca539"><td class="mdescLeft">&#160;</td><td class="mdescRight">Static function to check if given info will lead to a valid configuration of <a class="el" href="classarm__compute_1_1_n_e_pixel_wise_multiplication_kernel.xhtml">NEPixelWiseMultiplicationKernel</a>.  <a href="#a705182fc799dce8ee017368eea0ca539">More...</a><br /></td></tr>
<tr class="separator:a705182fc799dce8ee017368eea0ca539"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Interface for the kernel to perform addition between two tensors. </p>

<p class="definition">Definition at line <a class="el" href="_n_e_pixel_wise_multiplication_kernel_8h_source.xhtml#l00035">35</a> of file <a class="el" href="_n_e_pixel_wise_multiplication_kernel_8h_source.xhtml">NEPixelWiseMultiplicationKernel.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a75e09a8ec40fb21b0f71421960b540a6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a75e09a8ec40fb21b0f71421960b540a6">&#9670;&nbsp;</a></span>NEPixelWiseMultiplicationKernel() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_n_e_pixel_wise_multiplication_kernel.xhtml">NEPixelWiseMultiplicationKernel</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Default constructor. </p>

<p class="definition">Definition at line <a class="el" href="_n_e_pixel_wise_multiplication_kernel_8cpp_source.xhtml#l00576">576</a> of file <a class="el" href="_n_e_pixel_wise_multiplication_kernel_8cpp_source.xhtml">NEPixelWiseMultiplicationKernel.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;    : _func_float(<span class="keyword">nullptr</span>), _func_int(<span class="keyword">nullptr</span>), _func_quantized(<span class="keyword">nullptr</span>), _input1(<span class="keyword">nullptr</span>), _input2(<span class="keyword">nullptr</span>), _output(<span class="keyword">nullptr</span>), _scale{ 0 }, _scale_exponent{ 0 }, _run_optimized_qasymm8(<span class="keyword">false</span>)</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;{</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ac23503429643fa0415fd64b1fc17e40c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac23503429643fa0415fd64b1fc17e40c">&#9670;&nbsp;</a></span>NEPixelWiseMultiplicationKernel() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_n_e_pixel_wise_multiplication_kernel.xhtml">NEPixelWiseMultiplicationKernel</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_n_e_pixel_wise_multiplication_kernel.xhtml">NEPixelWiseMultiplicationKernel</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prevent instances of this class from being copied (As this class contains pointers) </p>

</div>
</div>
<a id="a032fb6504d12ca1244b2d7d82609f062"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a032fb6504d12ca1244b2d7d82609f062">&#9670;&nbsp;</a></span>NEPixelWiseMultiplicationKernel() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_n_e_pixel_wise_multiplication_kernel.xhtml">NEPixelWiseMultiplicationKernel</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_n_e_pixel_wise_multiplication_kernel.xhtml">NEPixelWiseMultiplicationKernel</a> &amp;&amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allow instances of this class to be moved. </p>

</div>
</div>
<a id="ab299ab73ca304f9e10359a54a763f4d3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab299ab73ca304f9e10359a54a763f4d3">&#9670;&nbsp;</a></span>~NEPixelWiseMultiplicationKernel()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classarm__compute_1_1_n_e_pixel_wise_multiplication_kernel.xhtml">NEPixelWiseMultiplicationKernel</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default destructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a423f9a45a52983b4de5e2b347f4369c7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a423f9a45a52983b4de5e2b347f4369c7">&#9670;&nbsp;</a></span>border_size()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a> border_size </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The size of the border for that kernel. </p>
<dl class="section return"><dt>Returns</dt><dd>The width in number of elements of the border. </dd></dl>

<p>Reimplemented from <a class="el" href="classarm__compute_1_1_i_kernel.xhtml#a4b3a97ba5dded504a2f2261c078493dd">IKernel</a>.</p>

<p class="definition">Definition at line <a class="el" href="_n_e_pixel_wise_multiplication_kernel_8cpp_source.xhtml#l00809">809</a> of file <a class="el" href="_n_e_pixel_wise_multiplication_kernel_8cpp_source.xhtml">NEPixelWiseMultiplicationKernel.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;{</div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> replicateSize = _output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(0) - std::min(_input1-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(0), _input2-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(0));</div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> border        = std::min&lt;unsigned int&gt;(<a class="code" href="_c_l_im2_col_kernel_8cpp.xhtml#a4e45c1f5e4280813a78a77dda71d8799">num_elems_processed_per_iteration</a> - 1<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a>, replicateSize);</div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;    <span class="keywordflow">return</span> BorderSize{ 0, border, 0, 0 };</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a178f0d3d87f959e00a743328d95359d2"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">arm_compute::ITensorInfo::dimension</a></div><div class="ttdeci">virtual size_t dimension(size_t index) const =0</div><div class="ttdoc">Return the size of the requested dimension.</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">arm_compute::Channel::U</a></div><div class="ttdoc">Cb/U channel.</div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml_a0e95dc1e53c361348314873b168ae237"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">arm_compute::ITensor::info</a></div><div class="ttdeci">virtual ITensorInfo * info() const =0</div><div class="ttdoc">Interface to be implemented by the child class to return the tensor's metadata.</div></div>
<div class="ttc" id="_c_l_im2_col_kernel_8cpp_xhtml_a4e45c1f5e4280813a78a77dda71d8799"><div class="ttname"><a href="_c_l_im2_col_kernel_8cpp.xhtml#a4e45c1f5e4280813a78a77dda71d8799">num_elems_processed_per_iteration</a></div><div class="ttdeci">unsigned int num_elems_processed_per_iteration</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_im2_col_kernel_8cpp_source.xhtml#l00054">CLIm2ColKernel.cpp:54</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab214c0eb5acd40bde3f8a3fb6c0a6613"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab214c0eb5acd40bde3f8a3fb6c0a6613">&#9670;&nbsp;</a></span>configure()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void configure </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>input2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>scale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a>&#160;</td>
          <td class="paramname"><em>overflow_policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a>&#160;</td>
          <td class="paramname"><em>rounding_policy</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initialise the kernel's input, output and border mode. </p>
<dl class="section note"><dt>Note</dt><dd>For <code>scale</code> equal to 1/255 only round to nearest even (implemented as round half up) is supported. For all other scale values only round to zero (implemented as round towards minus infinity) is supported.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input1</td><td>An input tensor. Data types supported: U8/QASYMM8/QASYMM8_SIGNED/S16/QSYMM16/F16/F32 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input2</td><td>An input tensor. Data types supported: U8, QASYMM8 (only if <code>input1</code> is QASYMM8), QASYMM8_SIGNED (only if <code>input1</code> is QASYMM8_SIGNED), S16, QSYMM16 (only if <code>input1</code> is QSYMM16), F16 (only if <code>input1</code> is F16), F32 (only if <code>input1</code> is F32). </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">output</td><td>Output tensor. Data types supported: U8 (Only if both inputs are U8), QASYMM8 (only if both inputs are QASYMM8), QASYMM8_SIGNED (only if <code>input1</code> is QASYMM8_SIGNED), S16, QSYMM16 (only if both inputs are QSYMM16), F16 (only if <code>input1</code> is F16), F32 (only if both inputs are F32). </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">scale</td><td>Scale to apply after multiplication. Scale must be positive and its value must be either 1/255 or 1/2^n where n is between 0 and 15. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">overflow_policy</td><td>Overflow policy. ConvertPolicy cannot be WRAP if datatype is QASYMM8, QASYMM8_SIGNED or QSYMM16. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rounding_policy</td><td>Rounding policy. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_n_e_pixel_wise_multiplication_kernel_8cpp_source.xhtml#l00581">581</a> of file <a class="el" href="_n_e_pixel_wise_multiplication_kernel_8cpp_source.xhtml">NEPixelWiseMultiplicationKernel.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;{</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a60ad1078faeaf3f59266d69ad937339f">rounding_policy</a>);</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;    <a class="code" href="_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a>(input1, input2, output);</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;    <a class="code" href="_error_8h.xhtml#a938dcd406ce611ef5345ad2531cdb948">ARM_COMPUTE_ERROR_THROW_ON</a>(validate_arguments(input1-&gt;info(), input2-&gt;info(), output-&gt;info(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acec6d8ad52a28972fa74e071c1a63b6a">scale</a>, overflow_policy, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a60ad1078faeaf3f59266d69ad937339f">rounding_policy</a>));</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;    <span class="comment">// Configure kernel window</span></div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;    <span class="keyword">auto</span> win_config = validate_and_configure_window(input1-&gt;info(), input2-&gt;info(), output-&gt;info());</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;    <a class="code" href="_error_8h.xhtml#a938dcd406ce611ef5345ad2531cdb948">ARM_COMPUTE_ERROR_THROW_ON</a>(win_config.first);</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;    _input1                = input1;</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;    _input2                = input2;</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;    _output                = output;</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;    _scale                 = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acec6d8ad52a28972fa74e071c1a63b6a">scale</a>;</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;    _scale_exponent        = 0;</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;    _func_quantized        = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;    _func_int              = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;    _func_float            = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;    _run_optimized_qasymm8 = <span class="keyword">false</span>;</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;    <span class="keywordtype">bool</span> is_scale_255 = <span class="keyword">false</span>;</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;    <span class="comment">// Check and validate scaling factor</span></div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;    <span class="keywordflow">if</span>(std::abs(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acec6d8ad52a28972fa74e071c1a63b6a">scale</a> - scale255_constant) &lt; 0.00001f)</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;    {</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;        is_scale_255 = <span class="keyword">true</span>;</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;    }</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;    {</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;        <span class="keywordtype">int</span> exponent = 0;</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;        std::frexp(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acec6d8ad52a28972fa74e071c1a63b6a">scale</a>, &amp;exponent);</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;        <span class="comment">// Store the positive exponent. We know that we compute 1/2^n</span></div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;        <span class="comment">// Additionally we need to subtract 1 to compensate that frexp used a mantissa of 0.5</span></div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;        _scale_exponent = std::abs(exponent - 1);</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;    }</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dt_input1 = input1-&gt;info()-&gt;data_type();</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dt_input2 = input2-&gt;info()-&gt;data_type();</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dt_output = output-&gt;info()-&gt;data_type();</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span>     is_sat    = (overflow_policy == <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>);</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;    <span class="keywordflow">if</span>(dt_input1 == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a> &amp;&amp; dt_input2 == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>)</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;    {</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;        _run_optimized_qasymm8 = <span class="keyword">true</span>;</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;    }</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(dt_input1 == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">DataType::QASYMM8_SIGNED</a> &amp;&amp; dt_input2 == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">DataType::QASYMM8_SIGNED</a>)</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;    {</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;        _func_quantized = &amp;mul_saturate_QASYMM8_SIGNED_QASYMM8_SIGNED_QASYMM8_SIGNED_n;</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;    }</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(dt_input1 == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">DataType::QSYMM16</a> &amp;&amp; dt_input2 == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">DataType::QSYMM16</a>)</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;    {</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;        _func_quantized = &amp;mul_saturate_QSYMM16_QSYMM16_QSYMM16_n;</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;    }</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a> == dt_input1 &amp;&amp; <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a> == dt_input2 &amp;&amp; <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a> == dt_output)</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;    {</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;        <span class="keywordflow">if</span>(is_scale_255)</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;        {</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;            _func_int = is_sat ? &amp;mul_U8_U8_U8_n&lt;true, true&gt; : &amp;mul_U8_U8_U8_n&lt;true, false&gt;;</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;        }</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;        {</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;            _func_int = is_sat ? &amp;mul_U8_U8_U8_n&lt;false, true&gt; : &amp;mul_U8_U8_U8_n&lt;false, false&gt;;</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;        }</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;    }</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a> == dt_input1 &amp;&amp; <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a> == dt_input2 &amp;&amp; <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a> == dt_output)</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;    {</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;        <span class="keywordflow">if</span>(is_scale_255)</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;        {</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;            _func_int = is_sat ? &amp;mul_S16_S16_S16_n&lt;true, true&gt; : &amp;mul_S16_S16_S16_n&lt;true, false&gt;;</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;        }</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;        {</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;            _func_int = is_sat ? &amp;mul_S16_S16_S16_n&lt;false, true&gt; : &amp;mul_S16_S16_S16_n&lt;false, false&gt;;</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;        }</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;    }</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a> == dt_input1 &amp;&amp; <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a> == dt_input2 &amp;&amp; <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a> == dt_output)</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;    {</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;        <span class="keywordflow">if</span>(is_scale_255)</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;        {</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;            _func_int = is_sat ? &amp;mul_S16_U8_S16_n&lt;true, true&gt; : &amp;mul_S16_U8_S16_n&lt;true, false&gt;;</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;        }</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;        {</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;            _func_int = is_sat ? &amp;mul_S16_U8_S16_n&lt;false, true&gt; : &amp;mul_S16_U8_S16_n&lt;false, false&gt;;</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;        }</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;    }</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a> == dt_input1 &amp;&amp; <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a> == dt_input2 &amp;&amp; <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a> == dt_output)</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;    {</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;        <span class="keywordflow">if</span>(is_scale_255)</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;        {</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;            _func_int = is_sat ? &amp;mul_U8_S16_S16_n&lt;true, true&gt; : &amp;mul_U8_S16_S16_n&lt;true, false&gt;;</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;        }</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;        {</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;            _func_int = is_sat ? &amp;mul_U8_S16_S16_n&lt;false, true&gt; : &amp;mul_U8_S16_S16_n&lt;false, false&gt;;</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;        }</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;    }</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a> == dt_input1 &amp;&amp; <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a> == dt_input2 &amp;&amp; <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a> == dt_output)</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;    {</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;        <span class="keywordflow">if</span>(is_scale_255)</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;        {</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;            _func_int = is_sat ? &amp;mul_U8_U8_S16_n&lt;true, true&gt; : &amp;mul_U8_U8_S16_n&lt;true, false&gt;;</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;        }</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;        {</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;            _func_int = is_sat ? &amp;mul_U8_U8_S16_n&lt;false, true&gt; : &amp;mul_U8_U8_S16_n&lt;false, false&gt;;</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;        }</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;    }</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">DataType::F16</a> == dt_input1 &amp;&amp; <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">DataType::F16</a> == dt_input2 &amp;&amp; <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">DataType::F16</a> == dt_output)</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;    {</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;        _func_float = &amp;mul_F16_F16_F16_n;</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;        _func_int   = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;    }</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a> == dt_input1 &amp;&amp; <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a> == dt_input2 &amp;&amp; <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a> == dt_output)</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;    {</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;        _func_float = &amp;mul_F32_F32_F32_n;</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;        _func_int   = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;    }</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;    {</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;        <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;You called with the wrong img formats&quot;</span>);</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;    }</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;    INEKernel::configure(win_config.second);</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;}</div><div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">arm_compute::DataType::QSYMM16</a></div><div class="ttdoc">quantized, symmetric fixed-point 16-bit number</div></div>
<div class="ttc" id="_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00352">Error.h:352</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::Format::U8</a></div><div class="ttdoc">1 channel, 1 U8 per channel</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::Format::F32</a></div><div class="ttdoc">1 channel, 1 F32 per channel</div></div>
<div class="ttc" id="_error_8h_xhtml_a938dcd406ce611ef5345ad2531cdb948"><div class="ttname"><a href="_error_8h.xhtml#a938dcd406ce611ef5345ad2531cdb948">ARM_COMPUTE_ERROR_THROW_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_THROW_ON(status)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00455">Error.h:455</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">arm_compute::Format::F16</a></div><div class="ttdoc">1 channel, 1 F16 per channel</div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">arm_compute::DataType::QASYMM8</a></div><div class="ttdoc">quantized, asymmetric fixed-point 8-bit number unsigned</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">arm_compute::Format::S16</a></div><div class="ttdoc">1 channel, 1 S16 per channel</div></div>
<div class="ttc" id="_validate_8h_xhtml_a921b705e9e3e0fe928928447869e62a5"><div class="ttname"><a href="_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_NULLPTR(...)</div><div class="ttdef"><b>Definition:</b> <a href="_validate_8h_source.xhtml#l00161">Validate.h:161</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_acec6d8ad52a28972fa74e071c1a63b6a"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#acec6d8ad52a28972fa74e071c1a63b6a">arm_compute::test::validation::scale</a></div><div class="ttdeci">scale</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_pixel_wise_multiplication_8cpp_source.xhtml#l00375">PixelWiseMultiplication.cpp:375</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a60ad1078faeaf3f59266d69ad937339f"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a60ad1078faeaf3f59266d69ad937339f">arm_compute::test::validation::rounding_policy</a></div><div class="ttdeci">rounding_policy</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_pixel_wise_multiplication_8cpp_source.xhtml#l00375">PixelWiseMultiplication.cpp:375</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">arm_compute::DataType::QASYMM8_SIGNED</a></div><div class="ttdoc">quantized, asymmetric fixed-point 8-bit number signed</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86"><div class="ttname"><a href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">arm_compute::ConvertPolicy::SATURATE</a></div><div class="ttdoc">Saturate.</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">arm_compute::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdoc">Available data types.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00075">Types.h:75</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_validate_8h_source.xhtml#l00161">ARM_COMPUTE_ERROR_ON_NULLPTR</a>, <a class="el" href="_error_8h_source.xhtml#l00455">ARM_COMPUTE_ERROR_THROW_ON</a>, <a class="el" href="_error_8h_source.xhtml#l00152">ARM_COMPUTE_UNUSED</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_n_e_o_n_2_pixel_wise_multiplication_8cpp_source.xhtml#l00375">arm_compute::test::validation::rounding_policy</a>, and <a class="el" href="_n_e_o_n_2_pixel_wise_multiplication_8cpp_source.xhtml#l00375">arm_compute::test::validation::scale</a>.</p>

<p class="reference">Referenced by <a class="el" href="_n_e_normalization_layer_8cpp_source.xhtml#l00040">NENormalizationLayer::configure()</a>, and <a class="el" href="_n_e_l_s_t_m_layer_8cpp_source.xhtml#l00056">NELSTMLayer::configure()</a>.</p>

</div>
</div>
<a id="ab5656bb5b6334bdbe6e606c715872828"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab5656bb5b6334bdbe6e606c715872828">&#9670;&nbsp;</a></span>name()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const char* name </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Name of the kernel. </p>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> name </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_c_p_p_kernel.xhtml#a1a30ad8f276a2310571c36239554831a">ICPPKernel</a>.</p>

<p class="definition">Definition at line <a class="el" href="_n_e_pixel_wise_multiplication_kernel_8h_source.xhtml#l00038">38</a> of file <a class="el" href="_n_e_pixel_wise_multiplication_kernel_8h_source.xhtml">NEPixelWiseMultiplicationKernel.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    {</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        <span class="keywordflow">return</span> <span class="stringliteral">&quot;NEPixelWiseMultiplicationKernel&quot;</span>;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a6685c2ffbda12dbf1e4706b85c688e19"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6685c2ffbda12dbf1e4706b85c688e19">&#9670;&nbsp;</a></span>operator=() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_n_e_pixel_wise_multiplication_kernel.xhtml">NEPixelWiseMultiplicationKernel</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_n_e_pixel_wise_multiplication_kernel.xhtml">NEPixelWiseMultiplicationKernel</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prevent instances of this class from being copied (As this class contains pointers) </p>

</div>
</div>
<a id="aaa5c44de29693435660b5c849c62e991"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaa5c44de29693435660b5c849c62e991">&#9670;&nbsp;</a></span>operator=() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_n_e_pixel_wise_multiplication_kernel.xhtml">NEPixelWiseMultiplicationKernel</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_n_e_pixel_wise_multiplication_kernel.xhtml">NEPixelWiseMultiplicationKernel</a> &amp;&amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allow instances of this class to be moved. </p>

</div>
</div>
<a id="a112b35dd205c62ea6ed1447ef226da82"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a112b35dd205c62ea6ed1447ef226da82">&#9670;&nbsp;</a></span>run()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void run </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Execute the kernel on the passed window. </p>
<dl class="section warning"><dt>Warning</dt><dd>If <a class="el" href="classarm__compute_1_1_i_kernel.xhtml#a0466ee6ce6552c87595f0e88e73eeb1b" title="Indicates whether or not the kernel is parallelisable.">is_parallelisable()</a> returns false then the passed window must be equal to <a class="el" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6" title="The maximum window the kernel can be executed on.">window()</a></dd></dl>
<dl class="section note"><dt>Note</dt><dd>The window has to be a region within the window returned by the <a class="el" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6" title="The maximum window the kernel can be executed on.">window()</a> method</dd>
<dd>
The width of the window has to be a multiple of <a class="el" href="_c_l_im2_col_kernel_8cpp.xhtml#a4e45c1f5e4280813a78a77dda71d8799">num_elems_processed_per_iteration()</a>.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">window</td><td>Region on which to execute the kernel. (Must be a region of the window returned by <a class="el" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6" title="The maximum window the kernel can be executed on.">window()</a>) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td>Info about executing thread and CPU. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_c_p_p_kernel.xhtml#af814ff5e96f40f1cccf809b2b4ee19ef">ICPPKernel</a>.</p>

<p class="definition">Definition at line <a class="el" href="_n_e_pixel_wise_multiplication_kernel_8cpp_source.xhtml#l00719">719</a> of file <a class="el" href="_n_e_pixel_wise_multiplication_kernel_8cpp_source.xhtml">NEPixelWiseMultiplicationKernel.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;{</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>);</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;    <a class="code" href="_validate_8h.xhtml#a1b35b0d258183cf9ef36adf684d0b88c">ARM_COMPUTE_ERROR_ON_UNCONFIGURED_KERNEL</a>(<span class="keyword">this</span>);</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;    <a class="code" href="_validate_8h.xhtml#a6eb9ce82815fe429250189da7592ba75">ARM_COMPUTE_ERROR_ON_INVALID_SUBWINDOW</a>(<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">INEKernel::window</a>(), <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>);</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;    <span class="keyword">const</span> TensorShape &amp;in_shape1 = _input1-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>();</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;    <span class="keyword">const</span> TensorShape &amp;in_shape2 = _input2-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>();</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;    <span class="keyword">const</span> TensorShape &amp;out_shape = _output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>();</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;    <span class="keywordtype">bool</span> can_collapse = <span class="keyword">true</span>;</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;    <span class="keywordflow">if</span>(std::min(in_shape1.total_size(), in_shape2.total_size()) &gt; 1)</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;    {</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;        can_collapse = (std::min(in_shape1.num_dimensions(), in_shape2.num_dimensions()) &gt; <a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>);</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> d = <a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>; can_collapse &amp;&amp; (d &lt; out_shape.num_dimensions()); ++d)</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;        {</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;            can_collapse = (in_shape1[d] == in_shape2[d]);</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;        }</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;    }</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;    <span class="keywordtype">bool</span>   has_collapsed = <span class="keyword">false</span>;</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;    Window collapsed     = can_collapse ? <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>.<a class="code" href="classarm__compute_1_1_window.xhtml#a663ce71e1992366180fcb85b0a874e2f">collapse_if_possible</a>(<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">INEKernel::window</a>(), <a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>, &amp;has_collapsed) : <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>;</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;    <span class="keyword">const</span> TensorShape &amp;in_shape1_collapsed = has_collapsed ? in_shape1.collapsed_from(<a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>) : in_shape1;</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;    <span class="keyword">const</span> TensorShape &amp;in_shape2_collapsed = has_collapsed ? in_shape2.collapsed_from(<a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>) : in_shape2;</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;    Window <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a548131b3d37da47a2e9d32111c88dfe1">slice</a>        = collapsed.first_slice_window_3D();</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;    Window slice_input1 = <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a548131b3d37da47a2e9d32111c88dfe1">slice</a>.broadcast_if_dimension_le_one(in_shape1_collapsed);</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;    Window slice_input2 = <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a548131b3d37da47a2e9d32111c88dfe1">slice</a>.broadcast_if_dimension_le_one(in_shape2_collapsed);</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;    Iterator input1(_input1, slice_input1);</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;    Iterator input2(_input2, slice_input2);</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;    Iterator output(_output, <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a548131b3d37da47a2e9d32111c88dfe1">slice</a>);</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute.xhtml#a0bee325b210f81bb89fe1f9e15badf9c">is_data_type_quantized</a>(_input1-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>()))</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;    {</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;        <span class="keywordflow">if</span>(_run_optimized_qasymm8)</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;        {</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;            <span class="keyword">const</span> int32x4_t   input1_voffset = vdupq_n_s32(_input1-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">quantization_info</a>().<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">uniform</a>().<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a97bd6c077f3c7769f575b82988b9b668">offset</a>);</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;            <span class="keyword">const</span> float32x4_t input1_vscale  = vdupq_n_f32(_input1-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">quantization_info</a>().<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">uniform</a>().<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a>);</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;            <span class="keyword">const</span> int32x4_t   input2_voffset = vdupq_n_s32(_input2-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">quantization_info</a>().<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">uniform</a>().<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a97bd6c077f3c7769f575b82988b9b668">offset</a>);</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;            <span class="keyword">const</span> float32x4_t input2_vscale  = vdupq_n_f32(_input2-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">quantization_info</a>().<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">uniform</a>().<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a>);</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;            <span class="keyword">const</span> float32x4_t output_voffset = vdupq_n_f32(static_cast&lt;float&gt;(_output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">quantization_info</a>().<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">uniform</a>().<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a97bd6c077f3c7769f575b82988b9b668">offset</a>));</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">float</span>       output_scale   = _output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">quantization_info</a>().<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">uniform</a>().<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a>;</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;            <span class="keyword">const</span> float32x4_t vinvscale      = vdupq_n_f32(1.f / (output_scale / _scale));</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;            <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(collapsed, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;            {</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;                mul_saturate_QASYMM8_QASYMM8_QASYMM8_n_opt(input1.ptr(), input2.ptr(), output.ptr(),</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;                                                           input1_vscale, input1_voffset, input2_vscale, input2_voffset, output_voffset, vinvscale);</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;                <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(collapsed.slide_window_slice_3D(slice_input1));</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;                <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(collapsed.slide_window_slice_3D(slice_input2));</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;            },</div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;            input1, input2, output);</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;        }</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;        {</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;            <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(collapsed, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;            {</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;                (*_func_quantized)(input1.ptr(), input2.ptr(), output.ptr(), _scale,</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;                                   _input1-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">quantization_info</a>().<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">uniform</a>(), _input2-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">quantization_info</a>().<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">uniform</a>(), _output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">quantization_info</a>().<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">uniform</a>());</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;                <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(collapsed.slide_window_slice_3D(slice_input1));</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;                <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(collapsed.slide_window_slice_3D(slice_input2));</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;            },</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;            input1, input2, output);</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;        }</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;    }</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(_func_int != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;    {</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(collapsed, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;        {</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;            (*_func_int)(input1.ptr(), input2.ptr(), output.ptr(), _scale_exponent);</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;            <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(collapsed.slide_window_slice_3D(slice_input1));</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;            <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(collapsed.slide_window_slice_3D(slice_input2));</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;        },</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;        input1, input2, output);</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;    }</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;    {</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(_func_float == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(collapsed, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;        {</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;            (*_func_float)(input1.ptr(), input2.ptr(), output.ptr(), _scale);</div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;            <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(collapsed.slide_window_slice_3D(slice_input1));</div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;            <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(collapsed.slide_window_slice_3D(slice_input2));</div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;        },</div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;        input1, input2, output);</div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;    }</div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;}</div><div class="ttc" id="namespacearm__compute_xhtml_a0bee325b210f81bb89fe1f9e15badf9c"><div class="ttname"><a href="namespacearm__compute.xhtml#a0bee325b210f81bb89fe1f9e15badf9c">arm_compute::is_data_type_quantized</a></div><div class="ttdeci">bool is_data_type_quantized(DataType dt)</div><div class="ttdoc">Check if a given data type is of quantized type.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_utils_8h_source.xhtml#l01117">Utils.h:1117</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_kernel_xhtml_ad34a46f53686c12a5c5e717cc9617fb6"><div class="ttname"><a href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">arm_compute::IKernel::window</a></div><div class="ttdeci">const Window &amp; window() const</div><div class="ttdoc">The maximum window the kernel can be executed on.</div><div class="ttdef"><b>Definition:</b> <a href="_i_kernel_8cpp_source.xhtml#l00028">IKernel.cpp:28</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a7cfb31af63202568efef5214acfbf3ba"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">arm_compute::ITensorInfo::data_type</a></div><div class="ttdeci">virtual DataType data_type() const =0</div><div class="ttdoc">Data type used for each element of the tensor.</div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="structarm__compute_1_1_uniform_quantization_info_xhtml_a1d28dec57cce925ad92342891bd71e7c"><div class="ttname"><a href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">arm_compute::UniformQuantizationInfo::scale</a></div><div class="ttdeci">float scale</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00064">QuantizationInfo.h:64</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_a663ce71e1992366180fcb85b0a874e2f"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a663ce71e1992366180fcb85b0a874e2f">arm_compute::Window::collapse_if_possible</a></div><div class="ttdeci">Window collapse_if_possible(const Window &amp;full_window, size_t first, size_t last, bool *has_collapsed=nullptr) const</div><div class="ttdoc">Collapse the dimensions between first and last if possible.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00068">Window.inl:68</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a7c66505457d00ece3aa4b34cab80757d"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">arm_compute::ITensorInfo::tensor_shape</a></div><div class="ttdeci">virtual const TensorShape &amp; tensor_shape() const =0</div><div class="ttdoc">Size for each dimension of the tensor.</div></div>
<div class="ttc" id="classarm__compute_1_1_quantization_info_xhtml_a706fc156bcd4c45441bcaad05884b57d"><div class="ttname"><a href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">arm_compute::QuantizationInfo::uniform</a></div><div class="ttdeci">UniformQuantizationInfo uniform() const</div><div class="ttdoc">Return per layer quantization info.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00148">QuantizationInfo.h:148</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml_a0e95dc1e53c361348314873b168ae237"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">arm_compute::ITensor::info</a></div><div class="ttdeci">virtual ITensorInfo * info() const =0</div><div class="ttdoc">Interface to be implemented by the child class to return the tensor's metadata.</div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a3f3e1a3200223e6a304a533b1016e749"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">arm_compute::ITensorInfo::quantization_info</a></div><div class="ttdeci">virtual QuantizationInfo quantization_info() const =0</div><div class="ttdoc">Get the quantization settings (scale and offset) of the tensor.</div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_a893d17b56b9abc4423ce26e9a24ac5dc"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">arm_compute::Window::DimZ</a></div><div class="ttdeci">static constexpr size_t DimZ</div><div class="ttdoc">Alias for dimension 2 also known as Z dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00047">Window.h:47</a></div></div>
<div class="ttc" id="structarm__compute_1_1_uniform_quantization_info_xhtml_a97bd6c077f3c7769f575b82988b9b668"><div class="ttname"><a href="structarm__compute_1_1_uniform_quantization_info.xhtml#a97bd6c077f3c7769f575b82988b9b668">arm_compute::UniformQuantizationInfo::offset</a></div><div class="ttdeci">int32_t offset</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00065">QuantizationInfo.h:65</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5002bf7ec46d52971f9526e94172cfee"><div class="ttname"><a href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;... iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00123">Helpers.inl:123</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a4f4125dba5283887b34f889b1c615c0c"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">arm_compute::test::validation::info</a></div><div class="ttdeci">info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00182">ConvolutionLayer.cpp:182</a></div></div>
<div class="ttc" id="_validate_8h_xhtml_a6eb9ce82815fe429250189da7592ba75"><div class="ttname"><a href="_validate_8h.xhtml#a6eb9ce82815fe429250189da7592ba75">ARM_COMPUTE_ERROR_ON_INVALID_SUBWINDOW</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_INVALID_SUBWINDOW(f, s)</div><div class="ttdef"><b>Definition:</b> <a href="_validate_8h_source.xhtml#l00205">Validate.h:205</a></div></div>
<div class="ttc" id="_validate_8h_xhtml_a1b35b0d258183cf9ef36adf684d0b88c"><div class="ttname"><a href="_validate_8h.xhtml#a1b35b0d258183cf9ef36adf684d0b88c">ARM_COMPUTE_ERROR_ON_UNCONFIGURED_KERNEL</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_UNCONFIGURED_KERNEL(k)</div><div class="ttdef"><b>Definition:</b> <a href="_validate_8h_source.xhtml#l00941">Validate.h:941</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_a548131b3d37da47a2e9d32111c88dfe1"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a548131b3d37da47a2e9d32111c88dfe1">arm_compute::test::validation::reference::slice</a></div><div class="ttdeci">SimpleTensor&lt; T &gt; slice(const SimpleTensor&lt; T &gt; &amp;src, Coordinates starts, Coordinates ends)</div><div class="ttdef"><b>Definition:</b> <a href="_slice_operations_8cpp_source.xhtml#l00038">SliceOperations.cpp:38</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_validate_8h_source.xhtml#l00205">ARM_COMPUTE_ERROR_ON_INVALID_SUBWINDOW</a>, <a class="el" href="_validate_8h_source.xhtml#l00941">ARM_COMPUTE_ERROR_ON_UNCONFIGURED_KERNEL</a>, <a class="el" href="_error_8h_source.xhtml#l00152">ARM_COMPUTE_UNUSED</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00182">arm_compute::test::validation::info</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, and <a class="el" href="_i_kernel_8cpp_source.xhtml#l00028">IKernel::window()</a>.</p>

</div>
</div>
<a id="a705182fc799dce8ee017368eea0ca539"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a705182fc799dce8ee017368eea0ca539">&#9670;&nbsp;</a></span>validate()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> validate </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>input2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>scale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a>&#160;</td>
          <td class="paramname"><em>overflow_policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a>&#160;</td>
          <td class="paramname"><em>rounding_policy</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Static function to check if given info will lead to a valid configuration of <a class="el" href="classarm__compute_1_1_n_e_pixel_wise_multiplication_kernel.xhtml">NEPixelWiseMultiplicationKernel</a>. </p>
<dl class="section note"><dt>Note</dt><dd>For <code>scale</code> equal to 1/255 only round to nearest even (implemented as round half up) is supported. For all other scale values only round to zero (implemented as round towards minus infinity) is supported.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input1</td><td>An input tensor info. Data types supported: U8/QASYMM8/QASYMM8_SIGNED/QSYMM16/S16/F16/F32 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input2</td><td>An input tensor info. Data types supported: U8, QASYMM8 (only if <code>input1</code> is QASYMM8), QASYMM8_SIGNED (only if <code>input1</code> is QASYMM8_SIGNED), S16, QSYMM16 (only if <code>input1</code> is QSYMM16), F16 (only if <code>input1</code> is F16), F32 (only if <code>input1</code> is F32). </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output</td><td>Output tensor info. Data types supported: U8 (Only if both inputs are U8), QASYMM8 (only if both inputs are QASYMM8), QASYMM8_SIGNED (only if <code>input1</code> is QASYMM8_SIGNED) , S16, QSYMM16 (only if both inputs are QSYMM16), F16 (only if <code>input1</code> is F16), F32 (only if both inputs are F32). </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">scale</td><td>Scale to apply after multiplication. Scale must be positive and its value must be either 1/255 or 1/2^n where n is between 0 and 15. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">overflow_policy</td><td>Overflow policy. ConvertPolicy cannot be WRAP if datatype is QASYMM8, QASYMM8_SIGNED or QSYMM16. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rounding_policy</td><td>Rounding policy.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a status </dd></dl>

<p class="definition">Definition at line <a class="el" href="_n_e_pixel_wise_multiplication_kernel_8cpp_source.xhtml#l00709">709</a> of file <a class="el" href="_n_e_pixel_wise_multiplication_kernel_8cpp_source.xhtml">NEPixelWiseMultiplicationKernel.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;{</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;    <a class="code" href="_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a>(input1, input2, output);</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(validate_arguments(input1, input2, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acec6d8ad52a28972fa74e071c1a63b6a">scale</a>, overflow_policy, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a60ad1078faeaf3f59266d69ad937339f">rounding_policy</a>));</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(validate_and_configure_window(input1-&gt;clone().get(), input2-&gt;clone().get(), output-&gt;clone().get()).first);</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;    <span class="keywordflow">return</span> Status{};</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a8a1e1c105f0bdaf37db408c7cfcb77a4"><div class="ttname"><a href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ON_ERROR(status)</div><div class="ttdoc">Checks if a status contains an error and returns it.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00204">Error.h:204</a></div></div>
<div class="ttc" id="_validate_8h_xhtml_a921b705e9e3e0fe928928447869e62a5"><div class="ttname"><a href="_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_NULLPTR(...)</div><div class="ttdef"><b>Definition:</b> <a href="_validate_8h_source.xhtml#l00161">Validate.h:161</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_acec6d8ad52a28972fa74e071c1a63b6a"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#acec6d8ad52a28972fa74e071c1a63b6a">arm_compute::test::validation::scale</a></div><div class="ttdeci">scale</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_pixel_wise_multiplication_8cpp_source.xhtml#l00375">PixelWiseMultiplication.cpp:375</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a60ad1078faeaf3f59266d69ad937339f"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a60ad1078faeaf3f59266d69ad937339f">arm_compute::test::validation::rounding_policy</a></div><div class="ttdeci">rounding_policy</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_pixel_wise_multiplication_8cpp_source.xhtml#l00375">PixelWiseMultiplication.cpp:375</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_validate_8h_source.xhtml#l00161">ARM_COMPUTE_ERROR_ON_NULLPTR</a>, <a class="el" href="_error_8h_source.xhtml#l00204">ARM_COMPUTE_RETURN_ON_ERROR</a>, <a class="el" href="classarm__compute_1_1misc_1_1_i_cloneable.xhtml#a4d10e5012a872e7f78f2b539b673049d">ICloneable&lt; T &gt;::clone()</a>, <a class="el" href="_n_e_o_n_2_pixel_wise_multiplication_8cpp_source.xhtml#l00375">arm_compute::test::validation::rounding_policy</a>, and <a class="el" href="_n_e_o_n_2_pixel_wise_multiplication_8cpp_source.xhtml#l00375">arm_compute::test::validation::scale</a>.</p>

<p class="reference">Referenced by <a class="el" href="_n_e_pixel_wise_multiplication_8cpp_source.xhtml#l00050">NEPixelWiseMultiplication::validate()</a>, <a class="el" href="_n_e_normalization_layer_8cpp_source.xhtml#l00059">NENormalizationLayer::validate()</a>, and <a class="el" href="_n_e_l_s_t_m_layer_8cpp_source.xhtml#l00381">NELSTMLayer::validate()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>arm_compute/core/NEON/kernels/<a class="el" href="_n_e_pixel_wise_multiplication_kernel_8h_source.xhtml">NEPixelWiseMultiplicationKernel.h</a></li>
<li>src/core/NEON/kernels/<a class="el" href="_n_e_pixel_wise_multiplication_kernel_8cpp_source.xhtml">NEPixelWiseMultiplicationKernel.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1_n_e_pixel_wise_multiplication_kernel.xhtml">NEPixelWiseMultiplicationKernel</a></li>
    <li class="footer">Generated on Thu Mar 5 2020 16:07:16 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
