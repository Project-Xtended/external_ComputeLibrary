<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/runtime/NEON/functions/NEHOGMultiDetection.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.02.1</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('_n_e_h_o_g_multi_detection_8cpp_source.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">NEHOGMultiDetection.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_n_e_h_o_g_multi_detection_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2016-2019 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_n_e_h_o_g_multi_detection_8h.xhtml">arm_compute/runtime/NEON/functions/NEHOGMultiDetection.h</a>&quot;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_error_8h.xhtml">arm_compute/core/Error.h</a>&quot;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_tensor_info_8h.xhtml">arm_compute/core/TensorInfo.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_validate_8h.xhtml">arm_compute/core/Validate.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_n_e_scheduler_8h.xhtml">arm_compute/runtime/NEON/NEScheduler.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="runtime_2_tensor_8h.xhtml">arm_compute/runtime/Tensor.h</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_toolchain_support_8h.xhtml">support/ToolchainSupport.h</a>&quot;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a>;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_n_e_h_o_g_multi_detection.xhtml#ab89e2f74cd1d706e49bfe182c2923789">   35</a></span>&#160;<a class="code" href="classarm__compute_1_1_n_e_h_o_g_multi_detection.xhtml#ab89e2f74cd1d706e49bfe182c2923789">NEHOGMultiDetection::NEHOGMultiDetection</a>(std::shared_ptr&lt;IMemoryManager&gt; memory_manager) <span class="comment">// NOLINT</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    : _memory_group(std::move(memory_manager)),</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;      _gradient_kernel(),</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;      _orient_bin_kernel(),</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;      _block_norm_kernel(),</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;      _hog_detect_kernel(),</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;      _non_maxima_kernel(),</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;      _hog_space(),</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;      _hog_norm_space(),</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;      _detection_windows(),</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;      _mag(),</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;      _phase(),</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;      _non_maxima_suppression(false),</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;      _num_orient_bin_kernel(0),</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;      _num_block_norm_kernel(0),</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;      _num_hog_detect_kernel(0)</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;{</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;}</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_n_e_h_o_g_multi_detection.xhtml#a8fa7fa549af77189982f584036c14271">   54</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_n_e_h_o_g_multi_detection.xhtml#a8fa7fa549af77189982f584036c14271">NEHOGMultiDetection::configure</a>(<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_multi_h_o_g.xhtml">IMultiHOG</a> *multi_hog, <a class="code" href="classarm__compute_1_1_i_array.xhtml">IDetectionWindowArray</a> *detection_windows, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_array.xhtml">ISize2DArray</a> *detection_window_strides, <a class="code" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5471e46933e7a9c4709972d91fc4ea65">border_mode</a>,</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;                                    uint8_t constant_border_value, <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6cae310822a46019ba25a00ddb0f7e62">threshold</a>, <span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a60e89e48713565425943913adec65294">non_maxima_suppression</a>, <span class="keywordtype">float</span> min_distance)</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;{</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <a class="code" href="_validate_8h.xhtml#aadf5c9cff86327b96d88d04649d9715e">ARM_COMPUTE_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <a class="code" href="_validate_8h.xhtml#abced8d9603a5927ebad9de2528f48962">ARM_COMPUTE_ERROR_ON_INVALID_MULTI_HOG</a>(multi_hog);</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<span class="keyword">nullptr</span> == detection_windows);</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(detection_window_strides-&gt;<a class="code" href="classarm__compute_1_1_i_array.xhtml#aac8e28a698cd201286d75eb3f5ad3e1c">num_values</a>() != multi_hog-&gt;<a class="code" href="classarm__compute_1_1_i_multi_h_o_g.xhtml#a36ab43f5c3606001dcd2468b955f3e02">num_models</a>());</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span>       width      = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;dimension(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>);</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span>       height     = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;dimension(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>);</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape_img  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape();</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span>       num_models = multi_hog-&gt;<a class="code" href="classarm__compute_1_1_i_multi_h_o_g.xhtml#a36ab43f5c3606001dcd2468b955f3e02">num_models</a>();</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#af00a42ecad444bbda75cde1b64bd7e72">PhaseType</a>          phase_type = multi_hog-&gt;<a class="code" href="classarm__compute_1_1_i_multi_h_o_g.xhtml#a75e828c2dc5a300d224761a410c0925f">model</a>(0)-&gt;<a class="code" href="classarm__compute_1_1_i_h_o_g.xhtml#a4e9b5d4ab15fd9009b463861c1a19dbd">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_h_o_g_info.xhtml#a039b8ebcdd462041d3988e6d2c145323">phase_type</a>();</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keywordtype">size_t</span> prev_num_bins     = multi_hog-&gt;<a class="code" href="classarm__compute_1_1_i_multi_h_o_g.xhtml#a75e828c2dc5a300d224761a410c0925f">model</a>(0)-&gt;<a class="code" href="classarm__compute_1_1_i_h_o_g.xhtml#a4e9b5d4ab15fd9009b463861c1a19dbd">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_h_o_g_info.xhtml#ad96530ddba514601d376f991b568b346">num_bins</a>();</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> prev_cell_size    = multi_hog-&gt;<a class="code" href="classarm__compute_1_1_i_multi_h_o_g.xhtml#a75e828c2dc5a300d224761a410c0925f">model</a>(0)-&gt;<a class="code" href="classarm__compute_1_1_i_h_o_g.xhtml#a4e9b5d4ab15fd9009b463861c1a19dbd">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_h_o_g_info.xhtml#aaefa291ad3cc3e3210c8b8ef2ffde476">cell_size</a>();</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> prev_block_size   = multi_hog-&gt;<a class="code" href="classarm__compute_1_1_i_multi_h_o_g.xhtml#a75e828c2dc5a300d224761a410c0925f">model</a>(0)-&gt;<a class="code" href="classarm__compute_1_1_i_h_o_g.xhtml#a4e9b5d4ab15fd9009b463861c1a19dbd">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_h_o_g_info.xhtml#ae561964ccc0e0a5750676b9c7dd7cd44">block_size</a>();</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> prev_block_stride = multi_hog-&gt;<a class="code" href="classarm__compute_1_1_i_multi_h_o_g.xhtml#a75e828c2dc5a300d224761a410c0925f">model</a>(0)-&gt;<a class="code" href="classarm__compute_1_1_i_h_o_g.xhtml#a4e9b5d4ab15fd9009b463861c1a19dbd">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_h_o_g_info.xhtml#a207391d3ac69d9a0839104f784f888fd">block_stride</a>();</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="comment">/* Check if NEHOGOrientationBinningKernel and NEHOGBlockNormalizationKernel kernels can be skipped for a specific HOG data-object</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment">     * 1) NEHOGOrientationBinningKernel and NEHOGBlockNormalizationKernel are skipped if the cell size and the number of bins don&#39;t change.</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment">     *        Since &quot;multi_hog&quot; is sorted,it is enough to check the HOG descriptors at level &quot;ith&quot; and level &quot;(i-1)th</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment">     * 2) NEHOGBlockNormalizationKernel is skipped if the cell size, the number of bins and block size do not change.</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment">     *         Since &quot;multi_hog&quot; is sorted,it is enough to check the HOG descriptors at level &quot;ith&quot; and level &quot;(i-1)th</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment">     * @note Since the orientation binning and block normalization kernels can be skipped, we need to keep track of the input to process for each kernel</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment">     *       with &quot;input_orient_bin&quot;, &quot;input_hog_detect&quot; and &quot;input_block_norm&quot;</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    std::vector&lt;size_t&gt; input_orient_bin;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    std::vector&lt;size_t&gt; input_hog_detect;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    std::vector&lt;std::pair&lt;size_t, size_t&gt;&gt; input_block_norm;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    input_orient_bin.push_back(0);</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    input_hog_detect.push_back(0);</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    input_block_norm.emplace_back(0, 0);</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i = 1; i &lt; num_models; ++i)</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    {</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        <span class="keywordtype">size_t</span> cur_num_bins     = multi_hog-&gt;<a class="code" href="classarm__compute_1_1_i_multi_h_o_g.xhtml#a75e828c2dc5a300d224761a410c0925f">model</a>(i)-&gt;<a class="code" href="classarm__compute_1_1_i_h_o_g.xhtml#a4e9b5d4ab15fd9009b463861c1a19dbd">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_h_o_g_info.xhtml#ad96530ddba514601d376f991b568b346">num_bins</a>();</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> cur_cell_size    = multi_hog-&gt;<a class="code" href="classarm__compute_1_1_i_multi_h_o_g.xhtml#a75e828c2dc5a300d224761a410c0925f">model</a>(i)-&gt;<a class="code" href="classarm__compute_1_1_i_h_o_g.xhtml#a4e9b5d4ab15fd9009b463861c1a19dbd">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_h_o_g_info.xhtml#aaefa291ad3cc3e3210c8b8ef2ffde476">cell_size</a>();</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> cur_block_size   = multi_hog-&gt;<a class="code" href="classarm__compute_1_1_i_multi_h_o_g.xhtml#a75e828c2dc5a300d224761a410c0925f">model</a>(i)-&gt;<a class="code" href="classarm__compute_1_1_i_h_o_g.xhtml#a4e9b5d4ab15fd9009b463861c1a19dbd">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_h_o_g_info.xhtml#ae561964ccc0e0a5750676b9c7dd7cd44">block_size</a>();</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> cur_block_stride = multi_hog-&gt;<a class="code" href="classarm__compute_1_1_i_multi_h_o_g.xhtml#a75e828c2dc5a300d224761a410c0925f">model</a>(i)-&gt;<a class="code" href="classarm__compute_1_1_i_h_o_g.xhtml#a4e9b5d4ab15fd9009b463861c1a19dbd">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_h_o_g_info.xhtml#a207391d3ac69d9a0839104f784f888fd">block_stride</a>();</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        <span class="keywordflow">if</span>((cur_num_bins != prev_num_bins) || (cur_cell_size.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02bed8590a9ddf520e58a060059518ec">width</a> != prev_cell_size.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02bed8590a9ddf520e58a060059518ec">width</a>) || (cur_cell_size.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02afeaaf8574e7a78d6b466ff2695052">height</a> != prev_cell_size.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02afeaaf8574e7a78d6b466ff2695052">height</a>))</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        {</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            prev_num_bins     = cur_num_bins;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            prev_cell_size    = cur_cell_size;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            prev_block_size   = cur_block_size;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            prev_block_stride = cur_block_stride;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            <span class="comment">// Compute orientation binning and block normalization kernels. Update input to process</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            input_orient_bin.push_back(i);</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            input_block_norm.emplace_back(i, input_orient_bin.size() - 1);</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        }</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span>((cur_block_size.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02bed8590a9ddf520e58a060059518ec">width</a> != prev_block_size.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02bed8590a9ddf520e58a060059518ec">width</a>) || (cur_block_size.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02afeaaf8574e7a78d6b466ff2695052">height</a> != prev_block_size.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02afeaaf8574e7a78d6b466ff2695052">height</a>) || (cur_block_stride.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02bed8590a9ddf520e58a060059518ec">width</a> != prev_block_stride.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02bed8590a9ddf520e58a060059518ec">width</a>)</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                || (cur_block_stride.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02afeaaf8574e7a78d6b466ff2695052">height</a> != prev_block_stride.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02afeaaf8574e7a78d6b466ff2695052">height</a>))</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        {</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            prev_block_size   = cur_block_size;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            prev_block_stride = cur_block_stride;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            <span class="comment">// Compute block normalization kernel. Update input to process</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            input_block_norm.emplace_back(i, input_orient_bin.size() - 1);</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        }</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        <span class="comment">// Update input to process for hog detector kernel</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        input_hog_detect.push_back(input_block_norm.size() - 1);</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    }</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    _detection_windows      = detection_windows;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    _non_maxima_suppression = <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a60e89e48713565425943913adec65294">non_maxima_suppression</a>;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    _num_orient_bin_kernel  = input_orient_bin.size(); <span class="comment">// Number of NEHOGOrientationBinningKernel kernels to compute</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    _num_block_norm_kernel  = input_block_norm.size(); <span class="comment">// Number of NEHOGBlockNormalizationKernel kernels to compute</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    _num_hog_detect_kernel  = input_hog_detect.size(); <span class="comment">// Number of NEHOGDetector functions to compute</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    _orient_bin_kernel.clear();</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    _block_norm_kernel.clear();</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    _hog_detect_kernel.clear();</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    _hog_space.clear();</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    _hog_norm_space.clear();</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    _orient_bin_kernel.resize(_num_orient_bin_kernel);</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    _block_norm_kernel.resize(_num_block_norm_kernel);</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    _hog_detect_kernel.resize(_num_hog_detect_kernel);</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    _hog_space.resize(_num_orient_bin_kernel);</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    _hog_norm_space.resize(_num_block_norm_kernel);</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    _non_maxima_kernel = <a class="code" href="classarm__compute_1_1_c_p_p_detection_window_non_maxima_suppression_kernel.xhtml">CPPDetectionWindowNonMaximaSuppressionKernel</a>();</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="comment">// Allocate tensors for magnitude and phase</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> info_mag(shape_img, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">Format::S16</a>);</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    _mag.<a class="code" href="classarm__compute_1_1_tensor.xhtml#adbd0cf83a8e1b335a9bf405a8e5019fa">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_allocator.xhtml#a3fc6adad84b23f10d54d5a7b6928f872">init</a>(info_mag);</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> info_phase(shape_img, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>);</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    _phase.<a class="code" href="classarm__compute_1_1_tensor.xhtml#adbd0cf83a8e1b335a9bf405a8e5019fa">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_allocator.xhtml#a3fc6adad84b23f10d54d5a7b6928f872">init</a>(info_phase);</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="comment">// Manage intermediate buffers</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    _memory_group.<a class="code" href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">manage</a>(&amp;_mag);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    _memory_group.<a class="code" href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">manage</a>(&amp;_phase);</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="comment">// Initialise gradient kernel</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    _gradient_kernel.<a class="code" href="classarm__compute_1_1_n_e_h_o_g_gradient.xhtml#ac6ae2d00f75c768927d9529998608aaa">configure</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, &amp;_mag, &amp;_phase, phase_type, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5471e46933e7a9c4709972d91fc4ea65">border_mode</a>, constant_border_value);</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="comment">// Configure NETensor for the HOG space and orientation binning kernel</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i = 0; i &lt; _num_orient_bin_kernel; ++i)</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    {</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">size_t</span> idx_multi_hog = input_orient_bin[i];</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        <span class="comment">// Get the corresponding cell size and number of bins</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;cell     = multi_hog-&gt;<a class="code" href="classarm__compute_1_1_i_multi_h_o_g.xhtml#a75e828c2dc5a300d224761a410c0925f">model</a>(idx_multi_hog)-&gt;<a class="code" href="classarm__compute_1_1_i_h_o_g.xhtml#a4e9b5d4ab15fd9009b463861c1a19dbd">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_h_o_g_info.xhtml#aaefa291ad3cc3e3210c8b8ef2ffde476">cell_size</a>();</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">size_t</span>  num_bins = multi_hog-&gt;<a class="code" href="classarm__compute_1_1_i_multi_h_o_g.xhtml#a75e828c2dc5a300d224761a410c0925f">model</a>(idx_multi_hog)-&gt;<a class="code" href="classarm__compute_1_1_i_h_o_g.xhtml#a4e9b5d4ab15fd9009b463861c1a19dbd">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_h_o_g_info.xhtml#ad96530ddba514601d376f991b568b346">num_bins</a>();</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        <span class="comment">// Calculate number of cells along the x and y directions for the hog_space</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">size_t</span> num_cells_x = width / cell.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02bed8590a9ddf520e58a060059518ec">width</a>;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">size_t</span> num_cells_y = height / cell.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02afeaaf8574e7a78d6b466ff2695052">height</a>;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        <span class="comment">// TensorShape of hog space</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> shape_hog_space = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape();</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        shape_hog_space.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#a9c54fb6cea3557692fe7c00c40bb40ad">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, num_cells_x);</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        shape_hog_space.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#a9c54fb6cea3557692fe7c00c40bb40ad">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, num_cells_y);</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        <span class="comment">// Allocate HOG space</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        <a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> info_space(shape_hog_space, num_bins, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>);</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        _hog_space[i].allocator()-&gt;init(info_space);</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        <span class="comment">// Manage intermediate buffers</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        _memory_group.<a class="code" href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">manage</a>(&amp;_hog_space[i]);</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        <span class="comment">// Initialise orientation binning kernel</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        _orient_bin_kernel[i].configure(&amp;_mag, &amp;_phase, &amp;_hog_space[i], multi_hog-&gt;<a class="code" href="classarm__compute_1_1_i_multi_h_o_g.xhtml#a75e828c2dc5a300d224761a410c0925f">model</a>(idx_multi_hog)-&gt;<a class="code" href="classarm__compute_1_1_i_h_o_g.xhtml#a4e9b5d4ab15fd9009b463861c1a19dbd">info</a>());</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    }</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="comment">// Allocate intermediate tensors</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    _mag.<a class="code" href="classarm__compute_1_1_tensor.xhtml#adbd0cf83a8e1b335a9bf405a8e5019fa">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    _phase.<a class="code" href="classarm__compute_1_1_tensor.xhtml#adbd0cf83a8e1b335a9bf405a8e5019fa">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="comment">// Configure NETensor for the normalized HOG space and block normalization kernel</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i = 0; i &lt; _num_block_norm_kernel; ++i)</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    {</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">size_t</span> idx_multi_hog  = input_block_norm[i].first;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">size_t</span> idx_orient_bin = input_block_norm[i].second;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        <span class="comment">// Allocate normalized HOG space</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        <a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> tensor_info(*(multi_hog-&gt;<a class="code" href="classarm__compute_1_1_i_multi_h_o_g.xhtml#a75e828c2dc5a300d224761a410c0925f">model</a>(idx_multi_hog)-&gt;<a class="code" href="classarm__compute_1_1_i_h_o_g.xhtml#a4e9b5d4ab15fd9009b463861c1a19dbd">info</a>()), width, height);</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        _hog_norm_space[i].allocator()-&gt;init(tensor_info);</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        <span class="comment">// Manage intermediate buffers</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        _memory_group.<a class="code" href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">manage</a>(&amp;_hog_norm_space[i]);</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        <span class="comment">// Initialize block normalization kernel</span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        _block_norm_kernel[i].configure(&amp;_hog_space[idx_orient_bin], &amp;_hog_norm_space[i], multi_hog-&gt;<a class="code" href="classarm__compute_1_1_i_multi_h_o_g.xhtml#a75e828c2dc5a300d224761a410c0925f">model</a>(idx_multi_hog)-&gt;<a class="code" href="classarm__compute_1_1_i_h_o_g.xhtml#a4e9b5d4ab15fd9009b463861c1a19dbd">info</a>());</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    }</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <span class="comment">// Allocate intermediate tensors</span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i = 0; i &lt; _num_orient_bin_kernel; ++i)</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    {</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        _hog_space[i].allocator()-&gt;allocate();</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    }</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <span class="comment">// Configure HOG detector kernel</span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i = 0; i &lt; _num_hog_detect_kernel; ++i)</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    {</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">size_t</span> idx_block_norm = input_hog_detect[i];</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        _hog_detect_kernel[i].configure(&amp;_hog_norm_space[idx_block_norm], multi_hog-&gt;<a class="code" href="classarm__compute_1_1_i_multi_h_o_g.xhtml#a75e828c2dc5a300d224761a410c0925f">model</a>(i), detection_windows, detection_window_strides-&gt;<a class="code" href="classarm__compute_1_1_i_array.xhtml#a9deaea40b2409ee68d354bdb9d3f8443">at</a>(i), <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6cae310822a46019ba25a00ddb0f7e62">threshold</a>, i);</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    }</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <span class="comment">// Configure non maxima suppression kernel</span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    _non_maxima_kernel.<a class="code" href="classarm__compute_1_1_c_p_p_detection_window_non_maxima_suppression_kernel.xhtml#ad56ff9909955d92abeabbe43c1a21bd9">configure</a>(_detection_windows, min_distance);</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <span class="comment">// Allocate intermediate tensors</span></div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i = 0; i &lt; _num_block_norm_kernel; ++i)</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    {</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        _hog_norm_space[i].allocator()-&gt;allocate();</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    }</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;}</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div><div class="line"><a name="l00230"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_n_e_h_o_g_multi_detection.xhtml#ad1717410afd0be936c6213a63c8005fb">  230</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_n_e_h_o_g_multi_detection.xhtml#ad1717410afd0be936c6213a63c8005fb">NEHOGMultiDetection::run</a>()</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;{</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(_detection_windows == <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;Unconfigured function&quot;</span>);</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <a class="code" href="classarm__compute_1_1_memory_group_resource_scope.xhtml">MemoryGroupResourceScope</a> scope_mg(_memory_group);</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <span class="comment">// Reset detection window</span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    _detection_windows-&gt;<a class="code" href="classarm__compute_1_1_i_array.xhtml#ac8bb3912a3ce86b15842e79d0b421204">clear</a>();</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <span class="comment">// Run gradient</span></div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    _gradient_kernel.<a class="code" href="classarm__compute_1_1_n_e_h_o_g_gradient.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <span class="comment">// Run orientation binning kernel</span></div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;kernel : _orient_bin_kernel)</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    {</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        <a class="code" href="classarm__compute_1_1_scheduler.xhtml#a0d63ca713bab377aabcfb63c192b8429">NEScheduler::get</a>().<a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#a4e58f95544bd5ac6559a421671bd9842">schedule</a>(&amp;kernel, <a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>);</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    }</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <span class="comment">// Run block normalization kernel</span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;kernel : _block_norm_kernel)</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    {</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        <a class="code" href="classarm__compute_1_1_scheduler.xhtml#a0d63ca713bab377aabcfb63c192b8429">NEScheduler::get</a>().<a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#a4e58f95544bd5ac6559a421671bd9842">schedule</a>(&amp;kernel, <a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>);</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    }</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="comment">// Run HOG detector kernel</span></div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;kernel : _hog_detect_kernel)</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    {</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        kernel.run();</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    }</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <span class="comment">// Run non-maxima suppression kernel if enabled</span></div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <span class="keywordflow">if</span>(_non_maxima_suppression)</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    {</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        <a class="code" href="classarm__compute_1_1_scheduler.xhtml#a0d63ca713bab377aabcfb63c192b8429">NEScheduler::get</a>().<a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#a4e58f95544bd5ac6559a421671bd9842">schedule</a>(&amp;_non_maxima_kernel, <a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>);</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    }</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;}</div><div class="ttc" id="namespacearm__compute_xhtml_a15a05537a472ee742404821851529327"><div class="ttname"><a href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">arm_compute::BorderMode</a></div><div class="ttdeci">BorderMode</div><div class="ttdoc">Methods available to handle borders.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00261">Types.h:261</a></div></div>
<div class="ttc" id="classarm__compute_1_1_h_o_g_info_xhtml_ad96530ddba514601d376f991b568b346"><div class="ttname"><a href="classarm__compute_1_1_h_o_g_info.xhtml#ad96530ddba514601d376f991b568b346">arm_compute::HOGInfo::num_bins</a></div><div class="ttdeci">size_t num_bins() const</div><div class="ttdoc">The number of histogram bins for each cell.</div><div class="ttdef"><b>Definition:</b> <a href="_h_o_g_info_8cpp_source.xhtml#l00111">HOGInfo.cpp:111</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_array_xhtml_ac8bb3912a3ce86b15842e79d0b421204"><div class="ttname"><a href="classarm__compute_1_1_i_array.xhtml#ac8bb3912a3ce86b15842e79d0b421204">arm_compute::IArray::clear</a></div><div class="ttdeci">void clear()</div><div class="ttdoc">Clear all the points from the array.</div><div class="ttdef"><b>Definition:</b> <a href="_i_array_8h_source.xhtml#l00091">IArray.h:91</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml">arm_compute::TensorShape</a></div><div class="ttdoc">Shape of a tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00039">TensorShape.h:39</a></div></div>
<div class="ttc" id="_toolchain_support_8h_xhtml"><div class="ttname"><a href="_toolchain_support_8h.xhtml">ToolchainSupport.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_allocator_xhtml_a3fc6adad84b23f10d54d5a7b6928f872"><div class="ttname"><a href="classarm__compute_1_1_tensor_allocator.xhtml#a3fc6adad84b23f10d54d5a7b6928f872">arm_compute::TensorAllocator::init</a></div><div class="ttdeci">void init(const TensorAllocator &amp;allocator, const Coordinates &amp;coords, TensorInfo &amp;sub_info)</div><div class="ttdoc">Shares the same backing memory with another tensor allocator, while the tensor info might be differen...</div><div class="ttdef"><b>Definition:</b> <a href="src_2runtime_2_tensor_allocator_8cpp_source.xhtml#l00108">TensorAllocator.cpp:108</a></div></div>
<div class="ttc" id="classarm__compute_1_1_h_o_g_info_xhtml_aaefa291ad3cc3e3210c8b8ef2ffde476"><div class="ttname"><a href="classarm__compute_1_1_h_o_g_info.xhtml#aaefa291ad3cc3e3210c8b8ef2ffde476">arm_compute::HOGInfo::cell_size</a></div><div class="ttdeci">const Size2D &amp; cell_size() const</div><div class="ttdoc">The cell size in pixels.</div><div class="ttdef"><b>Definition:</b> <a href="_h_o_g_info_8cpp_source.xhtml#l00091">HOGInfo.cpp:91</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_af00a42ecad444bbda75cde1b64bd7e72"><div class="ttname"><a href="namespacearm__compute.xhtml#af00a42ecad444bbda75cde1b64bd7e72">arm_compute::PhaseType</a></div><div class="ttdeci">PhaseType</div><div class="ttdoc">Phase calculation type.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00406">Types.h:406</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::Format::U8</a></div><div class="ttdoc">1 channel, 1 U8 per channel</div></div>
<div class="ttc" id="classarm__compute_1_1_i_array_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_array.xhtml">arm_compute::IArray</a></div><div class="ttdoc">Array of type T.</div><div class="ttdef"><b>Definition:</b> <a href="_i_array_8h_source.xhtml#l00040">IArray.h:40</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::Format::F32</a></div><div class="ttdoc">1 channel, 1 F32 per channel</div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="_tensor_info_8h_xhtml"><div class="ttname"><a href="_tensor_info_8h.xhtml">TensorInfo.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_h_o_g_info_xhtml_a039b8ebcdd462041d3988e6d2c145323"><div class="ttname"><a href="classarm__compute_1_1_h_o_g_info.xhtml#a039b8ebcdd462041d3988e6d2c145323">arm_compute::HOGInfo::phase_type</a></div><div class="ttdeci">PhaseType phase_type() const</div><div class="ttdoc">The type of PhaseType.</div><div class="ttdef"><b>Definition:</b> <a href="_h_o_g_info_8cpp_source.xhtml#l00126">HOGInfo.cpp:126</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml">arm_compute::ITensor</a></div><div class="ttdoc">Interface for NEON tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_8h_source.xhtml#l00036">ITensor.h:36</a></div></div>
<div class="ttc" id="classarm__compute_1_1_h_o_g_info_xhtml_a207391d3ac69d9a0839104f784f888fd"><div class="ttname"><a href="classarm__compute_1_1_h_o_g_info.xhtml#a207391d3ac69d9a0839104f784f888fd">arm_compute::HOGInfo::block_stride</a></div><div class="ttdeci">const Size2D &amp; block_stride() const</div><div class="ttdoc">The block stride in pixels.</div><div class="ttdef"><b>Definition:</b> <a href="_h_o_g_info_8cpp_source.xhtml#l00106">HOGInfo.cpp:106</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2020 ARM Limited.</div><div class="ttdef"><b>Definition:</b> <a href="00__introduction_8dox_source.xhtml#l00024">00_introduction.dox:24</a></div></div>
<div class="ttc" id="classarm__compute_1_1_size2_d_xhtml_a02afeaaf8574e7a78d6b466ff2695052"><div class="ttname"><a href="classarm__compute_1_1_size2_d.xhtml#a02afeaaf8574e7a78d6b466ff2695052">arm_compute::Size2D::height</a></div><div class="ttdeci">size_t height</div><div class="ttdoc">Height of the image region or rectangle.</div><div class="ttdef"><b>Definition:</b> <a href="_size2_d_8h_source.xhtml#l00093">Size2D.h:93</a></div></div>
<div class="ttc" id="_validate_8h_xhtml_abced8d9603a5927ebad9de2528f48962"><div class="ttname"><a href="_validate_8h.xhtml#abced8d9603a5927ebad9de2528f48962">ARM_COMPUTE_ERROR_ON_INVALID_MULTI_HOG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_INVALID_MULTI_HOG(m)</div><div class="ttdef"><b>Definition:</b> <a href="_validate_8h_source.xhtml#l00925">Validate.h:925</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_h_o_g_gradient_xhtml_ad1717410afd0be936c6213a63c8005fb"><div class="ttname"><a href="classarm__compute_1_1_n_e_h_o_g_gradient.xhtml#ad1717410afd0be936c6213a63c8005fb">arm_compute::NEHOGGradient::run</a></div><div class="ttdeci">void run() override</div><div class="ttdoc">Run the kernels contained in the function.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_h_o_g_gradient_8cpp_source.xhtml#l00081">NEHOGGradient.cpp:81</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_xhtml_adbd0cf83a8e1b335a9bf405a8e5019fa"><div class="ttname"><a href="classarm__compute_1_1_tensor.xhtml#adbd0cf83a8e1b335a9bf405a8e5019fa">arm_compute::Tensor::allocator</a></div><div class="ttdeci">TensorAllocator * allocator()</div><div class="ttdoc">Return a pointer to the tensor's allocator.</div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_tensor_8cpp_source.xhtml#l00048">Tensor.cpp:48</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_h_o_g_gradient_xhtml_ac6ae2d00f75c768927d9529998608aaa"><div class="ttname"><a href="classarm__compute_1_1_n_e_h_o_g_gradient.xhtml#ac6ae2d00f75c768927d9529998608aaa">arm_compute::NEHOGGradient::configure</a></div><div class="ttdeci">void configure(ITensor *input, ITensor *output_magnitude, ITensor *output_phase, PhaseType phase_type, BorderMode border_mode, uint8_t constant_border_value=0)</div><div class="ttdoc">Initialise the function's source, destinations, phase type and border mode.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_h_o_g_gradient_8cpp_source.xhtml#l00042">NEHOGGradient.cpp:42</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_multi_h_o_g_xhtml_a36ab43f5c3606001dcd2468b955f3e02"><div class="ttname"><a href="classarm__compute_1_1_i_multi_h_o_g.xhtml#a36ab43f5c3606001dcd2468b955f3e02">arm_compute::IMultiHOG::num_models</a></div><div class="ttdeci">virtual size_t num_models() const =0</div><div class="ttdoc">The number of HOG models stored.</div></div>
<div class="ttc" id="classarm__compute_1_1_memory_group_xhtml_a6fc0a49304c152c20a0f6df0634fb3cd"><div class="ttname"><a href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">arm_compute::MemoryGroup::manage</a></div><div class="ttdeci">void manage(IMemoryManageable *obj) override</div><div class="ttdoc">Sets a object to be managed by the given memory group.</div><div class="ttdef"><b>Definition:</b> <a href="_memory_group_8h_source.xhtml#l00079">MemoryGroup.h:79</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a5471e46933e7a9c4709972d91fc4ea65"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a5471e46933e7a9c4709972d91fc4ea65">arm_compute::test::validation::border_mode</a></div><div class="ttdeci">border_mode</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_8cpp_source.xhtml#l00118">Convolution.cpp:118</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_aa96e81276ee4f87ab386cd05a5539a7d"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">arm_compute::Window::DimX</a></div><div class="ttdeci">static constexpr size_t DimX</div><div class="ttdoc">Alias for dimension 0 also known as X dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00043">Window.h:43</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_array_xhtml_aac8e28a698cd201286d75eb3f5ad3e1c"><div class="ttname"><a href="classarm__compute_1_1_i_array.xhtml#aac8e28a698cd201286d75eb3f5ad3e1c">arm_compute::IArray::num_values</a></div><div class="ttdeci">size_t num_values() const</div><div class="ttdoc">Number of values currently stored in the array.</div><div class="ttdef"><b>Definition:</b> <a href="_i_array_8h_source.xhtml#l00068">IArray.h:68</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a0b0eb3235749a2909dc5a101afe59a1b"><div class="ttname"><a href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond, msg)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00456">Error.h:456</a></div></div>
<div class="ttc" id="_n_e_h_o_g_multi_detection_8h_xhtml"><div class="ttname"><a href="_n_e_h_o_g_multi_detection_8h.xhtml">NEHOGMultiDetection.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_h_o_g_info_xhtml_ae561964ccc0e0a5750676b9c7dd7cd44"><div class="ttname"><a href="classarm__compute_1_1_h_o_g_info.xhtml#ae561964ccc0e0a5750676b9c7dd7cd44">arm_compute::HOGInfo::block_size</a></div><div class="ttdeci">const Size2D &amp; block_size() const</div><div class="ttdoc">The block size in pixels.</div><div class="ttdef"><b>Definition:</b> <a href="_h_o_g_info_8cpp_source.xhtml#l00096">HOGInfo.cpp:96</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_allocator_xhtml_a6e509c2a177b0b29e9e2369535094dee"><div class="ttname"><a href="classarm__compute_1_1_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">arm_compute::TensorAllocator::allocate</a></div><div class="ttdeci">void allocate() override</div><div class="ttdoc">Allocate size specified by TensorInfo of CPU memory.</div><div class="ttdef"><b>Definition:</b> <a href="src_2runtime_2_tensor_allocator_8cpp_source.xhtml#l00133">TensorAllocator.cpp:133</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_p_p_detection_window_non_maxima_suppression_kernel_xhtml_ad56ff9909955d92abeabbe43c1a21bd9"><div class="ttname"><a href="classarm__compute_1_1_c_p_p_detection_window_non_maxima_suppression_kernel.xhtml#ad56ff9909955d92abeabbe43c1a21bd9">arm_compute::CPPDetectionWindowNonMaximaSuppressionKernel::configure</a></div><div class="ttdeci">void configure(IDetectionWindowArray *input_output, float min_distance)</div><div class="ttdoc">Initialise the kernel's input, output and the euclidean minimum distance.</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_detection_window_non_maxima_suppression_kernel_8cpp_source.xhtml#l00071">CPPDetectionWindowNonMaximaSuppressionKernel.cpp:71</a></div></div>
<div class="ttc" id="_n_e_scheduler_8h_xhtml"><div class="ttname"><a href="_n_e_scheduler_8h.xhtml">NEScheduler.h</a></div></div>
<div class="ttc" id="_error_8h_xhtml"><div class="ttname"><a href="_error_8h.xhtml">Error.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_h_o_g_multi_detection_xhtml_ad1717410afd0be936c6213a63c8005fb"><div class="ttname"><a href="classarm__compute_1_1_n_e_h_o_g_multi_detection.xhtml#ad1717410afd0be936c6213a63c8005fb">arm_compute::NEHOGMultiDetection::run</a></div><div class="ttdeci">void run() override</div><div class="ttdoc">Run the kernels contained in the function.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_h_o_g_multi_detection_8cpp_source.xhtml#l00230">NEHOGMultiDetection.cpp:230</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">arm_compute::Format::S16</a></div><div class="ttdoc">1 channel, 1 S16 per channel</div></div>
<div class="ttc" id="classarm__compute_1_1_c_p_p_detection_window_non_maxima_suppression_kernel_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_p_p_detection_window_non_maxima_suppression_kernel.xhtml">arm_compute::CPPDetectionWindowNonMaximaSuppressionKernel</a></div><div class="ttdoc">CPP kernel to perform in-place computation of euclidean distance on IDetectionWindowArray.</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_detection_window_non_maxima_suppression_kernel_8h_source.xhtml#l00039">CPPDetectionWindowNonMaximaSuppressionKernel.h:39</a></div></div>
<div class="ttc" id="_validate_8h_xhtml_aadf5c9cff86327b96d88d04649d9715e"><div class="ttname"><a href="_validate_8h.xhtml#aadf5c9cff86327b96d88d04649d9715e">ARM_COMPUTE_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN(t, c,...)</div><div class="ttdef"><b>Definition:</b> <a href="_validate_8h_source.xhtml#l00790">Validate.h:790</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_h_o_g_multi_detection_xhtml_a8fa7fa549af77189982f584036c14271"><div class="ttname"><a href="classarm__compute_1_1_n_e_h_o_g_multi_detection.xhtml#a8fa7fa549af77189982f584036c14271">arm_compute::NEHOGMultiDetection::configure</a></div><div class="ttdeci">void configure(ITensor *input, const IMultiHOG *multi_hog, IDetectionWindowArray *detection_windows, const ISize2DArray *detection_window_strides, BorderMode border_mode, uint8_t constant_border_value=0, float threshold=0.0f, bool non_maxima_suppression=false, float min_distance=1.0f)</div><div class="ttdoc">Initialise the function's source, destination, detection window strides, border mode,...</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_h_o_g_multi_detection_8cpp_source.xhtml#l00054">NEHOGMultiDetection.cpp:54</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_ad2d402364fa822b0b7775081291eeca9"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">arm_compute::Window::DimY</a></div><div class="ttdeci">static constexpr size_t DimY</div><div class="ttdoc">Alias for dimension 1 also known as Y dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00045">Window.h:45</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_multi_h_o_g_xhtml_a75e828c2dc5a300d224761a410c0925f"><div class="ttname"><a href="classarm__compute_1_1_i_multi_h_o_g.xhtml#a75e828c2dc5a300d224761a410c0925f">arm_compute::IMultiHOG::model</a></div><div class="ttdeci">virtual IHOG * model(size_t index)=0</div><div class="ttdoc">Return a pointer to the requested HOG model.</div></div>
<div class="ttc" id="classarm__compute_1_1_memory_group_resource_scope_xhtml"><div class="ttname"><a href="classarm__compute_1_1_memory_group_resource_scope.xhtml">arm_compute::MemoryGroupResourceScope</a></div><div class="ttdoc">Memory group resources scope handling class.</div><div class="ttdef"><b>Definition:</b> <a href="_i_memory_group_8h_source.xhtml#l00082">IMemoryGroup.h:82</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_scheduler_xhtml_a4e58f95544bd5ac6559a421671bd9842"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler.xhtml#a4e58f95544bd5ac6559a421671bd9842">arm_compute::IScheduler::schedule</a></div><div class="ttdeci">virtual void schedule(ICPPKernel *kernel, const Hints &amp;hints)=0</div><div class="ttdoc">Runs the kernel in the same thread as the caller synchronously.</div></div>
<div class="ttc" id="classarm__compute_1_1_size2_d_xhtml_a02bed8590a9ddf520e58a060059518ec"><div class="ttname"><a href="classarm__compute_1_1_size2_d.xhtml#a02bed8590a9ddf520e58a060059518ec">arm_compute::Size2D::width</a></div><div class="ttdeci">size_t width</div><div class="ttdoc">Width of the image region or rectangle.</div><div class="ttdef"><b>Definition:</b> <a href="_size2_d_8h_source.xhtml#l00092">Size2D.h:92</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_multi_h_o_g_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_multi_h_o_g.xhtml">arm_compute::IMultiHOG</a></div><div class="ttdoc">Interface for storing multiple HOG data-objects.</div><div class="ttdef"><b>Definition:</b> <a href="_i_multi_h_o_g_8h_source.xhtml#l00034">IMultiHOG.h:34</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_a60e89e48713565425943913adec65294"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a60e89e48713565425943913adec65294">arm_compute::test::validation::reference::non_maxima_suppression</a></div><div class="ttdeci">SimpleTensor&lt; T &gt; non_maxima_suppression(const SimpleTensor&lt; T &gt; &amp;src, BorderMode border_mode, T constant_border_value)</div><div class="ttdef"><b>Definition:</b> <a href="_non_maxima_suppression_8cpp_source.xhtml#l00038">NonMaximaSuppression.cpp:38</a></div></div>
<div class="ttc" id="classarm__compute_1_1_size2_d_xhtml"><div class="ttname"><a href="classarm__compute_1_1_size2_d.xhtml">arm_compute::Size2D</a></div><div class="ttdoc">Class for specifying the size of an image or rectangle.</div><div class="ttdef"><b>Definition:</b> <a href="_size2_d_8h_source.xhtml#l00034">Size2D.h:34</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_shape_xhtml_a9c54fb6cea3557692fe7c00c40bb40ad"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml#a9c54fb6cea3557692fe7c00c40bb40ad">arm_compute::TensorShape::set</a></div><div class="ttdeci">TensorShape &amp; set(size_t dimension, size_t value, bool apply_dim_correction=true)</div><div class="ttdoc">Accessor to set the value of one of the dimensions.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00078">TensorShape.h:78</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml">arm_compute::TensorInfo</a></div><div class="ttdoc">Store the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00045">TensorInfo.h:45</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_h_o_g_multi_detection_xhtml_ab89e2f74cd1d706e49bfe182c2923789"><div class="ttname"><a href="classarm__compute_1_1_n_e_h_o_g_multi_detection.xhtml#ab89e2f74cd1d706e49bfe182c2923789">arm_compute::NEHOGMultiDetection::NEHOGMultiDetection</a></div><div class="ttdeci">NEHOGMultiDetection(std::shared_ptr&lt; IMemoryManager &gt; memory_manager=nullptr)</div><div class="ttdoc">Default constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_h_o_g_multi_detection_8cpp_source.xhtml#l00035">NEHOGMultiDetection.cpp:35</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_h_o_g_xhtml_a4e9b5d4ab15fd9009b463861c1a19dbd"><div class="ttname"><a href="classarm__compute_1_1_i_h_o_g.xhtml#a4e9b5d4ab15fd9009b463861c1a19dbd">arm_compute::IHOG::info</a></div><div class="ttdeci">virtual const HOGInfo * info() const =0</div><div class="ttdoc">Interface to be implemented by the child class to return the HOG's metadata.</div></div>
<div class="ttc" id="runtime_2_tensor_8h_xhtml"><div class="ttname"><a href="runtime_2_tensor_8h.xhtml">Tensor.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_a6cae310822a46019ba25a00ddb0f7e62"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6cae310822a46019ba25a00ddb0f7e62">arm_compute::test::validation::reference::threshold</a></div><div class="ttdeci">SimpleTensor&lt; T &gt; threshold(const SimpleTensor&lt; T &gt; &amp;src, T threshold, T false_value, T true_value, ThresholdType type, T upper)</div><div class="ttdef"><b>Definition:</b> <a href="reference_2_threshold_8cpp_source.xhtml#l00035">Threshold.cpp:35</a></div></div>
<div class="ttc" id="_validate_8h_xhtml"><div class="ttname"><a href="_validate_8h.xhtml">Validate.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_array_xhtml_a9deaea40b2409ee68d354bdb9d3f8443"><div class="ttname"><a href="classarm__compute_1_1_i_array.xhtml#a9deaea40b2409ee68d354bdb9d3f8443">arm_compute::IArray::at</a></div><div class="ttdeci">virtual T &amp; at(size_t index) const</div><div class="ttdoc">Reference to the element of the array located at the given index.</div><div class="ttdef"><b>Definition:</b> <a href="_i_array_8h_source.xhtml#l00117">IArray.h:117</a></div></div>
<div class="ttc" id="classarm__compute_1_1_scheduler_xhtml_a0d63ca713bab377aabcfb63c192b8429"><div class="ttname"><a href="classarm__compute_1_1_scheduler.xhtml#a0d63ca713bab377aabcfb63c192b8429">arm_compute::Scheduler::get</a></div><div class="ttdeci">static IScheduler &amp; get()</div><div class="ttdoc">Access the scheduler singleton.</div><div class="ttdef"><b>Definition:</b> <a href="_scheduler_8cpp_source.xhtml#l00095">Scheduler.cpp:95</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_bf9f26469d00835ba20ff8d80ee5a804.xhtml">runtime</a></li><li class="navelem"><a class="el" href="dir_a36523fc4c32a6b0076906589b6fc202.xhtml">NEON</a></li><li class="navelem"><a class="el" href="dir_4d03f28cfd35f8f734a3b0a2f1168d27.xhtml">functions</a></li><li class="navelem"><a class="el" href="_n_e_h_o_g_multi_detection_8cpp.xhtml">NEHOGMultiDetection.cpp</a></li>
    <li class="footer">Generated on Thu Mar 5 2020 16:07:03 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
