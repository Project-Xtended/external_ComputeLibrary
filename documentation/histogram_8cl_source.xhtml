<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/core/CL/cl_kernels/histogram.cl Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.02.1</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('histogram_8cl_source.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">histogram.cl</div>  </div>
</div><!--header-->
<div class="contents">
<a href="histogram_8cl.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2016, 2017 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml">helpers.h</a>&quot;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno"><a class="line" href="histogram_8cl.xhtml#a2c8a35cfde24ca7728709200962e1a91">   26</a></span>&#160;<span class="preprocessor">#define VATOMIC_INC16(histogram, win_pos)   \</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">    {                                       \</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">        atomic_inc(histogram + win_pos.s0); \</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">        atomic_inc(histogram + win_pos.s1); \</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">        atomic_inc(histogram + win_pos.s2); \</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">        atomic_inc(histogram + win_pos.s3); \</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">        atomic_inc(histogram + win_pos.s4); \</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">        atomic_inc(histogram + win_pos.s5); \</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">        atomic_inc(histogram + win_pos.s6); \</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">        atomic_inc(histogram + win_pos.s7); \</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">        atomic_inc(histogram + win_pos.s8); \</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">        atomic_inc(histogram + win_pos.s9); \</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">        atomic_inc(histogram + win_pos.sa); \</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">        atomic_inc(histogram + win_pos.sb); \</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">        atomic_inc(histogram + win_pos.sc); \</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor">        atomic_inc(histogram + win_pos.sd); \</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor">        atomic_inc(histogram + win_pos.se); \</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="preprocessor">        atomic_inc(histogram + win_pos.sf); \</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="preprocessor">    }</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment">/** Calculate the histogram of an 8 bit grayscale image.</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment"> * Each thread will process 16 pixels and use one local atomic operation per pixel.</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment"> * When all work items in a work group are done the resulting local histograms are</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment"> * added to the global histogram using global atomics.</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment"> * @note The input image is represented as a two-dimensional array of type uchar.</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment"> * The output is represented as a one-dimensional uint array of length of num_bins</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment"> * @param[in]  input_ptr                           Pointer to the first source image. Supported data types: U8</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment"> * @param[in]  input_stride_x                      Stride of the first source image in X dimension (in bytes)</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment"> * @param[in]  input_step_x                        input_stride_x * number of elements along X processed per workitem(in bytes)</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment"> * @param[in]  input_stride_y                      Stride of the first source image in Y dimension (in bytes)</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment"> * @param[in]  input_step_y                        input_stride_y * number of elements along Y processed per workitem(in bytes)</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment"> * @param[in]  input_offset_first_element_in_bytes The offset of the first element in the first source image</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment"> * @param[in]  histogram_local                     The local buffer to hold histogram result in per workgroup. Supported data types: U32</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment"> * @param[out] histogram                           The output buffer to hold histogram final result. Supported data types: U32</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment"> * @param[out] num_bins                            The number of bins</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment"> * @param[out] offset                              The start of values to use (inclusive)</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment"> * @param[out] range                               The range of a bin</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment"> * @param[out] offrange                            The maximum value (exclusive)</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00068"></a><span class="lineno"><a class="line" href="histogram_8cl.xhtml#abc81d92c9655c4ec22fff9163b66279d">   68</a></span>&#160;__kernel <span class="keywordtype">void</span> <a class="code" href="histogram_8cl.xhtml#abc81d92c9655c4ec22fff9163b66279d">hist_local_kernel</a>(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>),</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                                __local uint *histogram_local,</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                                __global uint *restrict <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a8c37b244d8aec5993e58b2c7f67d936d">histogram</a>,</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                                uint                    num_bins,</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                                uint                    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>,</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                                uint                    <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a87f09c74765be18a99038478f96daf9b">range</a>,</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                                uint                    offrange)</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;{</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> input_buffer = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    uint  local_id_x   = get_local_id(0);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    uint <a class="code" href="_c_l_histogram_kernel_8cpp.xhtml#a96106a3f026454bc01a9faf1738488bf">local_x_size</a> = get_local_size(0);</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keywordflow">if</span>(num_bins &gt; <a class="code" href="_c_l_histogram_kernel_8cpp.xhtml#a96106a3f026454bc01a9faf1738488bf">local_x_size</a>)</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    {</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = local_id_x; i &lt; num_bins; i += <a class="code" href="_c_l_histogram_kernel_8cpp.xhtml#a96106a3f026454bc01a9faf1738488bf">local_x_size</a>)</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        {</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            histogram_local[i] = 0;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        }</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    }</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    {</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <span class="keywordflow">if</span>(local_id_x &lt;= num_bins)</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        {</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            histogram_local[local_id_x] = 0;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        }</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    }</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    uint16 vals = convert_uint16(vload16(0, input_buffer.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>));</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    uint16 win_pos = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af77145fbdc6b0c8931148f5597d9de53">select</a>(num_bins, ((vals - <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>) * num_bins) / <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a87f09c74765be18a99038478f96daf9b">range</a>, (vals &gt;= <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> &amp;&amp; vals &lt; offrange));</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    barrier(CLK_LOCAL_MEM_FENCE);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <a class="code" href="histogram_8cl.xhtml#a2c8a35cfde24ca7728709200962e1a91">VATOMIC_INC16</a>(histogram_local, win_pos);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    barrier(CLK_LOCAL_MEM_FENCE);</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keywordflow">if</span>(num_bins &gt; <a class="code" href="_c_l_histogram_kernel_8cpp.xhtml#a96106a3f026454bc01a9faf1738488bf">local_x_size</a>)</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    {</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = local_id_x; i &lt; num_bins; i += <a class="code" href="_c_l_histogram_kernel_8cpp.xhtml#a96106a3f026454bc01a9faf1738488bf">local_x_size</a>)</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        {</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            atomic_add(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a8c37b244d8aec5993e58b2c7f67d936d">histogram</a> + i, histogram_local[i]);</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        }</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    }</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    {</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <span class="keywordflow">if</span>(local_id_x &lt;= num_bins)</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        {</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            atomic_add(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a8c37b244d8aec5993e58b2c7f67d936d">histogram</a> + local_id_x, histogram_local[local_id_x]);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        }</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    }</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;}</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment">/** Calculate the histogram of an 8 bit grayscale image&#39;s border.</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment"> * Each thread will process one pixel using global atomic.</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment"> * When all work items in a work group are done the resulting local histograms are</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment"> * added to the global histogram using global atomics.</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment"> * @note The input image is represented as a two-dimensional array of type uchar.</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment"> * The output is represented as a one-dimensional uint array of length of num_bins</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment"> * @param[in]  input_ptr                           Pointer to the first source image. Supported data types: U8</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment"> * @param[in]  input_stride_x                      Stride of the first source image in X dimension (in bytes)</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment"> * @param[in]  input_step_x                        input_stride_x * number of elements along X processed per workitem(in bytes)</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment"> * @param[in]  input_stride_y                      Stride of the first source image in Y dimension (in bytes)</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment"> * @param[in]  input_step_y                        input_stride_y * number of elements along Y processed per workitem(in bytes)</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment"> * @param[in]  input_offset_first_element_in_bytes The offset of the first element in the first source image</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment"> * @param[out] histogram                           The output buffer to hold histogram final result. Supported data types: U32</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment"> * @param[out] num_bins                            The number of bins</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment"> * @param[out] offset                              The start of values to use (inclusive)</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment"> * @param[out] range                               The range of a bin</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment"> * @param[out] offrange                            The maximum value (exclusive)</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00141"></a><span class="lineno"><a class="line" href="histogram_8cl.xhtml#af82fea967051b827585009463255262d">  141</a></span>&#160;__kernel <span class="keywordtype">void</span> <a class="code" href="histogram_8cl.xhtml#af82fea967051b827585009463255262d">hist_border_kernel</a>(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>),</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                                 __global uint *restrict <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a8c37b244d8aec5993e58b2c7f67d936d">histogram</a>,</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                                 uint                    num_bins,</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                                 uint                    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>,</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                                 uint                    <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a87f09c74765be18a99038478f96daf9b">range</a>,</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                                 uint                    offrange)</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;{</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> input_buffer = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>);</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    uint val = (uint)(*input_buffer.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    uint win_pos = (val &gt;= <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>) ? (((val - <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>) * num_bins) / <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a87f09c74765be18a99038478f96daf9b">range</a>) : 0;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="keywordflow">if</span>(val &gt;= <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> &amp;&amp; (val &lt; offrange))</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    {</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        atomic_inc(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a8c37b244d8aec5993e58b2c7f67d936d">histogram</a> + win_pos);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    }</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;}</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment">/** Calculate the histogram of an 8 bit grayscale image with bin size of 256 and window size of 1.</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="comment"> * Each thread will process 16 pixels and use one local atomic operation per pixel.</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="comment"> * When all work items in a work group are done the resulting local histograms are</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="comment"> * added to the global histogram using global atomics.</span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment"> * @note The input image is represented as a two-dimensional array of type uchar.</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="comment"> * The output is represented as a one-dimensional uint array of 256 elements</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment"> * @param[in]  input_ptr                           Pointer to the first source image. Supported data types: U8</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment"> * @param[in]  input_stride_x                      Stride of the first source image in X dimension (in bytes)</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment"> * @param[in]  input_step_x                        input_stride_x * number of elements along X processed per workitem(in bytes)</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="comment"> * @param[in]  input_stride_y                      Stride of the first source image in Y dimension (in bytes)</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="comment"> * @param[in]  input_step_y                        input_stride_y * number of elements along Y processed per workitem(in bytes)</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="comment"> * @param[in]  input_offset_first_element_in_bytes The offset of the first element in the first source image</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="comment"> * @param[in]  histogram_local                     The local buffer to hold histogram result in per workgroup. Supported data types: U32</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="comment"> * @param[out] histogram                           The output buffer to hold histogram final result. Supported data types: U32</span></div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00178"></a><span class="lineno"><a class="line" href="histogram_8cl.xhtml#a7c8051ab952a597e66090d77f4dc60e4">  178</a></span>&#160;__kernel <span class="keywordtype">void</span> <a class="code" href="histogram_8cl.xhtml#a7c8051ab952a597e66090d77f4dc60e4">hist_local_kernel_fixed</a>(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>),</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                                      __local uint *histogram_local,</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                                      __global uint *restrict <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a8c37b244d8aec5993e58b2c7f67d936d">histogram</a>)</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;{</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> input_buffer = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>);</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    uint local_index  = get_local_id(0);</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    uint <a class="code" href="_c_l_histogram_kernel_8cpp.xhtml#a96106a3f026454bc01a9faf1738488bf">local_x_size</a> = get_local_size(0);</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = local_index; i &lt; 256; i += <a class="code" href="_c_l_histogram_kernel_8cpp.xhtml#a96106a3f026454bc01a9faf1738488bf">local_x_size</a>)</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    {</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        histogram_local[i] = 0;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    }</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    uint16 vals = convert_uint16(vload16(0, input_buffer.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>));</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    barrier(CLK_LOCAL_MEM_FENCE);</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    atomic_inc(histogram_local + vals.s0);</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    atomic_inc(histogram_local + vals.s1);</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    atomic_inc(histogram_local + vals.s2);</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    atomic_inc(histogram_local + vals.s3);</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    atomic_inc(histogram_local + vals.s4);</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    atomic_inc(histogram_local + vals.s5);</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    atomic_inc(histogram_local + vals.s6);</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    atomic_inc(histogram_local + vals.s7);</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    atomic_inc(histogram_local + vals.s8);</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    atomic_inc(histogram_local + vals.s9);</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    atomic_inc(histogram_local + vals.sa);</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    atomic_inc(histogram_local + vals.sb);</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    atomic_inc(histogram_local + vals.sc);</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    atomic_inc(histogram_local + vals.sd);</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    atomic_inc(histogram_local + vals.se);</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    atomic_inc(histogram_local + vals.sf);</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    barrier(CLK_LOCAL_MEM_FENCE);</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = local_index; i &lt; 256; i += <a class="code" href="_c_l_histogram_kernel_8cpp.xhtml#a96106a3f026454bc01a9faf1738488bf">local_x_size</a>)</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    {</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        atomic_add(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a8c37b244d8aec5993e58b2c7f67d936d">histogram</a> + i, histogram_local[i]);</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    }</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;}</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="comment">/** Calculate the histogram of an 8 bit grayscale image with bin size as 256 and window size as 1.</span></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="comment"> * Each thread will process one pixel using global atomic.</span></div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="comment"> * When all work items in a work group are done the resulting local histograms are</span></div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="comment"> * added to the global histogram using global atomics.</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="comment"> * @note The input image is represented as a two-dimensional array of type uchar.</span></div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="comment"> * The output is represented as a one-dimensional uint array of 256</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="comment"> * @param[in]  input_ptr                           Pointer to the first source image. Supported data types: U8</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="comment"> * @param[in]  input_stride_x                      Stride of the first source image in X dimension (in bytes)</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="comment"> * @param[in]  input_step_x                        input_stride_x * number of elements along X processed per workitem(in bytes)</span></div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="comment"> * @param[in]  input_stride_y                      Stride of the first source image in Y dimension (in bytes)</span></div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="comment"> * @param[in]  input_step_y                        input_stride_y * number of elements along Y processed per workitem(in bytes)</span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="comment"> * @param[in]  input_offset_first_element_in_bytes The offset of the first element in the first source image</span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="comment"> * @param[out] histogram                           The output buffer to hold histogram final result. Supported data types: U32</span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00238"></a><span class="lineno"><a class="line" href="histogram_8cl.xhtml#aec6ec6157573195df9694109ebbb38ae">  238</a></span>&#160;__kernel <span class="keywordtype">void</span> <a class="code" href="histogram_8cl.xhtml#aec6ec6157573195df9694109ebbb38ae">hist_border_kernel_fixed</a>(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>),</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                                       __global uint *restrict <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a8c37b244d8aec5993e58b2c7f67d936d">histogram</a>)</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;{</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> input_buffer = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>);</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    atomic_inc(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a8c37b244d8aec5993e58b2c7f67d936d">histogram</a> + *input_buffer.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;}</div><div class="ttc" id="src_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a009469e4d9b8fce3b6d5e97d2077827d"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a></div><div class="ttdeci">__global uchar * offset(const Image *img, int x, int y)</div><div class="ttdoc">Get the pointer position of a Image.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00510">helpers.h:510</a></div></div>
<div class="ttc" id="src_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_aebe814363556c244be043b13e7969197"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a></div><div class="ttdeci">#define CONVERT_TO_IMAGE_STRUCT(name)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00311">helpers.h:311</a></div></div>
<div class="ttc" id="histogram_8cl_xhtml_a2c8a35cfde24ca7728709200962e1a91"><div class="ttname"><a href="histogram_8cl.xhtml#a2c8a35cfde24ca7728709200962e1a91">VATOMIC_INC16</a></div><div class="ttdeci">#define VATOMIC_INC16(histogram, win_pos)</div><div class="ttdef"><b>Definition:</b> <a href="histogram_8cl_source.xhtml#l00026">histogram.cl:26</a></div></div>
<div class="ttc" id="src_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a22f42fcf2077d951271df83b55c1a71a"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a></div><div class="ttdeci">#define IMAGE_DECLARATION(name)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00275">helpers.h:275</a></div></div>
<div class="ttc" id="histogram_8cl_xhtml_abc81d92c9655c4ec22fff9163b66279d"><div class="ttname"><a href="histogram_8cl.xhtml#abc81d92c9655c4ec22fff9163b66279d">hist_local_kernel</a></div><div class="ttdeci">__kernel void hist_local_kernel(__global uchar *input_ptr, uint input_stride_x, uint input_step_x, uint input_stride_y, uint input_step_y, uint input_offset_first_element_in_bytes, __local uint *histogram_local, __global uint *restrict histogram, uint num_bins, uint offset, uint range, uint offrange)</div><div class="ttdoc">Calculate the histogram of an 8 bit grayscale image.</div><div class="ttdef"><b>Definition:</b> <a href="histogram_8cl_source.xhtml#l00068">histogram.cl:68</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
<div class="ttc" id="histogram_8cl_xhtml_a7c8051ab952a597e66090d77f4dc60e4"><div class="ttname"><a href="histogram_8cl.xhtml#a7c8051ab952a597e66090d77f4dc60e4">hist_local_kernel_fixed</a></div><div class="ttdeci">__kernel void hist_local_kernel_fixed(__global uchar *input_ptr, uint input_stride_x, uint input_step_x, uint input_stride_y, uint input_step_y, uint input_offset_first_element_in_bytes, __local uint *histogram_local, __global uint *restrict histogram)</div><div class="ttdoc">Calculate the histogram of an 8 bit grayscale image with bin size of 256 and window size of 1.</div><div class="ttdef"><b>Definition:</b> <a href="histogram_8cl_source.xhtml#l00178">histogram.cl:178</a></div></div>
<div class="ttc" id="histogram_8cl_xhtml_af82fea967051b827585009463255262d"><div class="ttname"><a href="histogram_8cl.xhtml#af82fea967051b827585009463255262d">hist_border_kernel</a></div><div class="ttdeci">__kernel void hist_border_kernel(__global uchar *input_ptr, uint input_stride_x, uint input_step_x, uint input_stride_y, uint input_step_y, uint input_offset_first_element_in_bytes, __global uint *restrict histogram, uint num_bins, uint offset, uint range, uint offrange)</div><div class="ttdoc">Calculate the histogram of an 8 bit grayscale image's border.</div><div class="ttdef"><b>Definition:</b> <a href="histogram_8cl_source.xhtml#l00141">histogram.cl:141</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_a87f09c74765be18a99038478f96daf9b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a87f09c74765be18a99038478f96daf9b">arm_compute::test::validation::reference::range</a></div><div class="ttdeci">SimpleTensor&lt; T &gt; range(SimpleTensor&lt; T &gt; &amp;dst, float start, const size_t num_of_elements, float step)</div><div class="ttdef"><b>Definition:</b> <a href="reference_2_range_8cpp_source.xhtml#l00050">Range.cpp:50</a></div></div>
<div class="ttc" id="struct_image_xhtml"><div class="ttname"><a href="struct_image.xhtml">Image</a></div><div class="ttdoc">Structure to hold Image information.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00349">helpers.h:349</a></div></div>
<div class="ttc" id="struct_image_xhtml_acf52c23cbd7424606c10a606524e3e32"><div class="ttname"><a href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">Image::ptr</a></div><div class="ttdeci">__global uchar * ptr</div><div class="ttdoc">Pointer to the starting postion of the buffer.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00351">helpers.h:351</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_a8c37b244d8aec5993e58b2c7f67d936d"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a8c37b244d8aec5993e58b2c7f67d936d">arm_compute::test::validation::reference::histogram</a></div><div class="ttdeci">SimpleTensor&lt; uint32_t &gt; histogram(const SimpleTensor&lt; T &gt; &amp;src, size_t num_bins, int32_t offset, uint32_t range)</div><div class="ttdef"><b>Definition:</b> <a href="reference_2_histogram_8cpp_source.xhtml#l00038">Histogram.cpp:38</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_af77145fbdc6b0c8931148f5597d9de53"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#af77145fbdc6b0c8931148f5597d9de53">arm_compute::test::validation::select</a></div><div class="ttdeci">CLSelect select</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_select_8cpp_source.xhtml#l00164">Select.cpp:164</a></div></div>
<div class="ttc" id="src_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml">helpers.h</a></div></div>
<div class="ttc" id="_c_l_histogram_kernel_8cpp_xhtml_a96106a3f026454bc01a9faf1738488bf"><div class="ttname"><a href="_c_l_histogram_kernel_8cpp.xhtml#a96106a3f026454bc01a9faf1738488bf">local_x_size</a></div><div class="ttdeci">constexpr unsigned int local_x_size</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_histogram_kernel_8cpp_source.xhtml#l00046">CLHistogramKernel.cpp:46</a></div></div>
<div class="ttc" id="histogram_8cl_xhtml_aec6ec6157573195df9694109ebbb38ae"><div class="ttname"><a href="histogram_8cl.xhtml#aec6ec6157573195df9694109ebbb38ae">hist_border_kernel_fixed</a></div><div class="ttdeci">__kernel void hist_border_kernel_fixed(__global uchar *input_ptr, uint input_stride_x, uint input_step_x, uint input_stride_y, uint input_step_y, uint input_offset_first_element_in_bytes, __global uint *restrict histogram)</div><div class="ttdoc">Calculate the histogram of an 8 bit grayscale image with bin size as 256 and window size as 1.</div><div class="ttdef"><b>Definition:</b> <a href="histogram_8cl_source.xhtml#l00238">histogram.cl:238</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aebb8dcc11953d78e620bbef0b9e2183.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_8c278f79c760e5c5fbd911f9870614c1.xhtml">CL</a></li><li class="navelem"><a class="el" href="dir_25885286e9dad4fa105b7b25a8031bbf.xhtml">cl_kernels</a></li><li class="navelem"><a class="el" href="histogram_8cl.xhtml">histogram.cl</a></li>
    <li class="footer">Generated on Thu Mar 5 2020 16:06:58 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
