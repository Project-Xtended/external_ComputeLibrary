<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/runtime/CPP/CPPScheduler.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('_c_p_p_scheduler_8cpp_source.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">CPPScheduler.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_c_p_p_scheduler_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2016-2019 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_c_p_p_scheduler_8h.xhtml">arm_compute/runtime/CPP/CPPScheduler.h</a>&quot;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_c_p_p_kernel_8h.xhtml">arm_compute/core/CPP/ICPPKernel.h</a>&quot;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_error_8h.xhtml">arm_compute/core/Error.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_helpers_8h.xhtml">arm_compute/core/Helpers.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_utils_8h.xhtml">arm_compute/core/Utils.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_c_p_u_utils_8h.xhtml">arm_compute/runtime/CPUUtils.h</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_mutex_8h.xhtml">support/Mutex.h</a>&quot;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &lt;atomic&gt;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &lt;condition_variable&gt;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &lt;list&gt;</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#include &lt;mutex&gt;</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#include &lt;system_error&gt;</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#include &lt;thread&gt;</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="keyword">namespace</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;{</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="keyword">class </span>ThreadFeeder</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment">    /** Constructor</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment">     * @param[in] start First value that will be returned by the feeder</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment">     * @param[in] end   End condition (The last value returned by get_next() will be end - 1)</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keyword">explicit</span> ThreadFeeder(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> start = 0, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> end = 0)</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        : _atomic_counter(start), _end(end)</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    {</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment">    /** Return the next element in the range if there is one.</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment">     * @param[out] next Will contain the next element if there is one.</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment">     * @return False if the end of the range has been reached and next wasn&#39;t set.</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keywordtype">bool</span> get_next(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> &amp;next)</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    {</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        next = atomic_fetch_add_explicit(&amp;_atomic_counter, 1u, std::memory_order_relaxed);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="keywordflow">return</span> next &lt; _end;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    }</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    std::atomic_uint   _atomic_counter;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _end;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;};</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment">/** Execute workloads[info.thread_id] first, then call the feeder to get the index of the next workload to run.</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment"> * Will run workloads until the feeder reaches the end of its range.</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment"> * @param[in]     workloads The array of workloads</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment"> * @param[in,out] feeder    The feeder indicating which workload to execute next.</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment"> * @param[in]     info      Threading and CPU info.</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="keywordtype">void</span> process_workloads(std::vector&lt;IScheduler::Workload&gt; &amp;workloads, ThreadFeeder &amp;feeder, <span class="keyword">const</span> ThreadInfo &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>)</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;{</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> workload_index = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.thread_id;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keywordflow">do</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    {</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(workload_index &gt;= workloads.size());</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        workloads[workload_index](<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>);</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    }</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keywordflow">while</span>(feeder.get_next(workload_index));</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;}</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;} <span class="comment">//namespace</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="keyword">struct </span>CPPScheduler::Impl final</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;{</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keyword">explicit</span> Impl(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> thread_hint)</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        : _num_threads(thread_hint), _threads(_num_threads - 1)</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    {</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    }</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#ae64eebaa07f4d2da6cc2ba538c3cb095">set_num_threads</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a0da94220ee1e0f4928aa31ed0d4b30f7">num_threads</a>, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> thead_hint)</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    {</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        _num_threads = <a class="code" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a0da94220ee1e0f4928aa31ed0d4b30f7">num_threads</a> == 0 ? thead_hint : <a class="code" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a0da94220ee1e0f4928aa31ed0d4b30f7">num_threads</a>;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        _threads.resize(_num_threads - 1);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    }</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a0da94220ee1e0f4928aa31ed0d4b30f7">num_threads</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        <span class="keywordflow">return</span> _num_threads;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    }</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keywordtype">void</span> run_workloads(std::vector&lt;IScheduler::Workload&gt; &amp;workloads);</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keyword">class </span>Thread;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>       _num_threads;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    std::list&lt;Thread&gt;  _threads;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#acded863dbfdd730829d4188d67eefcf0">arm_compute::Mutex</a> _run_workloads_mutex{};</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;};</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="keyword">class </span>CPPScheduler::Impl::Thread final</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;{</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment">    /** Start a new thread. */</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    Thread();</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    Thread(<span class="keyword">const</span> Thread &amp;) = <span class="keyword">delete</span>;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    Thread &amp;operator=(<span class="keyword">const</span> Thread &amp;) = <span class="keyword">delete</span>;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    Thread(Thread &amp;&amp;)                 = <span class="keyword">delete</span>;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    Thread &amp;operator=(Thread &amp;&amp;) = <span class="keyword">delete</span>;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment">    /** Destructor. Make the thread join. */</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    ~Thread();</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment">    /** Request the worker thread to start executing workloads.</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment">     * The thread will start by executing workloads[info.thread_id] and will then call the feeder to</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment">     * get the index of the following workload to run.</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment">     * @note This function will return as soon as the workloads have been sent to the worker thread.</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment">     * wait() needs to be called to ensure the execution is complete.</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="keywordtype">void</span> start(std::vector&lt;IScheduler::Workload&gt; *workloads, ThreadFeeder &amp;feeder, <span class="keyword">const</span> ThreadInfo &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment">    /** Wait for the current kernel execution to complete. */</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keywordtype">void</span> wait();</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment">    /** Function ran by the worker thread. */</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keywordtype">void</span> worker_thread();</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    std::thread                        _thread{};</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    ThreadInfo                         _info{};</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    std::vector&lt;IScheduler::Workload&gt; *_workloads{ <span class="keyword">nullptr</span> };</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    ThreadFeeder                      *_feeder{ <span class="keyword">nullptr</span> };</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    std::mutex                         _m{};</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    std::condition_variable            _cv{};</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="keywordtype">bool</span>                               _wait_for_work{ <span class="keyword">false</span> };</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="keywordtype">bool</span>                               _job_complete{ <span class="keyword">true</span> };</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    std::exception_ptr                 _current_exception{ <span class="keyword">nullptr</span> };</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;};</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;CPPScheduler::Impl::Thread::Thread()</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;{</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    _thread = std::thread(&amp;Thread::worker_thread, <span class="keyword">this</span>);</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;}</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;CPPScheduler::Impl::Thread::~Thread()</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;{</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="comment">// Make sure worker thread has ended</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="keywordflow">if</span>(_thread.joinable())</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    {</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        ThreadFeeder feeder;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        start(<span class="keyword">nullptr</span>, feeder, ThreadInfo());</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        _thread.join();</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    }</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;}</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="keywordtype">void</span> CPPScheduler::Impl::Thread::start(std::vector&lt;IScheduler::Workload&gt; *workloads, ThreadFeeder &amp;feeder, <span class="keyword">const</span> ThreadInfo &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>)</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;{</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    _workloads = workloads;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    _feeder    = &amp;feeder;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    _info      = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    {</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        std::lock_guard&lt;std::mutex&gt; lock(_m);</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        _wait_for_work = <span class="keyword">true</span>;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        _job_complete  = <span class="keyword">false</span>;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    }</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    _cv.notify_one();</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;}</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="keywordtype">void</span> CPPScheduler::Impl::Thread::wait()</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;{</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    {</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        std::unique_lock&lt;std::mutex&gt; lock(_m);</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        _cv.wait(lock, [&amp;] { <span class="keywordflow">return</span> _job_complete; });</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    }</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="keywordflow">if</span>(_current_exception)</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    {</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        std::rethrow_exception(_current_exception);</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    }</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;}</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="keywordtype">void</span> CPPScheduler::Impl::Thread::worker_thread()</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;{</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <span class="keywordflow">while</span>(<span class="keyword">true</span>)</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    {</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        std::unique_lock&lt;std::mutex&gt; lock(_m);</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        _cv.wait(lock, [&amp;] { <span class="keywordflow">return</span> _wait_for_work; });</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        _wait_for_work = <span class="keyword">false</span>;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        _current_exception = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        <span class="comment">// Time to exit</span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        <span class="keywordflow">if</span>(_workloads == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        {</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;            <span class="keywordflow">return</span>;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        }</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_EXCEPTIONS_DISABLED</span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        <span class="keywordflow">try</span></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        {</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_EXCEPTIONS_ENABLED */</span><span class="preprocessor"></span></div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;            process_workloads(*_workloads, *_feeder, _info);</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_EXCEPTIONS_DISABLED</span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        }</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        <span class="keywordflow">catch</span>(...)</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        {</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;            _current_exception = std::current_exception();</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        }</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_EXCEPTIONS_DISABLED */</span><span class="preprocessor"></span></div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        _job_complete = <span class="keyword">true</span>;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        lock.unlock();</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        _cv.notify_one();</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    }</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;}</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="comment"> * This singleton has been deprecated and will be removed in the next release</span></div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00242"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a29866c2e410a715d736ec447b986df78">  242</a></span>&#160;<a class="code" href="classarm__compute_1_1_c_p_p_scheduler.xhtml">CPPScheduler</a> &amp;<a class="code" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a29866c2e410a715d736ec447b986df78">CPPScheduler::get</a>()</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;{</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="keyword">static</span> <a class="code" href="classarm__compute_1_1_c_p_p_scheduler.xhtml">CPPScheduler</a> scheduler;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <span class="keywordflow">return</span> scheduler;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;}</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;</div><div class="line"><a name="l00248"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a7dc07a8f5e4ef2b4b07f6076893db4f0">  248</a></span>&#160;<a class="code" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a7dc07a8f5e4ef2b4b07f6076893db4f0">CPPScheduler::CPPScheduler</a>()</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    : _impl(support::cpp14::<a class="code" href="namespacearm__compute_1_1support_1_1cpp14.xhtml#a1d95a84d1a4610af6a128ad96c907e8b">make_unique</a>&lt;Impl&gt;(num_threads_hint()))</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;{</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;}</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<a class="code" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a6a3f05037f66a2c8e9c02140f097b7ef">CPPScheduler::~CPPScheduler</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;</div><div class="line"><a name="l00255"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#ae64eebaa07f4d2da6cc2ba538c3cb095">  255</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#ae64eebaa07f4d2da6cc2ba538c3cb095">CPPScheduler::set_num_threads</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_threads)</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;{</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <span class="comment">// No changes in the number of threads while current workloads are running</span></div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a18809773edf57d061fc2826abf0dab5e">arm_compute::lock_guard&lt;std::mutex&gt;</a> lock(_impl-&gt;_run_workloads_mutex);</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    _impl-&gt;set_num_threads(<a class="code" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a0da94220ee1e0f4928aa31ed0d4b30f7">num_threads</a>, <a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#a6de5358eb9a099cda48662b2fc523ec5">num_threads_hint</a>());</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;}</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;</div><div class="line"><a name="l00262"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a0da94220ee1e0f4928aa31ed0d4b30f7">  262</a></span>&#160;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a0da94220ee1e0f4928aa31ed0d4b30f7">CPPScheduler::num_threads</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    <span class="keywordflow">return</span> _impl-&gt;num_threads();</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;}</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="preprocessor">#ifndef DOXYGEN_SKIP_THIS</span></div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="keywordtype">void</span> CPPScheduler::run_workloads(std::vector&lt;IScheduler::Workload&gt; &amp;workloads)</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;{</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <span class="comment">// Mutex to ensure other threads won&#39;t interfere with the setup of the current thread&#39;s workloads</span></div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <span class="comment">// Other thread&#39;s workloads will be scheduled after the current thread&#39;s workloads have finished</span></div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <span class="comment">// This is not great because different threads workloads won&#39;t run in parallel but at least they</span></div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <span class="comment">// won&#39;t interfere each other and deadlock.</span></div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a18809773edf57d061fc2826abf0dab5e">arm_compute::lock_guard&lt;std::mutex&gt;</a> lock(_impl-&gt;_run_workloads_mutex);</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                  <a class="code" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a0da94220ee1e0f4928aa31ed0d4b30f7">num_threads</a> = std::min(_impl-&gt;num_threads(), static_cast&lt;unsigned int&gt;(workloads.size()));</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a0da94220ee1e0f4928aa31ed0d4b30f7">num_threads</a> &lt; 1)</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    {</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        <span class="keywordflow">return</span>;</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    }</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    ThreadFeeder feeder(<a class="code" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a0da94220ee1e0f4928aa31ed0d4b30f7">num_threads</a>, workloads.size());</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    ThreadInfo   <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.cpu_info          = &amp;_cpu_info;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.num_threads       = <a class="code" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a0da94220ee1e0f4928aa31ed0d4b30f7">num_threads</a>;</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> t         = 0;</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    <span class="keyword">auto</span>         thread_it = _impl-&gt;_threads.begin();</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    <span class="keywordflow">for</span>(; t &lt; <a class="code" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a0da94220ee1e0f4928aa31ed0d4b30f7">num_threads</a> - 1; ++t, ++thread_it)</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    {</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.thread_id = t;</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;        thread_it-&gt;start(&amp;workloads, feeder, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>);</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    }</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.thread_id = t;</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    process_workloads(workloads, feeder, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>);</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_EXCEPTIONS_DISABLED</span></div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <span class="keywordflow">try</span></div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    {</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_EXCEPTIONS_DISABLED */</span><span class="preprocessor"></span></div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;thread : _impl-&gt;_threads)</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        {</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;            thread.wait();</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        }</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_EXCEPTIONS_DISABLED</span></div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    }</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <span class="keywordflow">catch</span>(<span class="keyword">const</span> std::system_error &amp;e)</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    {</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;        std::cerr &lt;&lt; <span class="stringliteral">&quot;Caught system_error with code &quot;</span> &lt;&lt; e.code() &lt;&lt; <span class="stringliteral">&quot; meaning &quot;</span> &lt;&lt; e.what() &lt;&lt; <span class="charliteral">&#39;\n&#39;</span>;</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    }</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_EXCEPTIONS_DISABLED */</span><span class="preprocessor"></span></div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;}</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* DOXYGEN_SKIP_THIS */</span><span class="preprocessor"></span></div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;</div><div class="line"><a name="l00312"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a8d6828523921b7f9313f64c48550617f">  312</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a8d6828523921b7f9313f64c48550617f">CPPScheduler::schedule</a>(<a class="code" href="classarm__compute_1_1_i_c_p_p_kernel.xhtml">ICPPKernel</a> *kernel, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_scheduler_1_1_hints.xhtml">Hints</a> &amp;hints)</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;{</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(!kernel, <span class="stringliteral">&quot;The child class didn&#39;t set the kernel&quot;</span>);</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a>      &amp;max_window     = kernel-&gt;<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>();</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_iterations = max_window.<a class="code" href="classarm__compute_1_1_window.xhtml#a2fb4b3d6b185c9d225073f923f1827c3">num_iterations</a>(hints.<a class="code" href="classarm__compute_1_1_i_scheduler_1_1_hints.xhtml#a4682a1a3d110d8f8807051cd998ced88">split_dimension</a>());</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a0da94220ee1e0f4928aa31ed0d4b30f7">num_threads</a>    = std::min(num_iterations, _impl-&gt;_num_threads);</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    <span class="keywordflow">if</span>(num_iterations == 0)</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    {</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;        <span class="keywordflow">return</span>;</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    }</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    <span class="keywordflow">if</span>(!kernel-&gt;<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#a0466ee6ce6552c87595f0e88e73eeb1b">is_parallelisable</a>() || <a class="code" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a0da94220ee1e0f4928aa31ed0d4b30f7">num_threads</a> == 1)</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    {</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;        <a class="code" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>;</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.cpu_info = &amp;_cpu_info;</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;        kernel-&gt;<a class="code" href="classarm__compute_1_1_i_c_p_p_kernel.xhtml#af814ff5e96f40f1cccf809b2b4ee19ef">run</a>(max_window, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>);</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    }</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    {</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_windows = 0;</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;        <span class="keywordflow">switch</span>(hints.<a class="code" href="classarm__compute_1_1_i_scheduler_1_1_hints.xhtml#a7d8915bebdf3785072169d23b3b6d6a3">strategy</a>())</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;        {</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#ad3ab921e075d1edd827faf95870aa808afe6f99ef1ec99efbdc19a9786cf1facc">StrategyHint::STATIC</a>:</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;                num_windows = <a class="code" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a0da94220ee1e0f4928aa31ed0d4b30f7">num_threads</a>;</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#ad3ab921e075d1edd827faf95870aa808a0fcc90da4811c877ba9f9c12f7d60bc9">StrategyHint::DYNAMIC</a>:</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;            {</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> granule_threshold = (hints.<a class="code" href="classarm__compute_1_1_i_scheduler_1_1_hints.xhtml#a35edee05aa4b2e0e80c851cdc3e68654">threshold</a>() &lt;= 0) ? <a class="code" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a0da94220ee1e0f4928aa31ed0d4b30f7">num_threads</a> : static_cast&lt;unsigned int&gt;(hints.<a class="code" href="classarm__compute_1_1_i_scheduler_1_1_hints.xhtml#a35edee05aa4b2e0e80c851cdc3e68654">threshold</a>());</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;                <span class="comment">// Make sure we don&#39;t use some windows which are too small as this might create some contention on the ThreadFeeder</span></div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                num_windows = num_iterations &gt; granule_threshold ? granule_threshold : num_iterations;</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;            }</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;            <span class="keywordflow">default</span>:</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unknown strategy&quot;</span>);</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        }</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;        std::vector&lt;IScheduler::Workload&gt; workloads(num_windows);</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> t = 0; t &lt; num_windows; t++)</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;        {</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;            <span class="comment">//Capture &#39;t&#39; by copy, all the other variables by reference:</span></div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;            workloads[t] = [t, &amp;hints, &amp;max_window, &amp;num_windows, &amp;kernel](<span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>)</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;            {</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;                <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> win = max_window.<a class="code" href="classarm__compute_1_1_window.xhtml#ad82ac0dcf7e7a862a3b73f1be3ca98f1">split_window</a>(hints.split_dimension(), t, num_windows);</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;                win.<a class="code" href="classarm__compute_1_1_window.xhtml#ab3a68a01a1c7c22bfbd9f3f6d20e7d5a">validate</a>();</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                kernel-&gt;<a class="code" href="classarm__compute_1_1_i_c_p_p_kernel.xhtml#af814ff5e96f40f1cccf809b2b4ee19ef">run</a>(win, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>);</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;            };</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;        }</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;        run_workloads(workloads);</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    }</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;}</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="ttc" id="classarm__compute_1_1_c_p_p_scheduler_xhtml_a29866c2e410a715d736ec447b986df78"><div class="ttname"><a href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a29866c2e410a715d736ec447b986df78">arm_compute::CPPScheduler::get</a></div><div class="ttdeci">static CPPScheduler &amp; get()</div><div class="ttdoc">Access the scheduler singleton.</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_scheduler_8cpp_source.xhtml#l00242">CPPScheduler.cpp:242</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_p_p_kernel_xhtml_af814ff5e96f40f1cccf809b2b4ee19ef"><div class="ttname"><a href="classarm__compute_1_1_i_c_p_p_kernel.xhtml#af814ff5e96f40f1cccf809b2b4ee19ef">arm_compute::ICPPKernel::run</a></div><div class="ttdeci">virtual void run(const Window &amp;window, const ThreadInfo &amp;info)=0</div><div class="ttdoc">Execute the kernel on the passed window.</div></div>
<div class="ttc" id="classarm__compute_1_1_i_kernel_xhtml_ad34a46f53686c12a5c5e717cc9617fb6"><div class="ttname"><a href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">arm_compute::IKernel::window</a></div><div class="ttdeci">const Window &amp; window() const</div><div class="ttdoc">The maximum window the kernel can be executed on.</div><div class="ttdef"><b>Definition:</b> <a href="_i_kernel_8cpp_source.xhtml#l00028">IKernel.cpp:28</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_p_p_scheduler_xhtml_a0da94220ee1e0f4928aa31ed0d4b30f7"><div class="ttname"><a href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a0da94220ee1e0f4928aa31ed0d4b30f7">arm_compute::CPPScheduler::num_threads</a></div><div class="ttdeci">unsigned int num_threads() const override</div><div class="ttdoc">Returns the number of threads that the CPPScheduler has in his pool.</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_scheduler_8cpp_source.xhtml#l00262">CPPScheduler.cpp:262</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00352">Error.h:352</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_p_p_kernel_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_c_p_p_kernel.xhtml">arm_compute::ICPPKernel</a></div><div class="ttdoc">Common interface for all kernels implemented in C++.</div><div class="ttdef"><b>Definition:</b> <a href="_i_c_p_p_kernel_8h_source.xhtml#l00035">ICPPKernel.h:35</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_scheduler_xhtml_ad3ab921e075d1edd827faf95870aa808afe6f99ef1ec99efbdc19a9786cf1facc"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler.xhtml#ad3ab921e075d1edd827faf95870aa808afe6f99ef1ec99efbdc19a9786cf1facc">arm_compute::IScheduler::StrategyHint::STATIC</a></div><div class="ttdoc">Split the workload evenly among the threads.</div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="_mutex_8h_xhtml"><div class="ttname"><a href="_mutex_8h.xhtml">Mutex.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_ad82ac0dcf7e7a862a3b73f1be3ca98f1"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#ad82ac0dcf7e7a862a3b73f1be3ca98f1">arm_compute::Window::split_window</a></div><div class="ttdeci">Window split_window(size_t dimension, size_t id, size_t total) const</div><div class="ttdoc">Split a window into a set of sub windows along a given dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00189">Window.inl:189</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_acded863dbfdd730829d4188d67eefcf0"><div class="ttname"><a href="namespacearm__compute.xhtml#acded863dbfdd730829d4188d67eefcf0">arm_compute::Mutex</a></div><div class="ttdeci">std::mutex Mutex</div><div class="ttdoc">Wrapper of Mutex data-object.</div><div class="ttdef"><b>Definition:</b> <a href="_mutex_8h_source.xhtml#l00033">Mutex.h:33</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_ab3a68a01a1c7c22bfbd9f3f6d20e7d5a"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#ab3a68a01a1c7c22bfbd9f3f6d20e7d5a">arm_compute::Window::validate</a></div><div class="ttdeci">void validate() const</div><div class="ttdoc">Will validate all the window's dimensions' values when asserts are enabled.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00173">Window.inl:173</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_a2fb4b3d6b185c9d225073f923f1827c3"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a2fb4b3d6b185c9d225073f923f1827c3">arm_compute::Window::num_iterations</a></div><div class="ttdeci">constexpr size_t num_iterations(size_t dimension) const</div><div class="ttdoc">Return the number of iterations needed to iterate through a given dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00182">Window.inl:182</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_scheduler_1_1_hints_xhtml_a35edee05aa4b2e0e80c851cdc3e68654"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler_1_1_hints.xhtml#a35edee05aa4b2e0e80c851cdc3e68654">arm_compute::IScheduler::Hints::threshold</a></div><div class="ttdeci">int threshold() const</div><div class="ttdoc">Return the granule capping threshold to be used by dynamic scheduling.</div><div class="ttdef"><b>Definition:</b> <a href="_i_scheduler_8h_source.xhtml#l00105">IScheduler.h:105</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2020 ARM Limited.</div><div class="ttdef"><b>Definition:</b> <a href="00__introduction_8dox_source.xhtml#l00024">00_introduction.dox:24</a></div></div>
<div class="ttc" id="_i_c_p_p_kernel_8h_xhtml"><div class="ttname"><a href="_i_c_p_p_kernel_8h.xhtml">ICPPKernel.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_scheduler_xhtml_ad3ab921e075d1edd827faf95870aa808a0fcc90da4811c877ba9f9c12f7d60bc9"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler.xhtml#ad3ab921e075d1edd827faf95870aa808a0fcc90da4811c877ba9f9c12f7d60bc9">arm_compute::IScheduler::StrategyHint::DYNAMIC</a></div><div class="ttdoc">Split the workload dynamically using a bucket system.</div></div>
<div class="ttc" id="arm__compute_2core_2_utils_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_utils_8h.xhtml">Utils.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_p_p_scheduler_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_p_p_scheduler.xhtml">arm_compute::CPPScheduler</a></div><div class="ttdoc">C++11 implementation of a pool of threads to automatically split a kernel's execution among several t...</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_scheduler_8h_source.xhtml#l00034">CPPScheduler.h:34</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_scheduler_1_1_hints_xhtml_a7d8915bebdf3785072169d23b3b6d6a3"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler_1_1_hints.xhtml#a7d8915bebdf3785072169d23b3b6d6a3">arm_compute::IScheduler::Hints::strategy</a></div><div class="ttdeci">StrategyHint strategy() const</div><div class="ttdoc">Return the prefered strategy to use to split workload.</div><div class="ttdef"><b>Definition:</b> <a href="_i_scheduler_8h_source.xhtml#l00097">IScheduler.h:97</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_kernel_xhtml_a0466ee6ce6552c87595f0e88e73eeb1b"><div class="ttname"><a href="classarm__compute_1_1_i_kernel.xhtml#a0466ee6ce6552c87595f0e88e73eeb1b">arm_compute::IKernel::is_parallelisable</a></div><div class="ttdeci">virtual bool is_parallelisable() const</div><div class="ttdoc">Indicates whether or not the kernel is parallelisable.</div><div class="ttdef"><b>Definition:</b> <a href="_i_kernel_8cpp_source.xhtml#l00041">IKernel.cpp:41</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a0b0eb3235749a2909dc5a101afe59a1b"><div class="ttname"><a href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond, msg)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00456">Error.h:456</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_p_p_scheduler_xhtml_a6a3f05037f66a2c8e9c02140f097b7ef"><div class="ttname"><a href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a6a3f05037f66a2c8e9c02140f097b7ef">arm_compute::CPPScheduler::~CPPScheduler</a></div><div class="ttdeci">~CPPScheduler()</div><div class="ttdoc">Default destructor.</div></div>
<div class="ttc" id="namespacearm__compute_1_1support_1_1cpp14_xhtml_a1d95a84d1a4610af6a128ad96c907e8b"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp14.xhtml#a1d95a84d1a4610af6a128ad96c907e8b">arm_compute::support::cpp14::make_unique</a></div><div class="ttdeci">_Unique_if&lt; T &gt;::_Single_object make_unique(Args &amp;&amp;... args)</div><div class="ttdoc">Construct a single object and return a unique pointer to it.</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00480">ToolchainSupport.h:480</a></div></div>
<div class="ttc" id="_c_p_u_utils_8h_xhtml"><div class="ttname"><a href="_c_p_u_utils_8h.xhtml">CPUUtils.h</a></div></div>
<div class="ttc" id="_error_8h_xhtml"><div class="ttname"><a href="_error_8h.xhtml">Error.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_p_p_scheduler_xhtml_ae64eebaa07f4d2da6cc2ba538c3cb095"><div class="ttname"><a href="classarm__compute_1_1_c_p_p_scheduler.xhtml#ae64eebaa07f4d2da6cc2ba538c3cb095">arm_compute::CPPScheduler::set_num_threads</a></div><div class="ttdeci">void set_num_threads(unsigned int num_threads) override</div><div class="ttdoc">Sets the number of threads the scheduler will use to run the kernels.</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_scheduler_8cpp_source.xhtml#l00255">CPPScheduler.cpp:255</a></div></div>
<div class="ttc" id="_c_p_p_scheduler_8h_xhtml"><div class="ttname"><a href="_c_p_p_scheduler_8h.xhtml">CPPScheduler.h</a></div></div>
<div class="ttc" id="structarm__compute_1_1_thread_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_thread_info.xhtml">arm_compute::ThreadInfo</a></div><div class="ttdoc">Information about executing thread and CPU.</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_types_8h_source.xhtml#l00225">CPPTypes.h:225</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_scheduler_xhtml_a6de5358eb9a099cda48662b2fc523ec5"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler.xhtml#a6de5358eb9a099cda48662b2fc523ec5">arm_compute::IScheduler::num_threads_hint</a></div><div class="ttdeci">unsigned int num_threads_hint() const</div><div class="ttdoc">Get a hint for the best possible number of execution threads.</div><div class="ttdef"><b>Definition:</b> <a href="_i_scheduler_8cpp_source.xhtml#l00044">IScheduler.cpp:44</a></div></div>
<div class="ttc" id="arm__compute_2core_2_helpers_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_helpers_8h.xhtml">Helpers.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_scheduler_1_1_hints_xhtml_a4682a1a3d110d8f8807051cd998ced88"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler_1_1_hints.xhtml#a4682a1a3d110d8f8807051cd998ced88">arm_compute::IScheduler::Hints::split_dimension</a></div><div class="ttdeci">unsigned int split_dimension() const</div><div class="ttdoc">Return the prefered split dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_i_scheduler_8h_source.xhtml#l00077">IScheduler.h:77</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a4f4125dba5283887b34f889b1c615c0c"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">arm_compute::test::validation::info</a></div><div class="ttdeci">info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00182">ConvolutionLayer.cpp:182</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a18809773edf57d061fc2826abf0dab5e"><div class="ttname"><a href="namespacearm__compute.xhtml#a18809773edf57d061fc2826abf0dab5e">arm_compute::lock_guard</a></div><div class="ttdeci">std::lock_guard&lt; Mutex &gt; lock_guard</div><div class="ttdoc">Wrapper of lock_guard data-object.</div><div class="ttdef"><b>Definition:</b> <a href="_mutex_8h_source.xhtml#l00037">Mutex.h:37</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_scheduler_1_1_hints_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler_1_1_hints.xhtml">arm_compute::IScheduler::Hints</a></div><div class="ttdoc">Scheduler hints.</div><div class="ttdef"><b>Definition:</b> <a href="_i_scheduler_8h_source.xhtml#l00049">IScheduler.h:49</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml">arm_compute::Window</a></div><div class="ttdoc">Describe a multidimensional execution window.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00039">Window.h:39</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_p_p_scheduler_xhtml_a8d6828523921b7f9313f64c48550617f"><div class="ttname"><a href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a8d6828523921b7f9313f64c48550617f">arm_compute::CPPScheduler::schedule</a></div><div class="ttdeci">void schedule(ICPPKernel *kernel, const Hints &amp;hints) override</div><div class="ttdoc">Multithread the execution of the passed kernel if possible.</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_scheduler_8cpp_source.xhtml#l00312">CPPScheduler.cpp:312</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_p_p_scheduler_xhtml_a7dc07a8f5e4ef2b4b07f6076893db4f0"><div class="ttname"><a href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a7dc07a8f5e4ef2b4b07f6076893db4f0">arm_compute::CPPScheduler::CPPScheduler</a></div><div class="ttdeci">CPPScheduler()</div><div class="ttdoc">Constructor: create a pool of threads.</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_scheduler_8cpp_source.xhtml#l00248">CPPScheduler.cpp:248</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_bf9f26469d00835ba20ff8d80ee5a804.xhtml">runtime</a></li><li class="navelem"><a class="el" href="dir_9240672d44dfdb0f539b385a1f058d2d.xhtml">CPP</a></li><li class="navelem"><a class="el" href="_c_p_p_scheduler_8cpp.xhtml">CPPScheduler.cpp</a></li>
    <li class="footer">Generated on Fri Feb 21 2020 11:10:16 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
