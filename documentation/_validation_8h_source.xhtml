<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: tests/validation/Validation.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.02.1</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('_validation_8h_source.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Validation.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_validation_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017-2019 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_TEST_VALIDATION_H</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define ARM_COMPUTE_TEST_VALIDATION_H</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_array_8h.xhtml">arm_compute/core/IArray.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_types_8h.xhtml">arm_compute/core/Types.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_toolchain_support_8h.xhtml">support/ToolchainSupport.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_accessor_8h.xhtml">tests/IAccessor.h</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_simple_tensor_8h.xhtml">tests/SimpleTensor.h</a>&quot;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="tests_2_types_8h.xhtml">tests/Types.h</a>&quot;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="tests_2_utils_8h.xhtml">tests/Utils.h</a>&quot;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_asserts_8h.xhtml">tests/framework/Asserts.h</a>&quot;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_exceptions_8h.xhtml">tests/framework/Exceptions.h</a>&quot;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="utils_2_type_printer_8h.xhtml">utils/TypePrinter.h</a>&quot;</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#include &lt;iomanip&gt;</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#include &lt;ios&gt;</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;{</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="keyword">namespace </span>test</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;{</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="keyword">namespace </span>validation</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;{<span class="comment"></span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment">/** Class reprensenting an absolute tolerance value. */</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00050"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1validation_1_1_absolute_tolerance.xhtml">   50</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1test_1_1validation_1_1_absolute_tolerance.xhtml">AbsoluteTolerance</a></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;{</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment">    /** Underlying type. */</span></div><div class="line"><a name="l00054"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1validation_1_1_absolute_tolerance.xhtml#afb9ded5f49336ae503bb9f2035ea902b">   54</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_absolute_tolerance.xhtml#afb9ded5f49336ae503bb9f2035ea902b">value_type</a> = T;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="comment">/* Default constructor.</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment">     * Initialises the tolerance to 0.</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_absolute_tolerance.xhtml#a98a801b3455152020b7543995eeb3224">AbsoluteTolerance</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment">    /** Constructor.</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment">     * @param[in] value Absolute tolerance value.</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00066"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1validation_1_1_absolute_tolerance.xhtml#a0856d709c655f740d93b50e9121a7aa3">   66</a></span>&#160;    <span class="keyword">explicit</span> constexpr <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_absolute_tolerance.xhtml#a0856d709c655f740d93b50e9121a7aa3">AbsoluteTolerance</a>(T value)</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        : _value{ value }</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    {</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    }</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment">    /** Implicit conversion to the underlying type.</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment">     * @return the underlying type.</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00075"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1validation_1_1_absolute_tolerance.xhtml#af0c9beda8887a48bb967dd5e2f44d5f5">   75</a></span>&#160;    constexpr <span class="keyword">operator</span> T()<span class="keyword"> const</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <span class="keywordflow">return</span> _value;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    }</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    T _value{ <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">std::numeric_limits&lt;T&gt;::epsilon</a>() };</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;};</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment">/** Class reprensenting a relative tolerance value. */</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00086"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1validation_1_1_relative_tolerance.xhtml">   86</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1test_1_1validation_1_1_relative_tolerance.xhtml">RelativeTolerance</a></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;{</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment">    /** Underlying type. */</span></div><div class="line"><a name="l00090"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1validation_1_1_relative_tolerance.xhtml#afb9ded5f49336ae503bb9f2035ea902b">   90</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_relative_tolerance.xhtml#afb9ded5f49336ae503bb9f2035ea902b">value_type</a> = T;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="comment">/* Default constructor.</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment">     * Initialises the tolerance to 0.</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_relative_tolerance.xhtml#afba8d635945ce2a2787199919de28572">RelativeTolerance</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment">    /** Constructor.</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment">     * @param[in] value Relative tolerance value.</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00102"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1validation_1_1_relative_tolerance.xhtml#a646bf2ba26847ea66d436ae933883c73">  102</a></span>&#160;    <span class="keyword">explicit</span> constexpr <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_relative_tolerance.xhtml#a646bf2ba26847ea66d436ae933883c73">RelativeTolerance</a>(<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_relative_tolerance.xhtml#afb9ded5f49336ae503bb9f2035ea902b">value_type</a> value)</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        : _value{ value }</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    {</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    }</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment">    /** Implicit conversion to the underlying type.</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment">     * @return the underlying type.</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00111"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1validation_1_1_relative_tolerance.xhtml#ad3292759910d27b3e4cf00fda9c4efc0">  111</a></span>&#160;    constexpr <span class="keyword">operator</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_relative_tolerance.xhtml#afb9ded5f49336ae503bb9f2035ea902b">value_type</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <span class="keywordflow">return</span> _value;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    }</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_relative_tolerance.xhtml#afb9ded5f49336ae503bb9f2035ea902b">value_type</a> _value{ <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">std::numeric_limits&lt;T&gt;::epsilon</a>() };</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;};</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment">/** Print AbsoluteTolerance type. */</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00122"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab6d7586446a24baaa269c5f9a65ecd7f">  122</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab6d7586446a24baaa269c5f9a65ecd7f">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_absolute_tolerance.xhtml">AbsoluteTolerance&lt;T&gt;</a> &amp;tolerance)</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;{</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    os &lt;&lt; static_cast&lt;typename AbsoluteTolerance&lt;T&gt;::value_type&gt;(tolerance);</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;}</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment">/** Print RelativeTolerance type. */</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00131"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5e05c35e20ad8ca67a4fbdd57e33ac8c">  131</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab6d7586446a24baaa269c5f9a65ecd7f">operator&lt;&lt;</a>(::std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_relative_tolerance.xhtml">RelativeTolerance&lt;T&gt;</a> &amp;tolerance)</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;{</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    os &lt;&lt; static_cast&lt;typename RelativeTolerance&lt;T&gt;::value_type&gt;(tolerance);</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;}</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00139"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation.xhtml#aea1f11d8f6aab979e9d4dc61c26aed65">  139</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aea1f11d8f6aab979e9d4dc61c26aed65">compare_dimensions</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_dimensions.xhtml">Dimensions&lt;T&gt;</a> &amp;dimensions1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_dimensions.xhtml">Dimensions&lt;T&gt;</a> &amp;dimensions2, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a> = <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>)</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;{</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a> == <a class="code" href="namespacearm__compute.xhtml#a3a440b3893fa10608d4428958be1c52ea696b031073e74bf2cb98e5ef201d4aa3">DataLayout::UNKNOWN</a>);</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a> == <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>)</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    {</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        <span class="keywordflow">if</span>(dimensions1.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">num_dimensions</a>() != dimensions2.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">num_dimensions</a>())</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        {</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        }</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; dimensions1.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">num_dimensions</a>(); ++i)</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        {</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            <span class="keywordflow">if</span>(dimensions1[i] != dimensions2[i])</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;            {</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;            }</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        }</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    }</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    {</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        <span class="comment">// In case a 2D shape becomes 3D after permutation, the permuted tensor will have one dimension more and the first value will be 1</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        <span class="keywordflow">if</span>((dimensions1.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">num_dimensions</a>() != dimensions2.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">num_dimensions</a>()) &amp;&amp; ((dimensions1.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">num_dimensions</a>() != (dimensions2.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">num_dimensions</a>() + 1)) || (dimensions1.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">x</a>() != 1)))</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        {</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        }</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        <span class="keywordflow">if</span>((dimensions1[0] != dimensions2[2]) || (dimensions1[1] != dimensions2[0]) || (dimensions1[2] != dimensions2[1]))</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        {</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        }</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 3; i &lt; dimensions1.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">num_dimensions</a>(); ++i)</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        {</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;            <span class="keywordflow">if</span>(dimensions1[i] != dimensions2[i])</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            {</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            }</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        }</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    }</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;}</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="comment">/** Validate valid regions.</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="comment"> * - Dimensionality has to be the same.</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="comment"> * - Anchors have to match.</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="comment"> * - Shapes have to match.</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae02c6fc90d9c60c634bfa258049eb46b">validate</a>(<span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_valid_region.xhtml">arm_compute::ValidRegion</a> &amp;region, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_valid_region.xhtml">arm_compute::ValidRegion</a> &amp;reference);</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="comment">/** Validate padding.</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="comment"> * Padding on all sides has to be the same.</span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae02c6fc90d9c60c634bfa258049eb46b">validate</a>(<span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_border_size.xhtml">arm_compute::PaddingSize</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a735a025fce26c1ef147b54426df18181">padding</a>, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_border_size.xhtml">arm_compute::PaddingSize</a> &amp;reference);</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="comment">/** Validate padding.</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="comment"> * Padding on all sides has to be the same.</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae02c6fc90d9c60c634bfa258049eb46b">validate</a>(<span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_border_size.xhtml">arm_compute::PaddingSize</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a735a025fce26c1ef147b54426df18181">padding</a>, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_border_size.xhtml">arm_compute::PaddingSize</a> &amp;width_reference, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_border_size.xhtml">arm_compute::PaddingSize</a> &amp;height_reference);</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="comment">/** Validate tensors.</span></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="comment"> * - Dimensionality has to be the same.</span></div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="comment"> * - All values have to match.</span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="comment"> * @note: wrap_range allows cases where reference tensor rounds up to the wrapping point, causing it to wrap around to</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="comment"> * zero while the test tensor stays at wrapping point to pass. This may permit true erroneous cases (difference between</span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="comment"> * reference tensor and test tensor is multiple of wrap_range), but such errors would be detected by</span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="comment"> * other test cases.</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U = AbsoluteTolerance&lt;T&gt;&gt;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae02c6fc90d9c60c634bfa258049eb46b">validate</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_i_accessor.xhtml">IAccessor</a> &amp;tensor, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> &amp;reference, U tolerance_value = <a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a2ea3d1fc01a3a442900249ca182ffa5e">U</a>(), <span class="keywordtype">float</span> tolerance_number = 0.f, <span class="keywordtype">float</span> absolute_tolerance_value = 0.f);</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="comment">/** Validate tensors with valid region.</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="comment"> * - Dimensionality has to be the same.</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="comment"> * - All values have to match.</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="comment"> * @note: wrap_range allows cases where reference tensor rounds up to the wrapping point, causing it to wrap around to</span></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="comment"> * zero while the test tensor stays at wrapping point to pass. This may permit true erroneous cases (difference between</span></div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="comment"> * reference tensor and test tensor is multiple of wrap_range), but such errors would be detected by</span></div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="comment"> * other test cases.</span></div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U = AbsoluteTolerance&lt;T&gt;&gt;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae02c6fc90d9c60c634bfa258049eb46b">validate</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_i_accessor.xhtml">IAccessor</a> &amp;tensor, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> &amp;reference, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7819bcbbf45c2e7c1396a137dce54422">valid_region</a>, U tolerance_value = <a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a2ea3d1fc01a3a442900249ca182ffa5e">U</a>(), <span class="keywordtype">float</span> tolerance_number = 0.f, <span class="keywordtype">float</span> absolute_tolerance_value = 0.f);</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="comment">/** Validate tensors with valid mask.</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="comment"> * - Dimensionality has to be the same.</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="comment"> * - All values have to match.</span></div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="comment"> * @note: wrap_range allows cases where reference tensor rounds up to the wrapping point, causing it to wrap around to</span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="comment"> * zero while the test tensor stays at wrapping point to pass. This may permit true erroneous cases (difference between</span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="comment"> * reference tensor and test tensor is multiple of wrap_range), but such errors would be detected by</span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="comment"> * other test cases.</span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U = AbsoluteTolerance&lt;T&gt;&gt;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae02c6fc90d9c60c634bfa258049eb46b">validate</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_i_accessor.xhtml">IAccessor</a> &amp;tensor, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> &amp;reference, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> &amp;valid_mask, U tolerance_value = <a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a2ea3d1fc01a3a442900249ca182ffa5e">U</a>(), <span class="keywordtype">float</span> tolerance_number = 0.f,</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;              <span class="keywordtype">float</span> absolute_tolerance_value = 0.f);</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="comment">/** Validate tensors against constant value.</span></div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="comment"> * - All values have to match.</span></div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae02c6fc90d9c60c634bfa258049eb46b">validate</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_i_accessor.xhtml">IAccessor</a> &amp;tensor, <span class="keyword">const</span> <span class="keywordtype">void</span> *reference_value);</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="comment">/** Validate border against a constant value.</span></div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="comment"> * - All border values have to match the specified value if mode is CONSTANT.</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="comment"> * - All border values have to be replicated if mode is REPLICATE.</span></div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="comment"> * - Nothing is validated for mode UNDEFINED.</span></div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae02c6fc90d9c60c634bfa258049eb46b">validate</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_i_accessor.xhtml">IAccessor</a> &amp;tensor, <a class="code" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a> border_size, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5471e46933e7a9c4709972d91fc4ea65">border_mode</a>, <span class="keyword">const</span> <span class="keywordtype">void</span> *border_value);</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="comment">/** Validate classified labels against expected ones.</span></div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="comment"> * - All values should match</span></div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae02c6fc90d9c60c634bfa258049eb46b">validate</a>(std::vector&lt;unsigned int&gt; classified_labels, std::vector&lt;unsigned int&gt; expected_labels);</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="comment">/** Validate float value.</span></div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="comment"> * - All values should match</span></div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U = AbsoluteTolerance&lt;T&gt;&gt;</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae02c6fc90d9c60c634bfa258049eb46b">validate</a>(T target, T reference, U tolerance = AbsoluteTolerance&lt;T&gt;());</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="comment">/** Validate key points. */</span></div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U, <span class="keyword">typename</span> V = AbsoluteTolerance&lt;<span class="keywordtype">float</span>&gt;&gt;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7f99d2d87d24921c41c66388243f27c1">validate_keypoints</a>(T target_first, T target_last, U reference_first, U reference_last, V tolerance = AbsoluteTolerance&lt;float&gt;(),</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                        <span class="keywordtype">float</span> allowed_missing_percentage = 5.f, <span class="keywordtype">float</span> allowed_mismatch_percentage = 5.f);</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="comment">/** Validate detection windows. */</span></div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U, <span class="keyword">typename</span> V = AbsoluteTolerance&lt;<span class="keywordtype">float</span>&gt;&gt;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7eea716df6e4c1348c4bbe4438c347fe">validate_detection_windows</a>(T target_first, T target_last, U reference_first, U reference_last, V tolerance = AbsoluteTolerance&lt;float&gt;(),</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;                                <span class="keywordtype">float</span> allowed_missing_percentage = 5.f, <span class="keywordtype">float</span> allowed_mismatch_percentage = 5.f);</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00281"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1compare__base.xhtml">  281</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1test_1_1validation_1_1compare__base.xhtml">compare_base</a></div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;{<span class="comment"></span></div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="comment">    /** Construct a comparison object.</span></div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="comment">     * @param[in] target    Target value.</span></div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="comment">     * @param[in] reference Reference value.</span></div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;<span class="comment">     * @param[in] tolerance Allowed tolerance.</span></div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00289"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1compare__base.xhtml#a42c8a61b86fc900746fef0f1f70a9430">  289</a></span>&#160;    <a class="code" href="structarm__compute_1_1test_1_1validation_1_1compare__base.xhtml#a42c8a61b86fc900746fef0f1f70a9430">compare_base</a>(<span class="keyword">typename</span> T::value_type target, <span class="keyword">typename</span> T::value_type reference, T tolerance = T(0))</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;        : <a class="code" href="structarm__compute_1_1test_1_1validation_1_1compare__base.xhtml#a43df64dda9f48ddc325ea5ee5cce504c">_target</a>{ target }, <a class="code" href="structarm__compute_1_1test_1_1validation_1_1compare__base.xhtml#a9cdfbe0f92ba33d9d5c84bc06600640c">_reference</a>{ reference }, <a class="code" href="structarm__compute_1_1test_1_1validation_1_1compare__base.xhtml#aa4fd55d362930310365e320208784ede">_tolerance</a>{ tolerance }</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    {</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    }</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;</div><div class="line"><a name="l00294"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1compare__base.xhtml#a43df64dda9f48ddc325ea5ee5cce504c">  294</a></span>&#160;    <span class="keyword">typename</span> T::value_type <a class="code" href="structarm__compute_1_1test_1_1validation_1_1compare__base.xhtml#a43df64dda9f48ddc325ea5ee5cce504c">_target</a>{};    <span class="comment">/**&lt; Target value */</span></div><div class="line"><a name="l00295"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1compare__base.xhtml#a9cdfbe0f92ba33d9d5c84bc06600640c">  295</a></span>&#160;    <span class="keyword">typename</span> T::value_type <a class="code" href="structarm__compute_1_1test_1_1validation_1_1compare__base.xhtml#a9cdfbe0f92ba33d9d5c84bc06600640c">_reference</a>{}; <span class="comment">/**&lt; Reference value */</span></div><div class="line"><a name="l00296"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1compare__base.xhtml#aa4fd55d362930310365e320208784ede">  296</a></span>&#160;    T                      <a class="code" href="structarm__compute_1_1test_1_1validation_1_1compare__base.xhtml#aa4fd55d362930310365e320208784ede">_tolerance</a>{}; <span class="comment">/**&lt; Tolerance value */</span></div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;};</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00300"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1compare.xhtml">  300</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1test_1_1validation_1_1compare.xhtml">compare</a>;</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;<span class="comment">/** Compare values with an absolute tolerance */</span></div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</div><div class="line"><a name="l00304"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1compare_3_01_absolute_tolerance_3_01_u_01_4_01_4.xhtml">  304</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1test_1_1validation_1_1compare.xhtml">compare</a>&lt;<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_absolute_tolerance.xhtml">AbsoluteTolerance</a>&lt;<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a2ea3d1fc01a3a442900249ca182ffa5e">U</a>&gt;&gt; : <span class="keyword">public</span> <a class="code" href="structarm__compute_1_1test_1_1validation_1_1compare__base.xhtml">compare_base</a>&lt;AbsoluteTolerance&lt;U&gt;&gt;</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;{</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <span class="keyword">using</span> <a class="code" href="structarm__compute_1_1test_1_1validation_1_1compare__base.xhtml">compare_base&lt;AbsoluteTolerance&lt;U&gt;</a>&gt;<a class="code" href="structarm__compute_1_1test_1_1validation_1_1compare__base.xhtml">::compare_base</a>;</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="comment">    /** Perform comparison */</span></div><div class="line"><a name="l00309"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1compare_3_01_absolute_tolerance_3_01_u_01_4_01_4.xhtml#a67b76affb3b5d35fa419ac234144038b">  309</a></span>&#160;    <span class="keyword">operator</span> bool()<span class="keyword"> const</span></div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;        <span class="keywordflow">if</span>(!<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a079a0ecb5fc05e0a107785f2573bc854">support::cpp11::isfinite</a>(this-&gt;_target) || !<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a079a0ecb5fc05e0a107785f2573bc854">support::cpp11::isfinite</a>(this-&gt;_reference))</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;        {</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;        }</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span>(this-&gt;_target == this-&gt;_reference)</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        {</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;        }</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;        <span class="keyword">using</span> comparison_type = <span class="keyword">typename</span> std::conditional&lt;std::is_integral&lt;U&gt;::value, int64_t, <a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a2ea3d1fc01a3a442900249ca182ffa5e">U</a>&gt;<a class="code" href="namespace_gemm_tuner.xhtml#a7aead736a07eaf25623ad7bfa1f0ee2d">::type</a>;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;        <span class="keyword">const</span> comparison_type abs_difference(std::abs(static_cast&lt;comparison_type&gt;(this-&gt;_target) - static_cast&lt;comparison_type&gt;(this-&gt;_reference)));</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;        <span class="keywordflow">return</span> abs_difference &lt;= static_cast&lt;comparison_type&gt;(this-&gt;_tolerance);</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    }</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;};</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;<span class="comment">/** Compare values with a relative tolerance */</span></div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</div><div class="line"><a name="l00330"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1compare_3_01_relative_tolerance_3_01_u_01_4_01_4.xhtml">  330</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1test_1_1validation_1_1compare.xhtml">compare</a>&lt;<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_relative_tolerance.xhtml">RelativeTolerance</a>&lt;<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a2ea3d1fc01a3a442900249ca182ffa5e">U</a>&gt;&gt; : <span class="keyword">public</span> <a class="code" href="structarm__compute_1_1test_1_1validation_1_1compare__base.xhtml">compare_base</a>&lt;RelativeTolerance&lt;U&gt;&gt;</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;{</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    <span class="keyword">using</span> <a class="code" href="structarm__compute_1_1test_1_1validation_1_1compare__base.xhtml">compare_base&lt;RelativeTolerance&lt;U&gt;</a>&gt;<a class="code" href="structarm__compute_1_1test_1_1validation_1_1compare__base.xhtml">::compare_base</a>;</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;<span class="comment">    /** Perform comparison */</span></div><div class="line"><a name="l00335"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1compare_3_01_relative_tolerance_3_01_u_01_4_01_4.xhtml#a67b76affb3b5d35fa419ac234144038b">  335</a></span>&#160;    <span class="keyword">operator</span> bool()<span class="keyword"> const</span></div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;        <span class="keywordflow">if</span>(!<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a079a0ecb5fc05e0a107785f2573bc854">support::cpp11::isfinite</a>(this-&gt;_target) || !<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a079a0ecb5fc05e0a107785f2573bc854">support::cpp11::isfinite</a>(this-&gt;_reference))</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;        {</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;        }</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span>(this-&gt;_target == this-&gt;_reference)</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;        {</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        }</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a2ea3d1fc01a3a442900249ca182ffa5e">U</a> <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a> = (<a class="code" href="namespace_gemm_tuner.xhtml#a7aead736a07eaf25623ad7bfa1f0ee2d">std::is_same&lt;half, typename std::remove_cv&lt;U&gt;::type</a>&gt;::value || (this-&gt;_reference == 0)) ? static_cast&lt;U&gt;(0.01) : static_cast&lt;U&gt;(1e-05);</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        <span class="keywordflow">if</span>(std::abs(static_cast&lt;double&gt;(this-&gt;_reference) - static_cast&lt;double&gt;(this-&gt;_target)) &lt;= <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>)</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;        {</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;        }</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;        {</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;            <span class="keywordflow">if</span>(static_cast&lt;double&gt;(this-&gt;_reference) == 0.0f) <span class="comment">// We have checked whether _reference and _target is closing. If _reference is 0 but not closed to _target, it should return false</span></div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;            {</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;            }</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">double</span> relative_change = std::abs((static_cast&lt;double&gt;(this-&gt;_target) - static_cast&lt;double&gt;(this-&gt;_reference)) / this-&gt;_reference);</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;            <span class="keywordflow">return</span> relative_change &lt;= static_cast&lt;U&gt;(this-&gt;_tolerance);</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;        }</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    }</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;};</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</div><div class="line"><a name="l00367"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa24df7339d073ba83dae2de61cc80416">  367</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae02c6fc90d9c60c634bfa258049eb46b">validate</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_i_accessor.xhtml">IAccessor</a> &amp;tensor, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> &amp;reference, U tolerance_value, <span class="keywordtype">float</span> tolerance_number, <span class="keywordtype">float</span> absolute_tolerance_value)</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;{</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    <span class="comment">// Validate with valid region covering the entire shape</span></div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae02c6fc90d9c60c634bfa258049eb46b">validate</a>(tensor, reference, <a class="code" href="namespacearm__compute_1_1test.xhtml#a8103df0e6c416f55f40106aa49072b42">shape_to_valid_region</a>(reference.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>()), tolerance_value, tolerance_number, absolute_tolerance_value);</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;}</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;template &lt;typename T, typename U, typename = typename std::enable_if&lt;std::is_integral&lt;T&gt;::value&gt;<a class="code" href="namespace_gemm_tuner.xhtml#a7aead736a07eaf25623ad7bfa1f0ee2d">::type</a>&gt;</div><div class="line"><a name="l00374"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1ee57e5e1f775f2c270c4adf0b4940a7">  374</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1ee57e5e1f775f2c270c4adf0b4940a7">validate_wrap</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_i_accessor.xhtml">IAccessor</a> &amp;tensor, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> &amp;reference, U tolerance_value, <span class="keywordtype">float</span> tolerance_number)</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;{</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    <span class="comment">// Validate with valid region covering the entire shape</span></div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1ee57e5e1f775f2c270c4adf0b4940a7">validate_wrap</a>(tensor, reference, <a class="code" href="namespacearm__compute_1_1test.xhtml#a8103df0e6c416f55f40106aa49072b42">shape_to_valid_region</a>(reference.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>()), tolerance_value, tolerance_number);</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;}</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</div><div class="line"><a name="l00381"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation.xhtml#a0a7133ce9111c2d17597730ae3629b87">  381</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae02c6fc90d9c60c634bfa258049eb46b">validate</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_i_accessor.xhtml">IAccessor</a> &amp;tensor, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> &amp;reference, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7819bcbbf45c2e7c1396a137dce54422">valid_region</a>, U tolerance_value, <span class="keywordtype">float</span> tolerance_number, <span class="keywordtype">float</span> absolute_tolerance_value)</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;{</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    uint64_t num_mismatches = 0;</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    uint64_t num_elements   = 0;</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    <a class="code" href="_asserts_8h.xhtml#ac057d80e0c27881ee453299d98a878f4">ARM_COMPUTE_EXPECT_EQUAL</a>(tensor.<a class="code" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#aa459796b5489eca8a9160cb5dcf1a103">element_size</a>(), reference.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a62b67b578f684c4d516843c9dea86a23">element_size</a>(), <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">framework::LogLevel::ERRORS</a>);</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    <a class="code" href="_asserts_8h.xhtml#ac057d80e0c27881ee453299d98a878f4">ARM_COMPUTE_EXPECT_EQUAL</a>(tensor.<a class="code" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>(), reference.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a9a3e72153aeb3ed212e9c3698774e881">data_type</a>(), <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">framework::LogLevel::ERRORS</a>);</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    <span class="keywordflow">if</span>(reference.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">format</a>() != <a class="code" href="namespacearm__compute.xhtml#a3a440b3893fa10608d4428958be1c52ea696b031073e74bf2cb98e5ef201d4aa3">Format::UNKNOWN</a>)</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    {</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;        <a class="code" href="_asserts_8h.xhtml#ac057d80e0c27881ee453299d98a878f4">ARM_COMPUTE_EXPECT_EQUAL</a>(tensor.<a class="code" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#a57360dd9ca408834c0ea1a8ef70a11f4">format</a>(), reference.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">format</a>(), <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">framework::LogLevel::ERRORS</a>);</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    }</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    <a class="code" href="_asserts_8h.xhtml#ac057d80e0c27881ee453299d98a878f4">ARM_COMPUTE_EXPECT_EQUAL</a>(tensor.<a class="code" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#ac492280ef2d7889f1226d34743b74459">num_channels</a>(), reference.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#abdd3637f2bbde9d7d0cc0b7bbd8400bb">num_channels</a>(), <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">framework::LogLevel::ERRORS</a>);</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3c8562a1f05d23f44aed87545b7892cf">ARM_COMPUTE_EXPECT</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aea1f11d8f6aab979e9d4dc61c26aed65">compare_dimensions</a>(tensor.<a class="code" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#a1c5e120ea2712b21296aa8f62421d3c1">shape</a>(), reference.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>(), tensor.<a class="code" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#a367b5090ab432bc7de2c32369e087ab1">data_layout</a>()), <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">framework::LogLevel::ERRORS</a>);</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> min_elements = std::min(tensor.<a class="code" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#a7596bc2928432a0ac2271bc9184d692e">num_elements</a>(), reference.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aedcfdd4c3b92fe0d63b5463c7ad1d21e">num_elements</a>());</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> min_channels = std::min(tensor.<a class="code" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#ac492280ef2d7889f1226d34743b74459">num_channels</a>(), reference.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#abdd3637f2bbde9d7d0cc0b7bbd8400bb">num_channels</a>());</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    <span class="comment">// Iterate over all elements within valid region, e.g. U8, S16, RGB888, ...</span></div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> element_idx = 0; element_idx &lt; min_elements; ++element_idx)</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    {</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> <span class="keywordtype">id</span> = <a class="code" href="namespacearm__compute_1_1test.xhtml#a24d8c0391cfa38e78969b6ad97c0ff09">index2coord</a>(reference.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>(), element_idx);</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;        <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> target_id(<span class="keywordtype">id</span>);</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;        <span class="keywordflow">if</span>(tensor.<a class="code" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#a367b5090ab432bc7de2c32369e087ab1">data_layout</a>() == <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>)</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;        {</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;            <a class="code" href="namespacearm__compute.xhtml#a21c3e11887f3acf9284ca763372c7da0">permute</a>(target_id, <a class="code" href="namespacearm__compute.xhtml#a33e65be485104e2e9e69fca551d6f492">PermutationVector</a>(2<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a2ea3d1fc01a3a442900249ca182ffa5e">U</a>, 0<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a2ea3d1fc01a3a442900249ca182ffa5e">U</a>, 1<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a2ea3d1fc01a3a442900249ca182ffa5e">U</a>));</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;        }</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;        <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute_1_1test.xhtml#a856b55fc20ddcbdbeb84c35ae27bedac">is_in_valid_region</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7819bcbbf45c2e7c1396a137dce54422">valid_region</a>, <span class="keywordtype">id</span>))</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;        {</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;            <span class="comment">// Iterate over all channels within one element</span></div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> c = 0; c &lt; min_channels; ++c)</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;            {</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;                <span class="keyword">const</span> T &amp;target_value    = reinterpret_cast&lt;const T *&gt;(tensor(target_id))[c];</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;                <span class="keyword">const</span> T &amp;reference_value = reinterpret_cast&lt;const T *&gt;(reference(<span class="keywordtype">id</span>))[c];</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;                <span class="keywordflow">if</span>(!<a class="code" href="structarm__compute_1_1test_1_1validation_1_1compare.xhtml">compare&lt;U&gt;</a>(target_value, reference_value, tolerance_value))</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;                {</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;                    <span class="keywordflow">if</span>(absolute_tolerance_value != 0.f)</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;                    {</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;                        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_absolute_tolerance.xhtml">AbsoluteTolerance&lt;float&gt;</a> abs_tolerance(absolute_tolerance_value);</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;                        <span class="keywordflow">if</span>(<a class="code" href="structarm__compute_1_1test_1_1validation_1_1compare.xhtml">compare</a>&lt;<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_absolute_tolerance.xhtml">AbsoluteTolerance&lt;float&gt;</a>&gt;(target_value, reference_value, abs_tolerance))</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;                        {</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;                            <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;                        }</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;                    }</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;                    <a class="code" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a>(<span class="stringliteral">&quot;id = &quot;</span> &lt;&lt; <span class="keywordtype">id</span>);</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;                    <a class="code" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a>(<span class="stringliteral">&quot;channel = &quot;</span> &lt;&lt; c);</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;                    <a class="code" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a>(<span class="stringliteral">&quot;target = &quot;</span> &lt;&lt; std::setprecision(5) &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#ac82666ff37e69696e3945d175a50e363">framework::make_printable</a>(target_value));</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;                    <a class="code" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a>(<span class="stringliteral">&quot;reference = &quot;</span> &lt;&lt; std::setprecision(5) &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#ac82666ff37e69696e3945d175a50e363">framework::make_printable</a>(reference_value));</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;                    <a class="code" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a>(<span class="stringliteral">&quot;tolerance = &quot;</span> &lt;&lt; std::setprecision(5) &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#ac82666ff37e69696e3945d175a50e363">framework::make_printable</a>(static_cast&lt;typename U::value_type&gt;(tolerance_value)));</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;                    <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#a7457955ed1c49b6478071caa7b5c5be2">framework::ARM_COMPUTE_PRINT_INFO</a>();</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;                    ++num_mismatches;</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;                }</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;                ++num_elements;</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;            }</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;        }</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;    }</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    <span class="keywordflow">if</span>(num_elements != 0)</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    {</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;        <span class="keyword">const</span> uint64_t absolute_tolerance_number = tolerance_number * num_elements;</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span>    percent_mismatches        = static_cast&lt;float&gt;(num_mismatches) / num_elements * 100.f;</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;        <a class="code" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a>(num_mismatches &lt;&lt; <span class="stringliteral">&quot; values (&quot;</span> &lt;&lt; std::fixed &lt;&lt; std::setprecision(2) &lt;&lt; percent_mismatches</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;                              &lt;&lt; <span class="stringliteral">&quot;%) mismatched (maximum tolerated &quot;</span> &lt;&lt; std::setprecision(2) &lt;&lt; tolerance_number * 100 &lt;&lt; <span class="stringliteral">&quot;%)&quot;</span>);</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3c8562a1f05d23f44aed87545b7892cf">ARM_COMPUTE_EXPECT</a>(num_mismatches &lt;= absolute_tolerance_number, <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">framework::LogLevel::ERRORS</a>);</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    }</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;}</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;template &lt;typename T, typename U, typename = typename std::enable_if&lt;std::is_integral&lt;T&gt;::value&gt;<a class="code" href="namespace_gemm_tuner.xhtml#a7aead736a07eaf25623ad7bfa1f0ee2d">::type</a>&gt;</div><div class="line"><a name="l00456"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad942ec0b881182d0771083c811822bb8">  456</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1ee57e5e1f775f2c270c4adf0b4940a7">validate_wrap</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_i_accessor.xhtml">IAccessor</a> &amp;tensor, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> &amp;reference, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7819bcbbf45c2e7c1396a137dce54422">valid_region</a>, U tolerance_value, <span class="keywordtype">float</span> tolerance_number)</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;{</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    uint64_t num_mismatches = 0;</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    uint64_t num_elements   = 0;</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;    <a class="code" href="_asserts_8h.xhtml#ac057d80e0c27881ee453299d98a878f4">ARM_COMPUTE_EXPECT_EQUAL</a>(tensor.<a class="code" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#aa459796b5489eca8a9160cb5dcf1a103">element_size</a>(), reference.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a62b67b578f684c4d516843c9dea86a23">element_size</a>(), <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">framework::LogLevel::ERRORS</a>);</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;    <a class="code" href="_asserts_8h.xhtml#ac057d80e0c27881ee453299d98a878f4">ARM_COMPUTE_EXPECT_EQUAL</a>(tensor.<a class="code" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>(), reference.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a9a3e72153aeb3ed212e9c3698774e881">data_type</a>(), <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">framework::LogLevel::ERRORS</a>);</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;    <span class="keywordflow">if</span>(reference.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">format</a>() != <a class="code" href="namespacearm__compute.xhtml#a3a440b3893fa10608d4428958be1c52ea696b031073e74bf2cb98e5ef201d4aa3">Format::UNKNOWN</a>)</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;    {</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;        <a class="code" href="_asserts_8h.xhtml#ac057d80e0c27881ee453299d98a878f4">ARM_COMPUTE_EXPECT_EQUAL</a>(tensor.<a class="code" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#a57360dd9ca408834c0ea1a8ef70a11f4">format</a>(), reference.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">format</a>(), <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">framework::LogLevel::ERRORS</a>);</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    }</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    <a class="code" href="_asserts_8h.xhtml#ac057d80e0c27881ee453299d98a878f4">ARM_COMPUTE_EXPECT_EQUAL</a>(tensor.<a class="code" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#ac492280ef2d7889f1226d34743b74459">num_channels</a>(), reference.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#abdd3637f2bbde9d7d0cc0b7bbd8400bb">num_channels</a>(), <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">framework::LogLevel::ERRORS</a>);</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3c8562a1f05d23f44aed87545b7892cf">ARM_COMPUTE_EXPECT</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aea1f11d8f6aab979e9d4dc61c26aed65">compare_dimensions</a>(tensor.<a class="code" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#a1c5e120ea2712b21296aa8f62421d3c1">shape</a>(), reference.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>(), tensor.<a class="code" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#a367b5090ab432bc7de2c32369e087ab1">data_layout</a>()), <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">framework::LogLevel::ERRORS</a>);</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> min_elements = std::min(tensor.<a class="code" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#a7596bc2928432a0ac2271bc9184d692e">num_elements</a>(), reference.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aedcfdd4c3b92fe0d63b5463c7ad1d21e">num_elements</a>());</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> min_channels = std::min(tensor.<a class="code" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#ac492280ef2d7889f1226d34743b74459">num_channels</a>(), reference.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#abdd3637f2bbde9d7d0cc0b7bbd8400bb">num_channels</a>());</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;    <span class="comment">// Iterate over all elements within valid region, e.g. U8, S16, RGB888, ...</span></div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> element_idx = 0; element_idx &lt; min_elements; ++element_idx)</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;    {</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> <span class="keywordtype">id</span> = <a class="code" href="namespacearm__compute_1_1test.xhtml#a24d8c0391cfa38e78969b6ad97c0ff09">index2coord</a>(reference.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>(), element_idx);</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;        <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> target_id(<span class="keywordtype">id</span>);</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;        <span class="keywordflow">if</span>(tensor.<a class="code" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#a367b5090ab432bc7de2c32369e087ab1">data_layout</a>() == <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>)</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;        {</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;            <a class="code" href="namespacearm__compute.xhtml#a21c3e11887f3acf9284ca763372c7da0">permute</a>(target_id, <a class="code" href="namespacearm__compute.xhtml#a33e65be485104e2e9e69fca551d6f492">PermutationVector</a>(2<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a2ea3d1fc01a3a442900249ca182ffa5e">U</a>, 0<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a2ea3d1fc01a3a442900249ca182ffa5e">U</a>, 1<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a2ea3d1fc01a3a442900249ca182ffa5e">U</a>));</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;        }</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;        <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute_1_1test.xhtml#a856b55fc20ddcbdbeb84c35ae27bedac">is_in_valid_region</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7819bcbbf45c2e7c1396a137dce54422">valid_region</a>, <span class="keywordtype">id</span>))</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;        {</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;            <span class="comment">// Iterate over all channels within one element</span></div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> c = 0; c &lt; min_channels; ++c)</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;            {</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;                <span class="keyword">const</span> T &amp;target_value    = reinterpret_cast&lt;const T *&gt;(tensor(target_id))[c];</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;                <span class="keyword">const</span> T &amp;reference_value = reinterpret_cast&lt;const T *&gt;(reference(<span class="keywordtype">id</span>))[c];</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;                <span class="keywordtype">bool</span> equal = <a class="code" href="structarm__compute_1_1test_1_1validation_1_1compare.xhtml">compare&lt;U&gt;</a>(target_value, reference_value, tolerance_value);</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;                <span class="comment">// check for wrapping</span></div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;                <span class="keywordflow">if</span>(!equal)</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;                {</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;                    <span class="keywordflow">if</span>(!<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a079a0ecb5fc05e0a107785f2573bc854">support::cpp11::isfinite</a>(target_value) || !<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a079a0ecb5fc05e0a107785f2573bc854">support::cpp11::isfinite</a>(reference_value))</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;                    {</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;                        equal = <span class="keyword">false</span>;</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;                    }</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;                    <span class="keywordflow">else</span></div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;                    {</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;                        <span class="keyword">using</span> limits_type = <span class="keyword">typename</span> <a class="code" href="namespace_gemm_tuner.xhtml#a7aead736a07eaf25623ad7bfa1f0ee2d">std::make_unsigned&lt;T&gt;::type</a>;</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;                        uint64_t max             = std::numeric_limits&lt;limits_type&gt;::max();</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;                        uint64_t abs_sum         = std::abs(static_cast&lt;int64_t&gt;(target_value)) + std::abs(static_cast&lt;int64_t&gt;(reference_value));</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;                        uint64_t wrap_difference = max - abs_sum;</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;                        equal = wrap_difference &lt; static_cast&lt;uint64_t&gt;(tolerance_value);</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;                    }</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;                }</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;                <span class="keywordflow">if</span>(!equal)</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;                {</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;                    <a class="code" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a>(<span class="stringliteral">&quot;id = &quot;</span> &lt;&lt; <span class="keywordtype">id</span>);</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;                    <a class="code" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a>(<span class="stringliteral">&quot;channel = &quot;</span> &lt;&lt; c);</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;                    <a class="code" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a>(<span class="stringliteral">&quot;target = &quot;</span> &lt;&lt; std::setprecision(5) &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#ac82666ff37e69696e3945d175a50e363">framework::make_printable</a>(target_value));</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;                    <a class="code" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a>(<span class="stringliteral">&quot;reference = &quot;</span> &lt;&lt; std::setprecision(5) &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#ac82666ff37e69696e3945d175a50e363">framework::make_printable</a>(reference_value));</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;                    <a class="code" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a>(<span class="stringliteral">&quot;wrap_tolerance = &quot;</span> &lt;&lt; std::setprecision(5) &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#ac82666ff37e69696e3945d175a50e363">framework::make_printable</a>(static_cast&lt;typename U::value_type&gt;(tolerance_value)));</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;                    <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#a7457955ed1c49b6478071caa7b5c5be2">framework::ARM_COMPUTE_PRINT_INFO</a>();</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;                    ++num_mismatches;</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;                }</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;                ++num_elements;</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;            }</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;        }</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;    }</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;    <span class="keywordflow">if</span>(num_elements != 0)</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;    {</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;        <span class="keyword">const</span> uint64_t absolute_tolerance_number = tolerance_number * num_elements;</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span>    percent_mismatches        = static_cast&lt;float&gt;(num_mismatches) / num_elements * 100.f;</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;        <a class="code" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a>(num_mismatches &lt;&lt; <span class="stringliteral">&quot; values (&quot;</span> &lt;&lt; std::fixed &lt;&lt; std::setprecision(2) &lt;&lt; percent_mismatches</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;                              &lt;&lt; <span class="stringliteral">&quot;%) mismatched (maximum tolerated &quot;</span> &lt;&lt; std::setprecision(2) &lt;&lt; tolerance_number * 100 &lt;&lt; <span class="stringliteral">&quot;%)&quot;</span>);</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3c8562a1f05d23f44aed87545b7892cf">ARM_COMPUTE_EXPECT</a>(num_mismatches &lt;= absolute_tolerance_number, <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">framework::LogLevel::ERRORS</a>);</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;    }</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;}</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</div><div class="line"><a name="l00544"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation.xhtml#a98de28726e7f2151e37de88468d7c8ae">  544</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae02c6fc90d9c60c634bfa258049eb46b">validate</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_i_accessor.xhtml">IAccessor</a> &amp;tensor, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> &amp;reference, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> &amp;valid_mask, U tolerance_value, <span class="keywordtype">float</span> tolerance_number, <span class="keywordtype">float</span> absolute_tolerance_value)</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;{</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;    uint64_t num_mismatches = 0;</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;    uint64_t num_elements   = 0;</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;    <a class="code" href="_asserts_8h.xhtml#ac057d80e0c27881ee453299d98a878f4">ARM_COMPUTE_EXPECT_EQUAL</a>(tensor.<a class="code" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#aa459796b5489eca8a9160cb5dcf1a103">element_size</a>(), reference.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a62b67b578f684c4d516843c9dea86a23">element_size</a>(), <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">framework::LogLevel::ERRORS</a>);</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;    <a class="code" href="_asserts_8h.xhtml#ac057d80e0c27881ee453299d98a878f4">ARM_COMPUTE_EXPECT_EQUAL</a>(tensor.<a class="code" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>(), reference.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a9a3e72153aeb3ed212e9c3698774e881">data_type</a>(), <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">framework::LogLevel::ERRORS</a>);</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;    <span class="keywordflow">if</span>(reference.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">format</a>() != <a class="code" href="namespacearm__compute.xhtml#a3a440b3893fa10608d4428958be1c52ea696b031073e74bf2cb98e5ef201d4aa3">Format::UNKNOWN</a>)</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;    {</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;        <a class="code" href="_asserts_8h.xhtml#ac057d80e0c27881ee453299d98a878f4">ARM_COMPUTE_EXPECT_EQUAL</a>(tensor.<a class="code" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#a57360dd9ca408834c0ea1a8ef70a11f4">format</a>(), reference.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">format</a>(), <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">framework::LogLevel::ERRORS</a>);</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;    }</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;    <a class="code" href="_asserts_8h.xhtml#ac057d80e0c27881ee453299d98a878f4">ARM_COMPUTE_EXPECT_EQUAL</a>(tensor.<a class="code" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#ac492280ef2d7889f1226d34743b74459">num_channels</a>(), reference.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#abdd3637f2bbde9d7d0cc0b7bbd8400bb">num_channels</a>(), <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">framework::LogLevel::ERRORS</a>);</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3c8562a1f05d23f44aed87545b7892cf">ARM_COMPUTE_EXPECT</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aea1f11d8f6aab979e9d4dc61c26aed65">compare_dimensions</a>(tensor.<a class="code" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#a1c5e120ea2712b21296aa8f62421d3c1">shape</a>(), reference.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>(), tensor.<a class="code" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#a367b5090ab432bc7de2c32369e087ab1">data_layout</a>()), <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">framework::LogLevel::ERRORS</a>);</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> min_elements = std::min(tensor.<a class="code" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#a7596bc2928432a0ac2271bc9184d692e">num_elements</a>(), reference.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aedcfdd4c3b92fe0d63b5463c7ad1d21e">num_elements</a>());</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> min_channels = std::min(tensor.<a class="code" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#ac492280ef2d7889f1226d34743b74459">num_channels</a>(), reference.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#abdd3637f2bbde9d7d0cc0b7bbd8400bb">num_channels</a>());</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;    <span class="comment">// Iterate over all elements within valid region, e.g. U8, S16, RGB888, ...</span></div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> element_idx = 0; element_idx &lt; min_elements; ++element_idx)</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;    {</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> <span class="keywordtype">id</span> = <a class="code" href="namespacearm__compute_1_1test.xhtml#a24d8c0391cfa38e78969b6ad97c0ff09">index2coord</a>(reference.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>(), element_idx);</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;        <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> target_id(<span class="keywordtype">id</span>);</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;        <span class="keywordflow">if</span>(tensor.<a class="code" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#a367b5090ab432bc7de2c32369e087ab1">data_layout</a>() == <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>)</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;        {</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;            <a class="code" href="namespacearm__compute.xhtml#a21c3e11887f3acf9284ca763372c7da0">permute</a>(target_id, <a class="code" href="namespacearm__compute.xhtml#a33e65be485104e2e9e69fca551d6f492">PermutationVector</a>(2<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a2ea3d1fc01a3a442900249ca182ffa5e">U</a>, 0<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a2ea3d1fc01a3a442900249ca182ffa5e">U</a>, 1<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a2ea3d1fc01a3a442900249ca182ffa5e">U</a>));</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;        }</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;        <span class="keywordflow">if</span>(valid_mask[element_idx] == 1)</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;        {</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;            <span class="comment">// Iterate over all channels within one element</span></div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> c = 0; c &lt; min_channels; ++c)</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;            {</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;                <span class="keyword">const</span> T &amp;target_value    = reinterpret_cast&lt;const T *&gt;(tensor(target_id))[c];</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;                <span class="keyword">const</span> T &amp;reference_value = reinterpret_cast&lt;const T *&gt;(reference(<span class="keywordtype">id</span>))[c];</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;                <span class="keywordflow">if</span>(!<a class="code" href="structarm__compute_1_1test_1_1validation_1_1compare.xhtml">compare&lt;U&gt;</a>(target_value, reference_value, tolerance_value))</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;                {</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;                    <span class="keywordflow">if</span>(absolute_tolerance_value != 0.f)</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;                    {</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;                        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_absolute_tolerance.xhtml">AbsoluteTolerance&lt;float&gt;</a> abs_tolerance(absolute_tolerance_value);</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;                        <span class="keywordflow">if</span>(<a class="code" href="structarm__compute_1_1test_1_1validation_1_1compare.xhtml">compare</a>&lt;<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_absolute_tolerance.xhtml">AbsoluteTolerance&lt;float&gt;</a>&gt;(target_value, reference_value, abs_tolerance))</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;                        {</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;                            <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;                        }</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;                    }</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;                    <a class="code" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a>(<span class="stringliteral">&quot;id = &quot;</span> &lt;&lt; <span class="keywordtype">id</span>);</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;                    <a class="code" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a>(<span class="stringliteral">&quot;channel = &quot;</span> &lt;&lt; c);</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;                    <a class="code" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a>(<span class="stringliteral">&quot;target = &quot;</span> &lt;&lt; std::setprecision(5) &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#ac82666ff37e69696e3945d175a50e363">framework::make_printable</a>(target_value));</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;                    <a class="code" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a>(<span class="stringliteral">&quot;reference = &quot;</span> &lt;&lt; std::setprecision(5) &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#ac82666ff37e69696e3945d175a50e363">framework::make_printable</a>(reference_value));</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;                    <a class="code" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a>(<span class="stringliteral">&quot;tolerance = &quot;</span> &lt;&lt; std::setprecision(5) &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#ac82666ff37e69696e3945d175a50e363">framework::make_printable</a>(static_cast&lt;typename U::value_type&gt;(tolerance_value)));</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;                    <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#a7457955ed1c49b6478071caa7b5c5be2">framework::ARM_COMPUTE_PRINT_INFO</a>();</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;                    ++num_mismatches;</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;                }</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;                ++num_elements;</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;            }</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;        }</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;        {</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;            ++num_elements;</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;        }</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;    }</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;    <span class="keywordflow">if</span>(num_elements != 0)</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;    {</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;        <span class="keyword">const</span> uint64_t absolute_tolerance_number = tolerance_number * num_elements;</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span>    percent_mismatches        = static_cast&lt;float&gt;(num_mismatches) / num_elements * 100.f;</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;        <a class="code" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a>(num_mismatches &lt;&lt; <span class="stringliteral">&quot; values (&quot;</span> &lt;&lt; std::fixed &lt;&lt; std::setprecision(2) &lt;&lt; percent_mismatches</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;                              &lt;&lt; <span class="stringliteral">&quot;%) mismatched (maximum tolerated &quot;</span> &lt;&lt; std::setprecision(2) &lt;&lt; tolerance_number * 100 &lt;&lt; <span class="stringliteral">&quot;%)&quot;</span>);</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3c8562a1f05d23f44aed87545b7892cf">ARM_COMPUTE_EXPECT</a>(num_mismatches &lt;= absolute_tolerance_number, <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">framework::LogLevel::ERRORS</a>);</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;    }</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;}</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</div><div class="line"><a name="l00623"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6c19347e16069660a1a3ae62e1d607ee">  623</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae02c6fc90d9c60c634bfa258049eb46b">validate</a>(T target, T reference, U tolerance)</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;{</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;    <a class="code" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a>(<span class="stringliteral">&quot;reference = &quot;</span> &lt;&lt; std::setprecision(5) &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#ac82666ff37e69696e3945d175a50e363">framework::make_printable</a>(reference));</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;    <a class="code" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a>(<span class="stringliteral">&quot;target = &quot;</span> &lt;&lt; std::setprecision(5) &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#ac82666ff37e69696e3945d175a50e363">framework::make_printable</a>(target));</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;    <a class="code" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a>(<span class="stringliteral">&quot;tolerance = &quot;</span> &lt;&lt; std::setprecision(5) &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#ac82666ff37e69696e3945d175a50e363">framework::make_printable</a>(static_cast&lt;typename U::value_type&gt;(tolerance)));</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> equal = <a class="code" href="structarm__compute_1_1test_1_1validation_1_1compare.xhtml">compare&lt;U&gt;</a>(target, reference, tolerance);</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3c8562a1f05d23f44aed87545b7892cf">ARM_COMPUTE_EXPECT</a>(equal, <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">framework::LogLevel::ERRORS</a>);</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;    <span class="keywordflow">return</span> equal;</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;}</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</div><div class="line"><a name="l00637"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5c338bd61fcc9acab23cf1bb8bb57539">  637</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5c338bd61fcc9acab23cf1bb8bb57539">validate_min_max_loc</a>(<span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_min_max_location_values.xhtml">MinMaxLocationValues&lt;T&gt;</a> &amp;target, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_min_max_location_values.xhtml">MinMaxLocationValues&lt;U&gt;</a> &amp;reference)</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;{</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;    <a class="code" href="_asserts_8h.xhtml#ac057d80e0c27881ee453299d98a878f4">ARM_COMPUTE_EXPECT_EQUAL</a>(target.<a class="code" href="structarm__compute_1_1_min_max_location_values.xhtml#a21e09e76b74538cd95089523f48468b0">min</a>, reference.<a class="code" href="structarm__compute_1_1_min_max_location_values.xhtml#a21e09e76b74538cd95089523f48468b0">min</a>, <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">framework::LogLevel::ERRORS</a>);</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;    <a class="code" href="_asserts_8h.xhtml#ac057d80e0c27881ee453299d98a878f4">ARM_COMPUTE_EXPECT_EQUAL</a>(target.<a class="code" href="structarm__compute_1_1_min_max_location_values.xhtml#a4b7ee8a31f634f28eb1d4d97f6159ccd">max</a>, reference.<a class="code" href="structarm__compute_1_1_min_max_location_values.xhtml#a4b7ee8a31f634f28eb1d4d97f6159ccd">max</a>, <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">framework::LogLevel::ERRORS</a>);</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;    <a class="code" href="_asserts_8h.xhtml#ac057d80e0c27881ee453299d98a878f4">ARM_COMPUTE_EXPECT_EQUAL</a>(target.<a class="code" href="structarm__compute_1_1_min_max_location_values.xhtml#ab589f4342adb62f0b4605785e4812750">min_loc</a>.size(), reference.<a class="code" href="structarm__compute_1_1_min_max_location_values.xhtml#ab589f4342adb62f0b4605785e4812750">min_loc</a>.size(), <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">framework::LogLevel::ERRORS</a>);</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;    <a class="code" href="_asserts_8h.xhtml#ac057d80e0c27881ee453299d98a878f4">ARM_COMPUTE_EXPECT_EQUAL</a>(target.<a class="code" href="structarm__compute_1_1_min_max_location_values.xhtml#a8b94c8b6d3de3d741f81429f0565af49">max_loc</a>.size(), reference.<a class="code" href="structarm__compute_1_1_min_max_location_values.xhtml#a8b94c8b6d3de3d741f81429f0565af49">max_loc</a>.size(), <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">framework::LogLevel::ERRORS</a>);</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;    <span class="keywordflow">for</span>(uint32_t i = 0; i &lt; target.<a class="code" href="structarm__compute_1_1_min_max_location_values.xhtml#ab589f4342adb62f0b4605785e4812750">min_loc</a>.size(); ++i)</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;    {</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> same_coords = std::find_if(reference.<a class="code" href="structarm__compute_1_1_min_max_location_values.xhtml#ab589f4342adb62f0b4605785e4812750">min_loc</a>.begin(), reference.<a class="code" href="structarm__compute_1_1_min_max_location_values.xhtml#ab589f4342adb62f0b4605785e4812750">min_loc</a>.end(), [&amp;target, i](<a class="code" href="structarm__compute_1_1_coordinates2_d.xhtml">Coordinates2D</a> coord)</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;        {</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;            <span class="keywordflow">return</span> coord.x == target.<a class="code" href="structarm__compute_1_1_min_max_location_values.xhtml#ab589f4342adb62f0b4605785e4812750">min_loc</a>.at(i).x &amp;&amp; coord.y == target.<a class="code" href="structarm__compute_1_1_min_max_location_values.xhtml#ab589f4342adb62f0b4605785e4812750">min_loc</a>.at(i).y;</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;        });</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3c8562a1f05d23f44aed87545b7892cf">ARM_COMPUTE_EXPECT</a>(same_coords != reference.<a class="code" href="structarm__compute_1_1_min_max_location_values.xhtml#ab589f4342adb62f0b4605785e4812750">min_loc</a>.end(), <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">framework::LogLevel::ERRORS</a>);</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;    }</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;    <span class="keywordflow">for</span>(uint32_t i = 0; i &lt; target.<a class="code" href="structarm__compute_1_1_min_max_location_values.xhtml#a8b94c8b6d3de3d741f81429f0565af49">max_loc</a>.size(); ++i)</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;    {</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> same_coords = std::find_if(reference.<a class="code" href="structarm__compute_1_1_min_max_location_values.xhtml#a8b94c8b6d3de3d741f81429f0565af49">max_loc</a>.begin(), reference.<a class="code" href="structarm__compute_1_1_min_max_location_values.xhtml#a8b94c8b6d3de3d741f81429f0565af49">max_loc</a>.end(), [&amp;target, i](<a class="code" href="structarm__compute_1_1_coordinates2_d.xhtml">Coordinates2D</a> coord)</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;        {</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;            <span class="keywordflow">return</span> coord.x == target.<a class="code" href="structarm__compute_1_1_min_max_location_values.xhtml#a8b94c8b6d3de3d741f81429f0565af49">max_loc</a>.at(i).x &amp;&amp; coord.y == target.<a class="code" href="structarm__compute_1_1_min_max_location_values.xhtml#a8b94c8b6d3de3d741f81429f0565af49">max_loc</a>.at(i).y;</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;        });</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3c8562a1f05d23f44aed87545b7892cf">ARM_COMPUTE_EXPECT</a>(same_coords != reference.<a class="code" href="structarm__compute_1_1_min_max_location_values.xhtml#a8b94c8b6d3de3d741f81429f0565af49">max_loc</a>.end(), <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">framework::LogLevel::ERRORS</a>);</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;    }</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;}</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;<span class="comment">/** Check which keypoints from [first1, last1) are missing in [first2, last2) */</span></div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U, <span class="keyword">typename</span> V&gt;</div><div class="line"><a name="l00668"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation.xhtml#ace0d3bcb3a52d88fdd312957ed7f18fd">  668</a></span>&#160;std::pair&lt;int64_t, int64_t&gt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ace0d3bcb3a52d88fdd312957ed7f18fd">compare_keypoints</a>(T first1, T last1, U first2, U last2, V tolerance, <span class="keywordtype">bool</span> check_mismatches = <span class="keyword">true</span>)</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;{</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;    <span class="comment">/* Keypoint (x,y) should have similar strength (within tolerance) and other properties in both reference and target */</span></div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> compare_props_eq = [&amp;](<span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_key_point.xhtml">KeyPoint</a> &amp; lhs, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_key_point.xhtml">KeyPoint</a> &amp; rhs)</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;    {</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="structarm__compute_1_1test_1_1validation_1_1compare.xhtml">compare&lt;V&gt;</a>(lhs.<a class="code" href="structarm__compute_1_1_key_point.xhtml#a2c1c8f9331368f38bfc3eaee260b59a6">strength</a>, rhs.strength, tolerance)</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;               &amp;&amp; lhs.<a class="code" href="structarm__compute_1_1_key_point.xhtml#a8ca2aae59762685dd38143e5f8267147">tracking_status</a> == rhs.tracking_status</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;               &amp;&amp; lhs.<a class="code" href="structarm__compute_1_1_key_point.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a> == rhs.scale</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;               &amp;&amp; lhs.<a class="code" href="structarm__compute_1_1_key_point.xhtml#a0e3266fc15309697502533db62b682af">orientation</a> == rhs.orientation</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;               &amp;&amp; lhs.<a class="code" href="structarm__compute_1_1_key_point.xhtml#a7cfd13d282af770aaa971755fa092fca">error</a> == rhs.error;</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;    };</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;    <span class="comment">/* Used to sort KeyPoints by coordinates (x, y) */</span></div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> compare_coords_lt = [](<span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_key_point.xhtml">KeyPoint</a> &amp; lhs, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_key_point.xhtml">KeyPoint</a> &amp; rhs)</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;    {</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;        <span class="keywordflow">return</span> std::tie(lhs.<a class="code" href="structarm__compute_1_1_key_point.xhtml#af6d3062751bd565decb1a2cd3b63bdb2">x</a>, lhs.<a class="code" href="structarm__compute_1_1_key_point.xhtml#af64066d134a77e01b3d6eb8da813627a">y</a>) &lt; std::tie(rhs.x, rhs.y);</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;    };</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;    std::sort(first1, last1, compare_coords_lt);</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;    std::sort(first2, last2, compare_coords_lt);</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;    <span class="keywordflow">if</span>(check_mismatches)</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;    {</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;        <a class="code" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a>(<span class="stringliteral">&quot;Checking for mismatches: ref count = &quot;</span> &lt;&lt; std::distance(first1, last1) &lt;&lt; <span class="stringliteral">&quot; target count = &quot;</span> &lt;&lt; std::distance(first2, last2));</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;    }</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;    int64_t num_missing    = 0;</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;    int64_t num_mismatches = 0;</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;    <span class="keywordtype">bool</span>    rest_missing   = <span class="keyword">false</span>;</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;    <span class="keywordflow">while</span>(first1 != last1)</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;    {</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;        <span class="keywordflow">if</span>(first2 == last2)</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;        {</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;            rest_missing = <span class="keyword">true</span>;</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;        }</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;        <span class="keywordflow">if</span>(compare_coords_lt(*first1, *first2))</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;        {</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;            ++num_missing;</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;            <a class="code" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a>(<span class="stringliteral">&quot;Key point not found&quot;</span>);</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;            <a class="code" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a>(<span class="stringliteral">&quot;keypoint1 = &quot;</span> &lt;&lt; *first1++);</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#a7457955ed1c49b6478071caa7b5c5be2">framework::ARM_COMPUTE_PRINT_INFO</a>();</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;        }</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;        {</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;            <span class="keywordflow">if</span>(!compare_coords_lt(*first2, *first1)) <span class="comment">// Equal coordinates</span></div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;            {</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;                <span class="keywordflow">if</span>(check_mismatches &amp;&amp; !compare_props_eq(*first1, *first2)) <span class="comment">// Check other properties</span></div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;                {</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;                    ++num_mismatches;</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;                    <a class="code" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a>(<span class="stringliteral">&quot;Mismatching keypoint&quot;</span>);</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;                    <a class="code" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a>(<span class="stringliteral">&quot;keypoint1 [ref] = &quot;</span> &lt;&lt; *first1);</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;                    <a class="code" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a>(<span class="stringliteral">&quot;keypoint2 [tgt] = &quot;</span> &lt;&lt; *first2);</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;                    <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#a7457955ed1c49b6478071caa7b5c5be2">framework::ARM_COMPUTE_PRINT_INFO</a>();</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;                }</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;                ++first1;</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;            }</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;            ++first2;</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;        }</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;    }</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;    <span class="keywordflow">if</span>(rest_missing)</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;    {</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;        <span class="keywordflow">while</span>(first1 != last1)</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;        {</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;            ++num_missing;</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;            <a class="code" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a>(<span class="stringliteral">&quot;Key point not found&quot;</span>);</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;            <a class="code" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a>(<span class="stringliteral">&quot;keypoint1 = &quot;</span> &lt;&lt; *first1++);</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#a7457955ed1c49b6478071caa7b5c5be2">framework::ARM_COMPUTE_PRINT_INFO</a>();</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;        }</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;    }</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;    <span class="keywordflow">return</span> std::make_pair(num_missing, num_mismatches);</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;}</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U, <span class="keyword">typename</span> V&gt;</div><div class="line"><a name="l00746"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7f99d2d87d24921c41c66388243f27c1">  746</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7f99d2d87d24921c41c66388243f27c1">validate_keypoints</a>(T target_first, T target_last, U reference_first, U reference_last, V tolerance, <span class="keywordtype">float</span> allowed_missing_percentage, <span class="keywordtype">float</span> allowed_mismatch_percentage)</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;{</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;    <span class="keyword">const</span> int64_t num_elements_target    = std::distance(target_first, target_last);</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;    <span class="keyword">const</span> int64_t num_elements_reference = std::distance(reference_first, reference_last);</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;    int64_t num_missing    = 0;</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;    int64_t num_mismatches = 0;</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;    <span class="keywordflow">if</span>(num_elements_reference &gt; 0)</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;    {</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;        std::tie(num_missing, num_mismatches) = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ace0d3bcb3a52d88fdd312957ed7f18fd">compare_keypoints</a>(reference_first, reference_last, target_first, target_last, tolerance);</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span> percent_missing    = static_cast&lt;float&gt;(num_missing) / num_elements_reference * 100.f;</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span> percent_mismatches = static_cast&lt;float&gt;(num_mismatches) / num_elements_reference * 100.f;</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;        <a class="code" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a>(num_missing &lt;&lt; <span class="stringliteral">&quot; keypoints (&quot;</span> &lt;&lt; std::fixed &lt;&lt; std::setprecision(2) &lt;&lt; percent_missing &lt;&lt; <span class="stringliteral">&quot;%) in ref are missing from target&quot;</span>);</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;        <a class="code" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a>(<span class="stringliteral">&quot;Missing (not in tgt): &quot;</span> &lt;&lt; num_missing &lt;&lt; <span class="stringliteral">&quot;/&quot;</span> &lt;&lt; num_elements_reference &lt;&lt; <span class="stringliteral">&quot; = &quot;</span> &lt;&lt; std::fixed &lt;&lt; std::setprecision(2) &lt;&lt; percent_missing</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;                              &lt;&lt; <span class="stringliteral">&quot;% \tMax allowed: &quot;</span> &lt;&lt; allowed_missing_percentage &lt;&lt; <span class="stringliteral">&quot;%&quot;</span>);</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3c8562a1f05d23f44aed87545b7892cf">ARM_COMPUTE_EXPECT</a>(percent_missing &lt;= allowed_missing_percentage, <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">framework::LogLevel::ERRORS</a>);</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;        <a class="code" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a>(num_mismatches &lt;&lt; <span class="stringliteral">&quot; keypoints (&quot;</span> &lt;&lt; std::fixed &lt;&lt; std::setprecision(2) &lt;&lt; percent_mismatches &lt;&lt; <span class="stringliteral">&quot;%) mismatched&quot;</span>);</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;        <a class="code" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a>(<span class="stringliteral">&quot;Mismatched keypoints: &quot;</span> &lt;&lt; num_mismatches &lt;&lt; <span class="stringliteral">&quot;/&quot;</span> &lt;&lt; num_elements_reference &lt;&lt; <span class="stringliteral">&quot; = &quot;</span> &lt;&lt; std::fixed &lt;&lt; std::setprecision(2) &lt;&lt; percent_mismatches</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;                              &lt;&lt; <span class="stringliteral">&quot;% \tMax allowed: &quot;</span> &lt;&lt; allowed_mismatch_percentage &lt;&lt; <span class="stringliteral">&quot;%&quot;</span>);</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3c8562a1f05d23f44aed87545b7892cf">ARM_COMPUTE_EXPECT</a>(percent_mismatches &lt;= allowed_mismatch_percentage, <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">framework::LogLevel::ERRORS</a>);</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;    }</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;</div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;    <span class="keywordflow">if</span>(num_elements_target &gt; 0)</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;    {</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;        <span class="comment">// Note: no need to check for mismatches a second time (last argument is &#39;false&#39;)</span></div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;        std::tie(num_missing, num_mismatches) = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ace0d3bcb3a52d88fdd312957ed7f18fd">compare_keypoints</a>(target_first, target_last, reference_first, reference_last, tolerance, <span class="keyword">false</span>);</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span> percent_missing = static_cast&lt;float&gt;(num_missing) / num_elements_target * 100.f;</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;        <a class="code" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a>(num_missing &lt;&lt; <span class="stringliteral">&quot; keypoints (&quot;</span> &lt;&lt; std::fixed &lt;&lt; std::setprecision(2) &lt;&lt; percent_missing &lt;&lt; <span class="stringliteral">&quot;%) in target are missing from ref&quot;</span>);</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;        <a class="code" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a>(<span class="stringliteral">&quot;Missing (not in ref): &quot;</span> &lt;&lt; num_missing &lt;&lt; <span class="stringliteral">&quot;/&quot;</span> &lt;&lt; num_elements_target &lt;&lt; <span class="stringliteral">&quot; = &quot;</span> &lt;&lt; std::fixed &lt;&lt; std::setprecision(2) &lt;&lt; percent_missing</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;                              &lt;&lt; <span class="stringliteral">&quot;% \tMax allowed: &quot;</span> &lt;&lt; allowed_missing_percentage &lt;&lt; <span class="stringliteral">&quot;%&quot;</span>);</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3c8562a1f05d23f44aed87545b7892cf">ARM_COMPUTE_EXPECT</a>(percent_missing &lt;= allowed_missing_percentage, <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">framework::LogLevel::ERRORS</a>);</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;    }</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;}</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;<span class="comment">/** Check which detection windows from [first1, last1) are missing in [first2, last2) */</span></div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U, <span class="keyword">typename</span> V&gt;</div><div class="line"><a name="l00788"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation.xhtml#a11fd649d3d886a5204684e110912835e">  788</a></span>&#160;std::pair&lt;int64_t, int64_t&gt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a11fd649d3d886a5204684e110912835e">compare_detection_windows</a>(T first1, T last1, U first2, U last2, V tolerance)</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;{</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;    int64_t num_missing    = 0;</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;    int64_t num_mismatches = 0;</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;    <span class="keywordflow">while</span>(first1 != last1)</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;    {</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> window = std::find_if(first2, last2, [&amp;](<a class="code" href="structarm__compute_1_1_detection_window.xhtml">DetectionWindow</a> window)</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;        {</div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;            <span class="keywordflow">return</span> window.<a class="code" href="structarm__compute_1_1_detection_window.xhtml#a4dde988b1b2adba65ae3efa69f65d960">x</a> == first1-&gt;x &amp;&amp; window.<a class="code" href="structarm__compute_1_1_detection_window.xhtml#ab0580f504a7428539be299fa71565f30">y</a> == first1-&gt;y &amp;&amp; window.<a class="code" href="structarm__compute_1_1_detection_window.xhtml#ad0eab1042455a2067c812ab8071d5376">width</a> == first1-&gt;width &amp;&amp; window.<a class="code" href="structarm__compute_1_1_detection_window.xhtml#a81c9f8d0b8c3b49d770be14dbe9f0d37">height</a> == first1-&gt;height &amp;&amp; window.<a class="code" href="structarm__compute_1_1_detection_window.xhtml#ae5c4999829285e20d3b491807fa46fd1">idx_class</a> == first1-&gt;idx_class;</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;        });</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;        <span class="keywordflow">if</span>(window == last2)</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;        {</div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;            ++num_missing;</div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;            <a class="code" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a>(<span class="stringliteral">&quot;Detection window not found &quot;</span> &lt;&lt; *first1)</div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#a7457955ed1c49b6478071caa7b5c5be2">framework::ARM_COMPUTE_PRINT_INFO</a>();</div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;        }</div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;        {</div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;            <span class="keywordflow">if</span>(!<a class="code" href="structarm__compute_1_1test_1_1validation_1_1compare.xhtml">compare&lt;V&gt;</a>(window-&gt;<a class="code" href="structarm__compute_1_1_detection_window.xhtml#a8c5cd9b525ee73a24b1d9d8e34982d1c">score</a>, first1-&gt;score, tolerance))</div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;            {</div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;                ++num_mismatches;</div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;                <a class="code" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a>(<span class="stringliteral">&quot;Mismatching detection window&quot;</span>)</div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;                <a class="code" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a>(<span class="stringliteral">&quot;detection window 1= &quot;</span> &lt;&lt; *first1)</div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;                <a class="code" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a>(<span class="stringliteral">&quot;detection window 2= &quot;</span> &lt;&lt; *window)</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;                <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#a7457955ed1c49b6478071caa7b5c5be2">framework::ARM_COMPUTE_PRINT_INFO</a>();</div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;            }</div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;        }</div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;</div><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;        ++first1;</div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;    }</div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;</div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;    <span class="keywordflow">return</span> std::make_pair(num_missing, num_mismatches);</div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;}</div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;</div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U, <span class="keyword">typename</span> V&gt;</div><div class="line"><a name="l00825"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7eea716df6e4c1348c4bbe4438c347fe">  825</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7eea716df6e4c1348c4bbe4438c347fe">validate_detection_windows</a>(T target_first, T target_last, U reference_first, U reference_last, V tolerance,</div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;                                <span class="keywordtype">float</span> allowed_missing_percentage, <span class="keywordtype">float</span> allowed_mismatch_percentage)</div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;{</div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;    <span class="keyword">const</span> int64_t num_elements_target    = std::distance(target_first, target_last);</div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;    <span class="keyword">const</span> int64_t num_elements_reference = std::distance(reference_first, reference_last);</div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;</div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;    int64_t num_missing    = 0;</div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;    int64_t num_mismatches = 0;</div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;</div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;    <span class="keywordflow">if</span>(num_elements_reference &gt; 0)</div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;    {</div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;        std::tie(num_missing, num_mismatches) = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a11fd649d3d886a5204684e110912835e">compare_detection_windows</a>(reference_first, reference_last, target_first, target_last, tolerance);</div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;</div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span> percent_missing    = static_cast&lt;float&gt;(num_missing) / num_elements_reference * 100.f;</div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span> percent_mismatches = static_cast&lt;float&gt;(num_mismatches) / num_elements_reference * 100.f;</div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;</div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;        <a class="code" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a>(num_missing &lt;&lt; <span class="stringliteral">&quot; detection windows (&quot;</span> &lt;&lt; std::fixed &lt;&lt; std::setprecision(2) &lt;&lt; percent_missing &lt;&lt; <span class="stringliteral">&quot;%) are missing in target&quot;</span>);</div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3c8562a1f05d23f44aed87545b7892cf">ARM_COMPUTE_EXPECT</a>(percent_missing &lt;= allowed_missing_percentage, <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">framework::LogLevel::ERRORS</a>);</div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;</div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;        <a class="code" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a>(num_mismatches &lt;&lt; <span class="stringliteral">&quot; detection windows (&quot;</span> &lt;&lt; std::fixed &lt;&lt; std::setprecision(2) &lt;&lt; percent_mismatches &lt;&lt; <span class="stringliteral">&quot;%) mismatched&quot;</span>);</div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3c8562a1f05d23f44aed87545b7892cf">ARM_COMPUTE_EXPECT</a>(percent_mismatches &lt;= allowed_mismatch_percentage, <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">framework::LogLevel::ERRORS</a>);</div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;    }</div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;</div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;    <span class="keywordflow">if</span>(num_elements_target &gt; 0)</div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;    {</div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;        std::tie(num_missing, num_mismatches) = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a11fd649d3d886a5204684e110912835e">compare_detection_windows</a>(target_first, target_last, reference_first, reference_last, tolerance);</div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;</div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span> percent_missing = static_cast&lt;float&gt;(num_missing) / num_elements_target * 100.f;</div><div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;</div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;        <a class="code" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a>(num_missing &lt;&lt; <span class="stringliteral">&quot; detection windows (&quot;</span> &lt;&lt; std::fixed &lt;&lt; std::setprecision(2) &lt;&lt; percent_missing &lt;&lt; <span class="stringliteral">&quot;%) are not part of target&quot;</span>);</div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3c8562a1f05d23f44aed87545b7892cf">ARM_COMPUTE_EXPECT</a>(percent_missing &lt;= allowed_missing_percentage, <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">framework::LogLevel::ERRORS</a>);</div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;    }</div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;}</div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;</div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;} <span class="comment">// namespace validation</span></div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;} <span class="comment">// namespace test</span></div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_TEST_REFERENCE_VALIDATION_H */</span><span class="preprocessor"></span></div><div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_absolute_tolerance_xhtml_a0856d709c655f740d93b50e9121a7aa3"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_absolute_tolerance.xhtml#a0856d709c655f740d93b50e9121a7aa3">arm_compute::test::validation::AbsoluteTolerance::AbsoluteTolerance</a></div><div class="ttdeci">constexpr AbsoluteTolerance(T value)</div><div class="ttdoc">Constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_validation_8h_source.xhtml#l00066">Validation.h:66</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a15a05537a472ee742404821851529327"><div class="ttname"><a href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">arm_compute::BorderMode</a></div><div class="ttdeci">BorderMode</div><div class="ttdoc">Methods available to handle borders.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00261">Types.h:261</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_relative_tolerance_xhtml_afb9ded5f49336ae503bb9f2035ea902b"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_relative_tolerance.xhtml#afb9ded5f49336ae503bb9f2035ea902b">arm_compute::test::validation::RelativeTolerance&lt; U &gt;::value_type</a></div><div class="ttdeci">U value_type</div><div class="ttdoc">Underlying type.</div><div class="ttdef"><b>Definition:</b> <a href="_validation_8h_source.xhtml#l00090">Validation.h:90</a></div></div>
<div class="ttc" id="_i_accessor_8h_xhtml"><div class="ttname"><a href="_i_accessor_8h.xhtml">IAccessor.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_a62b67b578f684c4d516843c9dea86a23"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a62b67b578f684c4d516843c9dea86a23">arm_compute::test::SimpleTensor::element_size</a></div><div class="ttdeci">size_t element_size() const override</div><div class="ttdoc">Size of each element in the tensor in bytes.</div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00327">SimpleTensor.h:327</a></div></div>
<div class="ttc" id="structarm__compute_1_1_min_max_location_values_xhtml_a4b7ee8a31f634f28eb1d4d97f6159ccd"><div class="ttname"><a href="structarm__compute_1_1_min_max_location_values.xhtml#a4b7ee8a31f634f28eb1d4d97f6159ccd">arm_compute::MinMaxLocationValues::max</a></div><div class="ttdeci">MinMaxType max</div><div class="ttdoc">Max value.</div><div class="ttdef"><b>Definition:</b> <a href="tests_2_types_8h_source.xhtml#l00046">Types.h:46</a></div></div>
<div class="ttc" id="structarm__compute_1_1_key_point_xhtml_a1d28dec57cce925ad92342891bd71e7c"><div class="ttname"><a href="structarm__compute_1_1_key_point.xhtml#a1d28dec57cce925ad92342891bd71e7c">arm_compute::KeyPoint::scale</a></div><div class="ttdeci">float scale</div><div class="ttdoc">Scale initialized to 0 by the corner detector.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00418">Types.h:418</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_absolute_tolerance_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_absolute_tolerance.xhtml">arm_compute::test::validation::AbsoluteTolerance</a></div><div class="ttdoc">Class reprensenting an absolute tolerance value.</div><div class="ttdef"><b>Definition:</b> <a href="_validation_8h_source.xhtml#l00050">Validation.h:50</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_acf5f12bbab64dd614bd8220c97fe484f"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">arm_compute::test::validation::data_layout</a></div><div class="ttdeci">const DataLayout data_layout</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00146">Im2Col.cpp:146</a></div></div>
<div class="ttc" id="_toolchain_support_8h_xhtml"><div class="ttname"><a href="_toolchain_support_8h.xhtml">ToolchainSupport.h</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1compare__base_xhtml"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1compare__base.xhtml">arm_compute::test::validation::compare_base</a></div><div class="ttdef"><b>Definition:</b> <a href="_validation_8h_source.xhtml#l00281">Validation.h:281</a></div></div>
<div class="ttc" id="structarm__compute_1_1_min_max_location_values_xhtml_ab589f4342adb62f0b4605785e4812750"><div class="ttname"><a href="structarm__compute_1_1_min_max_location_values.xhtml#ab589f4342adb62f0b4605785e4812750">arm_compute::MinMaxLocationValues::min_loc</a></div><div class="ttdeci">std::vector&lt; Coordinates2D &gt; min_loc</div><div class="ttdoc">Min value location.</div><div class="ttdef"><b>Definition:</b> <a href="tests_2_types_8h_source.xhtml#l00047">Types.h:47</a></div></div>
<div class="ttc" id="structarm__compute_1_1_detection_window_xhtml_a4dde988b1b2adba65ae3efa69f65d960"><div class="ttname"><a href="structarm__compute_1_1_detection_window.xhtml#a4dde988b1b2adba65ae3efa69f65d960">arm_compute::DetectionWindow::x</a></div><div class="ttdeci">uint16_t x</div><div class="ttdoc">Top-left x coordinate.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00556">Types.h:556</a></div></div>
<div class="ttc" id="tests_2_types_8h_xhtml"><div class="ttname"><a href="tests_2_types_8h.xhtml">Types.h</a></div></div>
<div class="ttc" id="structarm__compute_1_1_detection_window_xhtml_a8c5cd9b525ee73a24b1d9d8e34982d1c"><div class="ttname"><a href="structarm__compute_1_1_detection_window.xhtml#a8c5cd9b525ee73a24b1d9d8e34982d1c">arm_compute::DetectionWindow::score</a></div><div class="ttdeci">float score</div><div class="ttdoc">Confidence value for the detection window.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00561">Types.h:561</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_i_accessor_xhtml_a57360dd9ca408834c0ea1a8ef70a11f4"><div class="ttname"><a href="classarm__compute_1_1test_1_1_i_accessor.xhtml#a57360dd9ca408834c0ea1a8ef70a11f4">arm_compute::test::IAccessor::format</a></div><div class="ttdeci">virtual Format format() const =0</div><div class="ttdoc">Image format of the tensor.</div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml">arm_compute::BorderSize</a></div><div class="ttdoc">Container for 2D border size.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00269">Types.h:269</a></div></div>
<div class="ttc" id="structarm__compute_1_1_key_point_xhtml_af6d3062751bd565decb1a2cd3b63bdb2"><div class="ttname"><a href="structarm__compute_1_1_key_point.xhtml#af6d3062751bd565decb1a2cd3b63bdb2">arm_compute::KeyPoint::x</a></div><div class="ttdeci">int32_t x</div><div class="ttdoc">X coordinates.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00415">Types.h:415</a></div></div>
<div class="ttc" id="structarm__compute_1_1_key_point_xhtml_a0e3266fc15309697502533db62b682af"><div class="ttname"><a href="structarm__compute_1_1_key_point.xhtml#a0e3266fc15309697502533db62b682af">arm_compute::KeyPoint::orientation</a></div><div class="ttdeci">float orientation</div><div class="ttdoc">Orientation initialized to 0 by the corner detector.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00419">Types.h:419</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1framework_xhtml_ac82666ff37e69696e3945d175a50e363"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#ac82666ff37e69696e3945d175a50e363">arm_compute::test::framework::make_printable</a></div><div class="ttdeci">int make_printable(int8_t value)</div><div class="ttdef"><b>Definition:</b> <a href="_asserts_8h_source.xhtml#l00040">Asserts.h:40</a></div></div>
<div class="ttc" id="structarm__compute_1_1_key_point_xhtml_a8ca2aae59762685dd38143e5f8267147"><div class="ttname"><a href="structarm__compute_1_1_key_point.xhtml#a8ca2aae59762685dd38143e5f8267147">arm_compute::KeyPoint::tracking_status</a></div><div class="ttdeci">int32_t tracking_status</div><div class="ttdoc">Status initialized to 1 by the corner detector, set to 0 when the point is lost.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00420">Types.h:420</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_ac4b36cc1e56b0b7e579bb4b7196490db"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">arm_compute::test::SimpleTensor::format</a></div><div class="ttdeci">Format format() const override</div><div class="ttdoc">Image format of the tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00346">SimpleTensor.h:346</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_a9a3e72153aeb3ed212e9c3698774e881"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a9a3e72153aeb3ed212e9c3698774e881">arm_compute::test::SimpleTensor::data_type</a></div><div class="ttdeci">DataType data_type() const override</div><div class="ttdoc">Data type of the tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00358">SimpleTensor.h:358</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a3c8562a1f05d23f44aed87545b7892cf"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a3c8562a1f05d23f44aed87545b7892cf">arm_compute::test::validation::ARM_COMPUTE_EXPECT</a></div><div class="ttdeci">ARM_COMPUTE_EXPECT(has_error==expected, framework::LogLevel::ERRORS)</div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1compare__base_xhtml_a9cdfbe0f92ba33d9d5c84bc06600640c"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1compare__base.xhtml#a9cdfbe0f92ba33d9d5c84bc06600640c">arm_compute::test::validation::compare_base::_reference</a></div><div class="ttdeci">T::value_type _reference</div><div class="ttdoc">Reference value.</div><div class="ttdef"><b>Definition:</b> <a href="_validation_8h_source.xhtml#l00295">Validation.h:295</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a33e65be485104e2e9e69fca551d6f492"><div class="ttname"><a href="namespacearm__compute.xhtml#a33e65be485104e2e9e69fca551d6f492">arm_compute::PermutationVector</a></div><div class="ttdeci">Strides PermutationVector</div><div class="ttdoc">Permutation vector.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00048">Types.h:48</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1compare__base_xhtml_a42c8a61b86fc900746fef0f1f70a9430"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1compare__base.xhtml#a42c8a61b86fc900746fef0f1f70a9430">arm_compute::test::validation::compare_base::compare_base</a></div><div class="ttdeci">compare_base(typename T::value_type target, typename T::value_type reference, T tolerance=T(0))</div><div class="ttdoc">Construct a comparison object.</div><div class="ttdef"><b>Definition:</b> <a href="_validation_8h_source.xhtml#l00289">Validation.h:289</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_aba5871b3e4a65d057ec1c28fce8b00ba"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">arm_compute::test::SimpleTensor::shape</a></div><div class="ttdeci">TensorShape shape() const override</div><div class="ttdoc">Shape of the tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00321">SimpleTensor.h:321</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1compare_xhtml"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1compare.xhtml">arm_compute::test::validation::compare</a></div><div class="ttdef"><b>Definition:</b> <a href="_validation_8h_source.xhtml#l00300">Validation.h:300</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aea1f11d8f6aab979e9d4dc61c26aed65"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aea1f11d8f6aab979e9d4dc61c26aed65">arm_compute::test::validation::compare_dimensions</a></div><div class="ttdeci">bool compare_dimensions(const Dimensions&lt; T &gt; &amp;dimensions1, const Dimensions&lt; T &gt; &amp;dimensions2, const DataLayout &amp;data_layout=DataLayout::NCHW)</div><div class="ttdef"><b>Definition:</b> <a href="_validation_8h_source.xhtml#l00139">Validation.h:139</a></div></div>
<div class="ttc" id="_asserts_8h_xhtml_ac057d80e0c27881ee453299d98a878f4"><div class="ttname"><a href="_asserts_8h.xhtml#ac057d80e0c27881ee453299d98a878f4">ARM_COMPUTE_EXPECT_EQUAL</a></div><div class="ttdeci">#define ARM_COMPUTE_EXPECT_EQUAL(X, Y, LEVEL)</div><div class="ttdef"><b>Definition:</b> <a href="_asserts_8h_source.xhtml#l00104">Asserts.h:104</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_i_accessor_xhtml_a1c5e120ea2712b21296aa8f62421d3c1"><div class="ttname"><a href="classarm__compute_1_1test_1_1_i_accessor.xhtml#a1c5e120ea2712b21296aa8f62421d3c1">arm_compute::test::IAccessor::shape</a></div><div class="ttdeci">virtual TensorShape shape() const =0</div><div class="ttdoc">Shape of the tensor.</div></div>
<div class="ttc" id="_asserts_8h_xhtml_ac498e3dc31f8819519a9497b2d5789c1"><div class="ttname"><a href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a></div><div class="ttdeci">#define ARM_COMPUTE_TEST_INFO(INFO)</div><div class="ttdef"><b>Definition:</b> <a href="_asserts_8h_source.xhtml#l00065">Asserts.h:65</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2020 ARM Limited.</div><div class="ttdef"><b>Definition:</b> <a href="00__introduction_8dox_source.xhtml#l00024">00_introduction.dox:24</a></div></div>
<div class="ttc" id="_i_array_8h_xhtml"><div class="ttname"><a href="_i_array_8h.xhtml">IArray.h</a></div></div>
<div class="ttc" id="structarm__compute_1_1_key_point_xhtml"><div class="ttname"><a href="structarm__compute_1_1_key_point.xhtml">arm_compute::KeyPoint</a></div><div class="ttdoc">Keypoint type.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00413">Types.h:413</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_absolute_tolerance_xhtml_afb9ded5f49336ae503bb9f2035ea902b"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_absolute_tolerance.xhtml#afb9ded5f49336ae503bb9f2035ea902b">arm_compute::test::validation::AbsoluteTolerance&lt; U &gt;::value_type</a></div><div class="ttdeci">U value_type</div><div class="ttdoc">Underlying type.</div><div class="ttdef"><b>Definition:</b> <a href="_validation_8h_source.xhtml#l00054">Validation.h:54</a></div></div>
<div class="ttc" id="structarm__compute_1_1_key_point_xhtml_a2c1c8f9331368f38bfc3eaee260b59a6"><div class="ttname"><a href="structarm__compute_1_1_key_point.xhtml#a2c1c8f9331368f38bfc3eaee260b59a6">arm_compute::KeyPoint::strength</a></div><div class="ttdeci">float strength</div><div class="ttdoc">Strength of the point.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00417">Types.h:417</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a21c3e11887f3acf9284ca763372c7da0"><div class="ttname"><a href="namespacearm__compute.xhtml#a21c3e11887f3acf9284ca763372c7da0">arm_compute::permute</a></div><div class="ttdeci">void permute(Dimensions&lt; T &gt; &amp;dimensions, const PermutationVector &amp;perm)</div><div class="ttdoc">Permutes given Dimensions according to a permutation vector.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_helpers_8h_source.xhtml#l00570">Helpers.h:570</a></div></div>
<div class="ttc" id="_simple_tensor_8h_xhtml"><div class="ttname"><a href="_simple_tensor_8h.xhtml">SimpleTensor.h</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1compare__base_xhtml_aa4fd55d362930310365e320208784ede"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1compare__base.xhtml#aa4fd55d362930310365e320208784ede">arm_compute::test::validation::compare_base::_tolerance</a></div><div class="ttdeci">T _tolerance</div><div class="ttdoc">Tolerance value.</div><div class="ttdef"><b>Definition:</b> <a href="_validation_8h_source.xhtml#l00296">Validation.h:296</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a7eea716df6e4c1348c4bbe4438c347fe"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a7eea716df6e4c1348c4bbe4438c347fe">arm_compute::test::validation::validate_detection_windows</a></div><div class="ttdeci">void validate_detection_windows(T target_first, T target_last, U reference_first, U reference_last, V tolerance=AbsoluteTolerance&lt; float &gt;(), float allowed_missing_percentage=5.f, float allowed_mismatch_percentage=5.f)</div><div class="ttdoc">Validate detection windows.</div><div class="ttdef"><b>Definition:</b> <a href="_validation_8h_source.xhtml#l00825">Validation.h:825</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a11fd649d3d886a5204684e110912835e"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a11fd649d3d886a5204684e110912835e">arm_compute::test::validation::compare_detection_windows</a></div><div class="ttdeci">std::pair&lt; int64_t, int64_t &gt; compare_detection_windows(T first1, T last1, U first2, U last2, V tolerance)</div><div class="ttdoc">Check which detection windows from [first1, last1) are missing in [first2, last2)</div><div class="ttdef"><b>Definition:</b> <a href="_validation_8h_source.xhtml#l00788">Validation.h:788</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_aa87f8fc26981b0f3228a78c83b95b802"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">arm_compute::Dimensions::x</a></div><div class="ttdeci">T x() const</div><div class="ttdoc">Alias to access the size of the first dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00081">Dimensions.h:81</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a5c338bd61fcc9acab23cf1bb8bb57539"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a5c338bd61fcc9acab23cf1bb8bb57539">arm_compute::test::validation::validate_min_max_loc</a></div><div class="ttdeci">void validate_min_max_loc(const MinMaxLocationValues&lt; T &gt; &amp;target, const MinMaxLocationValues&lt; U &gt; &amp;reference)</div><div class="ttdef"><b>Definition:</b> <a href="_validation_8h_source.xhtml#l00637">Validation.h:637</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a5471e46933e7a9c4709972d91fc4ea65"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a5471e46933e7a9c4709972d91fc4ea65">arm_compute::test::validation::border_mode</a></div><div class="ttdeci">border_mode</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_8cpp_source.xhtml#l00118">Convolution.cpp:118</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_relative_tolerance_xhtml_afba8d635945ce2a2787199919de28572"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_relative_tolerance.xhtml#afba8d635945ce2a2787199919de28572">arm_compute::test::validation::RelativeTolerance::RelativeTolerance</a></div><div class="ttdeci">RelativeTolerance()=default</div></div>
<div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_a079a0ecb5fc05e0a107785f2573bc854"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a079a0ecb5fc05e0a107785f2573bc854">arm_compute::support::cpp11::isfinite</a></div><div class="ttdeci">bool isfinite(T value)</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00433">ToolchainSupport.h:433</a></div></div>
<div class="ttc" id="structarm__compute_1_1_key_point_xhtml_a7cfd13d282af770aaa971755fa092fca"><div class="ttname"><a href="structarm__compute_1_1_key_point.xhtml#a7cfd13d282af770aaa971755fa092fca">arm_compute::KeyPoint::error</a></div><div class="ttdeci">float error</div><div class="ttdoc">Tracking error initialized to 0 by the corner detector.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00421">Types.h:421</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_a856b55fc20ddcbdbeb84c35ae27bedac"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a856b55fc20ddcbdbeb84c35ae27bedac">arm_compute::test::is_in_valid_region</a></div><div class="ttdeci">bool is_in_valid_region(const ValidRegion &amp;valid_region, Coordinates coord)</div><div class="ttdoc">Check if a coordinate is within a valid region.</div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00503">Utils.h:503</a></div></div>
<div class="ttc" id="structarm__compute_1_1_detection_window_xhtml_ad0eab1042455a2067c812ab8071d5376"><div class="ttname"><a href="structarm__compute_1_1_detection_window.xhtml#ad0eab1042455a2067c812ab8071d5376">arm_compute::DetectionWindow::width</a></div><div class="ttdeci">uint16_t width</div><div class="ttdoc">Width of the detection window.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00558">Types.h:558</a></div></div>
<div class="ttc" id="utils_2_type_printer_8h_xhtml"><div class="ttname"><a href="utils_2_type_printer_8h.xhtml">TypePrinter.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_coordinates_xhtml"><div class="ttname"><a href="classarm__compute_1_1_coordinates.xhtml">arm_compute::Coordinates</a></div><div class="ttdoc">Coordinates of an item.</div><div class="ttdef"><b>Definition:</b> <a href="_coordinates_8h_source.xhtml#l00037">Coordinates.h:37</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1utils_1_1cast_xhtml_a2ea3d1fc01a3a442900249ca182ffa5e"><div class="ttname"><a href="namespacearm__compute_1_1utils_1_1cast.xhtml#a2ea3d1fc01a3a442900249ca182ffa5e">arm_compute::utils::cast::U</a></div><div class="ttdeci">U</div><div class="ttdef"><b>Definition:</b> <a href="_saturate_cast_8h_source.xhtml#l00057">SaturateCast.h:57</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml">arm_compute::Dimensions</a></div><div class="ttdoc">Dimensions with dimensionality.</div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00041">Dimensions.h:41</a></div></div>
<div class="ttc" id="structarm__compute_1_1_min_max_location_values_xhtml"><div class="ttname"><a href="structarm__compute_1_1_min_max_location_values.xhtml">arm_compute::MinMaxLocationValues</a></div><div class="ttdoc">Min and max values and locations.</div><div class="ttdef"><b>Definition:</b> <a href="tests_2_types_8h_source.xhtml#l00043">Types.h:43</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a7819bcbbf45c2e7c1396a137dce54422"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a7819bcbbf45c2e7c1396a137dce54422">arm_compute::test::validation::valid_region</a></div><div class="ttdeci">const ValidRegion valid_region</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_absolute_difference_8cpp_source.xhtml#l00109">AbsoluteDifference.cpp:109</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_i_accessor_xhtml_a7596bc2928432a0ac2271bc9184d692e"><div class="ttname"><a href="classarm__compute_1_1test_1_1_i_accessor.xhtml#a7596bc2928432a0ac2271bc9184d692e">arm_compute::test::IAccessor::num_elements</a></div><div class="ttdeci">virtual int num_elements() const =0</div><div class="ttdoc">Number of elements of the tensor.</div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_a24d8c0391cfa38e78969b6ad97c0ff09"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a24d8c0391cfa38e78969b6ad97c0ff09">arm_compute::test::index2coord</a></div><div class="ttdeci">Coordinates index2coord(const TensorShape &amp;shape, int index)</div><div class="ttdoc">Convert a linear index into n-dimensional coordinates.</div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00456">Utils.h:456</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_i_accessor_xhtml_a367b5090ab432bc7de2c32369e087ab1"><div class="ttname"><a href="classarm__compute_1_1test_1_1_i_accessor.xhtml#a367b5090ab432bc7de2c32369e087ab1">arm_compute::test::IAccessor::data_layout</a></div><div class="ttdeci">virtual DataLayout data_layout() const =0</div><div class="ttdoc">Data layout of the tensor.</div></div>
<div class="ttc" id="structarm__compute_1_1_detection_window_xhtml_ae5c4999829285e20d3b491807fa46fd1"><div class="ttname"><a href="structarm__compute_1_1_detection_window.xhtml#ae5c4999829285e20d3b491807fa46fd1">arm_compute::DetectionWindow::idx_class</a></div><div class="ttdeci">uint16_t idx_class</div><div class="ttdoc">Index of the class.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00560">Types.h:560</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">arm_compute::DataLayout::NCHW</a></div><div class="ttdoc">Num samples, channels, height, width.</div></div>
<div class="ttc" id="structarm__compute_1_1_key_point_xhtml_af64066d134a77e01b3d6eb8da813627a"><div class="ttname"><a href="structarm__compute_1_1_key_point.xhtml#af64066d134a77e01b3d6eb8da813627a">arm_compute::KeyPoint::y</a></div><div class="ttdeci">int32_t y</div><div class="ttdoc">Y coordinates.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00416">Types.h:416</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1framework_xhtml_a7457955ed1c49b6478071caa7b5c5be2"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#a7457955ed1c49b6478071caa7b5c5be2">arm_compute::test::framework::ARM_COMPUTE_PRINT_INFO</a></div><div class="ttdeci">void ARM_COMPUTE_PRINT_INFO()</div><div class="ttdef"><b>Definition:</b> <a href="_asserts_8h_source.xhtml#l00057">Asserts.h:57</a></div></div>
<div class="ttc" id="structarm__compute_1_1_detection_window_xhtml_a81c9f8d0b8c3b49d770be14dbe9f0d37"><div class="ttname"><a href="structarm__compute_1_1_detection_window.xhtml#a81c9f8d0b8c3b49d770be14dbe9f0d37">arm_compute::DetectionWindow::height</a></div><div class="ttdeci">uint16_t height</div><div class="ttdoc">Height of the detection window.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00559">Types.h:559</a></div></div>
<div class="ttc" id="tests_2_utils_8h_xhtml"><div class="ttname"><a href="tests_2_utils_8h.xhtml">Utils.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">arm_compute::test::SimpleTensor</a></div><div class="ttdoc">Simple tensor object that stores elements in a consecutive chunk of memory.</div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00059">SimpleTensor.h:59</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_abdd3637f2bbde9d7d0cc0b7bbd8400bb"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#abdd3637f2bbde9d7d0cc0b7bbd8400bb">arm_compute::test::SimpleTensor::num_channels</a></div><div class="ttdeci">int num_channels() const override</div><div class="ttdoc">Number of channels of the tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00371">SimpleTensor.h:371</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ae02c6fc90d9c60c634bfa258049eb46b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ae02c6fc90d9c60c634bfa258049eb46b">arm_compute::test::validation::validate</a></div><div class="ttdeci">validate(dst.info() -&gt;valid_region(), valid_region)</div></div>
<div class="ttc" id="namespace_gemm_tuner_xhtml_a7aead736a07eaf25623ad7bfa1f0ee2d"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a7aead736a07eaf25623ad7bfa1f0ee2d">GemmTuner.type</a></div><div class="ttdeci">type</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00527">GemmTuner.py:527</a></div></div>
<div class="ttc" id="structarm__compute_1_1_coordinates2_d_xhtml"><div class="ttname"><a href="structarm__compute_1_1_coordinates2_d.xhtml">arm_compute::Coordinates2D</a></div><div class="ttdoc">Coordinate type.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00437">Types.h:437</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1compare__base_xhtml_a43df64dda9f48ddc325ea5ee5cce504c"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1compare__base.xhtml#a43df64dda9f48ddc325ea5ee5cce504c">arm_compute::test::validation::compare_base::_target</a></div><div class="ttdeci">T::value_type _target</div><div class="ttdoc">Target value.</div><div class="ttdef"><b>Definition:</b> <a href="_validation_8h_source.xhtml#l00294">Validation.h:294</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_relative_tolerance_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_relative_tolerance.xhtml">arm_compute::test::validation::RelativeTolerance</a></div><div class="ttdoc">Class reprensenting a relative tolerance value.</div><div class="ttdef"><b>Definition:</b> <a href="_validation_8h_source.xhtml#l00086">Validation.h:86</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_i_accessor_xhtml_a7cfb31af63202568efef5214acfbf3ba"><div class="ttname"><a href="classarm__compute_1_1test_1_1_i_accessor.xhtml#a7cfb31af63202568efef5214acfbf3ba">arm_compute::test::IAccessor::data_type</a></div><div class="ttdeci">virtual DataType data_type() const =0</div><div class="ttdoc">Data type of the tensor.</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a3a440b3893fa10608d4428958be1c52ea696b031073e74bf2cb98e5ef201d4aa3"><div class="ttname"><a href="namespacearm__compute.xhtml#a3a440b3893fa10608d4428958be1c52ea696b031073e74bf2cb98e5ef201d4aa3">arm_compute::CLVersion::UNKNOWN</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_i_accessor_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1_i_accessor.xhtml">arm_compute::test::IAccessor</a></div><div class="ttdoc">Common interface to provide information and access to tensor like structures.</div><div class="ttdef"><b>Definition:</b> <a href="_i_accessor_8h_source.xhtml#l00037">IAccessor.h:37</a></div></div>
<div class="ttc" id="structarm__compute_1_1_detection_window_xhtml"><div class="ttname"><a href="structarm__compute_1_1_detection_window.xhtml">arm_compute::DetectionWindow</a></div><div class="ttdoc">Detection window used for the object detection.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00554">Types.h:554</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_a80a5f2d6e3a697c9aad893a3b4242615"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">arm_compute::Dimensions::num_dimensions</a></div><div class="ttdeci">unsigned int num_dimensions() const</div><div class="ttdoc">Returns the effective dimensionality of the tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00122">Dimensions.h:122</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">arm_compute::DataLayout::NHWC</a></div><div class="ttdoc">Num samples, height, width, channels.</div></div>
<div class="ttc" id="_exceptions_8h_xhtml"><div class="ttname"><a href="_exceptions_8h.xhtml">Exceptions.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a7f99d2d87d24921c41c66388243f27c1"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a7f99d2d87d24921c41c66388243f27c1">arm_compute::test::validation::validate_keypoints</a></div><div class="ttdeci">void validate_keypoints(T target_first, T target_last, U reference_first, U reference_last, V tolerance=AbsoluteTolerance&lt; float &gt;(), float allowed_missing_percentage=5.f, float allowed_mismatch_percentage=5.f)</div><div class="ttdoc">Validate key points.</div><div class="ttdef"><b>Definition:</b> <a href="_validation_8h_source.xhtml#l00746">Validation.h:746</a></div></div>
<div class="ttc" id="structarm__compute_1_1_detection_window_xhtml_ab0580f504a7428539be299fa71565f30"><div class="ttname"><a href="structarm__compute_1_1_detection_window.xhtml#ab0580f504a7428539be299fa71565f30">arm_compute::DetectionWindow::y</a></div><div class="ttdeci">uint16_t y</div><div class="ttdoc">Top-left y coordinate.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00557">Types.h:557</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_aedcfdd4c3b92fe0d63b5463c7ad1d21e"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aedcfdd4c3b92fe0d63b5463c7ad1d21e">arm_compute::test::SimpleTensor::num_elements</a></div><div class="ttdeci">int num_elements() const override</div><div class="ttdoc">Number of elements of the tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00407">SimpleTensor.h:407</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_i_accessor_xhtml_aa459796b5489eca8a9160cb5dcf1a103"><div class="ttname"><a href="classarm__compute_1_1test_1_1_i_accessor.xhtml#aa459796b5489eca8a9160cb5dcf1a103">arm_compute::test::IAccessor::element_size</a></div><div class="ttdeci">virtual size_t element_size() const =0</div><div class="ttdoc">Size of each element in the tensor in bytes.</div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_relative_tolerance_xhtml_a646bf2ba26847ea66d436ae933883c73"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_relative_tolerance.xhtml#a646bf2ba26847ea66d436ae933883c73">arm_compute::test::validation::RelativeTolerance::RelativeTolerance</a></div><div class="ttdeci">constexpr RelativeTolerance(value_type value)</div><div class="ttdoc">Constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_validation_8h_source.xhtml#l00102">Validation.h:102</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1framework_xhtml_aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">arm_compute::test::framework::LogLevel::ERRORS</a></div></div>
<div class="ttc" id="structarm__compute_1_1_valid_region_xhtml"><div class="ttname"><a href="structarm__compute_1_1_valid_region.xhtml">arm_compute::ValidRegion</a></div><div class="ttdoc">Container for valid region of a window.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00184">Types.h:184</a></div></div>
<div class="ttc" id="structarm__compute_1_1_min_max_location_values_xhtml_a21e09e76b74538cd95089523f48468b0"><div class="ttname"><a href="structarm__compute_1_1_min_max_location_values.xhtml#a21e09e76b74538cd95089523f48468b0">arm_compute::MinMaxLocationValues::min</a></div><div class="ttdeci">MinMaxType min</div><div class="ttdoc">Min value.</div><div class="ttdef"><b>Definition:</b> <a href="tests_2_types_8h_source.xhtml#l00045">Types.h:45</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_i_accessor_xhtml_ac492280ef2d7889f1226d34743b74459"><div class="ttname"><a href="classarm__compute_1_1test_1_1_i_accessor.xhtml#ac492280ef2d7889f1226d34743b74459">arm_compute::test::IAccessor::num_channels</a></div><div class="ttdeci">virtual int num_channels() const =0</div><div class="ttdoc">Number of channels of the tensor.</div></div>
<div class="ttc" id="arm__compute_2core_2_types_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_types_8h.xhtml">Types.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a735a025fce26c1ef147b54426df18181"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a735a025fce26c1ef147b54426df18181">arm_compute::test::validation::padding</a></div><div class="ttdeci">const PaddingSize padding</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_absolute_difference_8cpp_source.xhtml#l00113">AbsoluteDifference.cpp:113</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">arm_compute::DataLayout</a></div><div class="ttdeci">DataLayout</div><div class="ttdoc">[DataLayout enum definition]</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00117">Types.h:117</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_a8103df0e6c416f55f40106aa49072b42"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a8103df0e6c416f55f40106aa49072b42">arm_compute::test::shape_to_valid_region</a></div><div class="ttdeci">ValidRegion shape_to_valid_region(const TensorShape &amp;a_shape, bool border_undefined=false, BorderSize border_size=BorderSize(0))</div><div class="ttdoc">Create a valid region based on tensor shape, border mode and border size.</div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00224">Utils.h:224</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ace0d3bcb3a52d88fdd312957ed7f18fd"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ace0d3bcb3a52d88fdd312957ed7f18fd">arm_compute::test::validation::compare_keypoints</a></div><div class="ttdeci">std::pair&lt; int64_t, int64_t &gt; compare_keypoints(T first1, T last1, U first2, U last2, V tolerance, bool check_mismatches=true)</div><div class="ttdoc">Check which keypoints from [first1, last1) are missing in [first2, last2)</div><div class="ttdef"><b>Definition:</b> <a href="_validation_8h_source.xhtml#l00668">Validation.h:668</a></div></div>
<div class="ttc" id="_asserts_8h_xhtml"><div class="ttname"><a href="_asserts_8h.xhtml">Asserts.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ab6d7586446a24baaa269c5f9a65ecd7f"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ab6d7586446a24baaa269c5f9a65ecd7f">arm_compute::test::validation::operator&lt;&lt;</a></div><div class="ttdeci">inline ::std::ostream &amp; operator&lt;&lt;(::std::ostream &amp;os, const AbsoluteTolerance&lt; T &gt; &amp;tolerance)</div><div class="ttdoc">Print AbsoluteTolerance type.</div><div class="ttdef"><b>Definition:</b> <a href="_validation_8h_source.xhtml#l00122">Validation.h:122</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a1ee57e5e1f775f2c270c4adf0b4940a7"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a1ee57e5e1f775f2c270c4adf0b4940a7">arm_compute::test::validation::validate_wrap</a></div><div class="ttdeci">void validate_wrap(const IAccessor &amp;tensor, const SimpleTensor&lt; T &gt; &amp;reference, U tolerance_value, float tolerance_number)</div><div class="ttdef"><b>Definition:</b> <a href="_validation_8h_source.xhtml#l00374">Validation.h:374</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1quantization_xhtml_a552dc3787d7ea1675f3e4e8993501d58"><div class="ttname"><a href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">arm_compute::quantization::epsilon</a></div><div class="ttdeci">constexpr float epsilon</div><div class="ttdef"><b>Definition:</b> <a href="_asymm_helpers_8cpp_source.xhtml#l00036">AsymmHelpers.cpp:36</a></div></div>
<div class="ttc" id="structarm__compute_1_1_min_max_location_values_xhtml_a8b94c8b6d3de3d741f81429f0565af49"><div class="ttname"><a href="structarm__compute_1_1_min_max_location_values.xhtml#a8b94c8b6d3de3d741f81429f0565af49">arm_compute::MinMaxLocationValues::max_loc</a></div><div class="ttdeci">std::vector&lt; Coordinates2D &gt; max_loc</div><div class="ttdoc">Max value location.</div><div class="ttdef"><b>Definition:</b> <a href="tests_2_types_8h_source.xhtml#l00048">Types.h:48</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_absolute_tolerance_xhtml_a98a801b3455152020b7543995eeb3224"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_absolute_tolerance.xhtml#a98a801b3455152020b7543995eeb3224">arm_compute::test::validation::AbsoluteTolerance::AbsoluteTolerance</a></div><div class="ttdeci">AbsoluteTolerance()=default</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_59425e443f801f1f2fd8bbe4959a3ccf.xhtml">tests</a></li><li class="navelem"><a class="el" href="dir_e7c7b16542faa38cb4655ff1750d3604.xhtml">validation</a></li><li class="navelem"><a class="el" href="_validation_8h.xhtml">Validation.h</a></li>
    <li class="footer">Generated on Thu Mar 5 2020 16:07:06 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
