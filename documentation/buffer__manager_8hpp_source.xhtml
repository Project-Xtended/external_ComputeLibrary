<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/core/NEON/kernels/arm_gemm/buffer_manager.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('buffer__manager_8hpp_source.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">buffer_manager.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="buffer__manager_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017-2018 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &lt;cstdlib&gt;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#ifndef NO_MULTI_THREADING</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &lt;atomic&gt;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &lt;mutex&gt;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno"><a class="line" href="buffer__manager_8hpp.xhtml#a351aa77223a2f826ab7b8b732d505c98">   33</a></span>&#160;<span class="preprocessor">#define USE_SEMAPHORE</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#ifdef USE_SEMAPHORE</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &lt;condition_variable&gt;</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__gemm.xhtml">arm_gemm</a> {</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="preprocessor">#ifndef NO_MULTI_THREADING</span></div><div class="line"><a name="l00044"></a><span class="lineno"><a class="line" href="namespacearm__gemm.xhtml#a32006a302bde841f2cf4cc8bb131856b">   44</a></span>&#160;<span class="keyword">enum class</span> <a class="code" href="namespacearm__gemm.xhtml#a32006a302bde841f2cf4cc8bb131856b">BufferStatus</a> {</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <a class="code" href="namespacearm__gemm.xhtml#a32006a302bde841f2cf4cc8bb131856baa5daf7f2ebbba4975d61dab1c40188c7">IDLE</a>,</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <a class="code" href="namespacearm__gemm.xhtml#a32006a302bde841f2cf4cc8bb131856ba63560453bdae7737f5a7f0b9fc23e398">POPULATING</a>,</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <a class="code" href="namespacearm__gemm.xhtml#a32006a302bde841f2cf4cc8bb131856ba802706a9238e2928077f97736854bad4">BUSY</a></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;};</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_buffer.xhtml">   50</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__gemm_1_1_buffer.xhtml">Buffer</a> {</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>                _maxusers;    <span class="comment">// Maximum permissible threads.</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keywordtype">void</span> * <span class="keyword">const</span>             _storage;     <span class="comment">// Storage for buffer content.</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keywordtype">int</span>                      _numusers;    <span class="comment">// Actual number of threads (might be lower).</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keyword">volatile</span> <a class="code" href="namespacearm__gemm.xhtml#a32006a302bde841f2cf4cc8bb131856b">BufferStatus</a>    _status = <a class="code" href="namespacearm__gemm.xhtml#a32006a302bde841f2cf4cc8bb131856baa5daf7f2ebbba4975d61dab1c40188c7">BufferStatus::IDLE</a>; <span class="comment">// Status</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    std::atomic_int          _users = { };   <span class="comment">// How many users are still using the buffer.</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keyword">volatile</span> <span class="keywordtype">int</span>             _index = 0;   <span class="comment">// Which block of data currently resides in the buffer.</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    std::mutex               _lock = { };</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="preprocessor">#ifdef USE_SEMAPHORE</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    std::condition_variable  _cv = { };</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keywordtype">void</span> populate_buffer(T func) {</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        func(_storage);</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="comment">/* Now mark it as ready. */</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="preprocessor">#ifdef USE_SEMAPHORE</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        {</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            std::unique_lock&lt;std::mutex&gt; ul(_lock);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            _status = <a class="code" href="namespacearm__gemm.xhtml#a32006a302bde841f2cf4cc8bb131856ba802706a9238e2928077f97736854bad4">BufferStatus::BUSY</a>;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;            _cv.notify_all();</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        }</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        _status = <a class="code" href="namespacearm__gemm.xhtml#a32006a302bde841f2cf4cc8bb131856ba802706a9238e2928077f97736854bad4">BufferStatus::BUSY</a>;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    }</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <a class="code" href="classarm__gemm_1_1_buffer.xhtml#a8bf60bd0f8a216c716ef58fea0606aee">Buffer</a>(<a class="code" href="classarm__gemm_1_1_buffer.xhtml">Buffer</a> &amp;) = <span class="keyword">delete</span>;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <a class="code" href="classarm__gemm_1_1_buffer.xhtml">Buffer</a> &amp;<a class="code" href="classarm__gemm_1_1_buffer.xhtml#a5e31690a2c14a3428593c0af4435158a">operator= </a>(<a class="code" href="classarm__gemm_1_1_buffer.xhtml">Buffer</a> &amp;) = <span class="keyword">delete</span>;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_buffer.xhtml#a53dae4cefe42f5ba80b09f65257b4fcb">   86</a></span>&#160;    <a class="code" href="classarm__gemm_1_1_buffer.xhtml#a53dae4cefe42f5ba80b09f65257b4fcb">Buffer</a>(<span class="keywordtype">void</span> *storage, <span class="keywordtype">int</span> maxusers) : _maxusers(maxusers), _storage(storage), _numusers(maxusers) {</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        _status = <a class="code" href="namespacearm__gemm.xhtml#a32006a302bde841f2cf4cc8bb131856baa5daf7f2ebbba4975d61dab1c40188c7">BufferStatus::IDLE</a>;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    }</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="comment">/* Try and populate the given index.</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment">     * Wait if the buffer is busy with previous index, then:</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment">     * If the buffer is idle, grab it and populate it.</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment">     * If it&#39;s already being populated by another thread or is ready, return.</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00097"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_buffer.xhtml#a97814ef98fcd29d1fb5df1e877f8eabc">   97</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__gemm_1_1_buffer.xhtml#a97814ef98fcd29d1fb5df1e877f8eabc">try_populate</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> index, T func) {</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        <span class="keywordflow">for</span> (;;) {</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="preprocessor">#ifdef USE_SEMAPHORE</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            <span class="comment">/* If it&#39;s busy with a previous index, wait on the semaphore. */</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            <span class="keywordflow">if</span> ((_status == <a class="code" href="namespacearm__gemm.xhtml#a32006a302bde841f2cf4cc8bb131856ba802706a9238e2928077f97736854bad4">BufferStatus::BUSY</a>) &amp;&amp; (_index != index)) {</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                std::unique_lock&lt;std::mutex&gt; ul(_lock);</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                <span class="keywordflow">if</span> ((_status == <a class="code" href="namespacearm__gemm.xhtml#a32006a302bde841f2cf4cc8bb131856ba802706a9238e2928077f97736854bad4">BufferStatus::BUSY</a>) &amp;&amp; (_index != index)) {</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                    _cv.wait(ul);</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                }</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            }</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            <span class="comment">/* Return if another thread is populating it already. */</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            <span class="keywordflow">if</span> ((_index == index) &amp;&amp;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                ((_status == <a class="code" href="namespacearm__gemm.xhtml#a32006a302bde841f2cf4cc8bb131856ba63560453bdae7737f5a7f0b9fc23e398">BufferStatus::POPULATING</a>) || (_status == <a class="code" href="namespacearm__gemm.xhtml#a32006a302bde841f2cf4cc8bb131856ba802706a9238e2928077f97736854bad4">BufferStatus::BUSY</a>))) {</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                <span class="keywordflow">return</span>;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            }</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            <span class="keywordflow">if</span> (_status == <a class="code" href="namespacearm__gemm.xhtml#a32006a302bde841f2cf4cc8bb131856baa5daf7f2ebbba4975d61dab1c40188c7">BufferStatus::IDLE</a>) {</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                std::lock_guard&lt;std::mutex&gt; guard(_lock);</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                <span class="comment">/* If the buffer is still idle, we can grab it and populate it. */</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                <span class="keywordflow">if</span> (_status == <a class="code" href="namespacearm__gemm.xhtml#a32006a302bde841f2cf4cc8bb131856baa5daf7f2ebbba4975d61dab1c40188c7">BufferStatus::IDLE</a>) {</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                    _status = <a class="code" href="namespacearm__gemm.xhtml#a32006a302bde841f2cf4cc8bb131856ba63560453bdae7737f5a7f0b9fc23e398">BufferStatus::POPULATING</a>;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                    _index = index;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                    _users = _numusers;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                }</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            }</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        }</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        <span class="comment">/* If we get here, fill in the buffer. */</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        populate_buffer(func);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    }</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00133"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_buffer.xhtml#a427705bf76071f12aa29992bd5cffa73">  133</a></span>&#160;    <span class="keywordtype">void</span> *<a class="code" href="classarm__gemm_1_1_buffer.xhtml#a427705bf76071f12aa29992bd5cffa73">get</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> index, T func) {</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        <span class="comment">// Loop until we achieve something.</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        <span class="keywordflow">for</span> (;;) {</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;            <span class="comment">// If the index is correct and the buffer status is busy then we can</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            <span class="comment">// just return the content.  No locking is needed here as the index</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            <span class="comment">// cannot change (and status cannot change from BUSY) until all</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            <span class="comment">// users have finished.</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;            <span class="keywordflow">if</span> ((_index == index) &amp;&amp; (_status == <a class="code" href="namespacearm__gemm.xhtml#a32006a302bde841f2cf4cc8bb131856ba802706a9238e2928077f97736854bad4">BufferStatus::BUSY</a>)) {</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                <span class="keywordflow">return</span> _storage;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            }</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            <span class="comment">/* If the buffer still has some previous content, or is being</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment">             * populated, we can wait with the semaphore.  */</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="preprocessor">#ifdef USE_SEMAPHORE</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            <span class="keywordflow">if</span> (((_status == <a class="code" href="namespacearm__gemm.xhtml#a32006a302bde841f2cf4cc8bb131856ba802706a9238e2928077f97736854bad4">BufferStatus::BUSY</a>) &amp;&amp; (_index != index)) ||</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                 (_status == <a class="code" href="namespacearm__gemm.xhtml#a32006a302bde841f2cf4cc8bb131856ba63560453bdae7737f5a7f0b9fc23e398">BufferStatus::POPULATING</a>)) {</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                std::unique_lock&lt;std::mutex&gt; ul(_lock);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                <span class="keywordflow">if</span> (((_status == <a class="code" href="namespacearm__gemm.xhtml#a32006a302bde841f2cf4cc8bb131856ba802706a9238e2928077f97736854bad4">BufferStatus::BUSY</a>) &amp;&amp; (_index != index)) ||</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                     (_status == <a class="code" href="namespacearm__gemm.xhtml#a32006a302bde841f2cf4cc8bb131856ba63560453bdae7737f5a7f0b9fc23e398">BufferStatus::POPULATING</a>)) {</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                    _cv.wait(ul);</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                }</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;            }</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            <span class="comment">// If it&#39;s idle, we need to populate it.  The IDLE-&gt;POPULATING</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;            <span class="comment">// transition requires the lock.</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;            <span class="keywordflow">if</span> (_status == <a class="code" href="namespacearm__gemm.xhtml#a32006a302bde841f2cf4cc8bb131856baa5daf7f2ebbba4975d61dab1c40188c7">BufferStatus::IDLE</a>) {</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                std::lock_guard&lt;std::mutex&gt; guard(_lock);</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                <span class="comment">/* If it&#39;s still idle, grab it.  Otherwise drop through and</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="comment">                 * we&#39;ll do something else next time through the loop.  */</span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                <span class="keywordflow">if</span> (_status == <a class="code" href="namespacearm__gemm.xhtml#a32006a302bde841f2cf4cc8bb131856baa5daf7f2ebbba4975d61dab1c40188c7">BufferStatus::IDLE</a>) {</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                    _status = <a class="code" href="namespacearm__gemm.xhtml#a32006a302bde841f2cf4cc8bb131856ba63560453bdae7737f5a7f0b9fc23e398">BufferStatus::POPULATING</a>;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                    _index = index;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                    _users = _numusers;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                }</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            }</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        }</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        <span class="comment">/* If we get here we need to populate the buffer. */</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        populate_buffer(func);</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        <span class="keywordflow">return</span> _storage;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    }</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <span class="comment">/* Threads call this when they have finished processing a buffer.  We</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment">     * simply (atomically) decrement the user count, and if it&#39;s hit zero we</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="comment">     * flag the buffer as idle.</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00184"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_buffer.xhtml#a3299507dea21c693b66a23c77bfc3a7a">  184</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__gemm_1_1_buffer.xhtml#a3299507dea21c693b66a23c77bfc3a7a">release</a>(<span class="keywordtype">void</span>) {</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        <span class="keywordflow">if</span> (--_users == 0) {</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="preprocessor">#ifdef USE_SEMAPHORE</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;            std::unique_lock&lt;std::mutex&gt; ul(_lock);</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;            _status = <a class="code" href="namespacearm__gemm.xhtml#a32006a302bde841f2cf4cc8bb131856baa5daf7f2ebbba4975d61dab1c40188c7">BufferStatus::IDLE</a>;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;            <span class="comment">/* We notify all waiters as we expect one to do the populating</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="comment">             * and any others to go and process and earlier block.  */</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;            _cv.notify_all();</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;            _status = <a class="code" href="namespacearm__gemm.xhtml#a32006a302bde841f2cf4cc8bb131856baa5daf7f2ebbba4975d61dab1c40188c7">BufferStatus::IDLE</a>;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        }</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    }</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="comment">/* This is called to change the number of users. */</span></div><div class="line"><a name="l00199"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_buffer.xhtml#a08fb4ce7c28f1785d47bad7b5a4b87a3">  199</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__gemm_1_1_buffer.xhtml#a08fb4ce7c28f1785d47bad7b5a4b87a3">set_numusers</a>(<span class="keywordtype">int</span> numusers) {</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        _numusers = std::min(numusers, _maxusers);</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    }</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;};</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div><div class="line"><a name="l00205"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_buffer_manager.xhtml">  205</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__gemm_1_1_buffer_manager.xhtml">BufferManager</a> {</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="comment">/* This has to be a vector of Buffer *, because a Buffer cannot be moved</span></div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="comment">     * or copied due to atomic members. */</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    std::vector&lt;Buffer *&gt; _buffers = { };</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> _maxthreads;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <span class="keywordtype">void</span> * <span class="keyword">const</span> _storage;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <a class="code" href="classarm__gemm_1_1_buffer_manager.xhtml#afd75117a56b2f0e3932e7a55f63176bc">BufferManager</a>(<a class="code" href="classarm__gemm_1_1_buffer_manager.xhtml">BufferManager</a> &amp;) = <span class="keyword">delete</span>;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <a class="code" href="classarm__gemm_1_1_buffer_manager.xhtml">BufferManager</a> &amp; <a class="code" href="classarm__gemm_1_1_buffer_manager.xhtml#a8dbc0e51b4dc4103bcd2d7429882f25a">operator=</a>(<a class="code" href="classarm__gemm_1_1_buffer_manager.xhtml">BufferManager</a> &amp;) = <span class="keyword">delete</span>;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <span class="comment">// Say how much storage is needed.</span></div><div class="line"><a name="l00218"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_buffer_manager.xhtml#ad94ec2bb5758590521fe20ae781ca0b5">  218</a></span>&#160;    <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">size_t</span> <a class="code" href="classarm__gemm_1_1_buffer_manager.xhtml#ad94ec2bb5758590521fe20ae781ca0b5">get_storage_requirement</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> maxthreads, <span class="keyword">const</span> <span class="keywordtype">size_t</span> buffersize) {</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        <span class="keywordflow">return</span> buffersize * ((maxthreads == 1) ? 1 : 3);</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    }</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;</div><div class="line"><a name="l00222"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_buffer_manager.xhtml#a49b4e2b0c8c4da02a55bf479f0666b9e">  222</a></span>&#160;    <a class="code" href="classarm__gemm_1_1_buffer_manager.xhtml#a49b4e2b0c8c4da02a55bf479f0666b9e">BufferManager</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> maxthreads, <span class="keyword">const</span> <span class="keywordtype">size_t</span> buffersize, <span class="keywordtype">void</span> *storage) : _maxthreads(maxthreads), _storage(storage) {</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> numbuffers = (maxthreads == 1) ? 1 : 3;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        <span class="comment">/* We don&#39;t need any Buffer objects in single thread mode. */</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        <span class="keywordflow">if</span> (_maxthreads == 1) {</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;            <span class="keywordflow">return</span>;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        }</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        <span class="comment">/* Use intptr_t to avoid performing arithmetic on a void * */</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        intptr_t storage_int = reinterpret_cast&lt;intptr_t&gt;(_storage);</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i=0; i&lt;numbuffers; i++) {</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;            _buffers.push_back(<span class="keyword">new</span> <a class="code" href="classarm__gemm_1_1_buffer.xhtml">Buffer</a>(reinterpret_cast&lt;void *&gt;(storage_int), _maxthreads));</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;            storage_int += buffersize;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        }</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    }</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;</div><div class="line"><a name="l00239"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_buffer_manager.xhtml#a8224229b6953f986d6fb2d4d00fe6ee2">  239</a></span>&#160;    <a class="code" href="classarm__gemm_1_1_buffer_manager.xhtml#a8224229b6953f986d6fb2d4d00fe6ee2">~BufferManager</a>() {</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        <span class="keywordflow">while</span> (_buffers.size()) {</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;            <span class="keyword">delete</span> _buffers.back();</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;            _buffers.pop_back();</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        }</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    }</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00247"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_buffer_manager.xhtml#a427705bf76071f12aa29992bd5cffa73">  247</a></span>&#160;    <span class="keywordtype">void</span> *<a class="code" href="classarm__gemm_1_1_buffer_manager.xhtml#a427705bf76071f12aa29992bd5cffa73">get</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> index, T func) {</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        <span class="comment">/* In single thread mode, we just directly call the populating</span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="comment">         * function on the (single) buffer, otherwise forward to the</span></div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="comment">         * relevant Buffer.  */</span></div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        <span class="keywordflow">if</span> (_maxthreads==1) {</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;            func(_storage);</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;            <span class="keywordflow">return</span> _storage;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;            <span class="keywordflow">return</span> _buffers[index % _buffers.size()]-&gt;get(index, func);</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        }</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    }</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00260"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_buffer_manager.xhtml#a97814ef98fcd29d1fb5df1e877f8eabc">  260</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__gemm_1_1_buffer_manager.xhtml#a97814ef98fcd29d1fb5df1e877f8eabc">try_populate</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> index, T func) {</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        <span class="comment">/* No need for this in single thread mode. */</span></div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        <span class="keywordflow">if</span> (_maxthreads==1) {</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;            <span class="keywordflow">return</span>;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        }</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        _buffers[index % _buffers.size()]-&gt;try_populate(index, func);</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    }</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;</div><div class="line"><a name="l00269"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_buffer_manager.xhtml#a29a2894a4403bc4cc19aacc35cb91d54">  269</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__gemm_1_1_buffer_manager.xhtml#a29a2894a4403bc4cc19aacc35cb91d54">release</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> index) {</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        <span class="comment">/* No need for this in single thread mode. */</span></div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        <span class="keywordflow">if</span> (_maxthreads==1) {</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;            <span class="keywordflow">return</span>;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        }</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        _buffers[index % _buffers.size()]-&gt;release();</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    }</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;</div><div class="line"><a name="l00278"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_buffer_manager.xhtml#abe8297b7d4cf647e06eff027982cbb8e">  278</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__gemm_1_1_buffer_manager.xhtml#abe8297b7d4cf647e06eff027982cbb8e">set_nthreads</a>(<span class="keywordtype">int</span> threads) {</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        <span class="keywordflow">if</span> (_maxthreads==1) {</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;            <span class="keywordflow">return</span>;</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        }</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0; i&lt;_buffers.size(); i++) {</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;            _buffers[i]-&gt;set_numusers(threads);</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;        }</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    }</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;};</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="comment">/* Trivial implementation if threading is disabled at compile time.</span></div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;<span class="comment"> * Here, we only need storage for a single buffer.  The &#39;get&#39; method needs</span></div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<span class="comment"> * to call the supplied function to populate the buffer and then return it.</span></div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;<span class="comment"> * All the other methods do nothing.</span></div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;<span class="keyword">class </span>BufferManager {</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    <span class="keywordtype">void</span> * <span class="keyword">const</span> _storage;</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    <a class="code" href="classarm__gemm_1_1_buffer_manager.xhtml#afd75117a56b2f0e3932e7a55f63176bc">BufferManager</a>(<a class="code" href="classarm__gemm_1_1_buffer_manager.xhtml#afd75117a56b2f0e3932e7a55f63176bc">BufferManager</a> &amp;) = <span class="keyword">delete</span>;</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <a class="code" href="classarm__gemm_1_1_buffer_manager.xhtml#afd75117a56b2f0e3932e7a55f63176bc">BufferManager</a> &amp; <a class="code" href="classarm__gemm_1_1_buffer_manager.xhtml#a8dbc0e51b4dc4103bcd2d7429882f25a">operator=</a>(<a class="code" href="classarm__gemm_1_1_buffer_manager.xhtml#afd75117a56b2f0e3932e7a55f63176bc">BufferManager</a> &amp;) = <span class="keyword">delete</span>;</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <a class="code" href="classarm__gemm_1_1_buffer_manager.xhtml#afd75117a56b2f0e3932e7a55f63176bc">BufferManager</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> maxthreads, <span class="keyword">const</span> <span class="keywordtype">size_t</span> buffersize, <span class="keywordtype">void</span> *storage) : _storage(storage) {</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        <a class="code" href="utils_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(maxthreads);</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        <a class="code" href="utils_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(buffersize);</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    }</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    <a class="code" href="classarm__gemm_1_1_buffer_manager.xhtml#a8224229b6953f986d6fb2d4d00fe6ee2">~BufferManager</a>() { }</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    <span class="comment">// Say how much storage is needed.</span></div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">size_t</span> <a class="code" href="classarm__gemm_1_1_buffer_manager.xhtml#ad94ec2bb5758590521fe20ae781ca0b5">get_storage_requirement</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> maxthreads, <span class="keyword">const</span> <span class="keywordtype">size_t</span> buffersize) {</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;        <a class="code" href="utils_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(maxthreads);</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        <span class="keywordflow">return</span> buffersize;</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    }</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__gemm_1_1_buffer_manager.xhtml#a97814ef98fcd29d1fb5df1e877f8eabc">try_populate</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> index, T func) {</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;         <a class="code" href="utils_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(index);</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;         <a class="code" href="utils_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(func);</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    }</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__gemm_1_1_buffer_manager.xhtml#a29a2894a4403bc4cc19aacc35cb91d54">release</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> index) {</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;         <a class="code" href="utils_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(index);</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    }</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    <span class="keywordtype">void</span> *<a class="code" href="classarm__gemm_1_1_buffer_manager.xhtml#a427705bf76071f12aa29992bd5cffa73">get</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> index, T func) {</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        <a class="code" href="utils_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(index);</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;        func(_storage);</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        <span class="keywordflow">return</span> _storage;</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    }</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__gemm_1_1_buffer_manager.xhtml#abe8297b7d4cf647e06eff027982cbb8e">set_nthreads</a>(<span class="keywordtype">int</span>) { }</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;};</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;} <span class="comment">// namespace arm_gemm</span></div><div class="ttc" id="classarm__gemm_1_1_buffer_xhtml"><div class="ttname"><a href="classarm__gemm_1_1_buffer.xhtml">arm_gemm::Buffer</a></div><div class="ttdef"><b>Definition:</b> <a href="buffer__manager_8hpp_source.xhtml#l00050">buffer_manager.hpp:50</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_buffer_manager_xhtml_ad94ec2bb5758590521fe20ae781ca0b5"><div class="ttname"><a href="classarm__gemm_1_1_buffer_manager.xhtml#ad94ec2bb5758590521fe20ae781ca0b5">arm_gemm::BufferManager::get_storage_requirement</a></div><div class="ttdeci">static size_t get_storage_requirement(const int maxthreads, const size_t buffersize)</div><div class="ttdef"><b>Definition:</b> <a href="buffer__manager_8hpp_source.xhtml#l00218">buffer_manager.hpp:218</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_buffer_xhtml_a5e31690a2c14a3428593c0af4435158a"><div class="ttname"><a href="classarm__gemm_1_1_buffer.xhtml#a5e31690a2c14a3428593c0af4435158a">arm_gemm::Buffer::operator=</a></div><div class="ttdeci">Buffer &amp; operator=(Buffer &amp;)=delete</div></div>
<div class="ttc" id="namespacearm__gemm_xhtml_a32006a302bde841f2cf4cc8bb131856ba63560453bdae7737f5a7f0b9fc23e398"><div class="ttname"><a href="namespacearm__gemm.xhtml#a32006a302bde841f2cf4cc8bb131856ba63560453bdae7737f5a7f0b9fc23e398">arm_gemm::BufferStatus::POPULATING</a></div></div>
<div class="ttc" id="namespacearm__gemm_xhtml"><div class="ttname"><a href="namespacearm__gemm.xhtml">arm_gemm</a></div><div class="ttdef"><b>Definition:</b> <a href="barrier_8hpp_source.xhtml#l00030">barrier.hpp:30</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_buffer_xhtml_a427705bf76071f12aa29992bd5cffa73"><div class="ttname"><a href="classarm__gemm_1_1_buffer.xhtml#a427705bf76071f12aa29992bd5cffa73">arm_gemm::Buffer::get</a></div><div class="ttdeci">void * get(const int index, T func)</div><div class="ttdef"><b>Definition:</b> <a href="buffer__manager_8hpp_source.xhtml#l00133">buffer_manager.hpp:133</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_buffer_xhtml_a08fb4ce7c28f1785d47bad7b5a4b87a3"><div class="ttname"><a href="classarm__gemm_1_1_buffer.xhtml#a08fb4ce7c28f1785d47bad7b5a4b87a3">arm_gemm::Buffer::set_numusers</a></div><div class="ttdeci">void set_numusers(int numusers)</div><div class="ttdef"><b>Definition:</b> <a href="buffer__manager_8hpp_source.xhtml#l00199">buffer_manager.hpp:199</a></div></div>
<div class="ttc" id="namespacearm__gemm_xhtml_a32006a302bde841f2cf4cc8bb131856b"><div class="ttname"><a href="namespacearm__gemm.xhtml#a32006a302bde841f2cf4cc8bb131856b">arm_gemm::BufferStatus</a></div><div class="ttdeci">BufferStatus</div><div class="ttdef"><b>Definition:</b> <a href="buffer__manager_8hpp_source.xhtml#l00044">buffer_manager.hpp:44</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_buffer_manager_xhtml_a29a2894a4403bc4cc19aacc35cb91d54"><div class="ttname"><a href="classarm__gemm_1_1_buffer_manager.xhtml#a29a2894a4403bc4cc19aacc35cb91d54">arm_gemm::BufferManager::release</a></div><div class="ttdeci">void release(const int index)</div><div class="ttdef"><b>Definition:</b> <a href="buffer__manager_8hpp_source.xhtml#l00269">buffer_manager.hpp:269</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_buffer_manager_xhtml_afd75117a56b2f0e3932e7a55f63176bc"><div class="ttname"><a href="classarm__gemm_1_1_buffer_manager.xhtml#afd75117a56b2f0e3932e7a55f63176bc">arm_gemm::BufferManager::BufferManager</a></div><div class="ttdeci">BufferManager(BufferManager &amp;)=delete</div></div>
<div class="ttc" id="namespacearm__gemm_xhtml_a32006a302bde841f2cf4cc8bb131856ba802706a9238e2928077f97736854bad4"><div class="ttname"><a href="namespacearm__gemm.xhtml#a32006a302bde841f2cf4cc8bb131856ba802706a9238e2928077f97736854bad4">arm_gemm::BufferStatus::BUSY</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_buffer_manager_xhtml_a8dbc0e51b4dc4103bcd2d7429882f25a"><div class="ttname"><a href="classarm__gemm_1_1_buffer_manager.xhtml#a8dbc0e51b4dc4103bcd2d7429882f25a">arm_gemm::BufferManager::operator=</a></div><div class="ttdeci">BufferManager &amp; operator=(BufferManager &amp;)=delete</div></div>
<div class="ttc" id="classarm__gemm_1_1_buffer_xhtml_a97814ef98fcd29d1fb5df1e877f8eabc"><div class="ttname"><a href="classarm__gemm_1_1_buffer.xhtml#a97814ef98fcd29d1fb5df1e877f8eabc">arm_gemm::Buffer::try_populate</a></div><div class="ttdeci">void try_populate(const int index, T func)</div><div class="ttdef"><b>Definition:</b> <a href="buffer__manager_8hpp_source.xhtml#l00097">buffer_manager.hpp:97</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_buffer_xhtml_a53dae4cefe42f5ba80b09f65257b4fcb"><div class="ttname"><a href="classarm__gemm_1_1_buffer.xhtml#a53dae4cefe42f5ba80b09f65257b4fcb">arm_gemm::Buffer::Buffer</a></div><div class="ttdeci">Buffer(void *storage, int maxusers)</div><div class="ttdef"><b>Definition:</b> <a href="buffer__manager_8hpp_source.xhtml#l00086">buffer_manager.hpp:86</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_buffer_manager_xhtml_a97814ef98fcd29d1fb5df1e877f8eabc"><div class="ttname"><a href="classarm__gemm_1_1_buffer_manager.xhtml#a97814ef98fcd29d1fb5df1e877f8eabc">arm_gemm::BufferManager::try_populate</a></div><div class="ttdeci">void try_populate(const int index, T func)</div><div class="ttdef"><b>Definition:</b> <a href="buffer__manager_8hpp_source.xhtml#l00260">buffer_manager.hpp:260</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_buffer_manager_xhtml_a427705bf76071f12aa29992bd5cffa73"><div class="ttname"><a href="classarm__gemm_1_1_buffer_manager.xhtml#a427705bf76071f12aa29992bd5cffa73">arm_gemm::BufferManager::get</a></div><div class="ttdeci">void * get(const int index, T func)</div><div class="ttdef"><b>Definition:</b> <a href="buffer__manager_8hpp_source.xhtml#l00247">buffer_manager.hpp:247</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_buffer_xhtml_a3299507dea21c693b66a23c77bfc3a7a"><div class="ttname"><a href="classarm__gemm_1_1_buffer.xhtml#a3299507dea21c693b66a23c77bfc3a7a">arm_gemm::Buffer::release</a></div><div class="ttdeci">void release(void)</div><div class="ttdef"><b>Definition:</b> <a href="buffer__manager_8hpp_source.xhtml#l00184">buffer_manager.hpp:184</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_buffer_manager_xhtml_a8224229b6953f986d6fb2d4d00fe6ee2"><div class="ttname"><a href="classarm__gemm_1_1_buffer_manager.xhtml#a8224229b6953f986d6fb2d4d00fe6ee2">arm_gemm::BufferManager::~BufferManager</a></div><div class="ttdeci">~BufferManager()</div><div class="ttdef"><b>Definition:</b> <a href="buffer__manager_8hpp_source.xhtml#l00239">buffer_manager.hpp:239</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_buffer_manager_xhtml_a49b4e2b0c8c4da02a55bf479f0666b9e"><div class="ttname"><a href="classarm__gemm_1_1_buffer_manager.xhtml#a49b4e2b0c8c4da02a55bf479f0666b9e">arm_gemm::BufferManager::BufferManager</a></div><div class="ttdeci">BufferManager(const int maxthreads, const size_t buffersize, void *storage)</div><div class="ttdef"><b>Definition:</b> <a href="buffer__manager_8hpp_source.xhtml#l00222">buffer_manager.hpp:222</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_buffer_manager_xhtml_abe8297b7d4cf647e06eff027982cbb8e"><div class="ttname"><a href="classarm__gemm_1_1_buffer_manager.xhtml#abe8297b7d4cf647e06eff027982cbb8e">arm_gemm::BufferManager::set_nthreads</a></div><div class="ttdeci">void set_nthreads(int threads)</div><div class="ttdef"><b>Definition:</b> <a href="buffer__manager_8hpp_source.xhtml#l00278">buffer_manager.hpp:278</a></div></div>
<div class="ttc" id="namespacearm__gemm_xhtml_a32006a302bde841f2cf4cc8bb131856baa5daf7f2ebbba4975d61dab1c40188c7"><div class="ttname"><a href="namespacearm__gemm.xhtml#a32006a302bde841f2cf4cc8bb131856baa5daf7f2ebbba4975d61dab1c40188c7">arm_gemm::BufferStatus::IDLE</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_buffer_manager_xhtml"><div class="ttname"><a href="classarm__gemm_1_1_buffer_manager.xhtml">arm_gemm::BufferManager</a></div><div class="ttdef"><b>Definition:</b> <a href="buffer__manager_8hpp_source.xhtml#l00205">buffer_manager.hpp:205</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_buffer_xhtml_a8bf60bd0f8a216c716ef58fea0606aee"><div class="ttname"><a href="classarm__gemm_1_1_buffer.xhtml#a8bf60bd0f8a216c716ef58fea0606aee">arm_gemm::Buffer::Buffer</a></div><div class="ttdeci">Buffer(Buffer &amp;)=delete</div></div>
<div class="ttc" id="utils_8hpp_xhtml_a86d500a34c624c2cae56bc25a31b12f3"><div class="ttname"><a href="utils_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a></div><div class="ttdeci">#define UNUSED(x)</div><div class="ttdef"><b>Definition:</b> <a href="utils_8hpp_source.xhtml#l00035">utils.hpp:35</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aebb8dcc11953d78e620bbef0b9e2183.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_d91e1966cc57df4f49d1e07be7697713.xhtml">NEON</a></li><li class="navelem"><a class="el" href="dir_1ce938f580a6f304b99685e2c1dd19db.xhtml">kernels</a></li><li class="navelem"><a class="el" href="dir_9847dd9cb7a28e46201717fa7336cf62.xhtml">arm_gemm</a></li><li class="navelem"><a class="el" href="buffer__manager_8hpp.xhtml">buffer_manager.hpp</a></li>
    <li class="footer">Generated on Fri Feb 21 2020 11:10:13 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
